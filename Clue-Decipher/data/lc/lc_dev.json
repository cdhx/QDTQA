[
    {
        "ID": "4423",
        "question": "What is the headquarters of the public transit system which is the system of Bottineau LRT ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bottineau_LRT> <http://dbpedia.org/property/system> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
        "SExpr": "(JOIN (R dbp:headquarters) (AND dbo:PublicTransitSystem (JOIN (R dbp:system) dbr:Bottineau_LRT))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the headquarters of [IQ1]",
                    "start": 0,
                    "end": 90,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the public transit system",
                                "start": 28,
                                "end": 53
                            },
                            {
                                "description": "which is the system of Bottineau LRT",
                                "start": 54,
                                "end": 90
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN system)) (PP (IN of) (NP (NNP Bottineau) (NNP LRT)))))))))))) (. ?)))",
        "mask_entity": "What is the headquarters of the public transit system which is the system of [ENT] ?",
        "entity": [
            "Bottineau LRT"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3984",
        "question": "What units are garrisoned in the Pentagon?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (JOIN dbp:garrison dbr:The_Pentagon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What units",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "are garrisoned in the Pentagon",
                    "start": 11,
                    "end": 41
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS units)) (SQ (VP (VBP are) (VP (VBN garrisoned) (PP (IN in) (NP (DT the) (NNP Pentagon)))))) (. ?)))",
        "mask_entity": "What units are garrisoned in the [ENT]?",
        "entity": [
            "Pentagon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3083",
        "question": "What is the hometown of John Speraw ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri } ",
        "SExpr": "(JOIN (R dbp:hometown) dbr:John_Speraw)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN hometown)) (PP (IN of) (NP (NNP John) (NNP Speraw)))))) (. ?)))",
        "mask_entity": "What is the hometown of [ENT] ?",
        "entity": [
            "John Speraw"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3061",
        "question": "Count  the journals in the field of Philosophy.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
        "SExpr": "(AND dbo:AcademicJournal (JOIN dbp:discipline dbr:Philosophy))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the journals",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "in the field of Philosophy",
                    "start": 19,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS journals)) (PP (IN in) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NN Philosophy))))))) (. .)))",
        "mask_entity": "Count  the journals in the field of [ENT].",
        "entity": [
            "Philosophy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3025",
        "question": "Which scientist advised a doctoral student named Erban Ieica?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:doctoralStudents dbr:\u0218erban_\u021ai\u021beica))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which scientist",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "advised a doctoral student named Erban Ieica",
                    "start": 16,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN scientist)) (S (VP (VBD advised) (NP (NP (DT a) (JJ doctoral) (NN student)) (VP (VBN named) (S (NP (NNP Erban) (NNP Ieica))))))) (. ?)))",
        "mask_entity": "Which scientist advised a doctoral student named [ENT]?",
        "entity": [
            "Erban Ieica"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "970",
        "question": "Where are the Dinamo Krasnodar players born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/club> <http://dbpedia.org/resource/Dinamo_Krasnodar> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "SExpr": "(JOIN (R dbp:placeOfBirth) (AND dbo:Athlete (JOIN dbo:club dbr:Dinamo_Krasnodar))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where are [IQ1] born",
                    "start": 0,
                    "end": 43,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Dinamo Krasnodar players",
                                "start": 10,
                                "end": 38
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (DT the) (NML (NNP Dinamo) (NNP Krasnodar)) (NNS players)) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where are the [ENT] players born?",
        "entity": [
            "Dinamo Krasnodar"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "13",
        "question": "What is the hometown of Nader Guirat, where Josef Johansson was born too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_Johansson> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Nader_Guirat> <http://dbpedia.org/ontology/hometown> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:birthPlace) dbr:Josef_Johansson) (JOIN (R dbo:hometown) dbr:Nader_Guirat))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the hometown of Nader Guirat,",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "where Josef Johansson was born too",
                    "start": 38,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN hometown)) (PP (IN of) (NP (NP (NNP Nader) (NNP Guirat)) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (NNP Josef) (NNP Johansson)) (VP (VBD was) (VP (VBN born) (ADVP (RB too))))))))))) (. ?)))",
        "mask_entity": "What is the hometown of [ENT], where [ENT] was born too?",
        "entity": [
            "Nader Guirat",
            "Josef Johansson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "873",
        "question": "How many major shrine are there, of the saints whose beatified by Pope Pius XI ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_XI> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . }",
        "SExpr": "(JOIN (R dbo:majorShrine) (JOIN dbp:beatifiedBy dbr:Pope_Pius_XI)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many major shrine are there,",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "of [IQ1]",
                    "start": 33,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the saints",
                                "start": 36,
                                "end": 46
                            },
                            {
                                "description": "whose beatified by Pope Pius XI",
                                "start": 47,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (FRAG (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ major) (NN shrine)) (VP (VBP are) (ADVP (RB there))))) (, ,) (PP (IN of) (NP (NP (DT the) (NNS saints)) (SBAR (WHNP (WP$ whose)) (S (VP (VBN beatified) (PP (IN by) (NP (NNP Pope) (NNP Pius) (NNP XI)))))))) (. ?)))",
        "mask_entity": "How many major shrine are there, of the saints whose beatified by [ENT] ?",
        "entity": [
            "Pope Pius XI"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "808",
        "question": "Name the TV shows owned by divisions of CBS?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/CBS> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:company (JOIN dbp:parent dbr:CBS))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "owned by [IQ1]",
                    "start": 18,
                    "end": 43,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "divisions of CBS",
                                "start": 27,
                                "end": 43
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN TV) (NNS shows)) (VP (VBN owned) (PP (IN by) (NP (NP (NNS divisions)) (PP (IN of) (NP (NNP CBS)))))))) (. ?)))",
        "mask_entity": "Name the TV shows owned by divisions of [ENT]?",
        "entity": [
            "CBS"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3198",
        "question": "What is the academic discipline of Journal of Cerebral Blood Flow & Metabolism ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> ?uri } ",
        "SExpr": "(JOIN (R dbo:academicDiscipline) dbr:Journal_of_Cerebral_Blood_Flow_&_Metabolism)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ academic) (NN discipline)) (PP (IN of) (NP (NP (NNP Journal)) (PP (IN of) (NP (NNP Cerebral) (NNP Blood) (NNP Flow) (CC &) (NNP Metabolism)))))))) (. ?)))",
        "mask_entity": "What is the academic discipline of Journal of Cerebral Blood Flow & Metabolism ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "514",
        "question": "What is the agency name of the Ministry of Information and Communication Technology (Thailand) and distribution region  of the Channel 9 MCOT HD ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ministry_of_Information_and_Communication_Technology_(Thailand)> <http://dbpedia.org/property/agencyName> ?uri. <http://dbpedia.org/resource/Channel_9_MCOT_HD> <http://dbpedia.org/property/city> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:agencyName) dbr:Ministry_of_Information_and_Communication_Technology_(Thailand)) (JOIN (R dbp:city) dbr:Channel_9_MCOT_HD))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the agency name of the Ministry of Information and Communication Technology (Thailand)",
                    "start": 0,
                    "end": 94
                },
                {
                    "description": "and distribution region of the Channel 9 MCOT HD",
                    "start": 95,
                    "end": 143
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN agency) (NN name)) (PP (IN of) (NP (NP (DT the) (NNP Ministry)) (PP (IN of) (NP (NP (NNP Information)) (CC and) (NP (NNP Communication) (NNP Technology))))))) (PP (-LRB- () (NP (NP (NNP Thailand) (-RRB- ))) (CC and) (NP (NP (NN distribution) (NN region)) (PP (IN of) (NP (DT the) (NML (NNP Channel) (CD 9)) (NNP MCOT) (NNP HD)))))))) (. ?)))",
        "mask_entity": "What is the agency name of [ENT] ([ENT]) and distribution region  of [ENT] MCOT HD ?",
        "entity": [
            "the Ministry of Information and Communication Technology",
            "Thailand",
            "the Channel 9"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4472",
        "question": "Which gaming console's central processing unit is microprocessor and built by Sony?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Cell_(microprocessor)> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony>  . }",
        "SExpr": "(AND (JOIN dbo:cpu dbr:Cell_(microprocessor)) (JOIN dbo:manufacturer dbr:Sony))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which gaming console's",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "central processing unit is microprocessor",
                    "start": 23,
                    "end": 64
                },
                {
                    "description": "and built by Sony",
                    "start": 65,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN gaming) (NN console) (POS 's)) (JJ central) (NN processing) (NN unit)) (VP (VBZ is) (ADJP (NN microprocessor) (CC and) (VBN built) (PP (IN by) (NP (NNP Sony))))) (. ?)))",
        "mask_entity": "Which gaming console's central processing unit is microprocessor and built by [ENT]?",
        "entity": [
            "Sony"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "409",
        "question": "List the home stadiums of the teams in the Russian Premier League?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2011\u201312_Russian_Premier_League> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
        "SExpr": "(JOIN (R dbo:homeStadium) (JOIN dbp:league dbr:2011\u201312_Russian_Premier_League)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the home stadiums of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the teams",
                                "start": 26,
                                "end": 35
                            },
                            {
                                "description": "in the Russian Premier League",
                                "start": 36,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN home) (NNS stadiums)) (PP (IN of) (NP (NP (DT the) (NNS teams)) (PP (IN in) (NP (DT the) (NML (NNP Russian) (NNP Premier)) (NNP League))))))) (. ?)))",
        "mask_entity": "List the home stadiums of the teams in [ENT]?",
        "entity": [
            "the Russian Premier League"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3408",
        "question": "Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HorseRace>}",
        "SExpr": "(AND dbo:HorseRace (JOIN (R dbp:race) (JOIN dbo:grandsire dbr:Wild_Risk))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me an estimate number of races",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "where [IQ1] have raced in",
                    "start": 36,
                    "end": 90,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "horses",
                                "start": 42,
                                "end": 48
                            },
                            {
                                "description": "grandsired by the Wild Risk",
                                "start": 49,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT an) (NN estimate) (NN number)) (PP (IN of) (NP (NP (NNS races)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNS horses)) (VP (VBN grandsired) (PP (IN by) (NP (DT the) (NNP Wild) (NNP Risk))))) (VP (VBP have) (VP (VBN raced) (PRT (RP in)))))))))) (. ?)))",
        "mask_entity": "Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4342",
        "question": "Give me the list of people who scaled mountains in Sierra Nevada?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
        "SExpr": "(JOIN (R dbo:firstAscentPerson) (JOIN dbo:mountainRange dbr:Sierra_Nevada_(U.S.))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the list of people",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "who scaled [IQ1]",
                    "start": 27,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "mountains",
                                "start": 38,
                                "end": 47
                            },
                            {
                                "description": "in Sierra Nevada",
                                "start": 48,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN list)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD scaled) (NP (NP (NNS mountains)) (PP (IN in) (NP (NNP Sierra) (NNP Nevada))))))))))) (. ?)))",
        "mask_entity": "Give me the list of people who scaled mountains in [ENT]?",
        "entity": [
            "Sierra Nevada"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "207",
        "question": "What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:cinematography dbr:Jordan_Cronenweth) (JOIN dbo:musicComposer dbr:Vangelis)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the name of the movie",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose director of photography was Jordan Cronenweth",
                    "start": 30,
                    "end": 81
                },
                {
                    "description": "and music composer was Vangelis",
                    "start": 82,
                    "end": 113
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (S (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WHNP (WP$ whose) (NN director)) (PP (IN of) (NP (NN photography)))) (S (VP (VBD was) (NP (NP (NNP Jordan) (NNP Cronenweth)) (CC and) (NP (NN music) (NN composer))))))))) (VP (VBD was) (NP (NNP Vangelis)))))) (. ?)))",
        "mask_entity": "What is the name of the movie whose director of photography was [ENT] and music composer was [ENT]?",
        "entity": [
            "Jordan Cronenweth",
            "Vangelis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3691",
        "question": "What are the common sports played by jamiatu Muslim mindanao and Polytechnic University of Philippines Taguig ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:athletics) dbr:Jamiatu_Muslim_Mindanao) (JOIN (R dbo:sport) dbr:Polytechnic_University_of_the_Philippines_Taguig))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the common sports",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "played by jamiatu Muslim mindanao and Polytechnic University of Philippines Taguig",
                    "start": 27,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ common) (NNS sports)) (VP (VBN played) (PP (IN by) (NP (NP (JJ jamiatu) (JJ Muslim) (NNP mindanao)) (CC and) (NP (NP (NNP Polytechnic) (NNP University)) (PP (IN of) (NP (NNPS Philippines) (NNP Taguig)))))))))) (. ?)))",
        "mask_entity": "What are the common sports played by jamiatu [ENT] mindanao and [ENT] ?",
        "entity": [
            "Muslim",
            "Polytechnic University of Philippines Taguig"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "458",
        "question": "Count the different origins of members of the Vitis Vinifera species.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbo:origin) (JOIN dbo:species dbr:Vitis_vinifera))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the different origins of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "members of the Vitis Vinifera species",
                                "start": 31,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ different) (NNS origins)) (PP (IN of) (NP (NP (NNS members)) (PP (IN of) (NP (DT the) (NML (NNP Vitis) (NNP Vinifera)) (NNS species))))))) (. .)))",
        "mask_entity": "Count the different origins of members of the [ENT] species.",
        "entity": [
            "Vitis Vinifera"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3471",
        "question": "What magazine published Allal and is the employer of Peter Bergman?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allal> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Peter_Bergman_(comedian)> <http://dbpedia.org/ontology/employer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:publisher) dbr:Allal) (JOIN (R dbo:employer) dbr:Peter_Bergman_(comedian)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What magazine",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "published Allal",
                    "start": 14,
                    "end": 29
                },
                {
                    "description": "and is the employer of Peter Bergman",
                    "start": 30,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN magazine)) (S (VP (VP (VBD published) (NP (NNP Allal))) (CC and) (VP (VBZ is) (NP (NP (DT the) (NN employer)) (PP (IN of) (NP (NNP Peter) (NNP Bergman))))))) (. ?)))",
        "mask_entity": "What magazine published [ENT] and is the employer of [ENT]?",
        "entity": [
            "Allal",
            "Peter Bergman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2430",
        "question": "Where were Justina Machado and John Englehard born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:birthPlace) dbr:Justina_Machado) (JOIN (R dbo:birthPlace) dbr:John_Englehart))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where were Justina Machado and John Englehard born",
                    "start": 0,
                    "end": 50
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (NP (NNP Justina) (NNP Machado)) (CC and) (NP (NNP John) (NNP Englehard))) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where were [ENT] and [ENT] born?",
        "entity": [
            "Justina Machado",
            "John Englehard"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3657",
        "question": "Name the office holder who was married to Dolley Madison and has resting palce as Montpelier ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:spouse dbr:Dolley_Madison) (JOIN dbp:restingplace dbr:Montpelier_(Orange,_Virginia))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "who was married to Dolley Madison",
                    "start": 23,
                    "end": 56
                },
                {
                    "description": "and has resting place as Montpelier",
                    "start": 57,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD was) (VP (VBN married) (PP (IN to) (NP (NNP Dolley) (NNP Madison))))) (CC and) (VP (VBZ has) (VP (VBG resting) (NP (NN palce)) (PP (IN as) (NP (NNP Montpelier)))))))))) (. ?)))",
        "mask_entity": "Name the office holder who was married to [ENT] and has resting palce as [ENT] ?",
        "entity": [
            "Dolley Madison",
            "Montpelier"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "110",
        "question": "Where was David Scherman trained ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/ontology/training> ?uri } ",
        "SExpr": "(JOIN (R dbo:training) dbr:David_Scherman)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP David) (NNP Scherman)) (VP (VBN trained))) (. ?)))",
        "mask_entity": "Where was [ENT] trained ?",
        "entity": [
            "David Scherman"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4589",
        "question": "In which series has Sean Young portrayed someone?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sean_Young> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "SExpr": "(JOIN (R dbo:series) (JOIN dbo:portrayer dbr:Sean_Young)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which series [IQ1]",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has Sean Young portrayed someone",
                                "start": 16,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN series)) (VP (VBZ has) (NP (NNP Sean) (NNP Young)) (VP (VBD portrayed) (NP (NN someone))))) (. ?)))",
        "mask_entity": "In which series has [ENT] portrayed someone?",
        "entity": [
            "Sean Young"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4044",
        "question": "List all the hubs of the airline whose one of the hub is Subang, Indonesia ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Subang,_Indonesia> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(JOIN (R dbp:hubs) (AND dbo:Airline (JOIN dbp:hubs dbr:Subang,_Indonesia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the hubs of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airline",
                                "start": 21,
                                "end": 32
                            },
                            {
                                "description": "whose one of the hub is Subang, Indonesia",
                                "start": 33,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS hubs)) (PP (IN of) (NP (NP (DT the) (NN airline)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN hub)))) (S (VP (VBZ is) (NP (NP (NNP Subang)) (, ,) (NP (NNP Indonesia)))))))))) (. ?)))",
        "mask_entity": "List all the hubs of the airline whose one of the hub is [ENT], [ENT] ?",
        "entity": [
            "Subang",
            "Indonesia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1883",
        "question": "Was the song The Boy is Mine recorded in Atlanta?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Boy_Is_Mine_(song)> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/Atlanta> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (DT the) (NN song)) (SBAR (S (NP (DT The) (NNP Boy)) (VP (VBZ is) (NP (PRP Mine)) (VP (VBN recorded) (PP (IN in) (NP (NNP Atlanta)))))))) (. ?)))",
        "mask_entity": "Was the song [ENT] recorded in [ENT]?",
        "entity": [
            "The Boy is Mine",
            "Atlanta"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1713",
        "question": "Who is the president when Loretta Ucelli used to work for Democratic party?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Loretta_Ucelli> <http://dbpedia.org/ontology/president> ?uri } ",
        "SExpr": "(JOIN (R dbo:president) dbr:Loretta_Ucelli)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (DT the) (NN president)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Loretta) (NNP Ucelli)) (VP (VBD used) (S (VP (TO to) (VP (VB work) (PP (IN for) (NP (NNP Democratic) (NNP party))))))))))) (. ?)))",
        "mask_entity": "Who is the president when [ENT] used to work for [ENT] party?",
        "entity": [
            "Loretta Ucelli",
            "Democratic"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3958",
        "question": "Who wrote the play in which Blanche DuBois is a character?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Blanche_DuBois> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
        "SExpr": "(JOIN (R dbp:writer) (AND dbo:Play (JOIN dbp:characters dbr:Blanche_DuBois))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the play",
                                "start": 10,
                                "end": 18
                            },
                            {
                                "description": "in which Blanche DuBois is a character",
                                "start": 19,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD wrote) (NP (NP (DT the) (NN play)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Blanche) (NNP DuBois)) (VP (VBZ is) (NP (DT a) (NN character)))))))) (. ?)))",
        "mask_entity": "Who wrote the play in which [ENT] is a character?",
        "entity": [
            "Blanche DuBois"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3399",
        "question": "Which district of Robert William Wilcox os the place of birth of Kamaloohua ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_William_Wilcox> <http://dbpedia.org/property/district> ?uri. <http://dbpedia.org/resource/Kamaloohua> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:district) dbr:Robert_William_Wilcox) (JOIN (R dbp:placeOfBirth) dbr:Kamaloohua))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which district of Robert William Wilcox os",
                    "start": 0,
                    "end": 42
                },
                {
                    "description": "the place of birth of Kamaloohua",
                    "start": 43,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN district)) (PP (IN of) (NP (NNP Robert) (NNP William) (NNP Wilcox)))) (S (VP (VBZ os) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Kamaloohua)))))))) (. ?)))",
        "mask_entity": "Which district of [ENT] os the place of birth of [ENT] ?",
        "entity": [
            "Robert William Wilcox",
            "Kamaloohua"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "552",
        "question": "Where is the capital of Kelsey Creek located?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelsey_Creek> <http://dbpedia.org/ontology/region> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . }",
        "SExpr": "(JOIN (R dbo:countySeat) (JOIN (R dbo:region) dbr:Kelsey_Creek)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is [IQ1] located",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the capital of Kelsey Creek",
                                "start": 9,
                                "end": 36
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Kelsey) (NNP Creek)))) (VP (VBN located))) (. ?)))",
        "mask_entity": "Where is the capital of [ENT] located?",
        "entity": [
            "Kelsey Creek"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1439",
        "question": "What borders the valley which falls under Lake County, Oregon?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Lake_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
        "SExpr": "(JOIN (R dbo:border) (AND dbo:Valley (JOIN dbo:municipality dbr:Lake_County,_Oregon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What borders [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the valley",
                                "start": 13,
                                "end": 23
                            },
                            {
                                "description": "which falls under Lake County, Oregon",
                                "start": 24,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ borders) (NP (NP (DT the) (NN valley)) (SBAR (WHNP (WDT which)) (S (VP (VBZ falls) (PP (IN under) (NP (NP (NNP Lake) (NNP County)) (, ,) (NP (NNP Oregon)))))))))) (. ?)))",
        "mask_entity": "What borders the valley which falls under [ENT], [ENT]?",
        "entity": [
            "Lake County",
            "Oregon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2270",
        "question": "What city is it where Wayne Allard governs and Juli Ashton was born?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wayne_Allard> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Juli_Ashton> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:region) dbr:Wayne_Allard) (JOIN (R dbo:birthPlace) dbr:Juli_Ashton))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city is it",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "where Wayne Allard governs",
                    "start": 16,
                    "end": 42
                },
                {
                    "description": "and Juli Ashton was born",
                    "start": 43,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN city)) (S (VP (VBZ is) (NP (NP (PRP it)) (SBAR (WHADVP (WRB where)) (S (S (NP (NNP Wayne) (NNP Allard)) (VP (VBZ governs))) (CC and) (S (NP (NNP Juli) (NNP Ashton)) (VP (VBD was) (VP (VBN born))))))))) (. ?)))",
        "mask_entity": "What city is it where [ENT] governs and [ENT] was born?",
        "entity": [
            "Wayne Allard",
            "Juli Ashton"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3144",
        "question": "List the regions served by the company which serves in Pacific Ocean ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Pacific_Ocean> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:regionServed) (AND dbo:Company (JOIN dbo:regionServed dbr:Pacific_Ocean))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the regions",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "served by [IQ1]",
                    "start": 17,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 27,
                                "end": 38
                            },
                            {
                                "description": "which serves in Pacific Ocean",
                                "start": 39,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS regions)) (VP (VBN served) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ serves) (PP (IN in) (NP (NNP Pacific) (NNP Ocean))))))))))) (. ?)))",
        "mask_entity": "List the regions served by the company which serves in [ENT] ?",
        "entity": [
            "Pacific Ocean"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2821",
        "question": "Which prime ministers were served by the governor who appointed Murray Gleeson?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Murray_Gleeson> <http://dbpedia.org/ontology/appointer> ?x . ?x <http://dbpedia.org/ontology/primeMinister> ?uri  . }",
        "SExpr": "(JOIN (R dbo:primeMinister) (JOIN (R dbo:appointer) dbr:Murray_Gleeson)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which prime ministers",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "were served by [IQ1]",
                    "start": 22,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the governor",
                                "start": 37,
                                "end": 49
                            },
                            {
                                "description": "who appointed Murray Gleeson",
                                "start": 50,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ prime) (NNS ministers)) (SQ (VP (VBD were) (VP (VBN served) (PP (IN by) (NP (NP (DT the) (NN governor)) (SBAR (WHNP (WP who)) (S (VP (VBD appointed) (NP (NNP Murray) (NNP Gleeson)))))))))) (. ?)))",
        "mask_entity": "Which prime ministers were served by the governor who appointed [ENT]?",
        "entity": [
            "Murray Gleeson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4781",
        "question": "Name the fictional character painted by Josh Friedman and portrayed in Terminator Genisys ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_Genisys>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbo:creator dbr:Josh_Friedman) (JOIN dbo:portrayer dbr:Terminator_Genisys)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the fictional character",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "painted by Josh Friedman",
                    "start": 29,
                    "end": 53
                },
                {
                    "description": "and portrayed in Terminator Genisys",
                    "start": 54,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (VP (VP (VBN painted) (PP (IN by) (NP (NNP Josh) (NNP Friedman)))) (CC and) (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (NNP Genisys))))))) (. ?)))",
        "mask_entity": "Name the fictional character painted by [ENT] and portrayed in [ENT] ?",
        "entity": [
            "Josh Friedman",
            "Terminator Genisys"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1925",
        "question": "What is the state of origin of the person who is the successor of Tetsugen Bernard Glassman?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tetsugen_Bernard_Glassman> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:stateOfOrigin) (AND dbo:Person (JOIN (R dbo:successor) dbr:Tetsugen_Bernard_Glassman))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the state of origin of [IQ1]",
                    "start": 0,
                    "end": 91,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 31,
                                "end": 41
                            },
                            {
                                "description": "who is the successor of Tetsugen Bernard Glassman",
                                "start": 42,
                                "end": 91
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Tetsugen) (NNP Bernard) (NNP Glassman)))))))))))))) (. ?)))",
        "mask_entity": "What is the state of origin of the person who is the successor of [ENT]?",
        "entity": [
            "Tetsugen Bernard Glassman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "634",
        "question": "What city in the US was Alfred Phillips born in, and is the resting place of William Smith?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_H._Smith_(Connecticut)> <http://dbpedia.org/ontology/restingPlace> ?uri. <http://dbpedia.org/resource/Alfred_N._Phillips> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:restingPlace) dbr:William_H._Smith_(Connecticut)) (JOIN (R dbp:birthPlace) dbr:Alfred_N._Phillips))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city in the US",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "was Alfred Phillips born in,",
                    "start": 20,
                    "end": 48
                },
                {
                    "description": "and is the resting place of William Smith",
                    "start": 49,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN city)) (PP (IN in) (NP (DT the) (NNP US)))) (SQ (VP (VBD was) (NP (NP (NNP Alfred) (NNP Phillips)) (VP (VBN born) (PP (IN in)))))) (, ,) (CC and) (SINV (VP (VBZ is)) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (NNP William) (NNP Smith))))) (. ?)))",
        "mask_entity": "What city in the [ENT] was [ENT] born in, and is the resting place of [ENT]?",
        "entity": [
            "US",
            "Alfred Phillips",
            "William Smith"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4805",
        "question": "Give me the name of the organization hqed at  Chaeng Watthana Govt Complex?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Chaeng_Watthana_Government_Complex> . ?x <http://dbpedia.org/property/agencyName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(JOIN (R dbp:agencyName) (AND dbo:Organisation (JOIN dbo:headquarter dbr:Chaeng_Watthana_Government_Complex))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the name of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the organization",
                                "start": 20,
                                "end": 36
                            },
                            {
                                "description": "hqed at Chaeng Watthana Govt Complex",
                                "start": 37,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN organization)) (VP (VBN hqed) (PP (IN at) (NP (NNP Chaeng) (NNP Watthana) (NNP Govt) (NNP Complex)))))))) (. ?)))",
        "mask_entity": "Give me the name of the organization hqed at  [ENT]?",
        "entity": [
            "Chaeng Watthana Govt Complex"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "316",
        "question": "Who is the writer of the singles whose producer is Peter-John Vettese?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Peter-John_Vettese> . ?x <http://dbpedia.org/ontology/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
        "SExpr": "(JOIN (R dbo:writer) (AND dbo:Single (JOIN dbp:producer dbr:Peter-John_Vettese))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the writer of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the singles",
                                "start": 21,
                                "end": 32
                            },
                            {
                                "description": "whose producer is Peter-John Vettese",
                                "start": 33,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NP (DT the) (NNS singles)) (SBAR (WHNP (WP$ whose) (NN producer)) (S (VP (VBZ is) (NP (NNP Peter-John) (NNP Vettese)))))))))) (. ?)))",
        "mask_entity": "Who is the writer of the singles whose producer is [ENT]?",
        "entity": [
            "Peter-John Vettese"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4217",
        "question": "Count the number of artist whose pone of the field is writing ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Writing> . ?x <http://dbpedia.org/ontology/field> ?uri }",
        "SExpr": "(JOIN (R dbo:field) (JOIN dbo:field dbr:Writing)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of artist",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "whose [IQ1]",
                    "start": 27,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "one of the field is writing",
                                "start": 33,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN artist)) (SBAR (WHNP (WHNP (WP$ whose) (NN pone)) (PP (IN of) (NP (DT the) (NN field)))) (S (VP (VBZ is) (VP (VBG writing))))))))) (. ?)))",
        "mask_entity": "Count the number of artist whose pone of the field is writing ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4699",
        "question": "Which veterans served at CBS?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/CBS>  . }",
        "SExpr": "(JOIN dbo:occupation dbr:CBS)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS veterans)) (S (VP (VBD served) (PP (IN at) (NP (NNP CBS))))) (. ?)))",
        "mask_entity": "Which veterans served at [ENT]?",
        "entity": [
            "CBS"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1328",
        "question": "What are some shareholders of the bridge maintained by the Massachusetts department of transportation?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/maintainedBy> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Bridge (JOIN dbo:maintainedBy dbr:Massachusetts_Department_of_Transportation))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some shareholders of [IQ1]",
                    "start": 0,
                    "end": 101,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bridge",
                                "start": 30,
                                "end": 40
                            },
                            {
                                "description": "maintained by the Massachusetts department of transportation",
                                "start": 41,
                                "end": 101
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS shareholders)) (PP (IN of) (NP (NP (DT the) (NN bridge)) (VP (VBN maintained) (PP (IN by) (NP (NP (DT the) (NNP Massachusetts) (NN department)) (PP (IN of) (NP (NN transportation))))))))))) (. ?)))",
        "mask_entity": "What are some shareholders of the bridge maintained by the [ENT] department of transportation?",
        "entity": [
            "Massachusetts"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "427",
        "question": "Name the team for which Cam Plante played for which were also the tenants of MasterCard center ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:playedFor) dbr:Cam_Plante) (JOIN (R dbp:tenants) dbr:MasterCard_Centre))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the team",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "for which Cam Plante played for",
                    "start": 14,
                    "end": 45
                },
                {
                    "description": "which were also the tenants of MasterCard center",
                    "start": 46,
                    "end": 94
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NNP Cam) (NNP Plante)) (VP (VBD played) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (VP (VBD were) (ADVP (RB also)) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MasterCard) (NN center)))))))))))) (. ?)))",
        "mask_entity": "Name the team for which [ENT] played for which were also the tenants of [ENT] center ?",
        "entity": [
            "Cam Plante",
            "MasterCard"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4374",
        "question": "City of Miami Cemetery is the governing body of which city?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/City_of_Miami_Cemetery> <http://dbpedia.org/property/governingBody> ?uri } ",
        "SExpr": "(JOIN (R dbp:governingBody) dbr:City_of_Miami_Cemetery)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NP (NNP City)) (PP (IN of) (NP (NNP Miami) (NNP Cemetery)))) (VP (VBZ is) (NP (NP (DT the) (VBG governing) (NN body)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (NP (NN city))))) (. ?)))",
        "mask_entity": "[ENT] is the governing body of which city?",
        "entity": [
            "City of Miami Cemetery"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "105",
        "question": "List the movies whose editors are born in London.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/London> . ?uri <http://dbpedia.org/ontology/editing> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:editing (JOIN dbp:placeOfBirth dbr:London))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose editors [IQ1]",
                    "start": 16,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are born in London",
                                "start": 30,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NNS editors)) (S (VP (VBP are) (VP (VBN born) (PP (IN in) (NP (NNP London))))))))) (. .)))",
        "mask_entity": "List the movies whose editors are born in [ENT].",
        "entity": [
            "London"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3041",
        "question": "Does Shaun Thong a member of Audi?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Shaun_Thong> <http://dbpedia.org/property/currentTeam> <http://dbpedia.org/resource/Audi> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Does)) (NP (NP (NNP Shaun)))))",
        "mask_entity": "Does [ENT] Thong a member of [ENT]?",
        "entity": [
            "Shaun",
            "Audi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "142",
        "question": "Is the chestnut white bellied rat a mammal?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Chestnut_white-bellied_rat> <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Mammal> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (JJ chestnut) (JJ white) (JJ bellied) (NN rat)) (NP (DT a) (NN mammal)) (. ?)))",
        "mask_entity": "Is the chestnut white bellied rat a mammal?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2169",
        "question": "Who attended Great Ayton university?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Great_Ayton>  . }",
        "SExpr": "(JOIN dbo:education dbr:Great_Ayton)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD attended) (NP (NML (NNP Great) (NNP Ayton)) (NN university)))) (. ?)))",
        "mask_entity": "Who attended [ENT]?",
        "entity": [
            "Great Ayton university"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3458",
        "question": "Where was Babita born ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Babita> <http://dbpedia.org/property/birthplace> ?uri } ",
        "SExpr": "(JOIN (R dbp:birthplace) dbr:Babita)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Babita)) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where was [ENT] born ?",
        "entity": [
            "Babita"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "89",
        "question": "What is the city whose mayor is Giorgos Kaminis?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
        "SExpr": "(AND dbo:AdministrativeRegion (JOIN dbp:mayor dbr:Giorgos_Kaminis))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the city",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose mayor is Giorgos Kaminis",
                    "start": 17,
                    "end": 47
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN city)) (SBAR (WHNP (WP$ whose) (NN mayor)) (S (VP (VBZ is) (NP (NNP Giorgos) (NNP Kaminis)))))))) (. ?)))",
        "mask_entity": "What is the city whose mayor is [ENT]?",
        "entity": [
            "Giorgos Kaminis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2918",
        "question": "Which destinations of the Air 2000 is also the location continent of the Falken Tire ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/property/destinations> ?uri. <http://dbpedia.org/resource/Falken_Tire> <http://dbpedia.org/ontology/locationCountry> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:destinations) dbr:Air_2000) (JOIN (R dbo:locationCountry) dbr:Falken_Tire))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which destinations of the Air 2000",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is also the location continent of the Falken Tire",
                    "start": 35,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NNS destinations)) (PP (IN of) (NP (DT the) (NNP Air) (CD 2000)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location) (NN continent)) (PP (IN of) (NP (DT the) (NNP Falken) (NNP Tire))))) (. ?)))",
        "mask_entity": "Which destinations of [ENT] is also the location continent of [ENT] ?",
        "entity": [
            "the Air 2000",
            "the Falken Tire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3237",
        "question": "Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sonny_Bill_Williams> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Sonny) (NNP Bill) (NNP Williams)) (VP (VB belong) (PP (IN in) (NP (DT the) (NML (NNP Canterbury) (NNP Bankstown) (NNP Bulldogs)) (NN club)))) (. ?)))",
        "mask_entity": "Does [ENT] belong in the [ENT]?",
        "entity": [
            "Sonny Bill Williams",
            "Canterbury Bankstown Bulldogs club"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2241",
        "question": "Which field's journals are edited by Paul Morphy?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/editor> <http://dbpedia.org/resource/Paul_Morphy> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
        "SExpr": "(JOIN (R dbp:discipline) (AND dbo:AcademicJournal (JOIN dbo:editor dbr:Paul_Morphy))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which field's",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "journals [IQ1]",
                    "start": 14,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are edited by Paul Morphy",
                                "start": 23,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN field) (POS 's)) (NNS journals)) (VP (VBP are) (VP (VBN edited) (PP (IN by) (NP (NNP Paul) (NNP Morphy))))) (. ?)))",
        "mask_entity": "Which field's journals are edited by [ENT]?",
        "entity": [
            "Paul Morphy"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3174",
        "question": "Give me a list of everyone who manages the famous rock art sites?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/Rock_art> . ?x <http://dbpedia.org/ontology/governingBody> ?uri  . }",
        "SExpr": "(JOIN (R dbo:governingBody) (JOIN dbp:architecture dbr:Rock_art)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a list of everyone",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "who manages [IQ1]",
                    "start": 27,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the famous rock art sites",
                                "start": 39,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN list)) (PP (IN of) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBZ manages) (NP (DT the) (JJ famous) (NML (NN rock) (NN art)) (NNS sites))))))))) (. ?)))",
        "mask_entity": "Give me a list of everyone who manages the famous rock art sites?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3412",
        "question": "List the film starring of the movies whose editor is Harvey  Rosenstock ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Harvey_Rosenstock> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(JOIN (R dbp:starring) (AND dbo:Film (JOIN dbo:editing dbr:Harvey_Rosenstock))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the film",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "starring of [IQ1]",
                    "start": 14,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movies",
                                "start": 26,
                                "end": 36
                            },
                            {
                                "description": "whose editor is Harvey Rosenstock",
                                "start": 37,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN film) (NN starring)) (PP (IN of) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN editor)) (S (VP (VBZ is) (NP (NNP Harvey) (NNP Rosenstock))))))))) (. ?)))",
        "mask_entity": "List the film starring of the movies whose editor is [ENT] ?",
        "entity": [
            "Harvey  Rosenstock"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2163",
        "question": "Name hte builder of Baku Olympic Stadium ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baku_Olympic_Stadium_(BOS)> <http://dbpedia.org/ontology/builder> ?uri } ",
        "SExpr": "(JOIN (R dbo:builder) dbr:Baku_Olympic_Stadium_(BOS))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (NP (NP (NN Name)) (NP (NP (DT hte) (NN builder)) (PP (IN of) (NP (NNP Baku) (NNP Olympic) (NNP Stadium)))) (. ?)))",
        "mask_entity": "Name hte builder of [ENT] ?",
        "entity": [
            "Baku Olympic Stadium"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2636",
        "question": "Count the awards received by Immunologists?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Immunology> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "SExpr": "(AND dbo:Award (JOIN (R dbo:award) (JOIN dbp:fields dbr:Immunology))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the awards",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "received by [IQ1]",
                    "start": 17,
                    "end": 42,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Immunologists",
                                "start": 29,
                                "end": 42
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS awards)) (VP (VBN received) (PP (IN by) (NP (NNPS Immunologists)))))) (. ?)))",
        "mask_entity": "Count the awards received by Immunologists?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1949",
        "question": "In which mountain Inyo National Forest and California are located?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Inyo_National_Forest> . ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
        "SExpr": "(AND dbo:Mountain (AND (JOIN dbo:locatedInArea dbr:Inyo_National_Forest) (JOIN dbo:locatedInArea dbr:California)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which mountain",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "Inyo National Forest and California are located",
                    "start": 18,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (VP (NN mountain) (NP (NP (NNP Inyo) (NNP National) (NNP Forest)) (CC and) (NP (NNP California)))))) (VP (VBP are) (VP (VBN located))) (. ?)))",
        "mask_entity": "In which mountain [ENT] and [ENT] are located?",
        "entity": [
            "Inyo National Forest",
            "California"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1768",
        "question": "What is the nickname of the club managed by Piotr baron?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Piotr_Baron> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "SExpr": "(JOIN (R dbp:nickname) (JOIN dbo:manager dbr:Piotr_Baron)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the nickname of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the club",
                                "start": 24,
                                "end": 32
                            },
                            {
                                "description": "managed by Piotr baron",
                                "start": 33,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN nickname)) (PP (IN of) (NP (NP (DT the) (NN club)) (VP (VBN managed) (PP (IN by) (NP (NNP Piotr) (NNP baron))))))))) (. ?)))",
        "mask_entity": "What is the nickname of the club managed by [ENT]?",
        "entity": [
            "Piotr baron"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4290",
        "question": "For how many different teams have the players debuted in Houston Astros played?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(AND dbo:SportsTeam (JOIN (R dbo:team) (JOIN dbo:debutTeam dbr:Houston_Astros))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For how many different teams",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "have [IQ1] played",
                    "start": 29,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the players",
                                "start": 34,
                                "end": 45
                            },
                            {
                                "description": "debuted in Houston Astros",
                                "start": 46,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN For) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS teams))) (VBP have) (NP (DT the) (NNS players)) (VP (VBN debuted) (PP (IN in) (NP (NP (NNP Houston)) (SBAR (S (NP (NNP Astros)) (VP (VBD played))))))) (. ?)))",
        "mask_entity": "For how many different teams have the players debuted in [ENT] played?",
        "entity": [
            "Houston Astros"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2272",
        "question": "Rostock and Oulu is the shore cities on which sea ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(AND dbo:Sea (AND (JOIN dbp:cities dbr:Rostock) (JOIN dbp:cities dbr:Oulu)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Rostock and Oulu is the shore cities on",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "which sea",
                    "start": 40,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Rostock) (CC and) (NNP Oulu)) (VP (VBZ is) (NP (NP (DT the) (NN shore) (NNS cities)) (SBAR (WHPP (IN on) (WHNP (WDT which))) (S (VP (NN sea)))))) (. ?)))",
        "mask_entity": "[ENT] and [ENT] is the shore cities on which sea ?",
        "entity": [
            "Rostock",
            "Oulu"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1",
        "question": "Was winston churchill the prime minister of Selwyn Lloyd?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Selwyn_Lloyd> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Winston_Churchill> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP winston) (NNP churchill)) (NP (NP (DT the) (JJ prime) (NN minister)) (PP (IN of) (NP (NNP Selwyn) (NNP Lloyd)))) (. ?)))",
        "mask_entity": "Was winston churchill the prime minister of [ENT]?",
        "entity": [
            "Selwyn Lloyd"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3282",
        "question": "How many different things are used as ingredients in Sweden?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/ontology/ingredient> ?uri  . }",
        "SExpr": "(JOIN (R dbo:ingredient) (JOIN dbo:country dbr:Sweden)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ different) (NNS things)) (VP (VBP are) (VP (VBN used) (PP (IN as) (NP (NP (NNS ingredients)) (PP (IN in) (NP (NNP Sweden)))))))) (. ?)))",
        "mask_entity": "How many different things are used as ingredients in [ENT]?",
        "entity": [
            "Sweden"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4957",
        "question": "How many people have been the first one to scale a peak in the Yosemite Park?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:firstAscentPerson) (JOIN dbo:locatedInArea dbr:Yosemite_National_Park))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been the first one to scale [IQ1]",
                    "start": 16,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a peak",
                                "start": 49,
                                "end": 55
                            },
                            {
                                "description": "in the Yosemite Park",
                                "start": 56,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN been) (NP (NP (DT the) (JJ first) (NN one)) (SBAR (S (VP (TO to) (VP (VB scale) (NP (NP (DT a) (NN peak)) (PP (IN in) (NP (DT the) (NNP Yosemite) (NNP Park)))))))))))) (. ?)))",
        "mask_entity": "How many people have been the [ENT] one to scale a peak in [ENT]?",
        "entity": [
            "first",
            "the Yosemite Park"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1951",
        "question": "What are some licensees of the stations playing in Nashville, Tennessee?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/area> <http://dbpedia.org/resource/Nashville,_Tennessee> . ?x <http://dbpedia.org/property/licensee> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
        "SExpr": "(JOIN (R dbp:licensee) (AND dbo:RadioStation (JOIN dbp:area dbr:Nashville,_Tennessee))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some licensees of [IQ1]",
                    "start": 0,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stations",
                                "start": 27,
                                "end": 39
                            },
                            {
                                "description": "playing in Nashville, Tennessee",
                                "start": 40,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS licensees)) (PP (IN of) (NP (NP (DT the) (NNS stations)) (VP (VBG playing) (PP (IN in) (NP (NP (NNP Nashville)) (, ,) (NP (NNP Tennessee)))))))))) (. ?)))",
        "mask_entity": "What are some licensees of the stations playing in [ENT], [ENT]?",
        "entity": [
            "Nashville",
            "Tennessee"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "935",
        "question": "Which builder of Ford Straight-6 engine is also the automobile latform provider of Chiva bus ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Straight-6_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:automobilePlatform) dbr:Chiva_bus) (JOIN (R dbo:manufacturer) dbr:Ford_Straight-6_engine))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which builder of Ford Straight-6 engine",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "is also the automobile latform provider of Chiva bus",
                    "start": 40,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN builder)) (PP (IN of) (NP (NNP Ford) (NML (JJ Straight) (HYPH -) (CD 6)) (NN engine)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NML (NN automobile) (NN latform)) (NN provider)) (PP (IN of) (NP (NNP Chiva) (NN bus))))) (. ?)))",
        "mask_entity": "Which builder of [ENT] engine is also the automobile latform provider of [ENT] bus ?",
        "entity": [
            "Ford Straight-6",
            "Chiva"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4296",
        "question": "List the awards given to the key people in Pixar ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/property/keyPeople> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbp:keyPeople) dbr:Pixar)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the awards",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "given to [IQ1]",
                    "start": 16,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the key people in Pixar",
                                "start": 25,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS awards)) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (JJ key) (NNS people)) (PP (IN in) (NP (NNP Pixar)))))))) (. ?)))",
        "mask_entity": "List the awards given to the key people in [ENT] ?",
        "entity": [
            "Pixar"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2720",
        "question": "Which distributer of Bombay Sapphire also makes Grewy goose ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grey_Goose_(vodka)> <http://dbpedia.org/property/manufacturer> ?uri. <http://dbpedia.org/resource/Bombay_Sapphire> <http://dbpedia.org/property/distributor> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:manufacturer) dbr:Grey_Goose_(vodka)) (JOIN (R dbp:distributor) dbr:Bombay_Sapphire))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which distributer of Bombay Sapphire",
                    "start": 0,
                    "end": 36
                },
                {
                    "description": "also makes Grewy goose",
                    "start": 37,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN distributer)) (PP (IN of) (NP (NNP Bombay) (NNP Sapphire)))) (S (ADVP (RB also)) (VP (VBZ makes) (NP (NNP Grewy) (NN goose)))) (. ?)))",
        "mask_entity": "Which distributer of [ENT] also makes [ENT] goose ?",
        "entity": [
            "Bombay Sapphire",
            "Grewy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4447",
        "question": "Count the total number of bacterias whose division is Firmicutes and domain is Bacteria?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> } ",
        "SExpr": "(AND (JOIN dbo:division dbr:Firmicutes) (JOIN dbp:domain dbr:Bacteria))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the total number of bacterias",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "whose division is Firmicutes",
                    "start": 36,
                    "end": 64
                },
                {
                    "description": "and domain is Bacteria",
                    "start": 65,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (S (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS bacterias)) (SBAR (WHNP (WP$ whose) (NN division)) (S (VP (VBZ is) (NP (NNPS Firmicutes) (CC and) (NN domain)))))))) (VP (VBZ is) (NP (NNP Bacteria))))) (. ?)))",
        "mask_entity": "Count the total number of bacterias whose division is Firmicutes and domain is Bacteria?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1109",
        "question": "Count me the number of people whose military unit is involved with Close air support ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Close_air_support> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "SExpr": "(AND dbo:MilitaryPerson (JOIN dbo:militaryUnit (JOIN dbp:role dbr:Close_air_support))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count me the number of people",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose military unit [IQ1]",
                    "start": 30,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is involved with Close air support",
                                "start": 50,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (PRP me)) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP$ whose) (JJ military) (NN unit)) (S (VP (VBZ is) (VP (VBN involved) (PP (IN with) (NP (JJ Close) (NN air) (NN support))))))))))) (. ?)))",
        "mask_entity": "Count me the number of people whose military unit is involved with Close air support ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3960",
        "question": "What is the college of Malik Ausean which is also the college of Kyle Fuller ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Malik_Ausean_Evans> <http://dbpedia.org/ontology/college> ?uri. <http://dbpedia.org/resource/Kyle_Fuller_(basketball)> <http://dbpedia.org/property/college> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:college) dbr:Malik_Ausean_Evans) (JOIN (R dbp:college) dbr:Kyle_Fuller_(basketball)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the college of Malik Ausean",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "which is also the college of Kyle Fuller",
                    "start": 36,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN college)) (PP (IN of) (NP (NNP Malik) (NNP Ausean)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN college)) (PP (IN of) (NP (NNP Kyle) (NNP Fuller)))))))))) (. ?)))",
        "mask_entity": "What is the college of [ENT] which is also the college of [ENT] ?",
        "entity": [
            "Malik Ausean",
            "Kyle Fuller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "591",
        "question": "What are some other great things by the person who produced Queer as Folk?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Queer_as_Folk_(UK_TV_series)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:notableworks) (AND dbo:Person (JOIN (R dbo:producer) dbr:Queer_as_Folk_(UK_TV_series)))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some other great things by [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 36,
                                "end": 46
                            },
                            {
                                "description": "who produced Queer as Folk",
                                "start": 47,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ other) (JJ great) (NNS things)) (PP (IN by) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD produced) (NP (NNP Queer)) (PP (IN as) (NP (NNP Folk))))))))))) (. ?)))",
        "mask_entity": "What are some other great things by the person who produced [ENT]?",
        "entity": [
            "Queer as Folk"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1695",
        "question": "Does Jean Louis Arcand work for Geneva?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jean-Louis_Arcand> <http://dbpedia.org/property/institution> <http://dbpedia.org/resource/Geneva> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Jean) (NNP Louis) (NNP Arcand)) (VP (VB work) (PP (IN for) (NP (NNP Geneva)))) (. ?)))",
        "mask_entity": "Does [ENT] work for [ENT]?",
        "entity": [
            "Jean Louis Arcand",
            "Geneva"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3450",
        "question": "Is facebook a public company?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/property/companyType> <http://dbpedia.org/resource/Public_company> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NN facebook)) (NP (DT a) (JJ public) (NN company)) (. ?)))",
        "mask_entity": "Is facebook a public company?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2936",
        "question": "Under which scientist did doctoral students erban ieica and Erich Bagge study?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (AND (JOIN dbp:doctoralStudents dbr:\u0218erban_\u021ai\u021beica) (JOIN dbp:doctoralStudents dbr:Erich_Bagge)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Under which scientist",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "did doctoral students erban ieica and Erich Bagge study",
                    "start": 22,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Under) (WHNP (WDT which))) (S (NP (NN scientist)) (VP (VBD did) (NP (NP (JJ doctoral) (NNS students)) (VP (VB erban) (NP (NP (NNP ieica)) (CC and) (NP (NML (NNP Erich) (NNP Bagge)) (NN study))))))) (. ?)))",
        "mask_entity": "Under which scientist did doctoral students erban ieica and [ENT] study?",
        "entity": [
            "Erich Bagge"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4204",
        "question": "Which rivers start in a country whose leader is Irene Mambilima?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Irene_Mambilima> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:sourceCountry (JOIN dbp:leaderName dbr:Irene_Mambilima))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which rivers",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "start in [IQ1]",
                    "start": 13,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a country",
                                "start": 22,
                                "end": 31
                            },
                            {
                                "description": "whose leader is Irene Mambilima",
                                "start": 32,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP start) (PP (IN in) (NP (NP (DT a) (NN country)) (SBAR (WHNP (WP$ whose) (NN leader)) (S (VP (VBZ is) (NP (NNP Irene) (NNP Mambilima))))))))) (. ?)))",
        "mask_entity": "Which rivers start in a country whose leader is [ENT]?",
        "entity": [
            "Irene Mambilima"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3411",
        "question": "Count the number of books whose author's were born in Alcal de Henares ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Alcal\u00e1_de_Henares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (JOIN dbo:author (JOIN dbo:birthPlace dbr:Alcal\u00e1_de_Henares))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of books",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose author's [IQ1]",
                    "start": 26,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "were born in Alcal de Henares",
                                "start": 41,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS books)) (SBAR (WHNP (WP$ whose) (NN author) (POS 's)) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Alcal) (NNP de) (NNP Henares))))))))))) (. ?)))",
        "mask_entity": "Count the number of books whose author's were born in [ENT] ?",
        "entity": [
            "Alcal de Henares"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1576",
        "question": "Name the show whose jury consist of Jennifer Lopez and Randy Jackson?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Jennifer_Lopez) (JOIN dbp:judges dbr:Randy_Jackson)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the show",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "whose jury consist of Jennifer Lopez and Randy Jackson",
                    "start": 14,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WP$ whose) (NN jury)) (S (VP (VBP consist) (PP (IN of) (NP (NP (NNP Jennifer) (NNP Lopez)) (CC and) (NP (NNP Randy) (NNP Jackson))))))))) (. ?)))",
        "mask_entity": "Name the show whose jury consist of [ENT] and [ENT]?",
        "entity": [
            "Jennifer Lopez",
            "Randy Jackson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3954",
        "question": "List down all the baseball teams whose team manager was a Catcher?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Catcher> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "SExpr": "(AND dbo:BaseballTeam (JOIN dbo:manager (JOIN dbo:position dbr:Catcher))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List down all the baseball teams [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose team manager was a Catcher",
                                "start": 33,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (PRT (RP down)) (NP (NP (PDT all) (DT the) (NN baseball) (NNS teams)) (SBAR (WHNP (WP$ whose) (NN team) (NN manager)) (S (VP (VBD was) (NP (DT a) (NN Catcher))))))) (. ?)))",
        "mask_entity": "List down all the baseball teams whose team manager was a [ENT]?",
        "entity": [
            "Catcher"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "213",
        "question": " Which musical band produced the subsequent work of City of New Orleans ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/City_of_New_Orleans_(song)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/musicalBand> ?uri  . }",
        "SExpr": "(JOIN (R dbo:musicalBand) (JOIN (R dbo:subsequentWork) dbr:City_of_New_Orleans_(song))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which musical band",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "produced [IQ1]",
                    "start": 19,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the subsequent work of City of New Orleans",
                                "start": 28,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (JJ musical) (NN band)) (S (VP (VBD produced) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NP (NNP City)) (PP (IN of) (NP (NNP New) (NNP Orleans)))))))) (. ?)))",
        "mask_entity": " Which musical band produced the subsequent work of [ENT] ?",
        "entity": [
            "City of New Orleans"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "778",
        "question": "What is the alma mater of the James Still which is also the alma mater of Tom Maniatis?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_Still> <http://dbpedia.org/ontology/almaMater> ?uri. <http://dbpedia.org/resource/Tom_Maniatis> <http://dbpedia.org/property/almaMater> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:almaMater) dbr:James_Still) (JOIN (R dbp:almaMater) dbr:Tom_Maniatis))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of the James Still",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "which is also the alma mater of Tom Maniatis",
                    "start": 42,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (DT the) (NNP James) (RB Still)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Tom) (NNP Maniatis)))))))))) (. ?)))",
        "mask_entity": "What is the alma mater of [ENT] which is also the alma mater of [ENT]?",
        "entity": [
            "the James Still",
            "Tom Maniatis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1415",
        "question": "Where is the stadium of west Papus football team ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/West_Papua_football_team> <http://dbpedia.org/ontology/stadium> ?uri } ",
        "SExpr": "(JOIN (R dbo:stadium) dbr:West_Papua_football_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (JJ west) (NNP Papus) (NN football) (NN team))))) (. ?)))",
        "mask_entity": "Where is the stadium of west [ENT] football team ?",
        "entity": [
            "Papus"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3759",
        "question": "What is the debut team of the football player whose college is UCLA Bruins football?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/UCLA_Bruins_football> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GridironFootballPlayer>}",
        "SExpr": "(JOIN (R dbo:debutTeam) (AND dbo:GridironFootballPlayer (JOIN dbo:college dbr:UCLA_Bruins_football))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the debut team of [IQ1]",
                    "start": 0,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the football player",
                                "start": 26,
                                "end": 45
                            },
                            {
                                "description": "whose college is UCLA Bruins football",
                                "start": 46,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NP (DT the) (NN football) (NN player)) (SBAR (WHNP (WP$ whose) (NN college)) (S (VP (VBZ is) (NP (NML (NNP UCLA) (NNPS Bruins)) (NN football)))))))))) (. ?)))",
        "mask_entity": "What is the debut team of the football player whose college is [ENT] football?",
        "entity": [
            "UCLA Bruins"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2043",
        "question": "Does Air 2000 fly to the north american continent?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/ontology/destination> <http://dbpedia.org/resource/North_America> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Air) (CD 2000)) (VP (VB fly) (PP (IN to) (NP (DT the) (JJ north) (JJ american) (NN continent)))) (. ?)))",
        "mask_entity": "Does [ENT] fly to the north american continent?",
        "entity": [
            "Air 2000"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2848",
        "question": "In which racing championships did Bobby Beasley and Martin Molony participate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Beasley> <http://dbpedia.org/ontology/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:race) dbr:Bobby_Beasley) (JOIN (R dbo:race) dbr:Martin_Molony))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which racing championships",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "did Bobby Beasley and Martin Molony participate",
                    "start": 30,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN racing) (NNS championships)) (VP (VBD did) (NP (NP (NNP Bobby) (NNP Beasley)) (CC and) (NP (NNP Martin) (NNP Molony))) (S (VP (VB participate))))) (. ?)))",
        "mask_entity": "In which racing championships did [ENT] and [ENT] participate?",
        "entity": [
            "Bobby Beasley",
            "Martin Molony"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4537",
        "question": "What is the origin of the grape whose wine region is the Troodos Mountains ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/wineRegion> <http://dbpedia.org/resource/Troodos_Mountains> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
        "SExpr": "(JOIN (R dbo:origin) (AND dbo:Grape (JOIN dbo:wineRegion dbr:Troodos_Mountains))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the origin of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the grape",
                                "start": 22,
                                "end": 31
                            },
                            {
                                "description": "whose wine region is the Troodos Mountains",
                                "start": 32,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NP (DT the) (NN grape)) (SBAR (WHNP (WP$ whose) (NN wine) (NN region)) (S (VP (VBZ is) (NP (DT the) (NNPS Troodos) (NNPS Mountains)))))))))) (. ?)))",
        "mask_entity": "What is the origin of the grape whose wine region is [ENT] ?",
        "entity": [
            "the Troodos Mountains"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3505",
        "question": "Whose families are Buccinoidea and Buccinidae?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . }",
        "SExpr": "(AND (JOIN dbo:family dbr:Buccinoidea) (JOIN dbo:family dbr:Buccinidae))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose families are Buccinoidea and Buccinidae",
                    "start": 0,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS families)) (VP (VBP are) (NP (NNP Buccinoidea) (CC and) (NNP Buccinidae))) (. ?)))",
        "mask_entity": "Whose families are [ENT] and [ENT]?",
        "entity": [
            "Buccinoidea",
            "Buccinidae"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3813",
        "question": "Name the artist of Brad Paisley discography ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri } ",
        "SExpr": "(JOIN (R dbp:artist) dbr:Brad_Paisley_discography)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN artist)) (PP (IN of) (NP (NML (NNP Brad) (NNP Paisley)) (NN discography))))) (. ?)))",
        "mask_entity": "Name the artist of [ENT] discography ?",
        "entity": [
            "Brad Paisley"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1567",
        "question": "Ernest Rutherford was the advisor of how many people?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . }",
        "SExpr": "(JOIN dbp:doctoralAdvisor dbr:Ernest_Rutherford)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Ernest) (NNP Rutherford)) (VP (VBD was) (NP (NP (DT the) (NN advisor)) (PP (IN of) (NP (WHADJP (WRB how) (JJ many)) (NNS people))))) (. ?)))",
        "mask_entity": "[ENT] was the advisor of how many people?",
        "entity": [
            "Ernest Rutherford"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "165",
        "question": "Name the TV show whose composer is Judy Hart Angelo and company as Paramount Television ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Judy_Hart_Angelo> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:composer dbr:Judy_Hart_Angelo) (JOIN dbp:company dbr:Paramount_Television)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV show",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose composer is Judy Hart Angelo",
                    "start": 17,
                    "end": 51
                },
                {
                    "description": "and company as Paramount Television",
                    "start": 52,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN TV) (NN show)) (SBAR (WHNP (WP$ whose) (NN composer)) (S (VP (VBZ is) (NP (NP (NNP Judy) (NNP Hart) (NNP Angelo)) (CC and) (NP (NP (NN company)) (PP (IN as) (NP (NNP Paramount) (NNP Television)))))))))) (. ?)))",
        "mask_entity": "Name the TV show whose composer is [ENT] and company as [ENT] ?",
        "entity": [
            "Judy Hart Angelo",
            "Paramount Television"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4714",
        "question": "list all the chairman of Vancouver Whitecaps FC?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> ?uri } ",
        "SExpr": "(JOIN (R dbp:chairman) dbr:Vancouver_Whitecaps_FC)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB list) (NP (NP (PDT all) (DT the) (NN chairman)) (PP (IN of) (NP (NNP Vancouver) (NNP Whitecaps) (NNP FC))))) (. ?)))",
        "mask_entity": "list all the chairman of [ENT]?",
        "entity": [
            "Vancouver Whitecaps FC"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4272",
        "question": "What are some employees of Uni of California, santa cruz?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/University_of_California,_Santa_Cruz>  . }",
        "SExpr": "(JOIN dbp:employer dbr:University_of_California,_Santa_Cruz)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NP (DT some) (NNS employees)) (PP (IN of) (NP (NP (NNP Uni)) (PP (IN of) (NP (NNP California)))))) (, ,) (NP (NNP santa) (NNP cruz))))) (. ?)))",
        "mask_entity": "What are some employees of [ENT], santa cruz?",
        "entity": [
            "Uni of California"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4926",
        "question": "Which municipality of the Brown's Corners, toronto also place of birth of Krista Kelly ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brown's_Corners,_Toronto> <http://dbpedia.org/ontology/municipality> ?uri. <http://dbpedia.org/resource/Krista_Kelly> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:municipality) dbr:Brown's_Corners,_Toronto) (JOIN (R dbp:placeOfBirth) dbr:Krista_Kelly))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which municipality of the Brown's Corners, toronto",
                    "start": 0,
                    "end": 50
                },
                {
                    "description": "also place of birth of Krista Kelly",
                    "start": 51,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (WHNP (WHNP (WDT Which) (NN municipality)) (PP (IN of) (NP (NP (DT the) (NNPS Brown's) (NNPS Corners)) (, ,) (NP (NP (NNP toronto)) (RRC (ADVP (RB also)) (NP (NP (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Krista) (NNP Kelly)))))))))) (. ?)))",
        "mask_entity": "Which municipality of [ENT], [ENT] also place of birth of [ENT] ?",
        "entity": [
            "the Brown's Corners",
            "toronto",
            "Krista Kelly"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1343",
        "question": "Which famous writer was married to Jill Krementz and had a son named Edith Vonnegut ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Jill_Krementz> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
        "SExpr": "(AND dbo:Writer (AND (JOIN dbo:spouse dbr:Jill_Krementz) (JOIN dbo:child dbr:Edith_Vonnegut)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which famous writer",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "was married to Jill Krementz",
                    "start": 20,
                    "end": 48
                },
                {
                    "description": "and had a son named Edith Vonnegut",
                    "start": 49,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (JJ famous) (NN writer)) (S (VP (VP (VBD was) (VP (VBN married) (PP (IN to) (NP (NNP Jill) (NNP Krementz))))) (CC and) (VP (VBD had) (NP (NP (DT a) (NN son)) (VP (VBN named) (S (NP (NNP Edith) (NNP Vonnegut)))))))) (. ?)))",
        "mask_entity": "Which famous writer was married to [ENT] and had a son named [ENT] ?",
        "entity": [
            "Jill Krementz",
            "Edith Vonnegut"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2013",
        "question": "Name the nearest city to Tennie and Laura ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tennie_and_Laura_(schooner)> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbp:nearestCity) dbr:Tennie_and_Laura_(schooner))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (IN to) (NP (NNP Tennie) (CC and) (NNP Laura)))) (. ?)))",
        "mask_entity": "Name the nearest city to [ENT] and [ENT] ?",
        "entity": [
            "Tennie",
            "Laura"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "273",
        "question": "How many TV shows have been created by Simon Fuller ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:creator dbr:Simon_Fuller))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "have been created by Simon Fuller",
                    "start": 18,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN TV) (NNS shows)) (VP (VBP have) (VP (VBN been) (VP (VBN created) (PP (IN by) (NP (NNP Simon) (NNP Fuller))))))) (. ?)))",
        "mask_entity": "How many TV shows have been created by [ENT] ?",
        "entity": [
            "Simon Fuller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "71",
        "question": "Who appointed the governor under which Robert Witherspoon worked?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Witherspoon> <http://dbpedia.org/ontology/governor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:appointer) (JOIN (R dbo:governor) dbr:Robert_Witherspoon)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who appointed [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the governor",
                                "start": 14,
                                "end": 26
                            },
                            {
                                "description": "under which Robert Witherspoon worked",
                                "start": 27,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD appointed) (NP (NP (DT the) (NN governor)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NNP Robert) (NNP Witherspoon)) (VP (VBD worked))))))) (. ?)))",
        "mask_entity": "Who appointed the governor under which [ENT] worked?",
        "entity": [
            "Robert Witherspoon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3887",
        "question": "What is the area of ITV (Thailand) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/ITV_(Thailand)> <http://dbpedia.org/property/area> ?uri } ",
        "SExpr": "(JOIN (R dbp:area) dbr:ITV_(Thailand))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP ITV) (-LRB- () (NNP Thailand) (-RRB- ))))))) (. ?)))",
        "mask_entity": "What is the area of [ENT] ([ENT]) ?",
        "entity": [
            "ITV",
            "Thailand"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1087",
        "question": "who all play for of the american football players at  Quarterback position?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "SExpr": "(JOIN (R dbo:team) (AND dbo:AmericanFootballPlayer (JOIN dbp:position dbr:Quarterback))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who all play for of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the american football players",
                                "start": 20,
                                "end": 49
                            },
                            {
                                "description": "at Quarterback position",
                                "start": 50,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP who)) (S (NP (NP (DT all) (VBP play)) (PP (IN for) (PP (IN of) (NP (NP (DT the) (JJ american) (NN football) (NNS players)) (PP (IN at) (NP (NNP Quarterback) (NN position)))))))) (. ?)))",
        "mask_entity": "who all play for of the american football players at  [ENT] position?",
        "entity": [
            "Quarterback"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "394",
        "question": "Name the office holder whose child is Lori Black and predecessor is Henry E. Catto Jr ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:children dbr:Lori_Black) (JOIN dbo:predecessor dbr:Henry_E._Catto,_Jr.)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose child is Lori Black",
                    "start": 23,
                    "end": 48
                },
                {
                    "description": "and predecessor is Henry E. Catto Jr",
                    "start": 49,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (NN child)) (S (VP (VBZ is) (NP (NNP Lori) (NNP Black)))))))) (CC and) (S (NP (NN predecessor)) (VP (VBZ is) (NP (NNP Henry) (NNP E.) (NNP Catto) (NNP Jr)))) (. ?)))",
        "mask_entity": "Name the office holder whose child is [ENT] and predecessor is [ENT] ?",
        "entity": [
            "Lori Black",
            "Henry E. Catto Jr"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "583",
        "question": "Which televion show's theme music was given by Ron Grainer and is broadcasted by BBC HD ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:themeMusicComposer dbr:Ron_Grainer) (JOIN dbo:network dbr:BBC_HD)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which televion show's",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "theme music was given by Ron Grainer",
                    "start": 22,
                    "end": 58
                },
                {
                    "description": "and is broadcasted by BBC HD",
                    "start": 59,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN televion) (NN show) (POS 's)) (NN theme) (NN music)) (VP (VP (VBD was) (VP (VBN given) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))) (CC and) (VP (VBZ is) (VP (VBN broadcasted) (PP (IN by) (NP (NNP BBC) (NNP HD)))))) (. ?)))",
        "mask_entity": "Which televion show's theme music was given by [ENT] and is broadcasted by [ENT] ?",
        "entity": [
            "Ron Grainer",
            "BBC HD"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1367",
        "question": "Name a person who was educated in Humes High School ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:education dbr:Humes_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a person",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "who was educated in Humes High School",
                    "start": 14,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (VP (VBN educated) (PP (IN in) (NP (NNP Humes) (NNP High) (NNP School))))))))) (. ?)))",
        "mask_entity": "Name a person who was educated in [ENT] ?",
        "entity": [
            "Humes High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4987",
        "question": "Where do I find buildings rented by Weber Thompson?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Weber_Thompson> . ?x <http://dbpedia.org/property/address> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
        "SExpr": "(JOIN (R dbp:address) (AND dbo:Building (JOIN dbo:tenant dbr:Weber_Thompson))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do I find [IQ1]",
                    "start": 0,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "buildings",
                                "start": 16,
                                "end": 25
                            },
                            {
                                "description": "rented by Weber Thompson",
                                "start": 26,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (PRP I)) (VP (VB find) (NP (NP (NNS buildings)) (VP (VBN rented) (PP (IN by) (NP (NNP Weber) (NNP Thompson))))))) (. ?)))",
        "mask_entity": "Where do I find buildings rented by [ENT]?",
        "entity": [
            "Weber Thompson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4088",
        "question": "What is the field of interest of the advisor of Henri Maspero ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "SExpr": "(JOIN (R dbp:fields) (JOIN (R dbo:academicAdvisor) dbr:Henri_Maspero)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the field of interest of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the advisor of Henri Maspero",
                                "start": 33,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NP (NN interest)) (PP (IN of) (NP (NP (DT the) (NN advisor)) (PP (IN of) (NP (NNP Henri) (NNP Maspero)))))))))) (. ?)))",
        "mask_entity": "What is the field of interest of the advisor of [ENT] ?",
        "entity": [
            "Henri Maspero"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2548",
        "question": "Name the actor of Soylent Green to which Lydia Clarke is married ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lydia_Clarke> <http://dbpedia.org/property/spouse> ?uri. <http://dbpedia.org/resource/Soylent_Green> <http://dbpedia.org/ontology/starring> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:spouse) dbr:Lydia_Clarke) (JOIN (R dbo:starring) dbr:Soylent_Green))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the actor of Soylent Green",
                    "start": 0,
                    "end": 31
                },
                {
                    "description": "to which Lydia Clarke is married",
                    "start": 32,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN actor)) (PP (IN of) (NP (NNP Soylent) (NNP Green)))) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NNP Lydia) (NNP Clarke)) (VP (VBZ is) (VP (VBN married))))))) (. ?)))",
        "mask_entity": "Name the actor of [ENT] to which [ENT] is married ?",
        "entity": [
            "Soylent Green",
            "Lydia Clarke"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1013",
        "question": "Count the cities whihch are on the same sea as that of Miami ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/cities> ?uri }",
        "SExpr": "(JOIN (R dbp:cities) (JOIN dbp:cities dbr:Miami)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the cities",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "which are on [IQ1]",
                    "start": 17,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the same sea as that of Miami",
                                "start": 31,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS cities)) (SBAR (WHNP (WDT whihch)) (S (VP (VBP are) (PP (IN on) (NP (NP (DT the) (JJ same) (NN sea)) (PP (IN as) (NP (NP (DT that)) (PP (IN of) (NP (NNP Miami)))))))))))) (. ?)))",
        "mask_entity": "Count the cities whihch are on the same sea as that of [ENT] ?",
        "entity": [
            "Miami"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4897",
        "question": "Name the stock holders of soccer club whose one of the stockholder is Carl Sanders ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Carl_Sanders> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "SExpr": "(JOIN (R dbo:owner) (AND dbo:SoccerClub (JOIN dbp:owner dbr:Carl_Sanders))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the stock holders of [IQ1]",
                    "start": 0,
                    "end": 82,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "soccer club",
                                "start": 26,
                                "end": 37
                            },
                            {
                                "description": "whose one of the stockholder is Carl Sanders",
                                "start": 38,
                                "end": 82
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN stock) (NNS holders)) (PP (IN of) (NP (NP (NN soccer) (NN club)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN stockholder)))) (S (VP (VBZ is) (NP (NNP Carl) (NNP Sanders))))))))) (. ?)))",
        "mask_entity": "Name the stock holders of soccer club whose [ENT] of the stockholder is [ENT] ?",
        "entity": [
            "one",
            "Carl Sanders"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3003",
        "question": "Who are the key people of FWD.us?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri } ",
        "SExpr": "(JOIN (R dbp:keyPeople) dbr:FWD.us)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ key) (NNS people)) (PP (IN of) (NP (NNP FWD.us)))))) (. ?)))",
        "mask_entity": "Who are the key people of FWD.us?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "4788",
        "question": "Who is the executive producer of Into the Dalek ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Into_the_Dalek> <http://dbpedia.org/property/executiveProducer> ?uri } ",
        "SExpr": "(JOIN (R dbp:executiveProducer) dbr:Into_the_Dalek)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (IN Into)))) (NP (DT the) (NNP Dalek)))) (. ?)))",
        "mask_entity": "Who is the executive producer of [ENT] ?",
        "entity": [
            "Into the Dalek"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4407",
        "question": "What team is famous for Robert Nederlander and also the debuting team of Gary Sanchez?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Nederlander> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Gary_S\u00e1nchez> <http://dbpedia.org/ontology/debutTeam> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(AND dbo:SportsTeam (AND (JOIN (R dbo:knownFor) dbr:Robert_Nederlander) (JOIN (R dbo:debutTeam) dbr:Gary_S\u00e1nchez)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What team",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "is famous for Robert Nederlander",
                    "start": 10,
                    "end": 42
                },
                {
                    "description": "and also the debuting team of Gary Sanchez",
                    "start": 43,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN team)) (SQ (VP (VBZ is) (ADJP (JJ famous)) (PP (IN for) (NP (NP (NNP Robert) (NNP Nederlander)) (CC and) (ADVP (RB also)) (NP (NP (DT the) (NN debuting) (NN team)) (PP (IN of) (NP (NNP Gary) (NNP Sanchez)))))))) (. ?)))",
        "mask_entity": "What team is famous for [ENT] and also the debuting team of [ENT]?",
        "entity": [
            "Robert Nederlander",
            "Gary Sanchez"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3532",
        "question": "List everyone who got their training in the city of California?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/property/training> ?x  . }",
        "SExpr": "(JOIN dbp:training (JOIN dbp:city dbr:California)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List everyone",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "who got their training in [IQ1]",
                    "start": 14,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the city of California",
                                "start": 40,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBD got) (NP (NP (PRP$ their) (NN training)) (PP (IN in) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP California))))))))))) (. ?)))",
        "mask_entity": "List everyone who got their training in the city of [ENT]?",
        "entity": [
            "California"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1763",
        "question": "Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Fran\u00e7ois_Burgers> <http://dbpedia.org/property/restingplace> ?uri. <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:restingplace) dbr:Thomas_Fran\u00e7ois_Burgers) (JOIN (R dbp:restingplace) dbr:Johannes_Gerhardus_Strijdom))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried",
                    "start": 0,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NP (NNP Thomas) (NNP Franois) (NNP Burgers)) (CC and) (NP (NNP Johannes) (NNP Gerhardus) (NNP Strijdom))) (VP (VBN buried))) (. ?)))",
        "mask_entity": "Where are [ENT] and [ENT] buried?",
        "entity": [
            "Thomas Franois Burgers",
            "Johannes Gerhardus Strijdom"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1875",
        "question": "Through how many cities does the river flowing into Arkansas go?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Arkansas> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
        "SExpr": "(AND dbo:City (JOIN (R dbo:city) (JOIN dbo:mouthMountain dbr:Arkansas))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Through how many cities",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "does [IQ1] go",
                    "start": 24,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the river",
                                "start": 29,
                                "end": 38
                            },
                            {
                                "description": "flowing into Arkansas",
                                "start": 39,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN Through) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS cities)) (SQ (VBZ does) (NP (DT the) (NN river)) (S (VP (VBG flowing) (PP (IN into) (NP (NNP Arkansas))))) (VP (VB go))) (. ?))))",
        "mask_entity": "Through how many cities does the river flowing into [ENT] go?",
        "entity": [
            "Arkansas"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1259",
        "question": "What is the municipality of the Brown's Corners, Toronto and also the  place of birth of the George Karrys",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brown's_Corners,_Toronto> <http://dbpedia.org/ontology/municipality> ?uri. <http://dbpedia.org/resource/George_Karrys> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:municipality) dbr:Brown's_Corners,_Toronto) (JOIN (R dbp:placeOfBirth) dbr:George_Karrys))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the municipality of the Brown's Corners, Toronto",
                    "start": 0,
                    "end": 56
                },
                {
                    "description": "and also the place of birth of the George Karrys",
                    "start": 57,
                    "end": 105
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (NP (DT the) (NNPS Brown's) (NNPS Corners)) (, ,) (NP (NNP Toronto)) (CC and) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (DT the) (NNP George) (NNP Karrys)))))))))))))",
        "mask_entity": "What is the municipality of [ENT], [ENT] and also the  place of birth of [ENT]",
        "entity": [
            "the Brown's Corners",
            "Toronto",
            "the George Karrys"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4530",
        "question": "Does Richard Marx play guitar?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Richard_Marx> <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Guitar> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Richard) (NNP Marx)) (VP (VB play) (NP (NN guitar))) (. ?)))",
        "mask_entity": "Does [ENT] play guitar?",
        "entity": [
            "Richard Marx"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2253",
        "question": "How many things are manufactured by the company whose subsidiary is Sony Corporation shareholders and subsidiaries?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "SExpr": "(JOIN dbo:manufacturer (JOIN dbo:subsidiary dbr:Sony_Corporation_shareholders_and_subsidiaries)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many things",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are manufactured by [IQ1]",
                    "start": 16,
                    "end": 114,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 36,
                                "end": 47
                            },
                            {
                                "description": "whose subsidiary is Sony Corporation shareholders and subsidiaries",
                                "start": 48,
                                "end": 114
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP are) (VP (VBN manufactured) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (NN subsidiary)) (S (VP (VBZ is) (NP (NNP Sony) (NNP Corporation) (NNS shareholders) (CC and) (NNS subsidiaries)))))))))) (. ?)))",
        "mask_entity": "How many things are manufactured by the company whose subsidiary is [ENT] shareholders and subsidiaries?",
        "entity": [
            "Sony Corporation"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2781",
        "question": "What is the total number of office holders who preceded the people working under president bill clinton?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Bill_Clinton> . ?uri <http://dbpedia.org/property/successor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbp:successor (JOIN dbp:president dbr:Bill_Clinton))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of office holders",
                    "start": 0,
                    "end": 42
                },
                {
                    "description": "who preceded [IQ1]",
                    "start": 43,
                    "end": 103,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 56,
                                "end": 66
                            },
                            {
                                "description": "working under president bill clinton",
                                "start": 67,
                                "end": 103
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NN office) (NNS holders)))) (SBAR (WHNP (WP who)) (S (VP (VBD preceded) (NP (NP (DT the) (NNS people)) (VP (VBG working) (PP (IN under) (NP (NN president) (NN bill))) (NP (NNP clinton)))))))))) (. ?)))",
        "mask_entity": "What is the total number of office holders who preceded the people working under president bill [ENT]?",
        "entity": [
            "clinton"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3592",
        "question": "In which other places are there companies which are in Ontario, too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/property/locations> ?uri  . }",
        "SExpr": "(JOIN (R dbp:locations) (JOIN dbo:locationCity dbr:Ontario)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which other places are there [IQ1]",
                    "start": 0,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 32,
                                "end": 41
                            },
                            {
                                "description": "which are in Ontario, too",
                                "start": 42,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (JJ other) (NNS places)) (VP (VBP are) (NP (NP (PRP$ there) (NNS companies)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN in) (NP (NNP Ontario))) (, ,) (ADVP (RB too)))))))) (. ?)))",
        "mask_entity": "In which other places are there companies which are in [ENT], too?",
        "entity": [
            "Ontario"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "526",
        "question": "What is the POD of the successor of Pmare I ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/P\u014dmare_I> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathPlace) (JOIN (R dbp:successor) dbr:P\u014dmare_I)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the POD of [IQ1]",
                    "start": 0,
                    "end": 43,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Pmare I",
                                "start": 19,
                                "end": 43
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN POD)) (PP (IN of) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (VBP Pmare)))))) (NP (PRP I)))) (. ?)))",
        "mask_entity": "What is the POD of the successor of Pmare I ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4263",
        "question": "In which companies boards do the writers of Wikitionary belong?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/board> ?uri  . }",
        "SExpr": "(JOIN (R dbo:board) (JOIN (R dbo:author) dbr:Wiktionary)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which companies boards",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "do [IQ1] belong",
                    "start": 26,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writers of Wikitionary",
                                "start": 29,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS companies) (NNS boards)) (VP (VBP do) (NP (NP (DT the) (NNS writers)) (PP (IN of) (NP (NNP Wikitionary)))) (VP (VBP belong)))) (. ?)))",
        "mask_entity": "In which companies boards do the writers of [ENT] belong?",
        "entity": [
            "Wikitionary"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2946",
        "question": "How many nations' volleyball players have played for the Russian women volleyball team?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Russia_women's_national_volleyball_team> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN (R dbp:placeOfBirth) (JOIN dbp:nationalteam dbr:Russia_women's_national_volleyball_team))",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (NP (JJ many) (NNS nations) (POS ')) (NN volleyball) (NNS players)) (VP (VBP have) (VP (VBN played) (PP (IN for) (NP (DT the) (JJ Russian) (NNS women) (NN volleyball) (NN team)))))) (. ?)))",
        "mask_entity": "How many nations' volleyball players have played for the [ENT] women volleyball team?",
        "entity": [
            "Russian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "377",
        "question": "Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbo:governor dbr:Charles_Willing_Byrd) (JOIN dbp:restingplace dbr:North_Bend,_Ohio)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which office holder's",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "governor is Charles Willing Byrd",
                    "start": 22,
                    "end": 54
                },
                {
                    "description": "and has final resting place in North Bend, Ohio",
                    "start": 55,
                    "end": 102
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN office) (NN holder) (POS 's)) (NN governor)) (VP (VP (VBZ is) (NP (NNP Charles) (NNP Willing) (NNP Byrd))) (CC and) (VP (VBZ has) (NP (NP (JJ final) (NN resting) (NN place)) (PP (IN in) (NP (NP (NNP North) (NNP Bend)) (, ,) (NP (NNP Ohio))))))) (. ?)))",
        "mask_entity": "Which office holder's governor is [ENT] and has final resting place in [ENT], [ENT]?",
        "entity": [
            "Charles Willing Byrd",
            "North Bend",
            "Ohio"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1559",
        "question": "What is the television show which has cast member as Jason Carter and network is TNT (TV channel)?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:starring dbr:Jason_Carter_(actor)) (JOIN dbp:network dbr:TNT_(TV_channel))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "which has cast member as Jason Carter",
                    "start": 28,
                    "end": 65
                },
                {
                    "description": "and network is TNT (TV channel)",
                    "start": 66,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (VP (VBN cast) (NP (NN member)) (SBAR (IN as) (S (NP (NP (NNP Jason) (NNP Carter)) (CC and) (NP (NN network))) (VP (VBZ is) (NP (NML (NNP TNT) (-LRB- () (NN TV)) (NN channel) (-RRB- ))))))))))))) (. ?)))",
        "mask_entity": "What is the television show which has cast member as [ENT] and network is [ENT] (TV channel)?",
        "entity": [
            "Jason Carter",
            "TNT"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3820",
        "question": "In how many places can I find people whose alma mater was in bachelor of arts?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Bachelor_of_Arts> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbo:residence) (JOIN dbp:almaMater dbr:Bachelor_of_Arts))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many places",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "can I find [IQ1]",
                    "start": 19,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 30,
                                "end": 36
                            },
                            {
                                "description": "whose alma mater was in bachelor of arts",
                                "start": 37,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (MD can) (NP (PRP I)) (VP (VB find) (NP (NP (NNS people)) (SBAR (WHNP (WP$ whose) (NN alma) (NN mater)) (S (VP (VBD was) (PP (IN in) (NP (NP (NN bachelor)) (PP (IN of) (NP (NNS arts))))))))))) (. ?))))",
        "mask_entity": "In how many places can I find people whose alma mater was in bachelor of arts?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1963",
        "question": "Is Gutenberg neighbouring with Madiswil?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Madiswil> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Gutenburg,_Switzerland> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Gutenberg)) (VP (VBG neighbouring) (PP (IN with) (NP (NNP Madiswil)))) (. ?)))",
        "mask_entity": "Is [ENT] neighbouring with [ENT]?",
        "entity": [
            "Gutenberg",
            "Madiswil"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4732",
        "question": "List the junctions which lie on U.S. Route 59 in Texas and U.S. Route 59 ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/U.S._Route_59_in_Texas> <http://dbpedia.org/property/junction> ?uri. <http://dbpedia.org/resource/U.S._Route_59> <http://dbpedia.org/property/junction> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:junction) dbr:U.S._Route_59_in_Texas) (JOIN (R dbp:junction) dbr:U.S._Route_59))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the junctions",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "which lie on U.S. Route 59 in Texas and U.S. Route 59",
                    "start": 19,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS junctions)) (SBAR (WHNP (WDT which)) (S (VP (VBP lie) (PP (IN on) (NP (NP (NNP U.S.) (NNP Route) (CD 59)) (PP (IN in) (NP (NP (NNP Texas)) (CC and) (NP (NNP U.S.) (NNP Route) (CD 59))))))))))) (. ?)))",
        "mask_entity": "List the junctions which lie on [ENT] in [ENT] and [ENT] ?",
        "entity": [
            "U.S. Route 59",
            "Texas",
            "U.S. Route 59"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "348",
        "question": "Does Mr. Jim's Pizza operate in the pizza industry?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mr._Jim's_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NP (NNP Mr.) (NNP Jim) (POS 's)) (NNP Pizza)) (VP (VB operate) (PP (IN in) (NP (DT the) (NN pizza) (NN industry)))) (. ?)))",
        "mask_entity": "Does Mr. [ENT]'s Pizza operate in the pizza industry?",
        "entity": [
            "Jim"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2434",
        "question": "Which scientist's academic advisor is Georg Meissner and is known for invention of Anthrax ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Anthrax> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (AND (JOIN dbo:knownFor dbr:Anthrax) (JOIN dbp:doctoralAdvisor dbr:Georg_Meissner)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which scientist's",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "academic advisor is Georg Meissner",
                    "start": 18,
                    "end": 52
                },
                {
                    "description": "and is known for invention of Anthrax",
                    "start": 53,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN scientist) (POS 's)) (JJ academic) (NN advisor)) (VP (VP (VBZ is) (NP (NNP Georg) (NNP Meissner))) (CC and) (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (NN invention)) (PP (IN of) (NP (NNP Anthrax)))))))) (. ?)))",
        "mask_entity": "Which scientist's academic advisor is [ENT] and is known for invention of Anthrax ?",
        "entity": [
            "Georg Meissner"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2246",
        "question": "Name the writer of South Park: The Stick of Truth ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth> <http://dbpedia.org/ontology/writer> ?uri } ",
        "SExpr": "(JOIN (R dbo:writer) dbr:South_Park:_The_Stick_of_Truth)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NNP South) (NNP Park)))) (: :) (NP (NP (DT The) (NNP Stick)) (PP (IN of) (NP (NNP Truth)))))) (. ?)))",
        "mask_entity": "Name the writer of [ENT]: [ENT] ?",
        "entity": [
            "South Park",
            "The Stick of Truth"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4166",
        "question": "Who owns Torrey Pines Gliderport?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Torrey_Pines_Gliderport> <http://dbpedia.org/property/owner> ?uri } ",
        "SExpr": "(JOIN (R dbp:owner) dbr:Torrey_Pines_Gliderport)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NNP Torrey) (NNP Pines) (NNP Gliderport)))) (. ?)))",
        "mask_entity": "Who owns [ENT]?",
        "entity": [
            "Torrey Pines Gliderport"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1709",
        "question": "Who wrote a streetcar named desire?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)> <http://dbpedia.org/property/writer> ?uri } ",
        "SExpr": "(JOIN (R dbp:writer) dbr:A_Streetcar_Named_Desire_(play))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT a) (NN streetcar)) (VP (VBN named) (S (NP (NN desire))))))) (. ?)))",
        "mask_entity": "Who wrote a streetcar named desire?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1050",
        "question": "Which nationality of Newin Chidchob is also the nationality of Ajahn Sao Kantaslo ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Ajahn_Sao_Kantas\u012blo> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:nationality) dbr:Newin_Chidchob) (JOIN (R dbo:nationality) dbr:Ajahn_Sao_Kantas\u012blo))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which nationality of Newin Chidchob",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "is also the nationality of Ajahn Sao Kantaslo",
                    "start": 36,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN nationality)) (PP (IN of) (NP (NNP Newin) (NNP Chidchob)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN nationality)) (PP (IN of) (NP (NNP Ajahn) (NNP Sao) (NNP Kantaslo))))) (. ?)))",
        "mask_entity": "Which nationality of [ENT] is also the nationality of [ENT] ?",
        "entity": [
            "Newin Chidchob",
            "Ajahn Sao Kantaslo"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "590",
        "question": "What is the label of the album whose previous work is Waterfall?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Waterfall_(album)> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(JOIN (R dbp:label) (AND dbo:Album (JOIN dbo:previousWork dbr:Waterfall_(album)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the label of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the album",
                                "start": 21,
                                "end": 30
                            },
                            {
                                "description": "whose previous work is Waterfall",
                                "start": 31,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (NP (DT the) (NN album)) (SBAR (WHNP (WP$ whose) (JJ previous) (NN work)) (S (VP (VBZ is) (NP (NNP Waterfall)))))))))) (. ?)))",
        "mask_entity": "What is the label of the album whose previous work is Waterfall?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "519",
        "question": "What is the label of things produced by the band If?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/If_(band)> . ?x <http://dbpedia.org/property/label> ?uri  . }",
        "SExpr": "(JOIN (R dbp:label) (JOIN dbp:artist dbr:If_(band))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the label of [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "things",
                                "start": 21,
                                "end": 27
                            },
                            {
                                "description": "produced by the band If",
                                "start": 28,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (NP (NNS things)) (VP (VBN produced) (PP (IN by) (NP (DT the) (NN band))) (SBAR (IN If)))))))) (. ?)))",
        "mask_entity": "What is the label of things produced by the band If?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4752",
        "question": "Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:automobilePlatform) dbr:Chiva_bus) (JOIN (R dbo:parentCompany) dbr:Ford_Falcon_Cobra))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which automobile platform",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "provider of Chiva bus",
                    "start": 26,
                    "end": 47
                },
                {
                    "description": "is also the parent company of the Ford Falcon Cobra",
                    "start": 48,
                    "end": 99
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NML (NN automobile) (NN platform)) (NN provider)) (PP (IN of) (NP (NNP Chiva) (NN bus)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (DT the) (NNP Ford) (NNP Falcon) (NNP Cobra))))) (. ?)))",
        "mask_entity": "Which automobile platform provider of [ENT] bus is also the parent company of the [ENT] [ENT] ?",
        "entity": [
            "Chiva",
            "Ford",
            "Falcon Cobra"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4308",
        "question": "List the goverener of Winston Bryant?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri } ",
        "SExpr": "(JOIN (R dbp:governor) dbr:Winston_Bryant)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN goverener)) (PP (IN of) (NP (NNP Winston) (NNP Bryant))))) (. ?)))",
        "mask_entity": "List the goverener of [ENT]?",
        "entity": [
            "Winston Bryant"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2477",
        "question": "Count the movies directed by Tim Burton and music composer Danny Elfman ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Danny_Elfman> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton> } ",
        "SExpr": "(AND (JOIN dbp:music dbr:Danny_Elfman) (JOIN dbp:director dbr:Tim_Burton))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the movies",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "directed by Tim Burton",
                    "start": 17,
                    "end": 39
                },
                {
                    "description": "and music composer Danny Elfman",
                    "start": 40,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NP (NNP Tim) (NNP Burton)) (CC and) (NP (NML (NN music) (NN composer)) (NNP Danny) (NNP Elfman))))))) (. ?)))",
        "mask_entity": "Count the movies directed by [ENT] and music composer [ENT] ?",
        "entity": [
            "Tim Burton",
            "Danny Elfman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1083",
        "question": "Erik Jendresen is writer and Play tone is company of which TV show ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:writer dbr:Erik_Jendresen) (JOIN dbp:company dbr:Playtone)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Erik Jendresen is writer",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "and Play tone is company of",
                    "start": 25,
                    "end": 52
                },
                {
                    "description": "which TV show",
                    "start": 53,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Erik) (NNP Jendresen)) (VP (VBZ is) (SBAR (S (NP (NP (NN writer)) (CC and) (NP (NNP Play) (NN tone))) (VP (VBZ is) (NP (NP (NN company)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (NP (NN TV) (NN show)))))))) (. ?)))",
        "mask_entity": "[ENT] is writer and [ENT] tone is company of which TV show ?",
        "entity": [
            "Erik Jendresen",
            "Play"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3588",
        "question": "From which genres of music did those genres emerge where drums are important?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Drum_kit> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
        "SExpr": "(JOIN (R dbo:stylisticOrigin) (AND dbo:MusicGenre (JOIN dbp:instruments dbr:Drum_kit))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From which genres of music",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "did [IQ1]",
                    "start": 27,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "those genres emerge",
                                "start": 31,
                                "end": 50
                            },
                            {
                                "description": "where drums are important",
                                "start": 51,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN From) (WHNP (WDT which))) (S (NP (NP (NNS genres)) (PP (IN of) (NP (NN music)))) (VP (VBD did) (NP (DT those) (NNS genres)) (VP (VB emerge) (SBAR (WHADVP (WRB where)) (S (NP (NNS drums)) (VP (VBP are) (ADJP (JJ important)))))))) (. ?)))",
        "mask_entity": "From which genres of music did those genres emerge where drums are important?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4778",
        "question": "Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spider-Man:_Edge_of_Time> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/PlayStation_2> <http://dbpedia.org/ontology/successor> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:developer) dbr:Spider-Man:_Edge_of_Time) (JOIN (R dbo:successor) dbr:PlayStation_2))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which developer of the Spider-Man: Edge of Time",
                    "start": 0,
                    "end": 47
                },
                {
                    "description": "is the successor of PlayStation 2",
                    "start": 48,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN developer)) (PP (IN of) (NP (DT the) (NNP Spider-Man)))) (: :) (S (NP (NP (NNP Edge)) (PP (IN of) (NP (NNP Time)))) (VP (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP PlayStation) (CD 2)))))) (. ?)))",
        "mask_entity": "Which developer of  [ENT] is the  successor of [ENT] ?",
        "entity": [
            "the Spider-Man: Edge of Time",
            "PlayStation 2"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4509",
        "question": "Who is the appointer of Earl B. Ruth ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Earl_B._Ruth> <http://dbpedia.org/property/appointer> ?uri } ",
        "SExpr": "(JOIN (R dbp:appointer) dbr:Earl_B._Ruth)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN appointer)) (PP (IN of) (NP (NNP Earl) (NNP B.) (NNP Ruth)))))) (. ?)))",
        "mask_entity": "Who is the appointer of [ENT] ?",
        "entity": [
            "Earl B. Ruth"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1294",
        "question": "What is the constituency of the leader of Labour Party (Norway)?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Labour_Party_(Norway)> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/property/constituency> ?uri  . }",
        "SExpr": "(JOIN (R dbp:constituency) (JOIN (R dbp:leader) dbr:Labour_Party_(Norway))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the constituency of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the leader of Labour Party (Norway)",
                                "start": 28,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN constituency)) (PP (IN of) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NP (NNP Labour) (NNP Party)) (VP (-LRB- () (NP (NNP Norway) (-RRB- ))))))))))) (. ?)))",
        "mask_entity": "What is the constituency of the leader of [ENT] ([ENT])?",
        "entity": [
            "Labour Party",
            "Norway"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1809",
        "question": "Name the office holder who has a child named lori Black and Harvard Westlake school as one of the educational institute ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:children dbr:Lori_Black) (JOIN dbo:almaMater dbr:Harvard-Westlake_School)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "who has a child named lori Black",
                    "start": 23,
                    "end": 55
                },
                {
                    "description": "and Harvard Westlake school as one of the educational institute",
                    "start": 56,
                    "end": 119
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (NP (DT a) (NN child)) (VP (VBN named) (S (NP (NNP lori) (NNP Black))))) (CC and) (NP (NNP Harvard) (NNP Westlake) (NN school))) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ educational) (NN institute)))))))))) (. ?)))",
        "mask_entity": "Name the office holder who has a child named [ENT] and [ENT] as one of the educational institute ?",
        "entity": [
            "lori Black",
            "Harvard Westlake school"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "791",
        "question": "To which educational institutes is Samuel Isham associated to?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samuel_Isham> <http://dbpedia.org/property/education> ?uri } ",
        "SExpr": "(JOIN (R dbp:education) dbr:Samuel_Isham)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (JJ educational) (NNS institutes)) (VP (VBZ is) (NP (NP (NNP Samuel) (NNP Isham)) (VP (VBN associated) (PP (IN to)))))) (. ?)))",
        "mask_entity": "To which educational institutes is [ENT] associated to?",
        "entity": [
            "Samuel Isham"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "792",
        "question": "Give me a count of mammals whose family is Canidae?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Canidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
        "SExpr": "(AND dbo:Mammal (JOIN dbo:family dbr:Canidae))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a count of mammals",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "whose family is Canidae",
                    "start": 27,
                    "end": 50
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NP (NNS mammals)) (SBAR (WHNP (WP$ whose) (NN family)) (S (VP (VBZ is) (NP (NNP Canidae))))))))) (. ?)))",
        "mask_entity": "Give me a count of mammals whose family is [ENT]?",
        "entity": [
            "Canidae"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4114",
        "question": "Which band produced the album Aida?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Aida_(musical)> . ?x <http://dbpedia.org/ontology/musicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
        "SExpr": "(JOIN (R dbo:musicalArtist) (AND dbo:MusicalWork (JOIN dbp:album dbr:Aida_(musical)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which band",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "produced [IQ1]",
                    "start": 11,
                    "end": 34,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the album Aida",
                                "start": 20,
                                "end": 34
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN band)) (SQ (VP (VBD produced) (NP (DT the) (NN album)) (NP (NNP Aida)))) (. ?)))",
        "mask_entity": "Which band produced the album [ENT]?",
        "entity": [
            "Aida"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1855",
        "question": "Name the champion of National League ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/National_League> <http://dbpedia.org/property/champion> ?uri } ",
        "SExpr": "(JOIN (R dbp:champion) dbr:National_League)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN champion)) (PP (IN of) (NP (NNP National) (NNP League))))) (. ?)))",
        "mask_entity": "Name the champion of [ENT] ?",
        "entity": [
            "National League"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4757",
        "question": "Which European sea has Oulu as one of the shore city ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(AND dbo:Sea (AND (JOIN dbo:location dbr:Europe) (JOIN dbp:cities dbr:Oulu)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which European sea",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "has Oulu as one of the shore city",
                    "start": 19,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ European) (NN sea)) (SQ (VBZ has) (NP (NNP Oulu)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN shore) (NN city)))))) (. ?)))",
        "mask_entity": "Which [ENT] sea has [ENT] as [ENT] of the shore city ?",
        "entity": [
            "European",
            "Oulu",
            "one"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1980",
        "question": "Name the team Ramiro Pea played for, which was also the first team of Steve Ontiveros?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Ontiveros_(infielder)> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Ramiro_Pe\u00f1a> <http://dbpedia.org/ontology/team> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:debutteam) dbr:Steve_Ontiveros_(infielder)) (JOIN (R dbo:team) dbr:Ramiro_Pe\u00f1a))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the team",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "Ramiro Pea played for,",
                    "start": 14,
                    "end": 36
                },
                {
                    "description": "which was also the first team of Steve Ontiveros",
                    "start": 37,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NN Name)) (NP (NP (DT the) (NN team)) (NP (NNP Ramiro) (NNP Pea)))) (VP (VP (VBD played) (PP (IN for))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (JJ first) (NN team)) (PP (IN of) (NP (NNP Steve) (NNP Ontiveros)))))))) (. ?)))",
        "mask_entity": "Name the team [ENT] played for, which was also the [ENT] team of [ENT]?",
        "entity": [
            "Ramiro Pea",
            "first",
            "Steve Ontiveros"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3233",
        "question": "List the total number of awards of the musicals who have won Tony Award?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Tony_Award> . ?x <http://dbpedia.org/property/awards> ?uri }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN dbp:awards dbr:Tony_Award)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the total number of awards of [IQ1]",
                    "start": 0,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the musicals",
                                "start": 35,
                                "end": 47
                            },
                            {
                                "description": "who have won Tony Award",
                                "start": 48,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS awards)) (PP (IN of) (NP (NP (DT the) (NNS musicals)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN won) (NP (NNP Tony) (NNP Award)))))))))))) (. ?)))",
        "mask_entity": "List the total number of awards of the musicals who have won [ENT]?",
        "entity": [
            "Tony Award"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3908",
        "question": "What is the debut team of people born in Vargas?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
        "SExpr": "(JOIN (R dbp:debutteam) (JOIN dbo:birthPlace dbr:Vargas_(state))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the debut team of [IQ1]",
                    "start": 0,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 26,
                                "end": 32
                            },
                            {
                                "description": "born in Vargas",
                                "start": 33,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NP (NNS people)) (VP (VBN born) (PP (IN in) (NP (NNP Vargas))))))))) (. ?)))",
        "mask_entity": "What is the debut team of people born in [ENT]?",
        "entity": [
            "Vargas"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4984",
        "question": "What is the product of the BBC Multimedia and is the theme of Visions, the convention?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/Visions_(convention)> <http://dbpedia.org/property/genre> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:product) dbr:BBC_Multimedia) (JOIN (R dbp:genre) dbr:Visions_(convention)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the product of the BBC Multimedia",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "and is the theme of Visions, the convention",
                    "start": 42,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (SQ (VP (SQ (VP (VBZ is) (NP (NP (DT the) (NN product)) (PP (IN of) (NP (DT the) (NNP BBC) (NNP Multimedia)))))))))) (CC and) (SINV (VP (VBZ is)) (NP (NP (DT the) (NN theme)) (PP (IN of) (NP (NP (NNPS Visions)) (, ,) (NP (DT the) (NN convention)))))) (. ?)))",
        "mask_entity": "What is the product of the [ENT] Multimedia and is the theme of [ENT], the convention?",
        "entity": [
            "BBC",
            "Visions"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3328",
        "question": "Does the Jordan River start in the Golan Heights?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Golan_Heights> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP Jordan) (NNP River)) (VP (VB start) (PP (IN in) (NP (DT the) (NNP Golan) (NNPS Heights)))) (. ?)))",
        "mask_entity": "Does [ENT] start in [ENT]?",
        "entity": [
            "the Jordan River",
            "the Golan Heights"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1530",
        "question": "Count the awards received by the ones who fought the battle of france?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_France> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN dbo:battle dbr:Battle_of_France)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the awards",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "received by [IQ1]",
                    "start": 17,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 29,
                                "end": 37
                            },
                            {
                                "description": "who fought the battle of france",
                                "start": 38,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS awards)) (VP (VBN received) (PP (IN by) (NP (NP (DT the) (NNS ones)) (SBAR (WHNP (WP who)) (S (VP (VBD fought) (NP (NP (DT the) (NN battle)) (PP (IN of) (NP (NNP france)))))))))))) (. ?)))",
        "mask_entity": "Count the awards received by the ones who fought the battle of france?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1410",
        "question": "List the military branch of  Henry Hyde ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Hyde> <http://dbpedia.org/ontology/militaryBranch> ?uri } ",
        "SExpr": "(JOIN (R dbo:militaryBranch) dbr:Henry_Hyde)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (NNP Henry) (NNP Hyde))))) (. ?)))",
        "mask_entity": "List the military branch of  [ENT] ?",
        "entity": [
            "Henry Hyde"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4294",
        "question": "What is the ethnicity of the Maike Evers and state of origin of the Theodor Hillenhinrichs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Theodor_Hillenhinrichs> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:ethnicity) dbr:Maike_Evers) (JOIN (R dbo:stateOfOrigin) dbr:Theodor_Hillenhinrichs))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the ethnicity of the Maike Evers",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and state of origin of the Theodor Hillenhinrichs",
                    "start": 41,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN ethnicity)) (PP (IN of) (NP (NP (DT the) (NNP Maike) (NNP Evers)) (CC and) (NP (NP (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (DT the) (NNP Theodor) (NNP Hillenhinrichs))))))))))) (. ?)))",
        "mask_entity": "What is the ethnicity of [ENT] and state of origin of [ENT] ?",
        "entity": [
            "the Maike Evers",
            "the Theodor Hillenhinrichs"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4648",
        "question": "How many people play for the Dallas Cowboys?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . }",
        "SExpr": "(JOIN dbo:team dbr:Dallas_Cowboys)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP play) (PP (IN for) (NP (DT the) (NNP Dallas) (NNPS Cowboys))))) (. ?)))",
        "mask_entity": "How many people play for [ENT]?",
        "entity": [
            "the Dallas Cowboys"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "83",
        "question": "Was Reza Amrollahi born in Iran?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Reza_Amrollahi> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Iran> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Reza) (NNP Amrollahi)) (VP (VBN born) (PP (IN in) (NP (NNP Iran)))) (. ?)))",
        "mask_entity": "Was [ENT] born in [ENT]?",
        "entity": [
            "Reza Amrollahi",
            "Iran"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "868",
        "question": "What is the country whose administrative centre is Hagta, Guam?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Hag\u00e5t\u00f1a,_Guam>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbo:capital dbr:Hag\u00e5t\u00f1a,_Guam))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the country",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose administrative centre is Hagta, Guam",
                    "start": 20,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WP$ whose) (JJ administrative) (NN centre)) (S (VP (VBZ is) (NP (NP (NNP Hagta)) (, ,) (NP (NNP Guam))))))))) (. ?)))",
        "mask_entity": "What is the country whose administrative centre is [ENT], [ENT]?",
        "entity": [
            "Hagta",
            "Guam"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2350",
        "question": "Which sports by Polytechnic University of the Philippines Taguig is the discipline of The Chess Monthly ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Chess_Monthly> <http://dbpedia.org/property/discipline> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:discipline) dbr:The_Chess_Monthly) (JOIN (R dbo:sport) dbr:Polytechnic_University_of_the_Philippines_Taguig))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sports by Polytechnic University of the Philippines Taguig",
                    "start": 0,
                    "end": 64
                },
                {
                    "description": "is the discipline of The Chess Monthly",
                    "start": 65,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NNS sports)) (PP (IN by) (NP (NP (NNP Polytechnic) (NNP University)) (PP (IN of) (NP (DT the) (NNPS Philippines) (NNP Taguig)))))) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN discipline)) (PP (IN of) (NP (DT The) (NNP Chess) (NNP Monthly))))) (. ?)))",
        "mask_entity": "Which sports by [ENT] is the discipline of [ENT] ?",
        "entity": [
            "Polytechnic University of the Philippines Taguig",
            "The Chess Monthly"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "20",
        "question": "Which source country of SamurAbsheron channel is the birth place of Anar Salmanov ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri. <http://dbpedia.org/resource/Anar_Salmanov> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:sourceCountry) dbr:Samur\u2013Absheron_channel) (JOIN (R dbp:placeOfBirth) dbr:Anar_Salmanov))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which source country of SamurAbsheron channel",
                    "start": 0,
                    "end": 45
                },
                {
                    "description": "is the birth place of Anar Salmanov",
                    "start": 46,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN source) (NN country)) (PP (IN of) (NP (NNP SamurAbsheron) (NN channel)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NNP Anar) (NNP Salmanov)))))) (. ?)))",
        "mask_entity": "Which source country of [ENT] channel is the birth place of [ENT] ?",
        "entity": [
            "SamurAbsheron",
            "Anar Salmanov"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3424",
        "question": "List the resting place of the people who served in Norwalk Trainband.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/Norwalk_Trainband> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:restingplace) (AND dbo:Person (JOIN dbo:militaryUnit dbr:Norwalk_Trainband))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the resting place of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 26,
                                "end": 36
                            },
                            {
                                "description": "who served in Norwalk Trainband",
                                "start": 37,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD served) (PP (IN in) (NP (NNP Norwalk) (NNP Trainband)))))))))) (. .)))",
        "mask_entity": "List the resting place of the people who served in [ENT].",
        "entity": [
            "Norwalk Trainband"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2795",
        "question": "Who was the designer of john madden Football '92 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Madden_Football_'92> <http://dbpedia.org/property/designer> ?uri } ",
        "SExpr": "(JOIN (R dbp:designer) dbr:John_Madden_Football_'92)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN designer)) (PP (IN of) (NP (NP (NNP john) (NNP madden) (NNP Football) (POS ')) (CD 92))))) (. ?)))",
        "mask_entity": "Who was the designer of [ENT] ?",
        "entity": [
            "john madden Football '92"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4572",
        "question": "Give me all magazines whose editors live in Chicago?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Chicago> . ?uri <http://dbpedia.org/property/editor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbp:editor (JOIN dbo:hometown dbr:Chicago))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me all magazines",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose editors [IQ1]",
                    "start": 22,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "live in Chicago",
                                "start": 36,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS magazines)) (SBAR (WHNP (WP$ whose) (NNS editors)) (S (VP (VBP live) (PP (IN in) (NP (NNP Chicago)))))))) (. ?)))",
        "mask_entity": "Give me all magazines whose editors live in [ENT]?",
        "entity": [
            "Chicago"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1562",
        "question": "Which company's cars are assembled in Iran?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Iran> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbp:parentCompany) (AND dbo:Automobile (JOIN dbp:assembly dbr:Iran))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company's",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "[IQ1]",
                    "start": 16,
                    "end": 42,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "cars",
                                "start": 16,
                                "end": 20
                            },
                            {
                                "description": "are assembled in Iran",
                                "start": 21,
                                "end": 42
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN company) (POS 's)) (NNS cars)) (VP (VBP are) (VP (VBN assembled) (PP (IN in) (NP (NNP Iran))))) (. ?)))",
        "mask_entity": "Which company's cars are assembled in [ENT]?",
        "entity": [
            "Iran"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3093",
        "question": "Which are the television show which have been created by Donald Wilson?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Donald_Wilson_(writer_and_producer)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:creator dbr:Donald_Wilson_(writer_and_producer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which are the television show",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "which have been created by Donald Wilson",
                    "start": 30,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBP are) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN created) (PP (IN by) (NP (NNP Donald) (NNP Wilson))))))))))) (. ?)))",
        "mask_entity": "Which are the television show which have been created by [ENT]?",
        "entity": [
            "Donald Wilson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3155",
        "question": "Count all the Colonels?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)>  . }",
        "SExpr": "(JOIN dbp:rank dbr:Colonel_(United_States))",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (PDT all) (DT the) (NNPS Colonels))) (. ?)))",
        "mask_entity": "Count all the Colonels?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "973",
        "question": "Does the croton river flow into the hudson?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hudson_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Croton_River> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NN croton) (NN river)) (VP (VB flow) (PP (IN into) (NP (DT the) (NN hudson)))) (. ?)))",
        "mask_entity": "Does the croton river flow into the hudson?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1710",
        "question": "What sports can be played at universities in Metro Manila?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Metro_Manila> . ?x <http://dbpedia.org/property/athletics> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(JOIN (R dbp:athletics) (AND dbo:University (JOIN dbp:state dbr:Metro_Manila))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What sports",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "can be played at [IQ1]",
                    "start": 12,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "universities",
                                "start": 29,
                                "end": 41
                            },
                            {
                                "description": "in Metro Manila",
                                "start": 42,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VP (MD can) (VP (VB be) (VP (VBN played) (PP (IN at) (NP (NP (NNS universities)) (PP (IN in) (NP (NNP Metro) (NNP Manila))))))))) (. ?)))",
        "mask_entity": "What sports can be played at universities in [ENT]?",
        "entity": [
            "Metro Manila"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3201",
        "question": "What team has Sam Keller and Jim McMilin played for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Keller> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Jim_McMillin> <http://dbpedia.org/ontology/team> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:formerTeam) dbr:Sam_Keller) (JOIN (R dbo:team) dbr:Jim_McMillin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What team",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "has Sam Keller and Jim McMilin played for",
                    "start": 10,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN team)) (SQ (VP (VBZ has) (S (NP (NP (NNP Sam) (NNP Keller)) (CC and) (NP (NNP Jim) (NNP McMilin))) (VP (VBD played) (PP (IN for)))))) (. ?)))",
        "mask_entity": "What team has [ENT] and [ENT] played for?",
        "entity": [
            "Sam Keller",
            "Jim McMilin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4371",
        "question": "What has  location as Ontario?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Ontario>  . }",
        "SExpr": "(JOIN dbo:location dbr:Ontario)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ has) (NP (NP (NN location)) (PP (IN as) (NP (NNP Ontario)))))) (. ?)))",
        "mask_entity": "What has  location as [ENT]?",
        "entity": [
            "Ontario"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4819",
        "question": "Where was Juno I launched from ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri } ",
        "SExpr": "(JOIN (R dbo:launchSite) dbr:Juno_I)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Juno)) (NP (PRP I)) (VP (VBD launched) (PP (IN from)))) (. ?)))",
        "mask_entity": "Where was [ENT] I launched from ?",
        "entity": [
            "Juno"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1098",
        "question": "In which sects was the aristocrat venerated, whose parent is Thelred the Unready?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/\u00c6thelred_the_Unready> . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(JOIN (R dbp:veneratedIn) (AND dbo:Royalty (JOIN dbo:parent dbr:\u00c6thelred_the_Unready))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which sects was the aristocrat venerated, [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose parent is Thelred the Unready",
                                "start": 45,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS sects)) (VP (VBD was) (NP (NP (NP (DT the) (NN aristocrat)) (VP (VBN venerated))) (, ,) (SBAR (WHNP (WP$ whose) (NN parent)) (S (VP (VBZ is) (VP (VBN Thelred) (NP (DT the) (NNP Unready))))))))) (. ?)))",
        "mask_entity": "In which sects was the aristocrat venerated, whose parent is [ENT]?",
        "entity": [
            "Thelred the Unready"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4161",
        "question": "Who won the ohio house of representatives, 2010?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> ?uri } ",
        "SExpr": "(JOIN (R dbp:incumbent) dbr:United_States_House_of_Representatives_elections_in_Ohio,_2010)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD won) (NP (NP (DT the) (NNP ohio) (NN house)) (PP (IN of) (NP (NNS representatives)))) (, ,) (NP (CD 2010)))) (. ?)))",
        "mask_entity": "Who won the ohio house of representatives, [ENT]?",
        "entity": [
            "2010"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2844",
        "question": "Name the common distributing label of the Chinga Chang Records and StandBy Records ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chinga_Chang_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri. <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:distributingLabel) dbr:Chinga_Chang_Records) (JOIN (R dbo:distributingLabel) dbr:StandBy_Records))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common distributing label of the Chinga Chang Records and StandBy Records",
                    "start": 0,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN distributing) (NN label)) (PP (IN of) (NP (NP (DT the) (NML (NNP Chinga) (NNP Chang)) (NNPS Records)) (CC and) (NP (NNP StandBy) (NNPS Records)))))) (. ?)))",
        "mask_entity": "Name the common distributing label of [ENT] ?",
        "entity": [
            "the Chinga Chang Records and StandBy Records"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "886",
        "question": "What is the draft team of Gene Conley ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gene_Conley> <http://dbpedia.org/property/draftTeam> ?uri } ",
        "SExpr": "(JOIN (R dbp:draftTeam) dbr:Gene_Conley)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NNP Gene) (NNP Conley)))))) (. ?)))",
        "mask_entity": "What is the draft team of [ENT] ?",
        "entity": [
            "Gene Conley"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4931",
        "question": "What was a common first team at the 1967 Mexican Grand Prix and 1971 US one?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/1971_United_States_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:firstTeam) dbr:1967_Mexican_Grand_Prix) (JOIN (R dbp:firstTeam) dbr:1971_United_States_Grand_Prix))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What was a common first team at the 1967 Mexican Grand Prix and 1971 US one",
                    "start": 0,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (NP (NP (DT a) (JJ common) (JJ first) (NN team)) (PP (IN at) (NP (DT the) (CD 1967) (NML (NML (NNP Mexican) (NNP Grand) (NNP Prix)) (CC and) (NML (CD 1971) (NNP US))) (CD one)))))) (. ?)))",
        "mask_entity": "What was a common [ENT] team at the [ENT] [ENT] and [ENT] [ENT] one?",
        "entity": [
            "first",
            "1967",
            "Mexican Grand Prix",
            "1971",
            "US"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3678",
        "question": "What are some common ingredients used in Swedish dishes?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/ontology/ingredient> ?uri  . }",
        "SExpr": "(JOIN (R dbo:ingredient) (JOIN dbo:country dbr:Sweden)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some common ingredients",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "used in [IQ1]",
                    "start": 33,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Swedish dishes",
                                "start": 41,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ common) (NNS ingredients)) (VP (VBN used) (PP (IN in) (NP (JJ Swedish) (NNS dishes))))))) (. ?)))",
        "mask_entity": "What are some common ingredients used in [ENT] dishes?",
        "entity": [
            "Swedish"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4580",
        "question": "Where did Rheinmetall MG 60 originated ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rheinmetall_MG_60> <http://dbpedia.org/ontology/origin> ?uri } ",
        "SExpr": "(JOIN (R dbo:origin) dbr:Rheinmetall_MG_60)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Rheinmetall) (NNP MG)) (NP (CD 60)) (VP (VBN originated))) (. ?)))",
        "mask_entity": "Where did [ENT] originated ?",
        "entity": [
            "Rheinmetall MG 60"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3566",
        "question": "Did nokia 215 has the series 30+ OS?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Nokia_215> <http://dbpedia.org/property/os> <http://dbpedia.org/resource/Series_30+> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VBD Did) (SBAR (S (NP (NNP nokia) (CD 215)) (VP (VBZ has) (NP (DT the) (NN series) (CD 30)) (NP (SYM +) (NNP OS)))))) (. ?)))",
        "mask_entity": "Did nokia [ENT] has the series [ENT]?",
        "entity": [
            "215",
            "30+ OS"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4401",
        "question": "Gregg Toland cinematographed how many things?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland>  . }",
        "SExpr": "(JOIN dbo:cinematography dbr:Gregg_Toland)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Gregg) (NNP Toland)) (VP (VBD cinematographed) (SBAR (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)) (. ?)))))",
        "mask_entity": "[ENT] cinematographed how many things?",
        "entity": [
            "Gregg Toland"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "515",
        "question": "What type of government is elected in Kumta?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/ontology/governmentType> ?uri } ",
        "SExpr": "(JOIN (R dbo:governmentType) dbr:Kumta)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NN government)))) (SQ (VP (VBZ is) (VP (VBN elected) (PP (IN in) (NP (NNP Kumta)))))) (. ?)))",
        "mask_entity": "What type of government is elected in [ENT]?",
        "entity": [
            "Kumta"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4620",
        "question": "List the birth city of the politicians of Democratic Party.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Democratic_Party_(United_States)> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "SExpr": "(JOIN (R dbo:birthPlace) (AND dbo:Politician (JOIN dbo:party dbr:Democratic_Party_(United_States)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the birth city of [IQ1]",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the politicians of Democratic Party",
                                "start": 23,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN birth) (NN city)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (PP (IN of) (NP (NNP Democratic) (NNP Party))))))) (. .)))",
        "mask_entity": "List the birth city of the politicians of [ENT].",
        "entity": [
            "Democratic Party"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "737",
        "question": "Was Tommy Tucker's Tooth animated by Walt Disney?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/ontology/animator> <http://dbpedia.org/resource/Walt_Disney> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (NNP Tommy) (NNP Tucker) (POS 's)) (NNP Tooth)) (VP (VBN animated) (PP (IN by) (NP (NNP Walt) (NNP Disney)))) (. ?)))",
        "mask_entity": "Was [ENT] Tooth animated by [ENT]?",
        "entity": [
            "Tommy Tucker's",
            "Walt Disney"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1453",
        "question": "What team does John McGeever play for, which also employed Ben Dreith at some time?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ben_Dreith> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/John_McGeever> <http://dbpedia.org/ontology/team> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:occupation) dbr:Ben_Dreith) (JOIN (R dbo:team) dbr:John_McGeever))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What team",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "does John McGeever play for,",
                    "start": 10,
                    "end": 38
                },
                {
                    "description": "which also employed Ben Dreith at some time",
                    "start": 39,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT What) (NN team)) (SQ (VBZ does) (NP (NNP John) (NNP McGeever)) (VP (VB play) (PP (IN for))))) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBD employed) (NP (NNP Ben) (NNP Dreith)) (PP (IN at) (NP (DT some) (NN time)))))) (. ?)))",
        "mask_entity": "What team does [ENT] play for, which also employed [ENT] at some time?",
        "entity": [
            "John McGeever",
            "Ben Dreith"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3971",
        "question": "Give me the total number of lines owned by owner of Mwtro-Noth Railroad ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Metro-North_Railroad> . ?x <http://dbpedia.org/property/owner> ?uri }",
        "SExpr": "(JOIN (R dbp:owner) (JOIN dbo:owner dbr:Metro-North_Railroad)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the total number of lines",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "owned by [IQ1]",
                    "start": 34,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "owner of Mwtro-Noth Railroad",
                                "start": 43,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS lines)) (VP (VBN owned) (PP (IN by) (NP (NP (NN owner)) (PP (IN of) (NP (NNP Mwtro-Noth) (NNP Railroad)))))))))) (. ?)))",
        "mask_entity": "Give me the total number of lines owned by owner of [ENT] ?",
        "entity": [
            "Mwtro-Noth Railroad"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4700",
        "question": "For which team do Guido Guerrini and Massimo Liverani currently play for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Guido_Guerrini> <http://dbpedia.org/property/currentTeam> ?uri. <http://dbpedia.org/resource/Massimo_Liverani> <http://dbpedia.org/property/currentTeam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:currentTeam) dbr:Guido_Guerrini) (JOIN (R dbp:currentTeam) dbr:Massimo_Liverani))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For which team",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "do Guido Guerrini and Massimo Liverani currently play for",
                    "start": 15,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBP do) (S (NP (NP (NNP Guido) (NNP Guerrini)) (CC and) (NP (NNP Massimo) (NNP Liverani))) (ADVP (RB currently)) (VP (VB play) (PP (IN for)))))) (. ?)))",
        "mask_entity": "For which team do [ENT] and [ENT] currently play for?",
        "entity": [
            "Guido Guerrini",
            "Massimo Liverani"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2506",
        "question": "What is the governing body of Fort Monroe ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Monroe> <http://dbpedia.org/property/governingBody> ?uri } ",
        "SExpr": "(JOIN (R dbp:governingBody) dbr:Fort_Monroe)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (NNP Fort) (NNP Monroe)))))) (. ?)))",
        "mask_entity": "What is the governing body of [ENT] ?",
        "entity": [
            "Fort Monroe"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2994",
        "question": "List the common sports played by Polytechnic University of the Philippines Bataan and Jamiatu Muslim Mindanao ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:sport) dbr:Polytechnic_University_of_the_Philippines_\u2013_Bataan) (JOIN (R dbo:athletics) dbr:Jamiatu_Muslim_Mindanao))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the common sports",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "played by Polytechnic University of the Philippines Bataan and Jamiatu Muslim Mindanao",
                    "start": 23,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ common) (NNS sports)) (VP (VBN played) (PP (IN by) (NP (NP (NNP Polytechnic) (NNP University)) (PP (IN of) (NP (NP (DT the) (NNPS Philippines) (NNP Bataan)) (CC and) (NP (NNP Jamiatu) (JJ Muslim) (NNP Mindanao))))))))) (. ?)))",
        "mask_entity": "List the common sports played by [ENT] and [ENT] ?",
        "entity": [
            "Polytechnic University of the Philippines Bataan",
            "Jamiatu Muslim Mindanao"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2126",
        "question": "How many television shows are broadcasted on Fox Broadcasting Company?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:channel dbr:Fox_Broadcasting_Company))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many television shows",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "are broadcasted on Fox Broadcasting Company",
                    "start": 26,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN television) (NNS shows)) (VP (VBP are) (VP (VBN broadcasted) (PP (IN on) (NP (NNP Fox) (NNP Broadcasting) (NNP Company)))))) (. ?)))",
        "mask_entity": "How many television shows are broadcasted on [ENT]?",
        "entity": [
            "Fox Broadcasting Company"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2926",
        "question": "What are some tv shows created by Simon Fuller?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:creator dbr:Simon_Fuller))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some tv shows",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "created by Simon Fuller",
                    "start": 23,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NN tv) (NNS shows)) (VP (VBN created) (PP (IN by) (NP (NNP Simon) (NNP Fuller))))))) (. ?)))",
        "mask_entity": "What are some tv shows created by [ENT]?",
        "entity": [
            "Simon Fuller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4745",
        "question": "What is the place of birth of the Michael Marder which is also the  place of death of the Tigran Petrosian",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Marder> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:placeOfBirth) dbr:Michael_Marder) (JOIN (R dbo:deathPlace) dbr:Tigran_Petrosian))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the place of birth of the Michael Marder",
                    "start": 0,
                    "end": 48
                },
                {
                    "description": "which is also the place of death of the Tigran Petrosian",
                    "start": 49,
                    "end": 105
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (DT the) (NNP Michael) (NNP Marder)))))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN death)) (PP (IN of) (NP (DT the) (NNP Tigran) (NNP Petrosian))))))))))))))",
        "mask_entity": "What is the place of birth of [ENT] which is also the  place of death of [ENT]",
        "entity": [
            "the Michael Marder",
            "the Tigran Petrosian"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "906",
        "question": "Who is married to Tony Ramo",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Tony_Romo>  . }",
        "SExpr": "(JOIN dbp:partner dbr:Tony_Romo)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBZ is) (VP (VBN married) (PP (IN to) (NP (NNP Tony) (NNP Ramo))))))))",
        "mask_entity": "Who is married to [ENT]",
        "entity": [
            "Tony Ramo"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3647",
        "question": "How many states are in the Mediterranean Basketball Association?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Mediterranean_Basketball_Association> <http://dbpedia.org/ontology/country> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbo:country) dbr:Mediterranean_Basketball_Association))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many states",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are in the Mediterranean Basketball Association",
                    "start": 16,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS states)) (VP (VBP are) (PP (IN in) (NP (DT the) (NML (NNP Mediterranean) (NNP Basketball)) (NNP Association))))) (. ?)))",
        "mask_entity": "How many states are in [ENT]?",
        "entity": [
            "the Mediterranean Basketball Association"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1030",
        "question": "What is the title of the Kakae and also the district of the Robert William Wilcox ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kakae> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Robert_William_Wilcox> <http://dbpedia.org/property/district> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:title) dbr:Kakae) (JOIN (R dbp:district) dbr:Robert_William_Wilcox))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the title of the Kakae",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "and also the district of the Robert William Wilcox",
                    "start": 31,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN title)) (PP (IN of) (NP (NP (DT the) (NNP Kakae)) (CC and) (ADVP (RB also)) (NP (NP (DT the) (NN district)) (PP (IN of) (NP (DT the) (NNP Robert) (NNP William) (NNP Wilcox))))))))) (. ?)))",
        "mask_entity": "What is the title of the [ENT] and also the district of [ENT] ?",
        "entity": [
            "Kakae",
            "the Robert William Wilcox"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2507",
        "question": "Who wrote the singles on the Main Course?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Main_Course> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
        "SExpr": "(JOIN (R dbp:writer) (AND dbo:Single (JOIN dbp:album dbr:Main_Course))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 40,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the singles",
                                "start": 10,
                                "end": 21
                            },
                            {
                                "description": "on the Main Course",
                                "start": 22,
                                "end": 40
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (DT the) (NNS singles)) (PP (IN on) (NP (DT the) (NNP Main) (NNP Course))))) (. ?)))",
        "mask_entity": "Who wrote the singles on [ENT]?",
        "entity": [
            "the Main Course"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2428",
        "question": "State the religion of the person known for People's Bank (Sri Lanka) ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/People's_Bank_(Sri_Lanka)> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:knownFor dbr:People's_Bank_(Sri_Lanka))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "State the religion of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 22,
                                "end": 32
                            },
                            {
                                "description": "known for People's Bank (Sri Lanka)",
                                "start": 33,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB State) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN person)) (VP (VBN known) (PP (IN for) (NP (NP (NNP People) (POS 's)) (NNP Bank) (-LRB- () (NNP Sri) (NNP Lanka) (-RRB- ))))))))) (. ?)))",
        "mask_entity": "State the religion of the person known for [ENT] ([ENT]) ?",
        "entity": [
            "People's Bank",
            "Sri Lanka"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "947",
        "question": "To which US states does the roads belong which meet at the East Whiteland Township in Pennsylvania?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/East_Whiteland_Township,_Chester_County,_Pennsylvania> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
        "SExpr": "(JOIN (R dbo:state) (AND dbo:Road (JOIN dbo:routeJunction dbr:East_Whiteland_Township,_Chester_County,_Pennsylvania))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which US states",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "does the roads belong [IQ1]",
                    "start": 19,
                    "end": 98,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which meet at the East Whiteland Township in Pennsylvania",
                                "start": 41,
                                "end": 98
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NNP US) (NNS states)) (VP (VBZ does) (NP (NP (DT the) (NNS roads)) (VP (VB belong) (SBAR (WHNP (WDT which)) (S (VP (VBP meet) (PP (IN at) (NP (NP (DT the) (NML (NNP East) (NNP Whiteland)) (NNP Township)) (PP (IN in) (NP (NNP Pennsylvania)))))))))))) (. ?)))",
        "mask_entity": "To which [ENT] states does the roads belong which meet at [ENT] in [ENT]?",
        "entity": [
            "US",
            "the East Whiteland Township",
            "Pennsylvania"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3806",
        "question": "In how many places can I find people who were the architects of the Dundas Castle?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Dundas_Castle_(Roscoe,_New_York)> <http://dbpedia.org/property/architecture> ?x . ?x <http://dbpedia.org/property/region> ?uri  . }",
        "SExpr": "(JOIN (R dbp:region) (JOIN (R dbp:architecture) dbr:Dundas_Castle_(Roscoe,_New_York))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many places",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "can I find [IQ1]",
                    "start": 19,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 30,
                                "end": 36
                            },
                            {
                                "description": "who were the architects of the Dundas Castle",
                                "start": 37,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (MD can) (NP (PRP I)) (VP (VB find) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD were) (NP (NP (DT the) (NNS architects)) (PP (IN of) (NP (DT the) (NNP Dundas) (NNP Castle)))))))))) (. ?))))",
        "mask_entity": "In how many places can I find people who were the architects of [ENT]?",
        "entity": [
            "the Dundas Castle"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4754",
        "question": "List all the children of Barbara Bush?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bush> <http://dbpedia.org/property/children> ?uri } ",
        "SExpr": "(JOIN (R dbp:children) dbr:Barbara_Bush)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS children)) (PP (IN of) (NP (NNP Barbara) (NNP Bush))))) (. ?)))",
        "mask_entity": "List all the children of [ENT]?",
        "entity": [
            "Barbara Bush"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "715",
        "question": "Name the notable work by Russell T Davis which is also the series of Doctor Who:Destiny of the Doctors ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri. <http://dbpedia.org/resource/Doctor_Who:_Destiny_of_the_Doctors> <http://dbpedia.org/ontology/series> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:notableworks) dbr:Russell_T_Davies) (JOIN (R dbo:series) dbr:Doctor_Who:_Destiny_of_the_Doctors))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the notable work by Russell T Davis",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "which is also the series of Doctor Who:Destiny of the Doctors",
                    "start": 41,
                    "end": 102
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (JJ notable) (NN work)) (PP (IN by) (NP (NNP Russell) (NNP T) (NNP Davis)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (NP (DT the) (NN series)) (PP (IN of) (NP (NNP Doctor) (WP Who)))) (: :) (NP (NP (NNP Destiny)) (PP (IN of) (NP (DT the) (NNPS Doctors)))))))))) (. ?)))",
        "mask_entity": "Name the notable work by [ENT] which is also the series of Doctor Who:Destiny of the Doctors ?",
        "entity": [
            "Russell T Davis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4055",
        "question": "Who oarent organization of Get TV is also the label provider of I Pray on CHristmas ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:label) dbr:I_Pray_on_Christmas) (JOIN (R dbo:parentOrganisation) dbr:GetTV))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who oarent organization of Get TV",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "is also the label provider of I Pray on CHristmas",
                    "start": 34,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WP Who) (JJ oarent) (NN organization)) (PP (IN of) (NP (VB Get) (NN TV)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN label) (NN provider)) (PP (IN of) (NP (PRP I)))) (VP (VBP Pray) (PP (IN on) (NP (NNP CHristmas))))) (. ?)))",
        "mask_entity": "Who oarent organization of [ENT] is also the label provider of I Pray on CHristmas ?",
        "entity": [
            "Get TV"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "686",
        "question": "What company made facebook messenger and is the platform where Words of Gold can be played?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Words_of_Gold> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/Facebook_Messenger> <http://dbpedia.org/property/developer> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN (R dbo:computingPlatform) dbr:Words_of_Gold) (JOIN (R dbp:developer) dbr:Facebook_Messenger)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What company",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "made facebook messenger",
                    "start": 13,
                    "end": 36
                },
                {
                    "description": "and is the platform",
                    "start": 37,
                    "end": 56
                },
                {
                    "description": "where Words of Gold can be played",
                    "start": 57,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN company)) (S (VP (VP (VBD made) (NP (NN facebook) (NN messenger))) (CC and) (VP (VBZ is) (NP (NP (DT the) (NN platform)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNPS Words)) (PP (IN of) (NP (NNP Gold)))) (VP (MD can) (VP (VB be) (VP (VBN played)))))))))) (. ?)))",
        "mask_entity": "What company made facebook messenger and is the platform where Words of Gold can be played?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "703",
        "question": "Who wrote the frost king?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Frost_King> <http://dbpedia.org/ontology/author> ?uri } ",
        "SExpr": "(JOIN (R dbo:author) dbr:The_Frost_King)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (DT the) (NN frost) (NN king)))) (. ?)))",
        "mask_entity": "Who wrote the frost king?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3341",
        "question": "Which company had built the rockets launched at the Cape Canaveral Air Force Station Space Launch Complex 17?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Space_Launch_Complex_17> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:manufacturer) (JOIN dbo:launchSite dbr:Cape_Canaveral_Air_Force_Station_Space_Launch_Complex_17)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "had built the rockets launched at [IQ1]",
                    "start": 14,
                    "end": 108,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Cape Canaveral Air Force Station Space Launch Complex 17",
                                "start": 48,
                                "end": 108
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBD had) (VP (VBN built) (NP (NP (DT the) (NNS rockets)) (VP (VBN launched) (PP (IN at) (NP (DT the) (NML (NML (NNP Cape) (NNP Canaveral)) (NNP Air) (NNP Force)) (NNP Station) (NNP Space) (NNP Launch) (NNP Complex) (CD 17)))))))) (. ?)))",
        "mask_entity": "Which company had built the rockets launched at [ENT] Space Launch Complex [ENT]?",
        "entity": [
            "the Cape Canaveral Air Force Station",
            "17"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2353",
        "question": "Name a royalty whose one of the child is Augustus  and is associated with Publius Servilius Vatia Isauricus?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus> . ?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)>  . }",
        "SExpr": "(AND (JOIN dbp:children dbr:Augustus) (JOIN dbo:associate dbr:Publius_Servilius_Vatia_Isauricus_(consul_48_BC)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a royalty",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose one of the child is Augustus",
                    "start": 15,
                    "end": 49
                },
                {
                    "description": "and is associated with Publius Servilius Vatia Isauricus",
                    "start": 50,
                    "end": 106
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN royalty)) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN child)))) (VP (VP (VBZ is) (NP (NNP Augustus))) (CC and) (VP (VBZ is) (VP (VBN associated) (PP (IN with) (NP (NNP Publius) (NNP Servilius) (NNP Vatia) (NNP Isauricus)))))))))) (. ?)))",
        "mask_entity": "Name a royalty whose [ENT] of the child is [ENT]  and is associated with [ENT]?",
        "entity": [
            "one",
            "Augustus",
            "Publius Servilius Vatia Isauricus"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2257",
        "question": "Who trained the wrestlers who are billed in Wisconsin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}",
        "SExpr": "(JOIN (R dbo:trainer) (AND dbo:Wrestler (JOIN dbo:billed dbr:Wisconsin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who trained [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the wrestlers",
                                "start": 12,
                                "end": 25
                            },
                            {
                                "description": "who are billed in Wisconsin",
                                "start": 26,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD trained) (NP (NP (DT the) (NNS wrestlers)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN billed) (PP (IN in) (NP (NNP Wisconsin)))))))))) (. ?)))",
        "mask_entity": "Who trained the wrestlers who are billed in [ENT]?",
        "entity": [
            "Wisconsin"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3551",
        "question": "Which currency of Republic of Montenegro is also the currency of the French Southern and Antarctic Lands ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)> <http://dbpedia.org/property/currency> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:currency) dbr:French_Southern_and_Antarctic_Lands) (JOIN (R dbp:currency) dbr:Republic_of_Montenegro_(1992\u20132006)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which currency of Republic of Montenegro",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is also the currency of the French Southern and Antarctic Lands",
                    "start": 41,
                    "end": 104
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN currency)) (PP (IN of) (NP (NP (NNP Republic)) (PP (IN of) (NP (NNP Montenegro)))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN currency)) (PP (IN of) (NP (NP (DT the) (NNP French) (NNP Southern)) (CC and) (NP (NNP Antarctic) (NNPS Lands)))))) (. ?)))",
        "mask_entity": "Which currency of [ENT] is also the currency of the [ENT] Southern and [ENT] ?",
        "entity": [
            "Republic of Montenegro",
            "French",
            "Antarctic Lands"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "473",
        "question": "Where are the movies directed by Faisal Aman Khan recorded?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Faisal_Aman_Khan> . ?x <http://dbpedia.org/property/recorded> ?uri  . }",
        "SExpr": "(JOIN (R dbp:recorded) (JOIN dbo:director dbr:Faisal_Aman_Khan)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where are [IQ1] recorded",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movies",
                                "start": 10,
                                "end": 20
                            },
                            {
                                "description": "directed by Faisal Aman Khan",
                                "start": 21,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NP (DT the) (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NNP Faisal) (NNP Aman) (NNP Khan))))) (VP (VBN recorded))) (. ?)))",
        "mask_entity": "Where are the movies directed by [ENT] recorded?",
        "entity": [
            "Faisal Aman Khan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "21",
        "question": "Where was the battle fought where 2nd Foreign Infantry Regiment participated  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2nd_Foreign_Infantry_Regiment> <http://dbpedia.org/ontology/battle> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(JOIN (R dbo:territory) (AND dbo:MilitaryConflict (JOIN (R dbo:battle) dbr:2nd_Foreign_Infantry_Regiment))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was the battle fought [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "where 2nd Foreign Infantry Regiment participated",
                                "start": 28,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN battle)) (VP (VBN fought) (SBAR (WHADVP (WRB where)) (S (NP (JJ 2nd) (NNP Foreign) (NNP Infantry) (NNP Regiment)) (VP (VBD participated)))))) (. ?)))",
        "mask_entity": "Where was the battle fought where [ENT] participated  ?",
        "entity": [
            "2nd Foreign Infantry Regiment"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2752",
        "question": "How many cities are around the sea in which the ionian sea flows?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ionian_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(JOIN (R dbp:cities) (AND dbo:Sea (JOIN (R dbo:outflow) dbr:Ionian_Sea))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are around [IQ1]",
                    "start": 16,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sea",
                                "start": 27,
                                "end": 34
                            },
                            {
                                "description": "in which the ionian sea flows",
                                "start": 35,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cities)) (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (DT the) (JJ ionian) (NN sea)) (VP (VBZ flows)))))))) (. ?)))",
        "mask_entity": "How many cities are around the sea in which the ionian sea flows?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "885",
        "question": "Which team did Bill Murphy and Jean Segura play for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bill_Murphy_(baseball)> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Jean_Segura> <http://dbpedia.org/ontology/team> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:debutTeam) dbr:Bill_Murphy_(baseball)) (JOIN (R dbo:team) dbr:Jean_Segura))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which team",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "did Bill Murphy and Jean Segura play for",
                    "start": 11,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD did) (NP (NP (NNP Bill) (NNP Murphy)) (CC and) (NP (NNP Jean) (NNP Segura))) (VP (VB play) (PP (IN for)))) (. ?)))",
        "mask_entity": "Which team did [ENT] and [ENT] play for?",
        "entity": [
            "Bill Murphy",
            "Jean Segura"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2448",
        "question": "What is the administrative headquarters of Pulau Ujong ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri } ",
        "SExpr": "(JOIN (R dbo:capital) dbr:Pulau_Ujong)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ administrative) (NN headquarters)) (PP (IN of) (NP (NNP Pulau) (NNP Ujong)))))) (. ?)))",
        "mask_entity": "What is the administrative headquarters of [ENT] ?",
        "entity": [
            "Pulau Ujong"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "917",
        "question": "What all is produced by companies in Douglas, Isle of Man?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Douglas,_Isle_of_Man> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:product) (AND dbo:Company (JOIN dbo:locationCity dbr:Douglas,_Isle_of_Man))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What all is produced by [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 24,
                                "end": 33
                            },
                            {
                                "description": "in Douglas, Isle of Man",
                                "start": 34,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (NP (DT all)) (VP (VBZ is) (VP (VBN produced) (PP (IN by) (NP (NP (NNS companies)) (PP (IN in) (NP (NP (NNP Douglas)) (, ,) (NP (NP (NNP Isle)) (PP (IN of) (NP (NNP Man))))))))))) (. ?)))",
        "mask_entity": "What all is produced by companies in [ENT]?",
        "entity": [
            "Douglas, Isle of Man"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3757",
        "question": "Miguel de Cervantes wrote the musical extended from which book?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "SExpr": "(JOIN (R dbo:basedOn) (AND dbo:Musical (JOIN dbo:author dbr:Miguel_de_Cervantes))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] extended from",
                    "start": 0,
                    "end": 19,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Miguel de Cervantes wrote the musical",
                                "start": 0,
                                "end": 37
                            }
                        ]
                    }
                },
                {
                    "description": "which book",
                    "start": 20,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Miguel) (NNP de) (NNP Cervantes)) (VP (VBD wrote) (NP (NP (DT the) (JJ musical)) (VP (VBN extended) (WHPP (IN from) (WHNP (WDT which) (NN book)))))) (. ?)))",
        "mask_entity": "[ENT] wrote the musical extended from which book?",
        "entity": [
            "Miguel de Cervantes"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3751",
        "question": "Which city amongst the one which belongs to Boundary Dam was the palce for Soccer Bowl '76 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soccer_Bowl_'76> <http://dbpedia.org/ontology/city> ?uri. <http://dbpedia.org/resource/Boundary_Dam> <http://dbpedia.org/property/owner> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:city) dbr:Soccer_Bowl_'76) (JOIN (R dbp:owner) dbr:Boundary_Dam))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "amongst the one which belongs to Boundary Dam",
                    "start": 11,
                    "end": 56
                },
                {
                    "description": "was the place for Soccer Bowl '76",
                    "start": 57,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WHNP (WDT Which) (NN city)) (PP (IN amongst) (NP (NP (DT the) (NN one)) (SBAR (WHNP (WDT which)) (S (VP (VBZ belongs) (PP (IN to) (NP (NNP Boundary) (NNP Dam))))))))) (SQ (VP (VBD was) (NP (NP (DT the) (NN palce)) (PP (IN for) (NP (NNP Soccer) (NNP Bowl)))))) ('' ')) (NP (CD 76)) (. ?)))",
        "mask_entity": "Which city amongst the [ENT] which belongs to [ENT] was the palce for [ENT][ENT] ?",
        "entity": [
            "one",
            "Boundary Dam",
            "Soccer Bowl '",
            "76"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2239",
        "question": "Which employer of Manu Cornet has alsoe written Google.by ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manu_Cornet> <http://dbpedia.org/property/employer> ?uri. <http://dbpedia.org/resource/Google.by> <http://dbpedia.org/ontology/author> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:employer) dbr:Manu_Cornet) (JOIN (R dbo:author) dbr:Google.by))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which employer of Manu Cornet",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "has alsoe written Google.by",
                    "start": 30,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN employer)) (PP (IN of) (NP (NNP Manu) (NNP Cornet)))) (SQ (VP (VBZ has) (ADVP (RB alsoe)) (VP (VBN written) (NP (NNP Google.by))))) (. ?)))",
        "mask_entity": "Which employer of [ENT] has alsoe written [ENT] ?",
        "entity": [
            "Manu Cornet",
            "Google.by"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3844",
        "question": "What is the common official residence of Lezlee Westine and Arnold W. Braswell?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lezlee_Westine> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Arnold_W._Braswell> <http://dbpedia.org/property/residence> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:residence) dbr:Lezlee_Westine) (JOIN (R dbp:residence) dbr:Arnold_W._Braswell))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common official residence of Lezlee Westine and Arnold W. Braswell",
                    "start": 0,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (JJ official) (NN residence)) (PP (IN of) (NP (NP (NNP Lezlee) (NNP Westine)) (CC and) (NP (NNP Arnold) (NNP W.) (NNP Braswell))))))) (. ?)))",
        "mask_entity": "What is the common official residence of [ENT] and [ENT]?",
        "entity": [
            "Lezlee Westine",
            "Arnold W. Braswell"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3395",
        "question": "Who had headed the governmental agencies whose admin HQ was in Niederkirchnerstrasse?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Niederkirchnerstra\u00dfe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
        "SExpr": "(JOIN (R dbo:leader) (AND dbo:GovernmentAgency (JOIN dbo:headquarter dbr:Niederkirchnerstra\u00dfe))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who had headed [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the governmental agencies",
                                "start": 15,
                                "end": 40
                            },
                            {
                                "description": "whose admin HQ was in Niederkirchnerstrasse",
                                "start": 41,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD had) (VP (VBN headed) (NP (NP (DT the) (JJ governmental) (NNS agencies)) (SBAR (WHNP (WP$ whose) (NN admin) (NNP HQ)) (S (VP (VBD was) (PP (IN in) (NP (NNP Niederkirchnerstrasse)))))))))) (. ?)))",
        "mask_entity": "Who had headed the governmental agencies whose admin HQ was in [ENT]?",
        "entity": [
            "Niederkirchnerstrasse"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1265",
        "question": "Where does the Kentucky cycle take place?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Kentucky_Cycle> <http://dbpedia.org/property/place> ?uri } ",
        "SExpr": "(JOIN (R dbp:place) dbr:The_Kentucky_Cycle)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NNP Kentucky) (NN cycle)) (VP (VB take) (NP (NN place)))) (. ?)))",
        "mask_entity": "Where does the [ENT] cycle take place?",
        "entity": [
            "Kentucky"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "483",
        "question": "Whichi  burial place of the Henri, Duke of Rohan is also the birth place of Michel Frutschi ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri. <http://dbpedia.org/resource/Michel_Frutschi> <http://dbpedia.org/property/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:placeOfBurial) dbr:Henri,_Duke_of_Rohan) (JOIN (R dbp:birthPlace) dbr:Michel_Frutschi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whichi burial place of the Henri, Duke of Rohan",
                    "start": 0,
                    "end": 47
                },
                {
                    "description": "is also the birth place of Michel Frutschi",
                    "start": 48,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT Whichi) (NN burial) (NN place)) (PP (IN of) (NP (NP (DT the) (NNP Henri)) (, ,) (NP (NP (NNP Duke)) (PP (IN of) (NP (NNP Rohan))))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NNP Michel) (NNP Frutschi))))) (. ?)))",
        "mask_entity": "Whichi  burial place of the [ENT], [ENT] is also the birth place of [ENT] ?",
        "entity": [
            "Henri",
            "Duke of Rohan",
            "Michel Frutschi"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4337",
        "question": "Which river's source mountain is Baikal Mountains and is located in Laptev Sea ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:sourceMountain dbr:Baikal_Mountains) (JOIN dbp:mouthLocation dbr:Laptev_Sea)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which river's",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "source mountain is Baikal Mountains",
                    "start": 14,
                    "end": 49
                },
                {
                    "description": "and is located in Laptev Sea",
                    "start": 50,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN river) (POS 's)) (NN source) (NN mountain)) (VP (VP (VBZ is) (NP (NNP Baikal) (NNPS Mountains))) (CC and) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Laptev) (NNP Sea)))))) (. ?)))",
        "mask_entity": "Which river's source mountain is [ENT] and is located in [ENT] ?",
        "entity": [
            "Baikal Mountains",
            "Laptev Sea"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2963",
        "question": "Among which sitcoms in which theme music is composed by Gary Portnoy is located in Massachusetts ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:location dbr:Massachusetts) (JOIN dbp:themeMusicComposer dbr:Gary_Portnoy)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Among which sitcoms",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "in which theme music is composed by Gary Portnoy",
                    "start": 20,
                    "end": 68
                },
                {
                    "description": "is located in Massachusetts",
                    "start": 69,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Among) (WHNP (WDT which))) (S (NP (NP (NNS sitcoms)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN theme) (NN music)) (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Gary) (NNP Portnoy)))))))) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Massachusetts)))))) (. ?)))",
        "mask_entity": "Among which sitcoms in which theme music is composed by [ENT] is located in [ENT] ?",
        "entity": [
            "Gary Portnoy",
            "Massachusetts"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1219",
        "question": "Name the movies distributed by Warner Bros. and directed by Ridley Scott ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros.> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:distributor dbr:Warner_Bros.) (JOIN dbp:director dbr:Ridley_Scott)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "distributed by Warner Bros.",
                    "start": 16,
                    "end": 43
                },
                {
                    "description": "and directed by Ridley Scott",
                    "start": 44,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (VP (VP (VBN distributed) (PP (IN by) (NP (NNP Warner) (NNP Bros.)))) (CC and) (VP (VBN directed) (PP (IN by) (NP (NNP Ridley) (NNP Scott))))))) (. ?)))",
        "mask_entity": "Name the movies distributed by [ENT] and directed by [ENT] ?",
        "entity": [
            "Warner Bros.",
            "Ridley Scott"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "277",
        "question": "WHich region of the Providence Chapel, Charlwood is also the region of the Joseph Case High School",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri. <http://dbpedia.org/resource/Joseph_Case_High_School> <http://dbpedia.org/ontology/region> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:style) dbr:Providence_Chapel,_Charlwood) (JOIN (R dbo:region) dbr:Joseph_Case_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which region of the Providence Chapel, Charlwood",
                    "start": 0,
                    "end": 48
                },
                {
                    "description": "is also the region of the Joseph Case High School",
                    "start": 49,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT WHich) (NN region)) (PP (IN of) (NP (DT the) (NNP Providence) (NNP Chapel)))) (, ,) (S (NP (NNP Charlwood)) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN region)) (PP (IN of) (NP (DT the) (NML (NNP Joseph) (NNP Case)) (NNP High) (NNP School))))))))",
        "mask_entity": "WHich region of [ENT], [ENT] is also the region of [ENT]",
        "entity": [
            "the Providence Chapel",
            "Charlwood",
            "the Joseph Case High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "988",
        "question": "Name a river starting from arequipa region?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbp:sourceRegion dbr:Arequipa_Region))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a river",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "starting from arequipa region",
                    "start": 13,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN river)) (VP (VBG starting) (PP (IN from) (NP (NNP arequipa) (NN region)))))) (. ?)))",
        "mask_entity": "Name a river starting from arequipa region?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2084",
        "question": "What basketball league's champion is Golden State Warriors",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/Golden_State_Warriors>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballLeague>}",
        "SExpr": "(AND dbo:BasketballLeague (JOIN dbp:champion dbr:Golden_State_Warriors))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What basketball league's",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "champion is Golden State Warriors",
                    "start": 25,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NN basketball) (NNP league) (POS 's)) (NN champion)) (VP (VBZ is) (NP (NNP Golden) (NNP State) (NNPS Warriors)))))",
        "mask_entity": "What basketball league's champion is [ENT]",
        "entity": [
            "Golden State Warriors"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1245",
        "question": "Name some people working at someplace owned by News Corp.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/News_Corp> . ?uri <http://dbpedia.org/ontology/employer> ?x  . }",
        "SExpr": "(JOIN dbo:employer (JOIN dbp:owners dbr:News_Corp)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name some people",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "working at [IQ1]",
                    "start": 17,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "someplace",
                                "start": 28,
                                "end": 37
                            },
                            {
                                "description": "owned by News Corp",
                                "start": 38,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NNS people)) (VP (VBG working) (PP (IN at) (NP (NP (NN someplace)) (VP (VBN owned) (PP (IN by) (NP (NNP News) (NNP Corp))))))))) (. .)))",
        "mask_entity": "Name some people working at someplace owned by [ENT].",
        "entity": [
            "News Corp"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2382",
        "question": "Was Johnny Depp a member of Skull Gang?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Johnny_Depp> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Johnny) (NNP Depp)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (NNP Skull) (NNP Gang)))) (. ?)))",
        "mask_entity": "Was [ENT] a member of [ENT]?",
        "entity": [
            "Johnny Depp",
            "Skull Gang"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "571",
        "question": "What is the basketball team whose President's college is Brockport Golden Eagles?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Brockport_Golden_Eagles> . ?uri <http://dbpedia.org/property/president> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
        "SExpr": "(AND dbo:BasketballTeam (JOIN dbp:president (JOIN dbp:college dbr:Brockport_Golden_Eagles))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the basketball team",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose President's [IQ1]",
                    "start": 28,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "college is Brockport Golden Eagles",
                                "start": 46,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN basketball) (NN team)) (SBAR (WHNP (WP$ whose) (NP (NNP President) (POS 's)) (NN college)) (S (VP (VBZ is) (NP (NNP Brockport) (NNP Golden) (NNPS Eagles)))))))) (. ?)))",
        "mask_entity": "What is the basketball team whose President's college is [ENT]?",
        "entity": [
            "Brockport Golden Eagles"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1435",
        "question": "Count the number of fileds of the scientist whose one of the interest is Chinese poetry ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Chinese_poetry> . ?x <http://dbpedia.org/property/fields> ?uri }",
        "SExpr": "(JOIN (R dbp:fields) (JOIN dbp:fields dbr:Chinese_poetry)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of fileds of [IQ1]",
                    "start": 0,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the scientist",
                                "start": 30,
                                "end": 43
                            },
                            {
                                "description": "whose one of the interest is Chinese poetry",
                                "start": 44,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS fileds)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN interest)))) (S (VP (VBZ is) (NP (JJ Chinese) (NN poetry))))))))))) (. ?)))",
        "mask_entity": "Count the number of fileds of the scientist whose [ENT] of the interest is [ENT] poetry ?",
        "entity": [
            "one",
            "Chinese"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "993",
        "question": "What organisations purpose is Peace?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (JOIN dbp:purpose dbr:Peace))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What organisations",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "purpose is Peace",
                    "start": 19,
                    "end": 35
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NNS organisations)) (SQ (VP (NN purpose)))) (SQ (VP (VBZ is) (NP (NNP Peace)))) (. ?)))",
        "mask_entity": "What organisations purpose is Peace?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3930",
        "question": "In how many different teams have all those who have played as a defenceman been?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/property/playedFor> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(AND dbo:SportsTeam (JOIN (R dbp:playedFor) (JOIN dbp:position dbr:Defenceman))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many different teams",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "have [IQ1] been",
                    "start": 28,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "all those who have played as a defenceman",
                                "start": 33,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN In) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS teams))) (VP (VBP have)) (NP (NP (PDT all) (DT those)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN played) (PP (IN as) (NP (DT a) (NN defenceman))) (S (VP (VBN been)))))))) (. ?)))",
        "mask_entity": "In how many different teams have all those who have played as a defenceman been?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3447",
        "question": "How many teams have used the stadiums which have been rented by the Canadian Hockey team?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Hockey_Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
        "SExpr": "(JOIN (R dbp:tenants) (JOIN dbo:tenant dbr:Hockey_Canada)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many teams",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "have used [IQ1]",
                    "start": 15,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadiums",
                                "start": 25,
                                "end": 37
                            },
                            {
                                "description": "which have been rented by the Canadian Hockey team",
                                "start": 38,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS teams)) (VP (VBP have) (VP (VBN used) (NP (NP (DT the) (NNS stadiums)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN rented) (PP (IN by) (NP (DT the) (NML (JJ Canadian) (NNP Hockey)) (NN team)))))))))))) (. ?)))",
        "mask_entity": "How many teams have used the stadiums which have been rented by the [ENT] Hockey team?",
        "entity": [
            "Canadian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "585",
        "question": "How many teams have LA kings players in them currently?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Los_Angeles_Kings> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(AND dbo:SportsTeam (JOIN (R dbo:team) (JOIN dbo:formerTeam dbr:Los_Angeles_Kings))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many teams",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "have [IQ1] in them currently",
                    "start": 15,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "LA kings players",
                                "start": 20,
                                "end": 36
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS teams)) (VP (VBP have) (NP (NP (NNP LA) (NNS kings) (NNS players)) (PP (IN in) (NP (PRP them)))) (ADVP (RB currently)))) (. ?)))",
        "mask_entity": "How many teams have [ENT] kings players in them currently?",
        "entity": [
            "LA"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3658",
        "question": "Is Hard Candy Fitness one of the divisions of Moscow?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hard_Candy_Fitness> <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Moscow> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (JJ Hard) (NNP Candy) (NN Fitness)) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS divisions)) (PP (IN of) (NP (NNP Moscow)))))) (. ?)))",
        "mask_entity": "Is Hard Candy Fitness one of the divisions of [ENT]?",
        "entity": [
            "Moscow"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2514",
        "question": "What is the television show whose developer is J. Michael Straczynski?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:developer dbr:J._Michael_Straczynski))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose developer is J. Michael Straczynski",
                    "start": 28,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN developer)) (S (VP (VBZ is) (NP (NNP J.) (NNP Michael) (NNP Straczynski)))))))) (. ?)))",
        "mask_entity": "What is the television show whose developer is [ENT]?",
        "entity": [
            "J. Michael Straczynski"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1349",
        "question": "list the organisation with motive for peace and environmentalism?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (AND (JOIN dbp:purpose dbr:Peace) (JOIN dbp:purpose dbr:Environmentalism)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the organisation",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "with motive for peace and environmentalism",
                    "start": 22,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB list) (NP (DT the) (NN organisation)) (PP (IN with) (NP (NP (NN motive)) (PP (IN for) (NP (NN peace) (CC and) (NN environmentalism)))))) (. ?)))",
        "mask_entity": "list the organisation with motive for peace and environmentalism?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1007",
        "question": "What is the content license of Darcs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Darcs> <http://dbpedia.org/ontology/license> ?uri } ",
        "SExpr": "(JOIN (R dbo:license) dbr:Darcs)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN content) (NN license)) (PP (IN of) (NP (NNP Darcs)))))) (. ?)))",
        "mask_entity": "What is the content license of [ENT] ?",
        "entity": [
            "Darcs"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "674",
        "question": "Is Truth prevails the national motto of Czechoslovakia?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Czechoslovakia> <http://dbpedia.org/property/nationalMotto> <http://dbpedia.org/resource/Truth_prevails> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Truth)) (VP (VBZ prevails) (NP (NP (DT the) (JJ national) (NN motto)) (PP (IN of) (NP (NNP Czechoslovakia))))) (. ?)))",
        "mask_entity": "Is Truth prevails the national motto of [ENT]?",
        "entity": [
            "Czechoslovakia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2412",
        "question": "Name a military unit whose command structure is United States Department of the Navy and garrison is Arlington County, Virginia?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (AND (JOIN dbo:commandStructure dbr:United_States_Department_of_the_Navy) (JOIN dbo:garrison dbr:Arlington_County,_Virginia)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a military unit",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "whose command structure is United States Department of the Navy",
                    "start": 21,
                    "end": 84
                },
                {
                    "description": "and garrison is Arlington County, Virginia",
                    "start": 85,
                    "end": 127
                }
            ]
        },
        "constituency": "(ROOT (SINV (VP (VB Name) (NP (NP (DT a) (JJ military) (NN unit)) (SBAR (WHNP (WP$ whose) (NN command) (NN structure)) (S (VP (VBZ is) (NP (NP (NNP United) (NNPS States) (NNP Department)) (PP (IN of) (NP (DT the) (NNP Navy) (CC and) (NN garrison))))))))) (VP (VBZ is)) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia))) (. ?)))",
        "mask_entity": "Name a military unit whose command structure is [ENT] and garrison is [ENT], [ENT]?",
        "entity": [
            "United States Department of the Navy",
            "Arlington County",
            "Virginia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2903",
        "question": "Which company developed both Dart and Go?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/Go_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:developer) dbr:Dart_(programming_language)) (JOIN (R dbo:developer) dbr:Go_(programming_language)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "developed both Dart and Go",
                    "start": 14,
                    "end": 40
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN company)) (S (VP (VBD developed) (NP (CC both) (NNP Dart) (CC and) (VB Go)))) (. ?)))",
        "mask_entity": "Which company developed both [ENT] and Go?",
        "entity": [
            "Dart"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "447",
        "question": "In which country did Philippe tesnire and judson huss die?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippe_Tesni\u00e8re> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/placeOfDeath> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:placeOfDeath) dbr:Philippe_Tesni\u00e8re) (JOIN (R dbp:placeOfDeath) dbr:Judson_Huss))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "did Philippe tesnire and judson huss die",
                    "start": 17,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBD did) (S (NP (NP (NNP Philippe) (NNP tesnire)) (CC and) (NP (NNP judson) (NNP huss))) (VP (VB die))))) (. ?)))",
        "mask_entity": "In which country did [ENT] and judson huss die?",
        "entity": [
            "Philippe tesnire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3834",
        "question": "List all the artist of albums which have been produced by Stephen Kozmeniuk ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_Kozmeniuk> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(JOIN (R dbp:artist) (AND dbo:Album (JOIN dbp:producer dbr:Stephen_Kozmeniuk))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the artist of [IQ1]",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "albums",
                                "start": 23,
                                "end": 29
                            },
                            {
                                "description": "which have been produced by Stephen Kozmeniuk",
                                "start": 30,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NN artist)) (PP (IN of) (NP (NP (NNS albums)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN produced) (PP (IN by) (NP (NNP Stephen) (NNP Kozmeniuk)))))))))))) (. ?)))",
        "mask_entity": "List all the artist of albums which have been produced by [ENT] ?",
        "entity": [
            "Stephen Kozmeniuk"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3758",
        "question": "Is Olyokma River the right tributary of Lena River?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Lena_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Olyokma_River> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Olyokma) (NNP River)) (NP (NP (DT the) (JJ right) (NN tributary)) (PP (IN of) (NP (NNP Lena) (NNP River)))) (. ?)))",
        "mask_entity": "Is [ENT] the right tributary of [ENT]?",
        "entity": [
            "Olyokma River",
            "Lena River"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3703",
        "question": "Which colored race horses have won the Grand National?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
        "SExpr": "(JOIN (R dbo:colour) (AND dbo:RaceHorse (JOIN dbp:honours dbr:Grand_National))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which colored [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "race horses",
                                "start": 14,
                                "end": 25
                            },
                            {
                                "description": "have won the Grand National",
                                "start": 26,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which)) (S (VP (VBD colored) (NP (NN race) (NNS horses))))) (VP (VBP have) (VP (VBN won) (NP (DT the) (NNP Grand) (NNP National)))) (. ?)))",
        "mask_entity": "Which colored race horses have won [ENT]?",
        "entity": [
            "the Grand National"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "359",
        "question": "What is common between sports played at Fr Agnel School and Jr college, and the genre of Virtual Kasparov?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virtual_Kasparov> <http://dbpedia.org/ontology/genre> ?uri. <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:genre) dbr:Virtual_Kasparov) (JOIN (R dbo:sport) dbr:Fr._Agnel_Multipurpose_School_and_Junior_College))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is common between sports played at Fr Agnel School and Jr college,",
                    "start": 0,
                    "end": 71
                },
                {
                    "description": "and the genre of Virtual Kasparov",
                    "start": 72,
                    "end": 105
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (ADJP (JJ common) (PP (IN between) (NP (NP (NNS sports)) (VP (VBN played) (PP (IN at) (NP (NP (NP (NNP Fr) (NNP Agnel) (NNP School)) (CC and) (NP (NNP Jr) (NN college))) (, ,) (CC and) (NP (NP (DT the) (NN genre)) (PP (IN of) (NP (NNP Virtual) (NNP Kasparov)))))))))))) (. ?)))",
        "mask_entity": "What is common between sports played at [ENT] and [ENT] college, and the genre of Virtual [ENT]?",
        "entity": [
            "Fr Agnel School",
            "Jr",
            "Kasparov"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2064",
        "question": "What are other famous works of the writer who created the Sarah Jane Adventures?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
        "SExpr": "(JOIN (R dbo:notableWork) (AND dbo:Writer (JOIN dbp:notableworks dbr:The_Sarah_Jane_Adventures))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are other famous works of [IQ1]",
                    "start": 0,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writer",
                                "start": 31,
                                "end": 41
                            },
                            {
                                "description": "who created the Sarah Jane Adventures",
                                "start": 42,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (JJ other) (JJ famous) (NNS works)) (PP (IN of) (NP (NP (DT the) (NN writer)) (SBAR (WHNP (WP who)) (S (VP (VBD created) (NP (DT the) (NNP Sarah) (NNP Jane) (NNPS Adventures)))))))))) (. ?)))",
        "mask_entity": "What are other famous works of the writer who created [ENT]?",
        "entity": [
            "the Sarah Jane Adventures"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4449",
        "question": "What is the mascot of the alma mater of Deborah Crombie?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deborah_Crombie> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
        "SExpr": "(JOIN (R dbp:mascot) (JOIN (R dbo:almaMater) dbr:Deborah_Crombie)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the mascot of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the alma mater of Deborah Crombie",
                                "start": 22,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Deborah) (NNP Crombie)))))))) (. ?)))",
        "mask_entity": "What is the mascot of the alma mater of [ENT]?",
        "entity": [
            "Deborah Crombie"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3810",
        "question": "Where did the genres originate which can found in The Mudbloods?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Mudbloods> <http://dbpedia.org/property/genre> ?x . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . }",
        "SExpr": "(JOIN (R dbo:stylisticOrigin) (JOIN (R dbp:genre) dbr:The_Mudbloods)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the genres originate [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which can found in The Mudbloods",
                                "start": 31,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NNS genres)) (VP (VB originate) (SBAR (WHNP (WDT which)) (S (VP (MD can) (VP (VBN found) (PP (IN in) (NP (DT The) (NNPS Mudbloods))))))))) (. ?)))",
        "mask_entity": "Where did the genres originate which can found in The [ENT]?",
        "entity": [
            "Mudbloods"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1690",
        "question": "What is the resting place of the person who is the successor of James W. Hyatt ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_W._Hyatt> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:restingPlace) (AND dbo:Person (JOIN (R dbp:successor) dbr:James_W._Hyatt))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the resting place of [IQ1]",
                    "start": 0,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 29,
                                "end": 39
                            },
                            {
                                "description": "who is the successor of James W. Hyatt",
                                "start": 40,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP James) (NNP W.) (NNP Hyatt)))))))))))) (. ?)))",
        "mask_entity": "What is the resting place of the person who is the successor of [ENT] ?",
        "entity": [
            "James W. Hyatt"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4326",
        "question": "Who wrote the mangas produced by Masahike Minami?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Masahiko_Minami> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Manga>}",
        "SExpr": "(JOIN (R dbo:author) (AND dbo:Manga (JOIN dbp:producer dbr:Masahiko_Minami))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the mangas",
                                "start": 10,
                                "end": 20
                            },
                            {
                                "description": "produced by Masahike Minami",
                                "start": 21,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (NNS mangas)) (VP (VBN produced) (PP (IN by) (NP (NNP Masahike) (NNP Minami))))))) (. ?)))",
        "mask_entity": "Who wrote the mangas produced by [ENT]?",
        "entity": [
            "Masahike Minami"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1548",
        "question": "Which contnet license provider of Microsoft Office Picture Manager is also the game platform of Google Clud Connect ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Office_Picture_Manager> <http://dbpedia.org/ontology/license> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:license) dbr:Microsoft_Office_Picture_Manager) (JOIN (R dbo:computingPlatform) dbr:Google_Cloud_Connect))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which contnet license provider of Microsoft Office Picture Manager",
                    "start": 0,
                    "end": 66
                },
                {
                    "description": "is also the game platform of Google Clud Connect",
                    "start": 67,
                    "end": 115
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NML (JJ contnet) (NN license)) (NN provider)) (PP (IN of) (NP (NML (NNP Microsoft) (NNP Office)) (NN Picture) (NN Manager)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN game) (NN platform)) (PP (IN of) (NP (NNP Google) (NNP Clud) (NNP Connect))))) (. ?)))",
        "mask_entity": "Which contnet license provider of [ENT] is also the game platform of [ENT] ?",
        "entity": [
            "Microsoft Office Picture Manager",
            "Google Clud Connect"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1247",
        "question": "What is the mascot of military in Quezon city?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Quezon_City> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(JOIN (R dbp:mascot) (AND dbo:MilitaryUnit (JOIN dbp:garrison dbr:Quezon_City))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the mascot of [IQ1]",
                    "start": 0,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "military in Quezon city",
                                "start": 22,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NN military))) (PP (IN in) (NP (NNP Quezon) (NN city)))))) (. ?)))",
        "mask_entity": "What is the mascot of military in [ENT]?",
        "entity": [
            "Quezon city"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1985",
        "question": "What all are in the states whose anthem is Ja, vi esker dette landet?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Ja,_vi_elsker_dette_landet> . ?uri <http://dbpedia.org/ontology/country> ?x  . }",
        "SExpr": "(JOIN dbo:country (JOIN dbo:anthem dbr:Ja,_vi_elsker_dette_landet)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What all are in [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the states",
                                "start": 16,
                                "end": 26
                            },
                            {
                                "description": "whose anthem is Ja, vi esker dette landet",
                                "start": 27,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (ADVP (DT all)) (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WP$ whose) (NN anthem)) (S (VP (VBZ is) (NP (NP (NNP Ja)) (, ,) (NP (NNP vi) (NN esker) (NN dette) (NN landet)))))))))) (. ?)))",
        "mask_entity": "What all are in the states whose anthem is Ja, vi esker dette landet?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "294",
        "question": "Which officers fought in the war of Siege of Fort Recovery?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbo:battle dbr:Siege_of_Fort_Recovery))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which officers",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "fought in the war of Siege of Fort Recovery",
                    "start": 15,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS officers)) (S (VP (VBD fought) (PP (IN in) (NP (NP (DT the) (NN war)) (PP (IN of) (NP (NP (NNP Siege)) (PP (IN of) (NP (NNP Fort) (NNP Recovery))))))))) (. ?)))",
        "mask_entity": "Which officers fought in the war of Siege of Fort Recovery?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1547",
        "question": "Which company builds Microsoft Azure and Microsoft Surface?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:product dbr:Microsoft_Azure) (JOIN dbo:product dbr:Microsoft_Surface)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "builds Microsoft Azure and Microsoft Surface",
                    "start": 14,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN company)) (S (VP (VBZ builds) (NP (NP (NNP Microsoft) (NNP Azure)) (CC and) (NP (NNP Microsoft) (NNP Surface))))) (. ?)))",
        "mask_entity": "Which company builds [ENT] and [ENT] [ENT]?",
        "entity": [
            "Microsoft Azure",
            "Microsoft",
            "Surface"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2012",
        "question": "return some  players who have played in the NBA?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Basketball_Association> } ",
        "SExpr": "(JOIN dbp:league dbr:National_Basketball_Association)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB return) (NP (NP (DT some) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN played) (PP (IN in) (NP (DT the) (NNP NBA))))))))) (. ?)))",
        "mask_entity": "return some  players who have played in the [ENT]?",
        "entity": [
            "NBA"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "588",
        "question": "Name an airline with hub airports as Los Angeles International Airport and San Francisco International Airport?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Los_Angeles_International_Airport> . ?uri <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/San_Francisco_International_Airport>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(AND dbo:Airline (AND (JOIN dbo:hubAirport dbr:Los_Angeles_International_Airport) (JOIN dbp:hubs dbr:San_Francisco_International_Airport)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name an airline",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "with hub airports as Los Angeles International Airport and San Francisco International Airport",
                    "start": 16,
                    "end": 110
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT an) (NN airline)) (PP (IN with) (NP (NP (NN hub) (NNS airports)) (PP (IN as) (NP (NP (NML (NNP Los) (NNP Angeles)) (NNP International) (NNP Airport)) (CC and) (NP (NML (NNP San) (NNP Francisco)) (NNP International) (NNP Airport)))))))) (. ?)))",
        "mask_entity": "Name an airline with hub airports as [ENT] and [ENT]?",
        "entity": [
            "Los Angeles International Airport",
            "San Francisco International Airport"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3329",
        "question": "Give me all office holders who finally retired in Montpelier, Orange, Virgina?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbp:restingplace dbr:Montpelier_(Orange,_Virginia)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me all office holders",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "who finally retired in Montpelier, Orange, Virgina",
                    "start": 27,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NN office) (NNS holders)) (SBAR (WHNP (WP who)) (S (ADVP (RB finally)) (VP (VBD retired) (PP (IN in) (NP (NP (NNP Montpelier)) (, ,) (NP (NNP Orange)) (, ,) (NP (NNP Virgina))))))))) (. ?)))",
        "mask_entity": "Give me all office holders who finally retired in [ENT], [ENT], [ENT]?",
        "entity": [
            "Montpelier",
            "Orange",
            "Virgina"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2403",
        "question": "Give me a count on scientist who are known for garrison is Tennessee ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:knownFor (JOIN dbo:garrison dbr:Tennessee))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a count on scientist",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "who are known for [IQ1]",
                    "start": 29,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "garrison is Tennessee",
                                "start": 47,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (S (NP (NP (NP (DT a) (NN count)) (PP (IN on) (NP (NN scientist)))) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN known) (PP (IN for) (NP (NN garrison)))))))) (VP (VBZ is) (NP (NNP Tennessee))))) (. ?)))",
        "mask_entity": "Give me a count on scientist who are known for garrison is [ENT] ?",
        "entity": [
            "Tennessee"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2129",
        "question": "Does Ronaldinho play in the brazil's under 23 team?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ronaldinho> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Brazil_national_under-23_football_team> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Ronaldinho)) (VP (VB play) (PP (IN in) (NP (NP (DT the) (NNP brazil) (POS 's)) (PP (IN under) (NP (CD 23) (NN team)))))) (. ?)))",
        "mask_entity": "Does [ENT] play in the brazil's under [ENT] team?",
        "entity": [
            "Ronaldinho",
            "23"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4388",
        "question": "Which river starts from the county seat of Heathsville, Virginia?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/countySeat> <http://dbpedia.org/resource/Heathsville,_Virginia> . ?uri <http://dbpedia.org/property/mouthLocation> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbp:mouthLocation (JOIN dbo:countySeat dbr:Heathsville,_Virginia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which river",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "starts from [IQ1]",
                    "start": 12,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the county seat of Heathsville, Virginia",
                                "start": 24,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ starts) (PP (IN from) (NP (NP (DT the) (NN county) (NN seat)) (PP (IN of) (NP (NP (NNP Heathsville)) (, ,) (NP (NNP Virginia)))))))) (. ?)))",
        "mask_entity": "Which river starts from the county seat of [ENT], [ENT]?",
        "entity": [
            "Heathsville",
            "Virginia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2410",
        "question": "Who owns the bank where Fabio Mercurio works?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fabio_Mercurio> <http://dbpedia.org/property/institution> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Bank (JOIN (R dbp:institution) dbr:Fabio_Mercurio))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bank",
                                "start": 9,
                                "end": 17
                            },
                            {
                                "description": "where Fabio Mercurio works",
                                "start": 18,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN bank)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Fabio) (NNP Mercurio)) (VP (VBZ works))))))) (. ?)))",
        "mask_entity": "Who owns the bank where [ENT] works?",
        "entity": [
            "Fabio Mercurio"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2719",
        "question": "Who owns the horses which have won the Timeform award?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "SExpr": "(JOIN (R dbo:owner) (AND dbo:Horse (JOIN dbp:awards dbr:Timeform))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the horses",
                                "start": 9,
                                "end": 19
                            },
                            {
                                "description": "which have won the Timeform award",
                                "start": 20,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NNS horses)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN won) (NP (DT the) (NNP Timeform) (NN award))))))))) (. ?)))",
        "mask_entity": "Who owns the horses which have won [ENT]?",
        "entity": [
            "the Timeform award"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "425",
        "question": "What are some fictional characters whose voice is in the peanuts movie?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/The_Peanuts_Movie>  . }",
        "SExpr": "(JOIN dbo:voice dbr:The_Peanuts_Movie)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ fictional) (NNS characters)) (SBAR (WHNP (WP$ whose) (NN voice)) (S (VP (VBZ is) (PP (IN in) (NP (DT the) (NNS peanuts) (NN movie))))))))) (. ?)))",
        "mask_entity": "What are some fictional characters whose voice is in the peanuts movie?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2582",
        "question": "What religion do people of the country of Mahbuba Islam Rakhi follow?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mahbuba_Islam_Rakhi> <http://dbpedia.org/ontology/nationality> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbo:nationality) dbr:Mahbuba_Islam_Rakhi)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religion",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "do people of [IQ1] follow",
                    "start": 14,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the country of Mahbuba Islam Rakhi",
                                "start": 27,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VP (VBP do) (NP (NP (NNS people)) (PP (IN of) (NP (NP (DT the) (NN country)) (PP (IN of) (NP (NNP Mahbuba) (NNP Islam)))))) (NP (NNP Rakhi)) (S (VP (VB follow))))) (. ?)))",
        "mask_entity": "What religion do people of the country of [ENT] follow?",
        "entity": [
            "Mahbuba Islam Rakhi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1054",
        "question": "How many people used to play for Toronto Argonauts?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Toronto_Argonauts>  . }",
        "SExpr": "(JOIN dbo:formerTeam dbr:Toronto_Argonauts)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBD used) (S (VP (TO to) (VP (VB play) (PP (IN for) (NP (NNP Toronto) (NNPS Argonauts)))))))) (. ?)))",
        "mask_entity": "How many people used to play for [ENT]?",
        "entity": [
            "Toronto Argonauts"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3966",
        "question": "How many different people have been in any political seat in places which are under the Indian Standard timezone?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Indian_Standard_Time> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
        "SExpr": "(JOIN (R dbo:leaderName) (JOIN dbo:timeZone dbr:Indian_Standard_Time)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different people",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "have been in any political seat in [IQ1]",
                    "start": 26,
                    "end": 112,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "places",
                                "start": 61,
                                "end": 67
                            },
                            {
                                "description": "which are under the Indian Standard timezone",
                                "start": 68,
                                "end": 112
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHADJP (WRB How) (JJ many)) (JJ different) (NNS people)) (VP (VBP have) (VP (VBN been) (PP (IN in) (NP (NP (DT any) (JJ political) (NN seat)) (PP (IN in) (NP (NP (NNS places)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN under) (NP (DT the) (NML (JJ Indian) (NNP Standard)) (NN timezone)))))))))))) (. ?)))",
        "mask_entity": "How many different people have been in any political seat in places which are under the [ENT] Standard timezone?",
        "entity": [
            "Indian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4562",
        "question": "The sports team which played at the American Basketball League championship (1996-1998), have which stadiums?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/American_Basketball_League_(1996\u201398)> . ?x <http://dbpedia.org/ontology/stadium> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(JOIN (R dbo:stadium) (AND dbo:SportsTeam (JOIN dbo:league dbr:American_Basketball_League_(1996\u201398)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have which stadiums",
                    "start": 0,
                    "end": 108,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "The sports team",
                                "start": 0,
                                "end": 15
                            },
                            {
                                "description": "which played at the American Basketball League championship (1996-1998),",
                                "start": 16,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT The) (NNS sports) (NN team)) (SBAR (WHNP (WDT which)) (S (VP (VBD played) (PP (IN at) (NP (NP (DT the) (NML (NNP American) (NNP Basketball) (NNP League)) (NN championship)) (PP (-LRB- () (NP (NP (CD 1996)) (PP (SYM -) (NP (CD 1998) (-RRB- )))))))))))) (, ,) (VP (VBP have) (SBAR (WHNP (WDT which)) (S (NP (NNS stadiums)) (. ?))))))",
        "mask_entity": "The sports team which played at [ENT] championship ([ENT]), have which stadiums?",
        "entity": [
            "the American Basketball League",
            "1996-1998"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "556",
        "question": "Whose county seats are Mediolanum and History of Trier?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Mediolanum> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . }",
        "SExpr": "(AND (JOIN dbo:capital dbr:Mediolanum) (JOIN dbo:capital dbr:History_of_Trier))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose county seats are Mediolanum and History of Trier",
                    "start": 0,
                    "end": 54
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NN county) (NNS seats)) (VP (VBP are) (NP (NP (NNP Mediolanum) (CC and) (NNP History)) (PP (IN of) (NP (NNP Trier))))) (. ?)))",
        "mask_entity": "Whose county seats are Mediolanum and History of Trier?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4358",
        "question": "What is the national origin of Dornier Aerodyne and Hirth Acrostar ?;",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dornier_Aerodyne> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Hirth_Acrostar> <http://dbpedia.org/ontology/origin> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:nationalOrigin) dbr:Dornier_Aerodyne) (JOIN (R dbo:origin) dbr:Hirth_Acrostar))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the national origin of Dornier Aerodyne and Hirth Acrostar ;",
                    "start": 0,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (JJ national) (NN origin)) (PP (IN of) (NP (NP (NNP Dornier) (NNP Aerodyne)) (CC and) (NP (NNP Hirth) (NNP Acrostar)))))))) (NP (NP (. ?;)))))",
        "mask_entity": "What is the national origin of [ENT] and [ENT] ?;",
        "entity": [
            "Dornier Aerodyne",
            "Hirth Acrostar"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3938",
        "question": "Was Class Conflict an interest of Karl Marx?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Class) (NNP Conflict)) (NP (NP (DT an) (NN interest)) (PP (IN of) (NP (NNP Karl) (NNP Marx)))) (. ?)))",
        "mask_entity": "Was Class Conflict an interest of [ENT]?",
        "entity": [
            "Karl Marx"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4712",
        "question": "Count the tenants of the stadiums owned by toronto.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
        "SExpr": "(JOIN (R dbp:tenants) (JOIN dbp:owner dbr:Toronto)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the tenants of [IQ1]",
                    "start": 0,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadiums",
                                "start": 21,
                                "end": 33
                            },
                            {
                                "description": "owned by toronto",
                                "start": 34,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NP (DT the) (NNS stadiums)) (VP (VBN owned) (PP (IN by) (NP (NNP toronto)))))))) (. .)))",
        "mask_entity": "Count the tenants of the stadiums owned by toronto.",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2469",
        "question": "Name the president who has relations with Clinton family and had a lieutenant named Winston Bryant?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Clinton_family> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(AND dbo:President (AND (JOIN dbo:relation dbr:Clinton_family) (JOIN dbo:lieutenant dbr:Winston_Bryant)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the president",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "who has relations with Clinton family",
                    "start": 19,
                    "end": 56
                },
                {
                    "description": "and had a lieutenant named Winston Bryant",
                    "start": 57,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ has) (NP (NP (NNS relations)) (PP (IN with) (NP (NNP Clinton) (NN family))))) (CC and) (VP (VBD had) (NP (NP (DT a) (NN lieutenant)) (VP (VBN named) (S (NP (NNP Winston) (NNP Bryant))))))))))) (. ?)))",
        "mask_entity": "Name the president who has relations with [ENT] family and had a lieutenant named [ENT]?",
        "entity": [
            "Clinton",
            "Winston Bryant"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4710",
        "question": "What is the fictional character whose voice over is done by the animator of Dick Lundy ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Dick_Lundy_(animator)> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:voice (JOIN dbp:animator dbr:Dick_Lundy_(animator)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the fictional character",
                    "start": 0,
                    "end": 31
                },
                {
                    "description": "whose voice over [IQ1]",
                    "start": 32,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is done by the animator of Dick Lundy",
                                "start": 49,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN voice)) (S (PP (IN over) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NP (DT the) (NN animator)) (PP (IN of) (NP (NNP Dick) (NNP Lundy)))))))))))))) (. ?)))",
        "mask_entity": "What is the fictional character whose voice over is done by the animator of [ENT] ?",
        "entity": [
            "Dick Lundy"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "355",
        "question": "How many sports are played in organizations presided by Emanuel de Guzman?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>}",
        "SExpr": "(AND dbo:Sport (JOIN (R dbo:sport) (JOIN dbo:president dbr:Emanuel_de_Guzman))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many sports",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are played in [IQ1]",
                    "start": 16,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "organizations",
                                "start": 30,
                                "end": 43
                            },
                            {
                                "description": "presided by Emanuel de Guzman",
                                "start": 44,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS sports)) (VP (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS organizations)) (VP (VBN presided) (PP (IN by) (NP (NNP Emanuel) (NNP de) (NNP Guzman))))))))) (. ?)))",
        "mask_entity": "How many sports are played in organizations presided by [ENT]?",
        "entity": [
            "Emanuel de Guzman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1193",
        "question": "What are the home stadiums of the things Leonid Fedun has been the chairman of?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Leonid_Fedun> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
        "SExpr": "(JOIN (R dbo:homeStadium) (JOIN dbo:chairman dbr:Leonid_Fedun)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the home stadiums of [IQ1]",
                    "start": 0,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the things",
                                "start": 30,
                                "end": 40
                            },
                            {
                                "description": "Leonid Fedun has been the chairman of",
                                "start": 41,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN home) (NNS stadiums)) (PP (IN of) (NP (NP (DT the) (NNS things)) (SBAR (S (NP (NNP Leonid) (NNP Fedun)) (VP (VBZ has) (VP (VBN been) (NP (NP (DT the) (NN chairman)) (PP (IN of)))))))))))) (. ?)))",
        "mask_entity": "What are the home stadiums of the things [ENT] has been the chairman of?",
        "entity": [
            "Leonid Fedun"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1716",
        "question": "Is Akan spoken in Ghana?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ghana> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Akan_language> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Akan)) (VP (VBN spoken) (PP (IN in) (NP (NNP Ghana)))) (. ?)))",
        "mask_entity": "Is [ENT] spoken in [ENT]?",
        "entity": [
            "Akan",
            "Ghana"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3416",
        "question": "Which region of English American is also the palce of Death of Brent Darby ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/English_Americans> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Brent_Darby> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:region) dbr:English_Americans) (JOIN (R dbp:placeOfDeath) dbr:Brent_Darby))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which region of English American",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is also the place of Death of Brent Darby",
                    "start": 33,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN region)) (PP (IN of) (NP (JJ English) (NNP American)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN palce)) (PP (IN of) (NP (NP (NNP Death)) (PP (IN of) (NP (NNP Brent) (NNP Darby))))))) (. ?)))",
        "mask_entity": "Which region of [ENT] [ENT] is also the palce of Death of [ENT] ?",
        "entity": [
            "English",
            "American",
            "Brent Darby"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2604",
        "question": "Who acted in the work written by Colin Brake?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Colin_Brake> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
        "SExpr": "(JOIN (R dbp:starring) (AND dbo:Work (JOIN dbp:writer dbr:Colin_Brake))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who acted in [IQ1]",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the work",
                                "start": 13,
                                "end": 21
                            },
                            {
                                "description": "written by Colin Brake",
                                "start": 22,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD acted) (PP (IN in) (NP (NP (DT the) (NN work)) (VP (VBN written) (PP (IN by) (NP (NNP Colin) (NNP Brake)))))))) (. ?)))",
        "mask_entity": "Who acted in the work written by [ENT]?",
        "entity": [
            "Colin Brake"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4129",
        "question": "Is Robin Gibb the singer of Oh! Darling?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Oh!_Darling> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Robin_Gibb> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (NP (NNP Darling) (. ?)))",
        "mask_entity": "Is [ENT] the singer of Oh! Darling?",
        "entity": [
            "Robin Gibb"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2828",
        "question": "List everything written in languages developed by EXperimental Computing Facility?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/EXperimental_Computing_Facility> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
        "SExpr": "(AND dbo:Work (JOIN dbp:programmingLanguage (JOIN dbo:author dbr:EXperimental_Computing_Facility))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List everything",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "written in [IQ1]",
                    "start": 16,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "languages",
                                "start": 27,
                                "end": 36
                            },
                            {
                                "description": "developed by EXperimental Computing Facility",
                                "start": 37,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (NN everything)) (VP (VBN written) (PP (IN in) (NP (NP (NNS languages)) (VP (VBN developed) (PP (IN by) (NP (NNP EXperimental) (NNP Computing) (NNP Facility))))))))) (. ?)))",
        "mask_entity": "List everything written in languages developed by [ENT]?",
        "entity": [
            "EXperimental Computing Facility"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1704",
        "question": "What are some movies whose score is composed by relatives of Bodhi Elfman?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Bodhi_Elfman> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:music (JOIN dbp:relatives dbr:Bodhi_Elfman))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some movies",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "whose score is composed by [IQ1]",
                    "start": 21,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "relatives of Bodhi Elfman",
                                "start": 48,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN score)) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NP (NNS relatives)) (PP (IN of) (NP (NNP Bodhi) (NNP Elfman)))))))))))) (. ?)))",
        "mask_entity": "What are some movies whose score is composed by relatives of [ENT]?",
        "entity": [
            "Bodhi Elfman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2863",
        "question": "Is the Chiva Bus by the Ford Motor Company?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Ford_Motor_Company> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Chiva) (NNP Bus)) (PP (IN by) (NP (DT the) (NNP Ford) (NNP Motor) (NNP Company))) (. ?)))",
        "mask_entity": "Is [ENT] by [ENT]?",
        "entity": [
            "the Chiva Bus",
            "the Ford Motor Company"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2618",
        "question": "List the series of the books whose author is K. W. Jeter.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/author> <http://dbpedia.org/resource/K._W._Jeter> . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(JOIN (R dbo:series) (AND dbo:Book (JOIN dbp:author dbr:K._W._Jeter))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the series of [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the books",
                                "start": 19,
                                "end": 28
                            },
                            {
                                "description": "whose author is K. W. Jeter",
                                "start": 29,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (NP (DT the) (NNS books)) (SBAR (WHNP (WP$ whose) (NN author)) (S (VP (VBZ is) (NP (NNP K.) (NNP W.) (NNP Jeter))))))))) (. .)))",
        "mask_entity": "List the series of the books whose author is [ENT].",
        "entity": [
            "K. W. Jeter"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2400",
        "question": "What is the common university iof vanderbilt Commodores and also the college of hubert Wiggs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Hubert_Wiggs> <http://dbpedia.org/ontology/college> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:university) dbr:Vanderbilt_Commodores) (JOIN (R dbo:college) dbr:Hubert_Wiggs))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common university iof vanderbilt Commodores",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "and also the college of hubert Wiggs",
                    "start": 56,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NML (NML (JJ common) (NN university)) (NN iof)) (NN vanderbilt)) (NP (NNP Commodores))) (CC and) (ADVP (RB also)) (NP (NP (DT the) (NN college)) (PP (IN of) (NP (NNP hubert) (NNP Wiggs))))))) (. ?)))",
        "mask_entity": "What is the common university iof vanderbilt [ENT] and also the college of [ENT] ?",
        "entity": [
            "Commodores",
            "hubert Wiggs"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2139",
        "question": "Name the common architecture of the Grand Serail of Aleppo and Shaheed Minar, Kolkata ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grand_Serail_of_Aleppo> <http://dbpedia.org/ontology/architecturalStyle> ?uri. <http://dbpedia.org/resource/Shaheed_Minar,_Kolkata> <http://dbpedia.org/ontology/architecturalStyle> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:architecturalStyle) dbr:Grand_Serail_of_Aleppo) (JOIN (R dbo:architecturalStyle) dbr:Shaheed_Minar,_Kolkata))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common architecture of the Grand Serail of Aleppo and Shaheed Minar, Kolkata",
                    "start": 0,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN architecture)) (PP (IN of) (NP (NP (DT the) (NNP Grand) (NNP Serail)) (PP (IN of) (NP (NP (NNP Aleppo)) (CC and) (NP (NP (NNP Shaheed) (NNP Minar)) (, ,) (NP (NNP Kolkata))))))))) (. ?)))",
        "mask_entity": "Name the common architecture of the Grand Serail of [ENT] and [ENT], [ENT] ?",
        "entity": [
            "Aleppo",
            "Shaheed Minar",
            "Kolkata"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3239",
        "question": "What are the prizes awarded to the main members of DisneyToon Studios?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/DisneyToon_Studios> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbo:keyPerson) dbr:DisneyToon_Studios)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the prizes",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "awarded to [IQ1]",
                    "start": 20,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the main members of DisneyToon Studios",
                                "start": 31,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS prizes)) (VP (VBN awarded) (PP (IN to) (NP (NP (DT the) (JJ main) (NNS members)) (PP (IN of) (NP (NNP DisneyToon) (NNP Studios))))))))) (. ?)))",
        "mask_entity": "What are the prizes awarded to the main members of [ENT]?",
        "entity": [
            "DisneyToon Studios"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2383",
        "question": "How many sports are played at the university whose president is Emanuel de Guzman?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>}",
        "SExpr": "(AND dbo:Sport (JOIN (R dbo:sport) (JOIN dbp:president dbr:Emanuel_de_Guzman))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many sports",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are played at [IQ1]",
                    "start": 16,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the university",
                                "start": 30,
                                "end": 44
                            },
                            {
                                "description": "whose president is Emanuel de Guzman",
                                "start": 45,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS sports)) (VP (VBP are) (VP (VBN played) (PP (IN at) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN president)) (S (VP (VBZ is) (NP (NNP Emanuel) (NNP de) (NNP Guzman)))))))))) (. ?)))",
        "mask_entity": "How many sports are played at the university whose president is [ENT]?",
        "entity": [
            "Emanuel de Guzman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3218",
        "question": "Give me the count of interests of the philosopher whose primary interest is Metaphysics ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Metaphysics> . ?x <http://dbpedia.org/property/mainInterests> ?uri }",
        "SExpr": "(JOIN (R dbp:mainInterests) (JOIN dbp:mainInterests dbr:Metaphysics)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the count of interests of [IQ1]",
                    "start": 0,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the philosopher",
                                "start": 34,
                                "end": 49
                            },
                            {
                                "description": "whose primary interest is Metaphysics",
                                "start": 50,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (NNS interests)) (PP (IN of) (NP (NP (DT the) (NN philosopher)) (SBAR (WHNP (WP$ whose) (JJ primary) (NN interest)) (S (VP (VBZ is) (NP (NNP Metaphysics))))))))))) (. ?)))",
        "mask_entity": "Give me the count of interests of the philosopher whose primary interest is Metaphysics ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3935",
        "question": "Who was buried at St. Mary's Church and fought the battle of  Benedict Arnold's expedition to Quebec ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Benedict_Arnold's_expedition_to_Quebec> . ?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . }",
        "SExpr": "(AND (JOIN dbo:battle dbr:Benedict_Arnold's_expedition_to_Quebec) (JOIN dbp:placeofburial dbr:St_Mary's_Church,_Battersea))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was buried at St. Mary's Church",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "and fought the battle of Benedict Arnold's expedition to Quebec",
                    "start": 36,
                    "end": 99
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (VP (VP (VBN buried) (PP (IN at) (NP (NP (NNP St.) (NNP Mary) (POS 's)) (NNP Church)))) (CC and) (VP (VBD fought) (NP (NP (DT the) (NN battle)) (PP (IN of) (NP (NP (NP (NNP Benedict) (NNP Arnold) (POS 's)) (NN expedition)) (PP (IN to) (NP (NNP Quebec)))))))))) (. ?)))",
        "mask_entity": "Who was buried at [ENT] and fought the battle of  [ENT] expedition to [ENT] ?",
        "entity": [
            "St. Mary's Church",
            "Benedict Arnold's",
            "Quebec"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1285",
        "question": "On which subjects does the author of the novel Thud! delve?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri } ",
        "SExpr": "(JOIN (R dbo:nonFictionSubject) dbr:Thud!)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBAR (WHPP (IN On) (WHNP (WDT which))) (S (NP (NNS subjects)) (VP (VBZ does) (NP (NP (DT the) (NN author)) (PP (IN of) (NP (DT the) (JJ novel) (NNP Thud))))))) (VP (. !) (VP (VB delve))) (. ?)))",
        "mask_entity": "On which subjects does the author of the novel Thud! delve?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3796",
        "question": "Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
        "SExpr": "(AND dbo:Writer (AND (JOIN dbo:notableWork dbr:Adventures_of_Huckleberry_Finn) (JOIN dbo:notableWork dbr:The_Adventures_of_Tom_Sawyer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the writer",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer",
                    "start": 18,
                    "end": 105
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN with) (NP (NP (JJ notable) (NNS works)) (PP (IN like) (NP (NP (NNPS Adventures)) (PP (IN of) (NP (NP (NNP Huckleberry) (NNP Finn)) (CC and) (NP (NP (DT The) (NNPS Adventures)) (PP (IN of) (NP (NNP Tom) (NNP Sawyer))))))))))))) (. ?)))",
        "mask_entity": "Who is the writer with notable works like [ENT] and [ENT]?",
        "entity": [
            "Adventures of Huckleberry Finn",
            "The Adventures of Tom Sawyer"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4894",
        "question": "Name the people living in a place governed by William W Brien?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/William_W._Brien> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
        "SExpr": "(JOIN dbo:residence (JOIN dbp:leaderName dbr:William_W._Brien)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "living in [IQ1]",
                    "start": 16,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a place",
                                "start": 26,
                                "end": 33
                            },
                            {
                                "description": "governed by William W Brien",
                                "start": 34,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS people)) (VP (VBG living) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NNP William) (NNP W) (NNP Brien))))))))) (. ?)))",
        "mask_entity": "Name the people living in a place governed by [ENT]?",
        "entity": [
            "William W Brien"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4468",
        "question": "Name the river whose source is located in Ikelenge  District and mouth in Mozambique?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District> . ?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbp:sourceLocation dbr:Ikelenge_District) (JOIN dbp:mouthCountry dbr:Mozambique)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose source is located in Ikelenge District",
                    "start": 15,
                    "end": 59
                },
                {
                    "description": "and mouth in Mozambique",
                    "start": 60,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source)) (S (VP (VBZ is) (VP (VP (VBN located) (PP (IN in) (NP (NNP Ikelenge) (NNP District)))) (CC and) (VP (NN mouth) (PP (IN in) (NP (NNP Mozambique)))))))))) (. ?)))",
        "mask_entity": "Name the river whose source is located in [ENT] and mouth in [ENT]?",
        "entity": [
            "Ikelenge  District",
            "Mozambique"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2087",
        "question": "How many people won the Gold Medal of the Royal Astronomical Society?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society>  . }",
        "SExpr": "(JOIN dbp:prizes dbr:Gold_Medal_of_the_Royal_Astronomical_Society)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBD won) (NP (NP (DT the) (NNP Gold) (NNP Medal)) (PP (IN of) (NP (DT the) (NNP Royal) (NNP Astronomical) (NNP Society)))))) (. ?)))",
        "mask_entity": "How many people won the Gold Medal of [ENT]?",
        "entity": [
            "the Royal Astronomical Society"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1889",
        "question": "What are the relatives of the parliament member whose successor is Peter Thorneycroft?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Peter_Thorneycroft> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
        "SExpr": "(JOIN (R dbo:relation) (AND dbo:MemberOfParliament (JOIN dbp:successor dbr:Peter_Thorneycroft))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the relatives of [IQ1]",
                    "start": 0,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the parliament member",
                                "start": 26,
                                "end": 47
                            },
                            {
                                "description": "whose successor is Peter Thorneycroft",
                                "start": 48,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NP (DT the) (NN parliament) (NN member)) (SBAR (WHNP (WP$ whose) (NN successor)) (S (VP (VBZ is) (NP (NNP Peter) (NNP Thorneycroft)))))))))) (. ?)))",
        "mask_entity": "What are the relatives of the parliament member whose successor is [ENT]?",
        "entity": [
            "Peter Thorneycroft"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4622",
        "question": "Which river's source country is Zambia and mouth country is Mozambique?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:sourceCountry dbr:Zambia) (JOIN dbp:mouthCountry dbr:Mozambique)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which river's",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "source country is Zambia",
                    "start": 14,
                    "end": 38
                },
                {
                    "description": "and mouth country is Mozambique",
                    "start": 39,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN river) (POS 's)) (NN source) (NN country)) (VP (VBZ is) (SBAR (S (NP (NP (NNP Zambia)) (CC and) (NP (NN mouth) (NN country))) (VP (VBZ is) (NP (NNP Mozambique)))))) (. ?)))",
        "mask_entity": "Which river's source country is [ENT] and mouth country is [ENT]?",
        "entity": [
            "Zambia",
            "Mozambique"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1591",
        "question": "Was the Funky Lab Rat released in North America?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Funky_Lab_Rat> <http://dbpedia.org/property/released> <http://dbpedia.org/resource/North_America> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (DT the) (NML (NNP Funky) (NNP Lab)) (NNP Rat)) (VP (VBN released) (PP (IN in) (NP (NNP North) (NNP America)))) (. ?)))",
        "mask_entity": "Was the Funky Lab Rat released in [ENT]?",
        "entity": [
            "North America"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1346",
        "question": "What is the main common interests of the Philip Novak and Timothy Morton?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:mainInterests) dbr:Philip_Novak) (JOIN (R dbp:mainInterests) dbr:Timothy_Morton))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the main common interests of the Philip Novak and Timothy Morton",
                    "start": 0,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ main) (JJ common) (NNS interests)) (PP (IN of) (NP (DT the) (NML (NML (NNP Philip) (NNP Novak)) (CC and) (NML (NNP Timothy) (NNP Morton)))))))) (. ?)))",
        "mask_entity": "What is the main common interests of [ENT] and [ENT]?",
        "entity": [
            "the Philip Novak",
            "Timothy Morton"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4431",
        "question": "How many members are there of the order of Bacillales?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales>  . }",
        "SExpr": "(JOIN dbo:order dbr:Bacillales)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS members)) (VP (VBP are) (NP (NP (EX there)) (PP (IN of) (NP (NP (DT the) (NN order)) (PP (IN of) (NP (NNPS Bacillales)))))))) (. ?)))",
        "mask_entity": "How many members are there of the order of [ENT]?",
        "entity": [
            "Bacillales"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2162",
        "question": "Which program was on NBC network with executive producer as Glen and Les Charles?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:network dbr:NBC) (JOIN dbo:executiveProducer dbr:Glen_and_Les_Charles)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which program",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was on NBC network",
                    "start": 14,
                    "end": 32
                },
                {
                    "description": "with executive producer as Glen and Les Charles",
                    "start": 33,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN program)) (SQ (VP (VBD was) (PP (IN on) (NP (NNP NBC) (NN network))) (PP (IN with) (NP (NP (JJ executive) (NN producer)) (PP (IN as) (NP (NP (NNP Glen)) (CC and) (NP (NNP Les) (NNP Charles)))))))) (. ?)))",
        "mask_entity": "Which program was on [ENT] network with executive producer as [ENT] and [ENT]?",
        "entity": [
            "NBC",
            "Glen",
            "Les Charles"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2396",
        "question": "Moscow-Kazan high speed railway starts from which station?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway> <http://dbpedia.org/ontology/routeStart> ?uri } ",
        "SExpr": "(JOIN (R dbo:routeStart) dbr:Moscow-Kazan_high-speed_railway)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NML (NNP Moscow) (HYPH -) (NNP Kazan)) (NML (JJ high) (NN speed)) (NN railway)) (VP (VBZ starts) (SBAR (WHPP (IN from) (WHNP (WDT which) (NN station))) (. ?)))))",
        "mask_entity": "[ENT]-[ENT] high speed railway starts from which station?",
        "entity": [
            "Moscow",
            "Kazan"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4768",
        "question": "Is Fluidinfo written in PostgreSQL language?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Fluidinfo)) (VP (VBN written) (PP (IN in) (NP (NNP PostgreSQL) (NN language)))) (. ?)))",
        "mask_entity": "Is [ENT] written in [ENT] language?",
        "entity": [
            "Fluidinfo",
            "PostgreSQL"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2271",
        "question": "Which neighboring municipalities of Cologny has a mayor named Ester Alder ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Esther_Alder>  . }",
        "SExpr": "(AND (JOIN dbp:neighboringMunicipalities dbr:Cologny) (JOIN dbo:mayor dbr:Esther_Alder))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which neighboring municipalities of Cologny",
                    "start": 0,
                    "end": 43
                },
                {
                    "description": "has a mayor named Ester Alder",
                    "start": 44,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (VBG neighboring) (NNS municipalities)) (PP (IN of) (NP (NNP Cologny)))) (SQ (VBZ has) (NP (DT a) (NN mayor)) (VP (VBN named) (NP (NNP Ester) (NNP Alder)))) (. ?)))",
        "mask_entity": "Which neighboring municipalities of [ENT] has a mayor named [ENT] ?",
        "entity": [
            "Cologny",
            "Ester Alder"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4490",
        "question": "How many people work in the Massachusetts house of Representatives?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . }",
        "SExpr": "(JOIN dbp:office dbr:Massachusetts_House_of_Representatives)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP work) (PP (IN in) (NP (NP (DT the) (NNP Massachusetts) (NN house)) (PP (IN of) (NP (NNPS Representatives))))))) (. ?)))",
        "mask_entity": "How many people work in the [ENT] house of Representatives?",
        "entity": [
            "Massachusetts"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3111",
        "question": "Which countries came together to serve a greater purpose and founded South Asia Subregional Economic Cooperation?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation> <http://dbpedia.org/property/membership> ?uri } ",
        "SExpr": "(JOIN (R dbp:membership) dbr:South_Asia_Subregional_Economic_Cooperation)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS countries)) (S (VP (VBD came) (ADVP (RB together)) (S (VP (TO to) (VP (VP (VB serve) (NP (DT a) (JJR greater) (NN purpose))) (CC and) (VP (VBD founded) (NP (NML (NML (NNP South) (NNP Asia)) (NNP Subregional)) (NNP Economic) (NNP Cooperation)))))))) (. ?)))",
        "mask_entity": "Which countries came together to serve a greater purpose and founded [ENT]?",
        "entity": [
            "South Asia Subregional Economic Cooperation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1137",
        "question": "Count the number of religions followed by Janta Dal members.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Janata_Dal> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbp:party dbr:Janata_Dal)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of religions",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "followed by [IQ1]",
                    "start": 30,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Janta Dal members",
                                "start": 42,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NML (NNP Janta) (NNP Dal)) (NNS members)))))))) (. .)))",
        "mask_entity": "Count the number of religions followed by [ENT] members.",
        "entity": [
            "Janta Dal"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3895",
        "question": "Did Johann Gottfried Galle invent Neptune?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Neptune> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Johann_Gottfried_Galle> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Johann) (NNP Gottfried) (NNP Galle)) (VP (VB invent) (NP (NNP Neptune))) (. ?)))",
        "mask_entity": "Did [ENT] invent [ENT]?",
        "entity": [
            "Johann Gottfried Galle",
            "Neptune"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "972",
        "question": "Who is the founder of Wuropean School, Karlsruhe ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri } ",
        "SExpr": "(JOIN (R dbp:founder) dbr:European_School,_Karlsruhe)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NP (NNP Wuropean) (NNP School)) (, ,) (NP (NNP Karlsruhe))))))) (. ?)))",
        "mask_entity": "Who is the founder of [ENT], [ENT] ?",
        "entity": [
            "Wuropean School",
            "Karlsruhe"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "795",
        "question": "Which football team is in a city where A J Clark was a builder?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/A._James_Clark> . ?uri <http://dbpedia.org/property/city> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "SExpr": "(AND dbo:AmericanFootballTeam (JOIN dbp:city (JOIN dbo:builder dbr:A._James_Clark))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which football team",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "is in [IQ1]",
                    "start": 20,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a city",
                                "start": 26,
                                "end": 32
                            },
                            {
                                "description": "where A J Clark was a builder",
                                "start": 33,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN football) (NN team)) (SQ (VP (VBZ is) (PP (IN in) (NP (NP (DT a) (NN city)) (SBAR (WHADVP (WRB where)) (S (NP (DT A) (NNP J) (NNP Clark)) (VP (VBD was) (NP (DT a) (NN builder))))))))) (. ?)))",
        "mask_entity": "Which football team is in a city where [ENT] was a builder?",
        "entity": [
            "A J Clark"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3020",
        "question": "Which city near to Elliott Bay was the death place of George F. Moore ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:nearestCity) dbr:Elliott_Bay) (JOIN (R dbp:placeOfDeath) dbr:George_F._Moore_(lieutenant_governor)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "near to Elliott Bay",
                    "start": 11,
                    "end": 30
                },
                {
                    "description": "was the death place of George F. Moore",
                    "start": 31,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN city)) (PP (IN near) (PP (IN to) (NP (NNP Elliott) (NNP Bay))))) (SQ (VP (VBD was) (NP (NP (DT the) (NN death) (NN place)) (PP (IN of) (NP (NNP George) (NNP F.) (NNP Moore)))))) (. ?)))",
        "mask_entity": "Which city near to [ENT] was the death place of [ENT] ?",
        "entity": [
            "Elliott Bay",
            "George F. Moore"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1711",
        "question": "Where does Kafue and Shire river flow into?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kafue_River> <http://dbpedia.org/ontology/riverMouth> ?uri. <http://dbpedia.org/resource/Shire_River> <http://dbpedia.org/ontology/riverMouth> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:riverMouth) dbr:Kafue_River) (JOIN (R dbo:riverMouth) dbr:Shire_River))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does Kafue and Shire river flow into",
                    "start": 0,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (NNP Kafue) (CC and) (NNP Shire) (NN river)) (VP (VB flow) (PRT (IN into)))) (. ?)))",
        "mask_entity": "Where does [ENT] and [ENT] river flow into?",
        "entity": [
            "Kafue",
            "Shire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3387",
        "question": "Through which label has Katy B released her singles?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Katy_B> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
        "SExpr": "(JOIN (R dbo:recordLabel) (AND dbo:Single (JOIN dbo:writer dbr:Katy_B))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Through which label [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has Katy B released her singles",
                                "start": 20,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN Through) (WHNP (WDT which) (NN label))) (SQ (VBZ has) (NP (NNP Katy) (NNP B)) (VP (VBN released) (NP (PRP$ her) (NNS singles)))) (. ?)))",
        "mask_entity": "Through which label has [ENT] released her singles?",
        "entity": [
            "Katy B"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "36",
        "question": "List the teams for which Bobby Hoppe played ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri } ",
        "SExpr": "(JOIN (R dbp:pastteams) dbr:Bobby_Hoppe)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS teams)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NNP Bobby) (NNP Hoppe)) (VP (VBD played)))))) (. ?)))",
        "mask_entity": "List the teams for which [ENT] played ?",
        "entity": [
            "Bobby Hoppe"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "453",
        "question": "How many other characters are there of the plays which has a  characters name Joker (comics) ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Joker_(comics)> . ?x <http://dbpedia.org/property/characters> ?uri }",
        "SExpr": "(JOIN (R dbp:characters) (JOIN dbp:characters dbr:Joker_(comics))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other characters are there of [IQ1]",
                    "start": 0,
                    "end": 91,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the plays",
                                "start": 39,
                                "end": 48
                            },
                            {
                                "description": "which has a characters name Joker (comics)",
                                "start": 49,
                                "end": 91
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ other) (NNS characters)) (VP (VBP are) (NP (NP (EX there)) (PP (IN of) (NP (NP (DT the) (NNS plays)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT a) (NNS characters) (NN name)) (NP (NNP Joker) (-LRB- () (NNS comics)) (ADJP (-RRB- )))))))))))) (. ?)))",
        "mask_entity": "How many other characters are there of the plays which has a  characters name [ENT] (comics) ?",
        "entity": [
            "Joker"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "913",
        "question": "Who first ascented a mountain of Cathedral Peak (California) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri } ",
        "SExpr": "(JOIN (R dbo:firstAscentPerson) dbr:Cathedral_Peak_(California))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (ADVP (RB first)) (VP (VBD ascented) (NP (NP (DT a) (NN mountain)) (PP (IN of) (NP (NP (NNP Cathedral) (NNP Peak)) (VP (-LRB- () (NP (NNP California) (-RRB- ))))))))) (. ?)))",
        "mask_entity": "Who [ENT] ascented a mountain of [ENT] ([ENT]) ?",
        "entity": [
            "first",
            "Cathedral Peak",
            "California"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4081",
        "question": "Which awards did the children of Erik Bergman won ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erik_Bergman_(Lutheran_minister)> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN (R dbp:children) dbr:Erik_Bergman_(Lutheran_minister))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which awards",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "did [IQ1] won",
                    "start": 13,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the children of Erik Bergman",
                                "start": 17,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS awards)) (SQ (VBD did) (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NNP Erik) (NNP Bergman)))) (VP (VBD won))) (. ?)))",
        "mask_entity": "Which awards did the children of [ENT] won ?",
        "entity": [
            "Erik Bergman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1199",
        "question": "Name the sharehoders of The National Herald ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "SExpr": "(JOIN (R dbo:owner) dbr:The_National_Herald_(India))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS sharehoders)) (PP (IN of) (NP (DT The) (NNP National) (NNP Herald))))) (. ?)))",
        "mask_entity": "Name the sharehoders of [ENT] ?",
        "entity": [
            "The National Herald"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1274",
        "question": "Which writer of A streetcar Named Desire is also the author of The Catastrophe of Success ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/The_Catastrophe_of_Success> <http://dbpedia.org/ontology/author> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:writer) dbr:A_Streetcar_Named_Desire_(play)) (JOIN (R dbo:author) dbr:The_Catastrophe_of_Success))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which writer of A streetcar Named Desire",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is also the author of The Catastrophe of Success",
                    "start": 41,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN writer)) (PP (IN of) (NP (DT A) (JJ streetcar) (VBN Named) (NNP Desire)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN author)) (PP (IN of) (NP (NP (DT The) (NNP Catastrophe)) (PP (IN of) (NP (NNP Success))))))) (. ?)))",
        "mask_entity": "Which writer of [ENT] is also the author of [ENT] ?",
        "entity": [
            "A streetcar Named Desire",
            "The Catastrophe of Success"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2375",
        "question": "How many people are buried in the Mausoleum of Augustus?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus>  . }",
        "SExpr": "(JOIN dbp:placeOfBurial dbr:Mausoleum_of_Augustus)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP are) (VP (VBN buried) (PP (IN in) (NP (NP (DT the) (NNP Mausoleum)) (PP (IN of) (NP (NNP Augustus)))))))) (. ?)))",
        "mask_entity": "How many people are buried in [ENT]?",
        "entity": [
            "the Mausoleum of Augustus"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "37",
        "question": "What are some famous works of the writer of The Second Coming?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
        "SExpr": "(JOIN (R dbp:notableworks) (JOIN (R dbp:writer) dbr:The_Second_Coming_(TV_serial))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some famous works of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writer of The Second Coming",
                                "start": 30,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ famous) (NNS works)) (PP (IN of) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (DT The) (JJ Second) (NNP Coming)))))))) (. ?)))",
        "mask_entity": "What are some famous works of the writer of The [ENT] Coming?",
        "entity": [
            "Second"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "974",
        "question": "List the program genres of the sister stations of 97.1 WASH FM?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WASH_(FM)> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/programmeFormat> ?uri  . }",
        "SExpr": "(JOIN (R dbo:programmeFormat) (JOIN (R dbp:sisterStations) dbr:WASH_(FM))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the program genres of [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sister stations of 97.1 WASH FM",
                                "start": 27,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN program) (NNS genres)) (PP (IN of) (NP (NP (DT the) (NN sister) (NNS stations)) (PP (IN of) (NP (CD 97.1) (NNP WASH) (NNP FM))))))) (. ?)))",
        "mask_entity": "List the program genres of the sister stations of [ENT] WASH FM?",
        "entity": [
            "97.1"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3195",
        "question": "Which team's players have played in the national hockey league?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "SExpr": "(JOIN (R dbo:team) (AND dbo:Athlete (JOIN dbp:league dbr:National_Hockey_League))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which team's [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "players",
                                "start": 13,
                                "end": 20
                            },
                            {
                                "description": "have played in the national hockey league",
                                "start": 21,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN team) (POS 's)) (NNS players)) (VP (VBP have) (VP (VBN played) (PP (IN in) (NP (DT the) (JJ national) (NN hockey) (NN league))))) (. ?)))",
        "mask_entity": "Which team's players have played in the national hockey league?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "983",
        "question": "Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Teddy_Riley) (JOIN (R dbo:musicalArtist) dbr:Before_I_Let_You_Go))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which associated band of the Teddy Riley",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is also the performer of the Before I Let You Go",
                    "start": 41,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (VBN associated) (NN band)) (PP (IN of) (NP (DT the) (NNP Teddy) (NNP Riley)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (NP (DT the) (NN performer)) (PP (IN of) (NP (DT the)))) (SBAR (WHNP (IN Before)) (S (NP (PRP I)) (VP (VBD Let) (S (NP (PRP You)) (VP (VB Go)))))))) (. ?)))",
        "mask_entity": "Which associated band of [ENT] is also the performer of [ENT]?",
        "entity": [
            "the Teddy Riley",
            "the Before I Let You Go"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3904",
        "question": "Where was James McClure born ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_McClure_(table_tennis)> <http://dbpedia.org/property/birthPlace> ?uri } ",
        "SExpr": "(JOIN (R dbp:birthPlace) dbr:James_McClure_(table_tennis))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP James) (NNP McClure)) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where was [ENT] born ?",
        "entity": [
            "James McClure"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4069",
        "question": "Who is the operator of AT&T Park ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/AT&T_Park> <http://dbpedia.org/property/operator> ?uri } ",
        "SExpr": "(JOIN (R dbp:operator) dbr:AT&T_Park)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN operator)) (PP (IN of) (NP (NNP AT&T) (NNP Park)))))) (. ?)))",
        "mask_entity": "Who is the operator of [ENT] ?",
        "entity": [
            "AT&T Park"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1418",
        "question": "Whose music composer is signed up with Sony Music Entertainment?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . }",
        "SExpr": "(JOIN dbo:musicComposer (JOIN dbp:label dbr:Sony_Music_Entertainment)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose music composer [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is signed up with Sony Music Entertainment",
                                "start": 21,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NN music) (NN composer)) (VP (VBZ is) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NNP Sony) (NNP Music) (NNP Entertainment))))) (. ?)))",
        "mask_entity": "Whose music composer is signed up with [ENT]?",
        "entity": [
            "Sony Music Entertainment"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3332",
        "question": "In which company is Raymond Conner at an important position?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner> } ",
        "SExpr": "(JOIN dbo:keyPerson dbr:Raymond_Conner)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN company)) (VP (VBZ is) (NP (NNP Raymond) (NNP Conner)) (PP (IN at) (NP (DT an) (JJ important) (NN position))))) (. ?)))",
        "mask_entity": "In which company is [ENT] at an important position?",
        "entity": [
            "Raymond Conner"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1560",
        "question": "Who hold stocks in the bank which is located at 731 Lexington Avenue?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/731_Lexington_Avenue> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Bank (JOIN dbo:locationCity dbr:731_Lexington_Avenue))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who hold stocks in [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bank",
                                "start": 19,
                                "end": 27
                            },
                            {
                                "description": "which is located at 731 Lexington Avenue",
                                "start": 28,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP hold) (NP (NP (NNS stocks)) (PP (IN in) (NP (NP (DT the) (NN bank)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN located) (PP (IN at) (NP (CD 731) (NNP Lexington) (NNP Avenue)))))))))))) (. ?)))",
        "mask_entity": "Who hold stocks in the bank which is located at [ENT]?",
        "entity": [
            "731 Lexington Avenue"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "39",
        "question": "Which labels signs up progressive rock bands?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Progressive_rock> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(JOIN (R dbo:recordLabel) (AND dbo:MusicalArtist (JOIN dbp:genre dbr:Progressive_rock))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which labels",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "signs up [IQ1]",
                    "start": 13,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "progressive rock bands",
                                "start": 22,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBZ labels) (NP (NNS signs)) (PRT (RP up)) (NP (JJ progressive) (NN rock) (NNS bands)))) (. ?)))",
        "mask_entity": "Which labels signs up progressive rock bands?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1486",
        "question": "Where does the railway tracks start, which ends in Kazan?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Kazan> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
        "SExpr": "(JOIN (R dbo:routeStart) (AND dbo:RailwayLine (JOIN dbo:routeEnd dbr:Kazan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the railway tracks start, [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which ends in Kazan",
                                "start": 37,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN railway) (NNS tracks)) (VP (VB start))) (, ,) (SBARQ (WHNP (WDT which)) (SQ (VP (VBZ ends) (PP (IN in) (NP (NNP Kazan))))) (. ?))))",
        "mask_entity": "Where does the railway tracks start, which ends in [ENT]?",
        "entity": [
            "Kazan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3883",
        "question": "Name the branch of Carroll E. Lanier ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carroll_E._Lanier> <http://dbpedia.org/property/branch> ?uri } ",
        "SExpr": "(JOIN (R dbp:branch) dbr:Carroll_E._Lanier)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NNP Carroll) (NNP E.) (NNP Lanier))))) (. ?)))",
        "mask_entity": "Name the branch of [ENT]",
        "entity": [
            "Carroll E. Lanier ?"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "169",
        "question": "what are some devices made by asus?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "SExpr": "(AND dbo:InformationAppliance (JOIN dbo:manufacturer dbr:Asus))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some devices",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "made by asus",
                    "start": 22,
                    "end": 34
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP what)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS devices)) (VP (VBN made) (PP (IN by) (NP (NNP asus))))))) (. ?)))",
        "mask_entity": "what are some devices made by asus?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1355",
        "question": "Which former team of Franois Beauchemin does the Nathan Dempsey played for ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nathan_Dempsey> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Fran\u00e7ois_Beauchemin> <http://dbpedia.org/ontology/formerTeam> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:playedFor) dbr:Nathan_Dempsey) (JOIN (R dbo:formerTeam) dbr:Fran\u00e7ois_Beauchemin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which former team of Franois Beauchemin",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "does the Nathan Dempsey played for",
                    "start": 40,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ former) (NN team)) (PP (IN of) (NP (NNP Franois) (NNP Beauchemin)))) (SQ (VBZ does) (NP (DT the) (NNP Nathan) (NNP Dempsey)) (VP (VBN played) (PP (IN for)))) (. ?)))",
        "mask_entity": "Which former team of [ENT] does the [ENT] played for ?",
        "entity": [
            "Franois Beauchemin",
            "Nathan Dempsey"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2785",
        "question": "What is the colour of Red Marauder ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_Marauder> <http://dbpedia.org/ontology/colour> ?uri } ",
        "SExpr": "(JOIN (R dbo:colour) dbr:Red_Marauder)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN colour)) (PP (IN of) (NP (NNP Red) (NNP Marauder)))))) (. ?)))",
        "mask_entity": "What is the colour of [ENT] ?",
        "entity": [
            "Red Marauder"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3632",
        "question": "What is the draft team of Dale Mitchell (ice hockey) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri } ",
        "SExpr": "(JOIN (R dbo:draftTeam) dbr:Dale_Mitchell_(ice_hockey))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NP (NNP Dale) (NNP Mitchell)) (VP (-LRB- () (NP (NN ice) (NN hockey)) (ADVP (-RRB- ))))))))) (. ?)))",
        "mask_entity": "What is the draft team of [ENT] (ice hockey) ?",
        "entity": [
            "Dale Mitchell"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4748",
        "question": "Give me a count of schools in Reading, Berkshire?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(AND dbo:School (JOIN dbo:city dbr:Reading,_Berkshire))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a count of schools",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "in Reading, Berkshire",
                    "start": 27,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NNS schools))) (PP (IN in) (NP (NP (NN Reading)) (, ,) (NP (NNP Berkshire)))))) (. ?)))",
        "mask_entity": "Give me a count of schools in [ENT], [ENT]?",
        "entity": [
            "Reading",
            "Berkshire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4004",
        "question": "Who are some cofounders of record labels with Frank Rogers?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
        "SExpr": "(JOIN (R dbp:founder) (AND dbo:RecordLabel (JOIN dbo:foundedBy dbr:Frank_Rogers_(record_producer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are some cofounders of [IQ1]",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "record labels",
                                "start": 27,
                                "end": 40
                            },
                            {
                                "description": "with Frank Rogers",
                                "start": 41,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS cofounders)) (PP (IN of) (NP (NP (NN record) (NNS labels)) (PP (IN with) (NP (NNP Frank) (NNP Rogers)))))))) (. ?)))",
        "mask_entity": "Who are some cofounders of record labels with [ENT]?",
        "entity": [
            "Frank Rogers"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2682",
        "question": "By whom is the broadcaster network Bounce TV founded?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bounce_TV> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
        "SExpr": "(JOIN (R dbo:foundedBy) dbr:Bounce_TV)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN By) (WHNP (WP whom))) (SQ (VBZ is) (NP (NP (DT the) (NN broadcaster) (NN network)) (NP (NN Bounce) (NN TV))) (VP (VBN founded))) (. ?)))",
        "mask_entity": "By whom is the broadcaster network [ENT] founded?",
        "entity": [
            "Bounce TV"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4704",
        "question": "Who is the scientist whose doctoral student is Erich Bagge?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Erich_Bagge>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbo:doctoralStudent dbr:Erich_Bagge))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the scientist",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "whose doctoral student is Erich Bagge",
                    "start": 21,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (JJ doctoral) (NN student)) (S (VP (VBZ is) (NP (NNP Erich) (NNP Bagge)))))))) (. ?)))",
        "mask_entity": "Who is the scientist whose doctoral student is [ENT]?",
        "entity": [
            "Erich Bagge"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4025",
        "question": "Who appointed the successor of Thomas Bee?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Bee> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:appointer) (JOIN (R dbo:successor) dbr:Thomas_Bee)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who appointed [IQ1]",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Thomas Bee",
                                "start": 14,
                                "end": 41
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD appointed) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Thomas) (NNP Bee)))))) (. ?)))",
        "mask_entity": "Who appointed the successor of [ENT]?",
        "entity": [
            "Thomas Bee"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1640",
        "question": "Was Buzz Williams the headcoach of the Marquette Golden Eagles mens team?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> <http://dbpedia.org/resource/Buzz_Williams> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Buzz) (NNP Williams)) (NP (NP (DT the) (NN headcoach)) (PP (IN of) (NP (DT the) (NML (NNP Marquette) (NNP Golden) (NNPS Eagles)) (NN mens) (NN team)))) (. ?)))",
        "mask_entity": "Was [ENT] the headcoach of the [ENT] [ENT] mens team?",
        "entity": [
            "Buzz Williams",
            "Marquette",
            "Golden Eagles"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1290",
        "question": "List books authored by Miguel de Cervantes and published by Francisco de Robles ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> . ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (AND (JOIN dbp:author dbr:Miguel_de_Cervantes) (JOIN dbo:publisher dbr:Francisco_de_Robles)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List books",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "authored by Miguel de Cervantes",
                    "start": 11,
                    "end": 42
                },
                {
                    "description": "and published by Francisco de Robles",
                    "start": 43,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NN List) (NNS books)) (VP (VP (VBN authored) (PP (IN by) (NP (NNP Miguel) (NNP de) (NNP Cervantes)))) (CC and) (VP (VBN published) (PP (IN by) (NP (NNP Francisco) (NNP de) (NNP Robles))))) (. ?)))",
        "mask_entity": "List books authored by [ENT] and published by [ENT] ?",
        "entity": [
            "Miguel de Cervantes",
            "Francisco de Robles"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1380",
        "question": "List down all notable works of Neil Cross ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri } ",
        "SExpr": "(JOIN (R dbo:notableWork) dbr:Neil_Cross)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (PRT (RP down)) (NP (NP (DT all) (JJ notable) (NNS works)) (PP (IN of) (NP (NNP Neil) (NNP Cross))))) (. ?)))",
        "mask_entity": "List down all notable works of [ENT] ?",
        "entity": [
            "Neil Cross"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1933",
        "question": "What is the local authority of the Buckhurst Hill County High School is also the birth palce of Sarah hampion ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Sarah_Champion_(presenter)> <http://dbpedia.org/property/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:localAuthority) dbr:Buckhurst_Hill_County_High_School) (JOIN (R dbp:birthPlace) dbr:Sarah_Champion_(presenter)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the local authority of the Buckhurst Hill County High School",
                    "start": 0,
                    "end": 68
                },
                {
                    "description": "is also the birth place of Sarah hampion",
                    "start": 69,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (SINV (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (DT the) (NML (NML (NNP Buckhurst) (NNP Hill)) (NNP County)) (NNP High) (NNP School))))))) (VP (VBZ is)) (ADVP (RB also)) (NP (NP (DT the) (NN birth) (NN palce)) (PP (IN of) (NP (NNP Sarah) (NNP hampion)))) (. ?)))",
        "mask_entity": "What is the local authority of [ENT] is also the birth palce of [ENT] hampion ?",
        "entity": [
            "the Buckhurst Hill County High School",
            "Sarah"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "579",
        "question": "what awards have been giving to Muhammad Yunus?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri } ",
        "SExpr": "(JOIN (R dbo:award) dbr:Muhammad_Yunus)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT what)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBG giving) (PP (IN to) (NP (NNP Muhammad) (NNP Yunus))))))) (. ?)))",
        "mask_entity": "what awards have been giving to [ENT]?",
        "entity": [
            "Muhammad Yunus"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4220",
        "question": "Who is the meaning of the name Isa which was also one of the subject of play The Prodigal Son ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri. <http://dbpedia.org/resource/The_Prodigal_Son_(play)> <http://dbpedia.org/property/subject> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:meaning) dbr:Isa_(name)) (JOIN (R dbp:subject) dbr:The_Prodigal_Son_(play)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the meaning of the name Isa",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "which was also one of the subject of play The Prodigal Son",
                    "start": 35,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (NP (NP (DT the) (NN name)) (NP (NNP Isa))) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN subject)) (PP (IN of) (NP (NN play)))))) (NP (DT The) (NNP Prodigal) (NNP Son))))))))))) (. ?)))",
        "mask_entity": "Who is the meaning of the name [ENT] which was also [ENT] of the subject of play [ENT] ?",
        "entity": [
            "Isa",
            "one",
            "The Prodigal Son"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3160",
        "question": "Who are the parent  of the people that  has POD as Redding, Connecticut ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Redding,_Connecticut> . ?x <http://dbpedia.org/ontology/parent> ?uri  . }",
        "SExpr": "(JOIN (R dbo:parent) (JOIN dbo:deathPlace dbr:Redding,_Connecticut)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the parent of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 22,
                                "end": 32
                            },
                            {
                                "description": "that has POD as Redding, Connecticut",
                                "start": 33,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NN parent)) (PP (IN of) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WDT that)) (S (VP (VBZ has) (VP (VBN POD) (PP (IN as) (NP (NP (NNP Redding)) (, ,) (NP (NNP Connecticut))))))))))))) (. ?)))",
        "mask_entity": "Who are the parent  of the people that  has POD as [ENT], [ENT] ?",
        "entity": [
            "Redding",
            "Connecticut"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2030",
        "question": "Was saddam hussein at the rank of Mushir ever?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Saddam_Hussein> <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Mushir> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP saddam) (NNP hussein)) (PP (IN at) (NP (NP (DT the) (NN rank)) (PP (IN of) (NP (NNP Mushir))))) (ADVP (RB ever)) (. ?)))",
        "mask_entity": "Was saddam hussein at the rank of [ENT] ever?",
        "entity": [
            "Mushir"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "892",
        "question": "What are the things Eric Schiller known for ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri } ",
        "SExpr": "(JOIN (R dbo:knownFor) dbr:Eric_Schiller)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS things)) (SBAR (S (NP (NNP Eric) (NNP Schiller)) (VP (VBN known) (PP (IN for)))))))) (. ?)))",
        "mask_entity": "What are the things [ENT] known for ?",
        "entity": [
            "Eric Schiller"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3951",
        "question": "List the parts of Greater San Antonio?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Greater_San_Antonio> <http://dbpedia.org/ontology/part> ?uri } ",
        "SExpr": "(JOIN (R dbo:part) dbr:Greater_San_Antonio)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS parts)) (PP (IN of) (NP (JJ Greater) (NNP San) (NNP Antonio))))) (. ?)))",
        "mask_entity": "List the parts of [ENT]?",
        "entity": [
            "Greater San Antonio"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "780",
        "question": "What is the president whose lieutenants are Winston Bryant and Joe Purcell?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Joe_Purcell> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(AND dbo:President (AND (JOIN dbo:lieutenant dbr:Winston_Bryant) (JOIN dbo:lieutenant dbr:Joe_Purcell)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the president",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose lieutenants are Winston Bryant and Joe Purcell",
                    "start": 22,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NNS lieutenants)) (S (VP (VBP are) (NP (NP (NNP Winston) (NNP Bryant)) (CC and) (NP (NNP Joe) (NNP Purcell))))))))) (. ?)))",
        "mask_entity": "What is the president whose lieutenants are [ENT] and [ENT]?",
        "entity": [
            "Winston Bryant",
            "Joe Purcell"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "159",
        "question": "Where is Temenos Group founded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Temenos_Group> <http://dbpedia.org/property/foundation> ?uri } ",
        "SExpr": "(JOIN (R dbp:foundation) dbr:Temenos_Group)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Temenos) (NNP Group)) (VP (VBN founded))) (. ?)))",
        "mask_entity": "Where is [ENT] founded ?",
        "entity": [
            "Temenos Group"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2",
        "question": "Name some leaders of the parent organisation of the Gestapo?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gestapo> <http://dbpedia.org/ontology/parentOrganisation> ?x . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
        "SExpr": "(JOIN (R dbo:leader) (JOIN (R dbo:parentOrganisation) dbr:Gestapo)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name some leaders of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the parent organisation of the Gestapo",
                                "start": 21,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NNS leaders)) (PP (IN of) (NP (NP (DT the) (NN parent) (NN organisation)) (PP (IN of) (NP (DT the) (NNP Gestapo))))))) (. ?)))",
        "mask_entity": "Name some leaders of the parent organisation of the [ENT]?",
        "entity": [
            "Gestapo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2263",
        "question": "How many venues are located in the US?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/address> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
        "SExpr": "(AND dbo:Venue (JOIN dbp:address dbr:United_States))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many venues",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are located in the US",
                    "start": 16,
                    "end": 37
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS venues)) (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (DT the) (NNP US)))))) (. ?)))",
        "mask_entity": "How many venues are located in the [ENT]?",
        "entity": [
            "US"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3216",
        "question": "What are some neighboring cities of cologny?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny>  . }",
        "SExpr": "(JOIN dbp:neighboringMunicipalities dbr:Cologny)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ neighboring) (NNS cities)) (PP (IN of) (NP (NN cologny)))))) (. ?)))",
        "mask_entity": "What are some neighboring cities of cologny?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2109",
        "question": "What religion is Kabir Suman from?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthName> <http://dbpedia.org/resource/Kabir_Suman> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbp:religion) (JOIN dbp:birthName dbr:Kabir_Suman)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VP (VBZ is) (NP (NNP Kabir) (NNP Suman)) (PP (IN from)))) (. ?)))",
        "mask_entity": "What religion is [ENT] from?",
        "entity": [
            "Kabir Suman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "849",
        "question": "Does Kirk Hammett play the Gibson Flying V?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Kirk_Hammett> <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Gibson_Flying_V> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Kirk) (NNP Hammett)) (VP (VB play) (NP (DT the) (NNP Gibson) (NNP Flying) (NNP V))) (. ?)))",
        "mask_entity": "Does [ENT] play the [ENT] Flying V?",
        "entity": [
            "Kirk Hammett",
            "Gibson"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2737",
        "question": "Who are the people who died in a place architected by Jens Jensen",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Jens_Jensen_(landscape_architect)> . ?uri <http://dbpedia.org/ontology/deathPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:deathPlace (JOIN dbo:architect dbr:Jens_Jensen_(landscape_architect)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the people",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "who died in [IQ1]",
                    "start": 19,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a place",
                                "start": 31,
                                "end": 38
                            },
                            {
                                "description": "architected by Jens Jensen",
                                "start": 39,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBP are) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN architected) (PP (IN by) (NP (NNP Jens) (NNP Jensen))))))))))))))",
        "mask_entity": "Who are the people who died in a place architected by [ENT]",
        "entity": [
            "Jens Jensen"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2466",
        "question": "Who has Kelly Osbourne and Ozzy Osbourne as relatives?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
        "SExpr": "(AND (JOIN dbo:relative dbr:Kelly_Osbourne) (JOIN dbo:relative dbr:Ozzy_Osbourne))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has Kelly Osbourne and Ozzy Osbourne as relatives",
                    "start": 0,
                    "end": 53
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (NP (NP (NNP Kelly) (NNP Osbourne)) (CC and) (NP (NNP Ozzy) (NNP Osbourne))) (PP (IN as) (NP (NNS relatives))))) (. ?)))",
        "mask_entity": "Who has [ENT] and [ENT] as relatives?",
        "entity": [
            "Kelly Osbourne",
            "Ozzy Osbourne"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3650",
        "question": "Name the television show whose subsequent work is Frasier and opening theme is Where Everybody Knows Your Name?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:subsequentWork dbr:Frasier) (JOIN dbo:openingTheme dbr:Where_Everybody_Knows_Your_Name)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose subsequent work is Frasier",
                    "start": 25,
                    "end": 57
                },
                {
                    "description": "and opening theme is Where Everybody Knows Your Name",
                    "start": 58,
                    "end": 110
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (JJ subsequent) (NN work)) (S (VP (VBZ is) (NP (NNP Frasier)))))) (CC and) (NP (NP (VBG opening) (NN theme)) (VP (VBZ is) (SBAR (WHADVP (WRB Where)) (S (NP (NN Everybody)) (VP (VBZ Knows) (NP (PRP$ Your) (NN Name))))))))) (. ?)))",
        "mask_entity": "Name the television show whose subsequent work is [ENT] and opening theme is [ENT]?",
        "entity": [
            "Frasier",
            "Where Everybody Knows Your Name"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1596",
        "question": "Name the television show whose company is HBO and Playtone?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:company dbr:HBO) (JOIN dbp:company dbr:Playtone)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose company is HBO and Playtone",
                    "start": 25,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN company)) (S (VP (VBZ is) (NP (NNP HBO) (CC and) (NNP Playtone))))))) (. ?)))",
        "mask_entity": "Name the television show whose company is [ENT] and [ENT]?",
        "entity": [
            "HBO",
            "Playtone"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1776",
        "question": "Name the cover artist of the adventure of Tom sawyer ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri } ",
        "SExpr": "(JOIN (R dbo:coverArtist) dbr:The_Adventures_of_Tom_Sawyer)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN cover) (NN artist)) (PP (IN of) (NP (NP (DT the) (NN adventure)) (PP (IN of) (NP (NNP Tom) (NNP sawyer))))))) (. ?)))",
        "mask_entity": "Name the cover artist of the adventure of [ENT] sawyer ?",
        "entity": [
            "Tom"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1913",
        "question": "Who did Bruce Bochy play for ? ",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bruce_Bochy> <http://dbpedia.org/ontology/team> ?uri } ",
        "SExpr": "(JOIN (R dbo:team) dbr:Bruce_Bochy)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Bruce) (NNP Bochy)) (VP (VB play) (PP (IN for)))) (. ?)))",
        "mask_entity": "Who did [ENT] play for ? ",
        "entity": [
            "Bruce Bochy"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1043",
        "question": "Name the company which provides Outlook.com as service and also has a product named Microsoft Azure ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbp:services dbr:Outlook.com) (JOIN dbo:product dbr:Microsoft_Azure)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "which provides Outlook.com as service",
                    "start": 17,
                    "end": 54
                },
                {
                    "description": "and also has a product named Microsoft Azure",
                    "start": 55,
                    "end": 99
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ provides) (NP (ADD Outlook.com)) (PP (IN as) (NP (NN service)))) (CC and) (ADVP (RB also)) (VP (VBZ has) (NP (NP (DT a) (NN product)) (VP (VBN named) (S (NP (NNP Microsoft) (NNP Azure))))))))))) (. ?)))",
        "mask_entity": "Name the company which provides [ENT] as service and also has a product named [ENT] [ENT] ?",
        "entity": [
            "Outlook.com",
            "Microsoft",
            "Azure"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4713",
        "question": "Name the company with product named Microsft Azure and provides OneDrive as a service ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:product dbr:Microsoft_Azure) (JOIN dbp:services dbr:OneDrive)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with product named Microsft Azure",
                    "start": 17,
                    "end": 50
                },
                {
                    "description": "and provides OneDrive as a service",
                    "start": 51,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN company)) (PP (IN with) (NP (NP (NN product)) (VP (VBN named) (S (NP (NNP Microsft) (NNP Azure))))))) (CC and) (VP (VBZ provides) (NP (NNP OneDrive)) (PP (IN as) (NP (DT a) (NN service))))) (. ?)))",
        "mask_entity": "Name the company with product named [ENT] and provides [ENT] as a service ?",
        "entity": [
            "Microsft Azure",
            "OneDrive"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1544",
        "question": "Which political party got elected in First Legislative Assembly of Uttar Pradesh ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Crane> <http://dbpedia.org/property/children> ?uri } ",
        "SExpr": "(JOIN (R dbp:children) dbr:Martin_Crane)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ political) (NN party)) (SQ (VP (VBD got) (VP (VBN elected) (PP (IN in) (NP (NP (NNP First) (NNP Legislative) (NNP Assembly)) (PP (IN of) (NP (NNP Uttar) (NNP Pradesh)))))))) (. ?)))",
        "mask_entity": "Which political party got elected in [ENT] ?",
        "entity": [
            "First Legislative Assembly of Uttar Pradesh"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2736",
        "question": "What is the deathplace of the Anatoly Kharlampiyev which is also the death place of  Lyudmila Buldakova?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Anatoly_Kharlampiyev> <http://dbpedia.org/property/deathPlace> ?uri. <http://dbpedia.org/resource/Lyudmila_Buldakova> <http://dbpedia.org/property/deathPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:deathPlace) dbr:Anatoly_Kharlampiyev) (JOIN (R dbp:deathPlace) dbr:Lyudmila_Buldakova))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the deathplace of the Anatoly Kharlampiyev",
                    "start": 0,
                    "end": 50
                },
                {
                    "description": "which is also the death place of Lyudmila Buldakova",
                    "start": 51,
                    "end": 102
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN deathplace)) (PP (IN of) (NP (DT the) (NNP Anatoly) (NNP Kharlampiyev)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN death) (NN place)) (PP (IN of) (NP (NNP Lyudmila) (NNP Buldakova)))))))))) (. ?)))",
        "mask_entity": "What is the deathplace of [ENT] which is also the death place of  [ENT]?",
        "entity": [
            "the Anatoly Kharlampiyev",
            "Lyudmila Buldakova"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3706",
        "question": "What is the Band whose band member is Mark Middleton?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mark_Middleton> } ",
        "SExpr": "(JOIN dbo:bandMember dbr:Mark_Middleton)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN Band)) (SBAR (WHNP (WP$ whose) (NN band) (NN member)) (S (VP (VBZ is) (NP (NNP Mark) (NNP Middleton)))))))) (. ?)))",
        "mask_entity": "What is the Band whose band member is [ENT]?",
        "entity": [
            "Mark Middleton"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4617",
        "question": "Is Tamera Mowry the former band member of Voices?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Voices_(group)> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Tamera_Mowry> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NP (NNP Tamera)))))",
        "mask_entity": "Is [ENT] [ENT] the former band member of [ENT]?",
        "entity": [
            "Tamera",
            "Mowry",
            "Voices"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "53",
        "question": "List the actors of  Lucy Sullivan Is Getting Married?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married> <http://dbpedia.org/property/starring> ?uri } ",
        "SExpr": "(JOIN (R dbp:starring) dbr:Lucy_Sullivan_Is_Getting_Married)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (S (NP (NP (DT the) (NNS actors)) (PP (IN of) (NP (NNP Lucy) (NNP Sullivan)))) (VP (VBZ Is) (S (VP (VBG Getting) (ADJP (VBN Married))))))) (. ?)))",
        "mask_entity": "List the actors of  [ENT] Is Getting Married?",
        "entity": [
            "Lucy Sullivan"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1796",
        "question": "How many people have worked in the band one of whose current member is Hynief?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Hynief> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:bandMember) (JOIN dbp:currentMembers dbr:Hynief))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have worked in [IQ1]",
                    "start": 16,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the band",
                                "start": 31,
                                "end": 39
                            },
                            {
                                "description": "one of whose current member is Hynief",
                                "start": 40,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN worked) (PP (IN in) (NP (NP (DT the) (NN band)) (NP (NP (CD one)) (WHPP (IN of) (WHNP (WP$ whose) (JJ current) (NN member)))))))))) (VP (VBZ is)) (NP (NNP Hynief)) (. ?)))",
        "mask_entity": "How many people have worked in the band one of whose current member is [ENT]?",
        "entity": [
            "Hynief"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1911",
        "question": "Enumerate all those who are in the Board of companies founded in New York?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/ontology/board> ?x  . }",
        "SExpr": "(JOIN dbo:board (JOIN dbp:foundation dbr:New_York)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Enumerate all those",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "who are in the Board of [IQ1]",
                    "start": 20,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 44,
                                "end": 53
                            },
                            {
                                "description": "founded in New York",
                                "start": 54,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Enumerate) (NP (NP (PDT all) (DT those)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NNP Board)) (PP (IN of) (NP (NP (NNS companies)) (VP (VBN founded) (PP (IN in) (NP (NNP New) (NNP York))))))))))))) (. ?)))",
        "mask_entity": "Enumerate all those who are in [ENT] founded in [ENT]?",
        "entity": [
            "the Board of companies",
            "New York"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2306",
        "question": "Name the awards that have been given to the writer made famous for Creature Comforts?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Creature_Comforts> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
        "SExpr": "(JOIN (R dbo:award) (AND dbo:Writer (JOIN dbo:notableWork dbr:Creature_Comforts))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the awards",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "that have been given to [IQ1]",
                    "start": 16,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writer",
                                "start": 40,
                                "end": 50
                            },
                            {
                                "description": "made famous for Creature Comforts",
                                "start": 51,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS awards)) (SBAR (WHNP (WDT that)) (S (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NN writer)) (VP (VBN made) (S (ADJP (JJ famous))) (PP (IN for) (NP (NNP Creature) (NNPS Comforts))))))))))))) (. ?)))",
        "mask_entity": "Name the awards that have been given to the writer made famous for [ENT]?",
        "entity": [
            "Creature Comforts"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2553",
        "question": "Murray Gold has composed music for how many things?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . }",
        "SExpr": "(JOIN dbo:composer dbr:Murray_Gold)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Murray) (NNP Gold)) (VP (VBZ has) (VP (VBN composed) (NP (NP (NN music)) (PP (IN for) (SBAR (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)) (. ?))))))))",
        "mask_entity": "[ENT] has composed music for how many things?",
        "entity": [
            "Murray Gold"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2800",
        "question": "In which wars did Percy Fitzwallace fight?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Percy_Fitzwallace> <http://dbpedia.org/property/battles> ?uri } ",
        "SExpr": "(JOIN (R dbp:battles) dbr:Percy_Fitzwallace)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN In) (WHNP (WDT which))) (S (VP (NNS wars) (SBAR (SQ (VBD did) (NP (NNP Percy) (NNP Fitzwallace)) (VP (VB fight)))))) (. ?)))",
        "mask_entity": "In which wars did [ENT] fight?",
        "entity": [
            "Percy Fitzwallace"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4086",
        "question": "What other awards have Becket fund for religious liberty winners received?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Becket_Fund_for_Religious_Liberty> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN dbo:award dbr:Becket_Fund_for_Religious_Liberty)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What other awards",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "have [IQ1] received",
                    "start": 18,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Becket fund for religious liberty winners",
                                "start": 23,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NNS awards)) (SQ (VBP have) (NP (NP (NNP Becket) (NN fund)) (PP (IN for) (NP (JJ religious) (NN liberty) (NNS winners)))) (VP (VBN received))) (. ?)))",
        "mask_entity": "What other awards have [ENT] fund for religious liberty winners received?",
        "entity": [
            "Becket"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4127",
        "question": "Who was the vice president under which elizabeth alexander served?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)> <http://dbpedia.org/ontology/vicePresident> ?uri  . }",
        "SExpr": "(JOIN (R dbo:vicePresident) dbr:Elizabeth_Alexander_(press_secretary))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (DT the) (NN vice) (NN president)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NN elizabeth) (NNP alexander)) (VP (VBD served))))))) (. ?)))",
        "mask_entity": "Who was the vice president under which [ENT] served?",
        "entity": [
            "elizabeth alexander"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "824",
        "question": "How many people have been presenters for NBC shows?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbp:presenter) (JOIN dbo:channel dbr:NBC))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been presenters for [IQ1]",
                    "start": 16,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "NBC shows",
                                "start": 41,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN been) (NP (NP (NNS presenters)) (PP (IN for) (NP (NNP NBC) (NNS shows))))))) (. ?)))",
        "mask_entity": "How many people have been presenters for [ENT] shows?",
        "entity": [
            "NBC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4733",
        "question": "Name the river whose source region is North-Western Province, Zambia and source location is Ikelenge  District?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbp:sourceRegion dbr:North-Western_Province,_Zambia) (JOIN dbp:sourceLocation dbr:Ikelenge_District)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose source region is North-Western Province, Zambia",
                    "start": 15,
                    "end": 68
                },
                {
                    "description": "and source location is Ikelenge District",
                    "start": 69,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (SINV (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source) (NN region)) (S (VP (VBZ is) (NP (NP (NNP North-Western) (NNP Province)) (, ,) (NP (NNP Zambia)) (CC and) (NP (NN source) (NN location)))))))) (VP (VBZ is)) (NP (NNP Ikelenge) (NNP District)) (. ?)))",
        "mask_entity": "Name the river whose source region is [ENT], [ENT] and source location is [ENT]?",
        "entity": [
            "North-Western Province",
            "Zambia",
            "Ikelenge  District"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3178",
        "question": "Who is the compiler of British Gazette whose prime minister is also Peter Thorneycroft ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri. <http://dbpedia.org/resource/Peter_Thorneycroft> <http://dbpedia.org/property/primeminister> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:editor) dbr:British_Gazette) (JOIN (R dbp:primeminister) dbr:Peter_Thorneycroft))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the compiler of British Gazette",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "whose prime minister is also Peter Thorneycroft",
                    "start": 39,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN compiler)) (PP (IN of) (NP (JJ British) (NNP Gazette)))) (SBAR (WHNP (WP$ whose) (JJ prime) (NN minister)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NNP Peter) (NNP Thorneycroft)))))))) (. ?)))",
        "mask_entity": "Who is the compiler of [ENT] whose prime minister is also [ENT] ?",
        "entity": [
            "British Gazette",
            "Peter Thorneycroft"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3401",
        "question": "Name the states which have been billed by the wrestlers who has also billed Georgia ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Georgia_(U.S._state)> . ?x <http://dbpedia.org/property/billed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}",
        "SExpr": "(JOIN (R dbp:billed) (AND dbo:Wrestler (JOIN dbp:billed dbr:Georgia_(U.S._state)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the states",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "which have been billed by [IQ1]",
                    "start": 16,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the wrestlers",
                                "start": 42,
                                "end": 55
                            },
                            {
                                "description": "who has also billed Georgia",
                                "start": 56,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN billed) (PP (IN by) (NP (NP (DT the) (NNS wrestlers)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (ADVP (RB also)) (VP (VBN billed) (NP (NNP Georgia))))))))))))))) (. ?)))",
        "mask_entity": "Name the states which have been billed by the wrestlers who has also billed [ENT] ?",
        "entity": [
            "Georgia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1389",
        "question": "List the outflows of the lake whose one of the outflows is Benu river ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Benu\u00e9_River> . ?x <http://dbpedia.org/ontology/outflow> ?uri  . }",
        "SExpr": "(JOIN (R dbo:outflow) (JOIN dbp:outflow dbr:Benu\u00e9_River)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the outflows of the [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "lake",
                                "start": 25,
                                "end": 29
                            },
                            {
                                "description": "whose one of the outflows is Benu river",
                                "start": 30,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS outflows)) (PP (IN of) (NP (NP (DT the) (NN lake)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NNS outflows)))) (S (VP (VBZ is) (NP (NNP Benu) (NN river))))))))) (. ?)))",
        "mask_entity": "List the outflows of the lake whose [ENT] of the outflows is [ENT] ?",
        "entity": [
            "one",
            "Benu river"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3564",
        "question": "Name the television show with opening theme as Te Deum and is composed by Marc-Antoine Charpentier?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Marc-Antoine_Charpentier>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:openingTheme dbr:Te_Deum_(Charpentier)) (JOIN dbp:themeMusicComposer dbr:Marc-Antoine_Charpentier)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "with opening theme as Te Deum",
                    "start": 25,
                    "end": 54
                },
                {
                    "description": "and is composed by Marc-Antoine Charpentier",
                    "start": 55,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN television) (NN show)) (PP (IN with) (NP (NP (VBG opening) (NN theme)) (PP (IN as) (NP (NNP Te) (NNP Deum)))))) (CC and) (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Marc-Antoine) (NNP Charpentier)))))) (. ?)))",
        "mask_entity": "Name the television show with opening theme as [ENT] and is composed by [ENT]?",
        "entity": [
            "Te Deum",
            "Marc-Antoine Charpentier"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4876",
        "question": "Is Grand Bahama lie in the achipelago of the bahamas?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Grand_Bahama> <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Grand) (NNP Bahama)) (VP (VB lie) (PP (IN in) (NP (NP (DT the) (NN achipelago)) (PP (IN of) (NP (DT the) (NNS bahamas)))))) (. ?)))",
        "mask_entity": "Is [ENT] lie in the achipelago of the bahamas?",
        "entity": [
            "Grand Bahama"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "884",
        "question": "Who produced wizards vs aliens?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wizards_vs_Aliens> <http://dbpedia.org/ontology/producer> ?uri } ",
        "SExpr": "(JOIN (R dbo:producer) dbr:Wizards_vs_Aliens)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD produced) (NP (NNS wizards)) (PP (IN vs) (NP (NNS aliens))))) (. ?)))",
        "mask_entity": "Who produced wizards vs aliens?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3805",
        "question": "Who is the distributer of Rev ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/property/distributor> ?uri } ",
        "SExpr": "(JOIN (R dbp:distributor) dbr:Rev_(drink))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN distributer)) (PP (IN of) (NP (NNP Rev)))))) (. ?)))",
        "mask_entity": "Who is the distributer of Rev ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1607",
        "question": "Which city was founded by  George Washington and John Forbes (British Army officer)?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/George_Washington> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
        "SExpr": "(AND dbo:City (AND (JOIN dbp:founder dbr:George_Washington) (JOIN dbo:founder dbr:John_Forbes_(British_Army_officer))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "was founded by George Washington and John Forbes (British Army officer)",
                    "start": 11,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NP (NNP George) (NNP Washington)) (CC and) (NP (NNP John) (NNP Forbes)))))))) (VP (-LRB- () (NP (JJ British) (NNP Army) (NN officer) (-RRB- )))) (. ?)))",
        "mask_entity": "Which city was founded by  [ENT] and [ENT] ([ENT] officer)?",
        "entity": [
            "George Washington",
            "John Forbes",
            "British Army"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1594",
        "question": "Which is the city closest to both the Lodaiska site and the home of David w brown?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:nearestCity) dbr:LoDaisKa_Site) (JOIN (R dbo:nearestCity) dbr:David_W._Brown_House))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which is the city",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "closest to both the Lodaiska site and the home of David w brown",
                    "start": 18,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN city)) (ADVP (JJS closest) (PP (IN to) (NP (CC both) (NP (DT the) (NNP Lodaiska) (NN site)) (CC and) (NP (NP (DT the) (NN home)) (PP (IN of) (NP (NNP David) (NNP w) (NNP brown)))))))))) (. ?)))",
        "mask_entity": "Which is the city closest to both the [ENT] site and the home of [ENT] w brown?",
        "entity": [
            "Lodaiska",
            "David"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "771",
        "question": "Is Michael Schumacher the first driver of the 1994 grand prix?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/1994_Hungarian_Grand_Prix> <http://dbpedia.org/property/firstDriver> <http://dbpedia.org/resource/Michael_Schumacher> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Michael) (NNP Schumacher)) (NP (NP (DT the) (JJ first) (NN driver)) (PP (IN of) (NP (DT the) (CD 1994) (JJ grand) (NN prix)))) (. ?)))",
        "mask_entity": "Is [ENT] the [ENT] driver of the [ENT] grand prix?",
        "entity": [
            "Michael Schumacher",
            "first",
            "1994"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2611",
        "question": "What are the books written by authors who died in Madrid?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Madrid> . ?uri <http://dbpedia.org/property/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (JOIN dbp:author (JOIN dbo:restingPlace dbr:Madrid))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the books",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "written by [IQ1]",
                    "start": 19,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "authors",
                                "start": 30,
                                "end": 37
                            },
                            {
                                "description": "who died in Madrid",
                                "start": 38,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS books)) (VP (VBN written) (PP (IN by) (NP (NP (NNS authors)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Madrid)))))))))))) (. ?)))",
        "mask_entity": "What are the books written by authors who died in [ENT]?",
        "entity": [
            "Madrid"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4661",
        "question": "What is father's name who also served in military of Carlene Carter?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Carlene_Carter>  . }",
        "SExpr": "(JOIN dbp:children dbr:Carlene_Carter)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (NN father) (POS 's)) (NN name)) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBD served) (PP (IN in) (NP (NP (NN military)) (PP (IN of) (NP (NNP Carlene) (NNP Carter))))))))))) (. ?)))",
        "mask_entity": "What is father's name who also served in military of [ENT]?",
        "entity": [
            "Carlene Carter"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2273",
        "question": "Count the number of broadcast area of the TV stations which serves in Agalga ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agal\u00e9ga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri }",
        "SExpr": "(JOIN (R dbp:broadcastArea) (JOIN dbo:broadcastArea dbr:Agal\u00e9ga)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of broadcast area of [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the TV stations",
                                "start": 38,
                                "end": 53
                            },
                            {
                                "description": "which serves in Agalga",
                                "start": 54,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN broadcast) (NN area)) (PP (IN of) (NP (NP (DT the) (NN TV) (NNS stations)) (SBAR (WHNP (WDT which)) (S (VP (VBZ serves) (PP (IN in) (NP (NNP Agalga)))))))))))) (. ?)))",
        "mask_entity": "Count the number of broadcast area of the TV stations which serves in [ENT] ?",
        "entity": [
            "Agalga"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1868",
        "question": "In which wars army men awarded with the Croix de Guerre, fought?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939\u20131945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "SExpr": "(JOIN (R dbp:battles) (AND dbo:MilitaryPerson (JOIN dbp:awards dbr:Croix_de_guerre_1939\u20131945_(France)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which wars",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "[IQ1] fought",
                    "start": 14,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "army men",
                                "start": 14,
                                "end": 22
                            },
                            {
                                "description": "awarded with the Croix de Guerre,",
                                "start": 23,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NP (NNS wars) (NN army) (NNS men)) (VP (VBD awarded) (PP (IN with) (NP (DT the) (NNP Croix) (NNP de) (NNP Guerre))))) (, ,) (VP (VBD fought))) (. ?)))",
        "mask_entity": "In which wars army men awarded with [ENT], fought?",
        "entity": [
            "the Croix de Guerre"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1085",
        "question": "Where is the residence of the governor of Bangkok ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bangkok> <http://dbpedia.org/ontology/leaderName> ?x . ?x <http://dbpedia.org/property/residence> ?uri  . }",
        "SExpr": "(JOIN (R dbp:residence) (JOIN (R dbo:leaderName) dbr:Bangkok)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the residence of [IQ1]",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the governor of Bangkok",
                                "start": 26,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN residence)) (PP (IN of) (NP (NP (DT the) (NN governor)) (PP (IN of) (NP (NNP Bangkok))))))) (. ?)))",
        "mask_entity": "Where is the residence of the governor of [ENT] ?",
        "entity": [
            "Bangkok"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "10",
        "question": "Name the scientist whose supervisor was Ernest Rutherford and had a doctoral students named Charles Drummond Ellis?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (AND (JOIN dbo:doctoralAdvisor dbr:Ernest_Rutherford) (JOIN dbp:doctoralStudents dbr:Charles_Drummond_Ellis)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the scientist",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "whose supervisor was Ernest Rutherford",
                    "start": 19,
                    "end": 57
                },
                {
                    "description": "and had a doctoral students named Charles Drummond Ellis",
                    "start": 58,
                    "end": 114
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN supervisor)) (S (VP (VP (VBD was) (NP (NNP Ernest) (NNP Rutherford))) (CC and) (VP (VBD had) (NP (NP (DT a) (JJ doctoral) (NNS students)) (VP (VBN named) (S (NP (NNP Charles) (NNP Drummond) (NNP Ellis))))))))))) (. ?)))",
        "mask_entity": "Name the scientist whose supervisor was [ENT] and had a doctoral students named [ENT]?",
        "entity": [
            "Ernest Rutherford",
            "Charles Drummond Ellis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3611",
        "question": "What is the scientist whose PhD students are Erich Bagge and erban ieica?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (AND (JOIN dbp:doctoralStudents dbr:Erich_Bagge) (JOIN dbp:doctoralStudents dbr:\u0218erban_\u021ai\u021beica)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the scientist",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose PhD students are Erich Bagge and erban ieica",
                    "start": 22,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN PhD) (NNS students)) (S (VP (VBP are) (NP (NP (NNP Erich) (NNP Bagge)) (CC and) (NP (NNP erban) (NNP ieica))))))))) (. ?)))",
        "mask_entity": "What is the scientist whose [ENT] students are [ENT] and erban ieica?",
        "entity": [
            "PhD",
            "Erich Bagge"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1325",
        "question": "Name the movies writtten by the group Monty Python ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:writer dbr:Monty_Python))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "writtten by the group Monty Python",
                    "start": 16,
                    "end": 50
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (VP (VBN writtten) (PP (IN by) (NP (NP (DT the) (NN group)) (NP (NNP Monty) (NNP Python))))))) (. ?)))",
        "mask_entity": "Name the movies writtten by the group [ENT] ?",
        "entity": [
            "Monty Python"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3390",
        "question": "Where is Lao Plaza Hotel located?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lao_Plaza_Hotel> <http://dbpedia.org/property/developer> ?uri } ",
        "SExpr": "(JOIN (R dbp:developer) dbr:Lao_Plaza_Hotel)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Lao) (NNP Plaza) (NNP Hotel)) (VP (VBN located))) (. ?)))",
        "mask_entity": "Where is [ENT] located?",
        "entity": [
            "Lao Plaza Hotel"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1463",
        "question": "Was Walt Disney the cinematographer of Mickey's Mellerdrammer?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Walt_Disney> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Walt) (NNP Disney)) (NP (NP (DT the) (NN cinematographer)) (PP (IN of) (NP (NP (NNP Mickey) (POS 's)) (NNP Mellerdrammer)))) (. ?)))",
        "mask_entity": "Was [ENT] the cinematographer of [ENT]'s [ENT]?",
        "entity": [
            "Walt Disney",
            "Mickey",
            "Mellerdrammer"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "806",
        "question": "Which sitcom's company is Paramount Television and is located in Cheers Beacon hill ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Cheers_Beacon_Hill>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:company dbr:Paramount_Television) (JOIN dbp:location dbr:Cheers_Beacon_Hill)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sitcom's",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "company is Paramount Television",
                    "start": 15,
                    "end": 46
                },
                {
                    "description": "and is located in Cheers Beacon hill",
                    "start": 47,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN sitcom) (POS 's)) (NN company)) (VP (VP (VBZ is) (NP (NNP Paramount) (NNP Television))) (CC and) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NML (NNPS Cheers) (NNP Beacon)) (NN hill)))))) (. ?)))",
        "mask_entity": "Which sitcom's company is [ENT] and is located in [ENT] hill ?",
        "entity": [
            "Paramount Television",
            "Cheers Beacon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4260",
        "question": "Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:maintainedBy) dbr:Pandaruan_Bridge) (JOIN (R dbo:country) dbr:Malaysia_Junior_Hockey_League))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which mainter of Pandaruan Bridge",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "is also the land of Malaysia junior Hockey league",
                    "start": 34,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN mainter)) (PP (IN of) (NP (NNP Pandaruan) (NNP Bridge)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN land)) (PP (IN of) (NP (NML (NNP Malaysia) (JJ junior)) (NNP Hockey) (NNP league))))) (. ?)))",
        "mask_entity": "Which mainter of [ENT] is also the land of [ENT] junior Hockey league ?",
        "entity": [
            "Pandaruan Bridge",
            "Malaysia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3985",
        "question": "Which Tv series led to Frasier?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:subsequentWork dbr:Frasier))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which Tv series",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "led to Frasier",
                    "start": 16,
                    "end": 30
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN Tv) (NN series)) (S (VP (VBD led) (PP (IN to) (NP (NNP Frasier))))) (. ?)))",
        "mask_entity": "Which Tv series led to [ENT]?",
        "entity": [
            "Frasier"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3771",
        "question": "Which  writer has childrens named Mother Mary Alphonsa and Julian Hawthorne?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Mother_Mary_Alphonsa> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Julian_Hawthorne> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
        "SExpr": "(AND dbo:Writer (AND (JOIN dbp:children dbr:Mother_Mary_Alphonsa) (JOIN dbp:children dbr:Julian_Hawthorne)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which writer",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "has childrens named Mother Mary Alphonsa and Julian Hawthorne",
                    "start": 13,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN writer)) (SQ (VP (VBZ has) (NP (NP (NP (NNS childrens)) (VP (VBN named) (S (NP (NNP Mother) (NNP Mary) (NNP Alphonsa))))) (CC and) (NP (NNP Julian) (NNP Hawthorne))))) (. ?)))",
        "mask_entity": "Which  writer has childrens named Mother [ENT] and [ENT]?",
        "entity": [
            "Mary Alphonsa",
            "Julian Hawthorne"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2108",
        "question": "What is the profession of William Luther Hill ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri } ",
        "SExpr": "(JOIN (R dbo:profession) dbr:William_Luther_Hill)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN profession)) (PP (IN of) (NP (NNP William) (NNP Luther) (NNP Hill)))))) (. ?)))",
        "mask_entity": "What is the profession of [ENT] ?",
        "entity": [
            "William Luther Hill"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4235",
        "question": "Name all the hubs of the airlines whose one of the hubs is Selangir ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Selangor> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(JOIN (R dbp:hubs) (AND dbo:Airline (JOIN dbp:hubs dbr:Selangor))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name all the hubs of [IQ1]",
                    "start": 0,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airlines",
                                "start": 21,
                                "end": 33
                            },
                            {
                                "description": "whose one of the hubs is Selangir",
                                "start": 34,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS hubs)) (PP (IN of) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NNS hubs)))) (S (VP (VBZ is) (NP (NNP Selangir))))))))) (. ?)))",
        "mask_entity": "Name all the hubs of the airlines whose [ENT] of the hubs is [ENT] ?",
        "entity": [
            "one",
            "Selangir"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4956",
        "question": "How many other school are there of the rugby players whose school is Michaelhouse ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Michaelhouse> . ?x <http://dbpedia.org/property/school> ?uri }",
        "SExpr": "(JOIN (R dbp:school) (JOIN dbo:school dbr:Michaelhouse)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other school are there of [IQ1]",
                    "start": 0,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rugby players",
                                "start": 35,
                                "end": 52
                            },
                            {
                                "description": "whose school is Michaelhouse",
                                "start": 53,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ other) (NN school)) (VP (VBP are) (NP (NP (EX there)) (PP (IN of) (NP (NP (DT the) (JJ rugby) (NNS players)) (SBAR (WHNP (WP$ whose) (NN school)) (S (VP (VBZ is) (NP (NNP Michaelhouse)))))))))) (. ?)))",
        "mask_entity": "How many other school are there of the rugby players whose school is [ENT] ?",
        "entity": [
            "Michaelhouse"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2234",
        "question": "In which country can I find the State Academic Opera and Ballet Theater and Baku Puppet Theatre?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Azerbaijan_State_Academic_Opera_and_Ballet_Theater> <http://dbpedia.org/ontology/locationCountry> ?uri. <http://dbpedia.org/resource/Baku_Puppet_Theatre> <http://dbpedia.org/ontology/locationCountry> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (AND (JOIN (R dbo:locationCountry) dbr:Azerbaijan_State_Academic_Opera_and_Ballet_Theater) (JOIN (R dbo:locationCountry) dbr:Baku_Puppet_Theatre)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "can I find the State Academic Opera and Ballet Theater and Baku Puppet Theatre",
                    "start": 17,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (MD can) (NP (PRP I)) (VP (VB find) (NP (NP (DT the) (NNP State) (NNP Academic) (NNP Opera)) (CC and) (NP (NP (NNP Ballet) (NNP Theater)) (CC and) (NP (NNP Baku) (NNP Puppet) (NNP Theatre))))))) (. ?)))",
        "mask_entity": "In which country can I find [ENT] and [ENT] and [ENT]?",
        "entity": [
            "the State Academic Opera",
            "Ballet Theater",
            "Baku Puppet Theatre"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3211",
        "question": "What are the films whose atleast one cast member died due to Colorectal cancer?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Colorectal_cancer> . ?uri <http://dbpedia.org/property/starring> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:starring (JOIN dbo:deathCause dbr:Colorectal_cancer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the films",
                    "start": 0,
                    "end": 18,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose at least one cast member died due to Colorectal cancer",
                                "start": 19,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS films)) (SBAR (WHNP (WP$ whose) (JJ atleast) (CD one) (NN cast) (NN member)) (S (VP (VBD died) (PP (IN due) (IN to) (NP (NNP Colorectal) (NN cancer))))))))) (. ?)))",
        "mask_entity": "What are the films whose atleast [ENT] cast member died due to Colorectal cancer?",
        "entity": [
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "963",
        "question": "Who is the President of United World College of Costa Rica ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/property/president> ?uri } ",
        "SExpr": "(JOIN (R dbp:president) dbr:United_World_College_of_Costa_Rica)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NNP President)) (PP (IN of) (NP (NP (NNP United) (NNP World) (NNP College)) (PP (IN of) (NP (NNP Costa) (NNP Rica)))))))) (. ?)))",
        "mask_entity": "Who is the President of [ENT] College of [ENT] ?",
        "entity": [
            "United World",
            "Costa Rica"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3415",
        "question": "Which city has it's landmark as Cheasty Boulevard South?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri } ",
        "SExpr": "(JOIN (R dbo:maintainedBy) dbr:Cheasty_Boulevard_South)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ has) (NP (PRP it)) (VP (VBZ 's) (NP (NP (NN landmark)) (PP (IN as) (NP (NNP Cheasty) (NNP Boulevard) (NNP South)))))) (. ?)))",
        "mask_entity": "Which city has it's landmark as [ENT]?",
        "entity": [
            "Cheasty Boulevard South"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3753",
        "question": "List down the opponents of Frank Stilwell?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri } ",
        "SExpr": "(JOIN (R dbo:opponent) dbr:Frank_Stilwell)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (PRT (RP down)) (NP (NP (DT the) (NNS opponents)) (PP (IN of) (NP (NNP Frank) (NNP Stilwell))))) (. ?)))",
        "mask_entity": "List down the opponents of [ENT]?",
        "entity": [
            "Frank Stilwell"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "398",
        "question": "Name the movie whose director is Ridley Scott and it's music composer is Vangelis?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:director dbr:Ridley_Scott) (JOIN dbo:musicComposer dbr:Vangelis)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose director is Ridley Scott",
                    "start": 15,
                    "end": 45
                },
                {
                    "description": "and it's music composer is Vangelis",
                    "start": 46,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN director)) (S (VP (VBZ is) (NP (NNP Ridley) (NNP Scott)))))))) (CC and) (S (NP (PRP it)) (VP (VBZ 's) (SBAR (S (NP (NN music) (NN composer)) (VP (VBZ is) (NP (NNP Vangelis))))))) (. ?)))",
        "mask_entity": "Name the movie whose director is [ENT] and it's music composer is [ENT]?",
        "entity": [
            "Ridley Scott",
            "Vangelis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2632",
        "question": "Where is Bogobiri House located ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogobiri_House> <http://dbpedia.org/property/locationCity> ?uri } ",
        "SExpr": "(JOIN (R dbp:locationCity) dbr:Bogobiri_House)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Bogobiri) (NNP House)) (VP (VBN located))) (. ?)))",
        "mask_entity": "Where is [ENT] located ?",
        "entity": [
            "Bogobiri House"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4851",
        "question": "What is the religion of the leader of South Korean legislative election of 1992 ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Korean_legislative_election,_1992> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbp:leader) dbr:South_Korean_legislative_election,_1992)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the religion of [IQ1]",
                    "start": 0,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the leader of South Korean legislative election of 1992",
                                "start": 24,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NP (ADJP (NNP South) (JJ Korean)) (JJ legislative) (NN election)) (PP (IN of) (NP (CD 1992)))))))))) (. ?)))",
        "mask_entity": "What is the religion of the leader of [ENT] legislative election of [ENT] ?",
        "entity": [
            "South Korean",
            "1992"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2996",
        "question": "Who is the writer of Neverwhere (radio play) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri } ",
        "SExpr": "(JOIN (R dbo:writer) <http://dbpedia.org/resource/Never_(radio_play)>)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NNP Neverwhere) (-LRB- () (NN radio) (NN play))) (ADVP (-RRB- )))))) (. ?)))",
        "mask_entity": "Who is the writer of Neverwhere (radio play) ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "704",
        "question": "How many other key people are there of the non-profit organisations whose key people is Hillary Clinton ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Hillary_Clinton> . ?x <http://dbpedia.org/property/keyPeople> ?uri }",
        "SExpr": "(JOIN (R dbp:keyPeople) (JOIN dbp:keyPeople dbr:Hillary_Clinton)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other key people are there of [IQ1]",
                    "start": 0,
                    "end": 103,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the non-profit organisations",
                                "start": 39,
                                "end": 67
                            },
                            {
                                "description": "whose key people is Hillary Clinton",
                                "start": 68,
                                "end": 103
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHADVP (WRB How) (JJ many)) (JJ other) (JJ key) (NNS people)) (VP (VBP are) (ADVP (RB there)) (PP (IN of) (NP (NP (DT the) (JJ non-profit) (NNS organisations)) (SBAR (WHNP (WP$ whose) (JJ key) (NNS people)) (S (VP (VBZ is) (NP (NNP Hillary) (NNP Clinton)))))))) (. ?)))",
        "mask_entity": "How many other key people are there of the non-profit organisations whose key people is [ENT] ?",
        "entity": [
            "Hillary Clinton"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "431",
        "question": "List the stadium of the teams which uses Nea Smyrni  as one of the stadium ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Nea_Smyrni_Stadium> . ?x <http://dbpedia.org/property/stadium> ?uri  . }",
        "SExpr": "(JOIN (R dbp:stadium) (JOIN dbp:stadium dbr:Nea_Smyrni_Stadium)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the stadium of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the teams",
                                "start": 20,
                                "end": 29
                            },
                            {
                                "description": "which uses Nea Smyrni as one of the stadium",
                                "start": 30,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (NP (DT the) (NNS teams)) (SBAR (WHNP (WDT which)) (S (VP (VBZ uses) (NP (NNP Nea) (NNP Smyrni)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN stadium)))))))))))) (. ?)))",
        "mask_entity": "List the stadium of the teams which uses [ENT]  as one of the stadium ?",
        "entity": [
            "Nea Smyrni"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "292",
        "question": "How many currencies are in used in places where people speak French?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/French_language> . ?x <http://dbpedia.org/ontology/currency> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Currency>}",
        "SExpr": "(AND dbo:Currency (JOIN (R dbo:currency) (JOIN dbo:officialLanguage dbr:French_language))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many currencies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "are in used in [IQ1]",
                    "start": 20,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "places",
                                "start": 35,
                                "end": 41
                            },
                            {
                                "description": "where people speak French",
                                "start": 42,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS currencies)) (VP (VBP are) (PP (IN in) (S (VP (VBN used) (PP (IN in) (NP (NP (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NNS people)) (VP (VBP speak) (S (ADJP (JJ French))))))))))))) (. ?)))",
        "mask_entity": "How many currencies are in used in places where people speak [ENT]?",
        "entity": [
            "French"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4867",
        "question": "Which football managers managed Middlesbrough F.C.?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> } ",
        "SExpr": "(JOIN dbo:managerClub dbr:Middlesbrough_F.C.)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN football) (NNS managers)) (S (VP (VBD managed) (NP (NNP Middlesbrough) (NNP F.C.?))))))",
        "mask_entity": "Which football managers managed [ENT] F.C.?",
        "entity": [
            "Middlesbrough"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "145",
        "question": "Who are some american football players whose high school is Oktoc, Mississippi?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "SExpr": "(AND dbo:AmericanFootballPlayer (JOIN dbp:highSchool dbr:Oktoc,_Mississippi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are some american football players",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "whose high school is Oktoc, Mississippi",
                    "start": 39,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ american) (NN football) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ high) (NN school)) (S (VP (VBZ is) (NP (NP (NNP Oktoc)) (, ,) (NP (NNP Mississippi))))))))) (. ?)))",
        "mask_entity": "Who are some [ENT] football players whose high school is [ENT], [ENT]?",
        "entity": [
            "american",
            "Oktoc",
            "Mississippi"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4393",
        "question": "Name the company founded in US and created Visual Studio ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbp:foundation dbr:United_States) (JOIN dbp:products dbr:Microsoft_Visual_Studio)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "founded in US",
                    "start": 17,
                    "end": 30
                },
                {
                    "description": "and created Visual Studio",
                    "start": 31,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (VP (VP (VBN founded) (PP (IN in) (NP (NNP US)))) (CC and) (VP (VBN created) (NP (NNP Visual) (NNP Studio)))))) (. ?)))",
        "mask_entity": "Name the company founded in [ENT] and created [ENT] ?",
        "entity": [
            "US",
            "Visual Studio"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2033",
        "question": "How many factions were involved in the battles fought by Arthur St. Clair?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Arthur_St._Clair> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "SExpr": "(JOIN (R dbp:combatant) (JOIN (R dbp:battles) dbr:Arthur_St._Clair)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many factions",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "were involved in [IQ1]",
                    "start": 18,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the battles",
                                "start": 35,
                                "end": 46
                            },
                            {
                                "description": "fought by Arthur St. Clair",
                                "start": 47,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS factions)) (VP (VBD were) (VP (VBN involved) (PP (IN in) (NP (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NNP Arthur) (NNP St.) (NNP Clair))))))))) (. ?)))",
        "mask_entity": "How many factions were involved in the battles fought by [ENT]?",
        "entity": [
            "Arthur St. Clair"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4283",
        "question": "Count the number of ingredient of the foods which have one of the ingredient is Pork ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri }",
        "SExpr": "(JOIN (R dbo:ingredient) (JOIN dbo:ingredient dbr:Pork)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of ingredient of [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the foods",
                                "start": 34,
                                "end": 43
                            },
                            {
                                "description": "which have one of the ingredient is Pork",
                                "start": 44,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN ingredient)) (PP (IN of) (NP (NP (DT the) (NNS foods)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN ingredient)))) (VP (VBZ is) (NP (NN Pork))))))))))))) (. ?)))",
        "mask_entity": "Count the number of ingredient of the foods which have [ENT] of the ingredient is Pork ?",
        "entity": [
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1165",
        "question": "What is the television show whose opening theme is Te Deum (Charpentier)?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:openingTheme dbr:Te_Deum_(Charpentier)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose opening theme is Te Deum (Charpentier)",
                    "start": 28,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN opening) (NN theme)) (S (VP (VBZ is) (NP (NP (NNP Te) (NNP Deum)) (PP (-LRB- () (NP (NNP Charpentier) (-RRB- ))))))))))) (. ?)))",
        "mask_entity": "What is the television show whose opening theme is [ENT])?",
        "entity": [
            "Te Deum (Charpentier"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3500",
        "question": "List the ideologies of the party of Boonchu Rojanastien?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . }",
        "SExpr": "(JOIN (R dbo:ideology) (JOIN (R dbp:party) dbr:Boonchu_Rojanastien)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the ideologies of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the party of Boonchu Rojanastien",
                                "start": 23,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS ideologies)) (PP (IN of) (NP (NP (DT the) (NN party)) (PP (IN of) (NP (NNP Boonchu) (NNP Rojanastien))))))) (. ?)))",
        "mask_entity": "List the ideologies of the party of [ENT]?",
        "entity": [
            "Boonchu Rojanastien"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2050",
        "question": "To which country do gabriel paris gordillo and gustavo rojas pinilla owe their allegiance?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gabriel_Par\u00eds_Gordillo> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Gustavo_Rojas_Pinilla> <http://dbpedia.org/property/allegiance> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:allegiance) dbr:Gabriel_Par\u00eds_Gordillo) (JOIN (R dbp:allegiance) dbr:Gustavo_Rojas_Pinilla))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "do gabriel paris gordillo and gustavo rojas pinilla owe their allegiance",
                    "start": 17,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBP do) (S (NP (NP (NNP gabriel) (NNP paris) (NNP gordillo)) (CC and) (NP (NNP gustavo) (NNP rojas) (NNP pinilla))) (VP (VB owe) (NP (PRP$ their) (NN allegiance)))))) (. ?)))",
        "mask_entity": "To which country do gabriel paris gordillo and gustavo rojas pinilla owe their allegiance?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2624",
        "question": "Who were the narrators of the albums which had Ringo Starr as one of the narrator ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/narrated> <http://dbpedia.org/resource/Ringo_Starr> . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(JOIN (R dbp:narrated) (AND dbo:Album (JOIN dbp:narrated dbr:Ringo_Starr))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who were the narrators of [IQ1]",
                    "start": 0,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the albums",
                                "start": 26,
                                "end": 36
                            },
                            {
                                "description": "which had Ringo Starr as one of the narrator",
                                "start": 37,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD were) (NP (NP (DT the) (NNS narrators)) (PP (IN of) (NP (NP (DT the) (NNS albums)) (SBAR (WHNP (WDT which)) (S (VP (VBD had) (NP (NNP Ringo) (NNP Starr)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN narrator))))))))))))) (. ?)))",
        "mask_entity": "Who were the narrators of the albums which had [ENT] as [ENT] of the narrator ?",
        "entity": [
            "Ringo Starr",
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4378",
        "question": "How many people have played for the ones who own the stadium of Bankers Life Fieldhouse?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/Bankers_Life_Fieldhouse> . ?uri <http://dbpedia.org/property/team> ?x  . }",
        "SExpr": "(JOIN dbp:team (JOIN dbp:arena dbr:Bankers_Life_Fieldhouse)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have played for [IQ1]",
                    "start": 16,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 32,
                                "end": 40
                            },
                            {
                                "description": "who own the stadium of Bankers Life Fieldhouse",
                                "start": 41,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN played) (PP (IN for) (NP (NP (DT the) (NNS ones)) (SBAR (WHNP (WP who)) (S (VP (VBP own) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (NNPS Bankers) (NNP Life) (NNP Fieldhouse)))))))))))) (. ?)))",
        "mask_entity": "How many people have played for the ones who own the stadium of [ENT]?",
        "entity": [
            "Bankers Life Fieldhouse"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "339",
        "question": "List the newspapers whose headquarters's time zone is Central European Summer Time.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Central_European_Summer_Time> . ?uri <http://dbpedia.org/property/headquarters> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "SExpr": "(AND dbo:Newspaper (JOIN dbp:headquarters (JOIN dbo:timeZone dbr:Central_European_Summer_Time))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the newspapers",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose headquarters's [IQ1]",
                    "start": 20,
                    "end": 82,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "time zone is Central European Summer Time",
                                "start": 41,
                                "end": 82
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS newspapers)) (SBAR (WHNP (WP$ whose) (NN headquarters) (POS 's)) (S (NP (NN time) (NN zone)) (VP (VBZ is) (NP (NNP Central) (JJ European) (NNP Summer) (NNP Time))))))) (. .)))",
        "mask_entity": "List the newspapers whose headquarters's time zone is [ENT] [ENT].",
        "entity": [
            "Central European",
            "Summer Time"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3879",
        "question": "Where does the river end which starts in Mazabuka?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Mazabuka> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbo:riverMouth) (AND dbo:River (JOIN dbp:city dbr:Mazabuka))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river end [IQ1]",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which starts in Mazabuka",
                                "start": 25,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB end) (SBAR (WHNP (WDT which)) (S (VP (VBZ starts) (PP (IN in) (NP (NNP Mazabuka)))))))) (. ?)))",
        "mask_entity": "Where does the river end which starts in [ENT]?",
        "entity": [
            "Mazabuka"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4632",
        "question": "Count all american football players whose former team owns Lucas Oil Stadium ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Lucas_Oil_Stadium> . ?uri <http://dbpedia.org/ontology/formerTeam> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "SExpr": "(AND dbo:AmericanFootballPlayer (JOIN dbo:formerTeam (JOIN dbp:city dbr:Lucas_Oil_Stadium))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count all american football players [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose former team owns Lucas Oil Stadium",
                                "start": 36,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT all) (JJ american) (NN football) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ former) (NN team)) (S (VP (VBZ owns) (NP (NNP Lucas) (NNP Oil) (NNP Stadium))))))) (. ?)))",
        "mask_entity": "Count all american football players whose former team owns [ENT] ?",
        "entity": [
            "Lucas Oil Stadium"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2973",
        "question": "What are the academic interests of the advisor of Paul Demiville ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "SExpr": "(JOIN (R dbp:fields) (JOIN (R dbo:academicAdvisor) dbr:Paul_Demi\u00e9ville)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the academic interests of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the advisor of Paul Demiville",
                                "start": 35,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ academic) (NNS interests)) (PP (IN of) (NP (NP (DT the) (NN advisor)) (PP (IN of) (NP (NNP Paul) (NNP Demiville)))))))) (. ?)))",
        "mask_entity": "What are the academic interests of the advisor of [ENT] ?",
        "entity": [
            "Paul Demiville"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "265",
        "question": "Which awards are presented by Swedish Academy?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "SExpr": "(AND dbo:Award (JOIN dbo:presenter dbr:Swedish_Academy))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which awards",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are presented by Swedish Academy",
                    "start": 13,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS awards)) (SQ (VP (VBP are) (VP (VBN presented) (PP (IN by) (NP (NNP Swedish) (NNP Academy)))))) (. ?)))",
        "mask_entity": "Which awards are presented by [ENT]?",
        "entity": [
            "Swedish Academy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2424",
        "question": "Name the university whose teams have been managed by Albertin Montoya?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albertin_Montoya> <http://dbpedia.org/property/managerclubs> ?x . ?x <http://dbpedia.org/ontology/university> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(JOIN (R dbo:university) (AND dbo:SportsTeam (JOIN (R dbp:managerclubs) dbr:Albertin_Montoya))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the university",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "[IQ1]",
                    "start": 20,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose teams have been managed by Albertin Montoya",
                                "start": 20,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NNS teams)) (S (VP (VBP have) (VP (VBN been) (VP (VBN managed) (PP (IN by) (NP (NNP Albertin) (NNP Montoya)))))))))) (. ?)))",
        "mask_entity": "Name the university whose teams have been managed by [ENT]?",
        "entity": [
            "Albertin Montoya"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1262",
        "question": "what are some journals of academic Philosophy",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy> } ",
        "SExpr": "(JOIN dbp:discipline dbr:Philosophy)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP what)) (S (VP (VBP are) (NP (NP (DT some) (NNS journals)) (PP (IN of) (NP (JJ academic) (NN Philosophy))))))))",
        "mask_entity": "what are some journals of academic [ENT]",
        "entity": [
            "Philosophy"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1771",
        "question": "Who is the writer of the Cavalcade of America and The United States Steel Hour ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cavalcade_of_America> <http://dbpedia.org/ontology/writer> ?uri. <http://dbpedia.org/resource/The_United_States_Steel_Hour> <http://dbpedia.org/ontology/writer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:writer) dbr:Cavalcade_of_America) (JOIN (R dbo:writer) dbr:The_United_States_Steel_Hour))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the writer of the Cavalcade of America and The United States Steel Hour",
                    "start": 0,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NP (NP (DT the) (NNP Cavalcade)) (PP (IN of) (NP (NNP America)))) (CC and) (NP (DT The) (NML (NNP United) (NNPS States)) (NNP Steel) (NNP Hour))))))) (. ?)))",
        "mask_entity": "Who is the writer of [ENT] and [ENT] ?",
        "entity": [
            "the Cavalcade of America",
            "The United States Steel Hour"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3511",
        "question": "Where did the conflict take place where Liu Mingchuan fought?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liu_Mingchuan> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . }",
        "SExpr": "(JOIN (R dbo:territory) (JOIN (R dbp:battles) dbr:Liu_Mingchuan)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the conflict take place [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "where Liu Mingchuan fought",
                                "start": 34,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN conflict)) (VP (VB take) (NP (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Liu) (NNP Mingchuan)) (VP (VBD fought))))))) (. ?)))",
        "mask_entity": "Where did the conflict take place where [ENT] fought?",
        "entity": [
            "Liu Mingchuan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "271",
        "question": "Which rivers originate from Dowra?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Dowra> } ",
        "SExpr": "(JOIN dbo:sourceMountain dbr:Dowra)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS rivers)) (S (VP (VBP originate) (PP (IN from) (NP (NNP Dowra))))) (. ?)))",
        "mask_entity": "Which rivers originate from [ENT]?",
        "entity": [
            "Dowra"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "696",
        "question": "What is the official residence of the Lula J. Davis which is also the death location of the John McTaggart (jockey) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lula_J._Davis> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/John_McTaggart_(jockey)> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:residence) dbr:Lula_J._Davis) (JOIN (R dbo:deathPlace) dbr:John_McTaggart_(jockey)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the official residence of the Lula J. Davis",
                    "start": 0,
                    "end": 51
                },
                {
                    "description": "which is also the death location of the John McTaggart (jockey)",
                    "start": 52,
                    "end": 115
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (JJ official) (NN residence)) (PP (IN of) (NP (DT the) (NNP Lula) (NNP J.) (NNP Davis)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN death) (NN location)) (PP (IN of) (NP (DT the) (NML (NNP John) (NNP McTaggart)) (-LRB- () (NN jockey) (-RRB- ))))))))))) (. ?)))",
        "mask_entity": "What is the official residence of [ENT] which is also the death location of [ENT] (jockey) ?",
        "entity": [
            "the Lula J. Davis",
            "the John McTaggart"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "747",
        "question": "What is the military rank of the commanders of Regiment of Mounted Grenadiers?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Regiment_of_Mounted_Grenadiers> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/ontology/militaryRank> ?uri  . }",
        "SExpr": "(JOIN (R dbo:militaryRank) (JOIN (R dbp:notableCommanders) dbr:Regiment_of_Mounted_Grenadiers)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the military rank of [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the commanders of Regiment of Mounted Grenadiers",
                                "start": 29,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ military) (NN rank)) (PP (IN of) (NP (NP (DT the) (NNS commanders)) (PP (IN of) (NP (NP (NNP Regiment)) (PP (IN of) (NP (NNP Mounted) (NNPS Grenadiers)))))))))) (. ?)))",
        "mask_entity": "What is the military rank of the commanders of [ENT]?",
        "entity": [
            "Regiment of Mounted Grenadiers"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "244",
        "question": "To which series does the character of Londo Mollari belong?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri } ",
        "SExpr": "(JOIN (R dbo:series) dbr:Londo_Mollari)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN To) (WHNP (WDT which) (NN series))) (SQ (VBZ does) (NP (NP (DT the) (NN character)) (PP (IN of) (NP (NNP Londo) (NNP Mollari)))) (VP (VB belong))) (. ?)))",
        "mask_entity": "To which series does the character of [ENT] belong?",
        "entity": [
            "Londo Mollari"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "317",
        "question": "What company's leader is Edwin Catmull?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Edwin_Catmull>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (JOIN dbp:keyPeople dbr:Edwin_Catmull))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What company's",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "leader is Edwin Catmull",
                    "start": 15,
                    "end": 38
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NN company) (POS 's)) (NN leader)) (VP (VBZ is) (NP (NNP Edwin) (NNP Catmull))) (. ?)))",
        "mask_entity": "What company's leader is [ENT]?",
        "entity": [
            "Edwin Catmull"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "476",
        "question": "How many different layouts do cars designed by Oliver Boulay have?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Olivier_Boulay> . ?x <http://dbpedia.org/ontology/layout> ?uri  . }",
        "SExpr": "(JOIN (R dbo:layout) (JOIN dbp:designer dbr:Olivier_Boulay)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different layouts",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "do [IQ1] have",
                    "start": 27,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "cars",
                                "start": 30,
                                "end": 34
                            },
                            {
                                "description": "designed by Oliver Boulay",
                                "start": 35,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHADVP (WRB How) (JJ many)) (JJ different) (NNS layouts)) (VP (VBP do) (S (NP (NP (NNS cars)) (VP (VBN designed) (PP (IN by) (NP (NNP Oliver) (NNP Boulay))))) (VP (VB have)))) (. ?)))",
        "mask_entity": "How many different layouts do cars designed by [ENT] have?",
        "entity": [
            "Oliver Boulay"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2032",
        "question": "Whihc state of Timothy J. Roemer is also the location city of Dad's Root Beer ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dad's_Root_Beer> <http://dbpedia.org/property/locationCity> ?uri. <http://dbpedia.org/resource/Timothy_J._Roemer> <http://dbpedia.org/property/state> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:locationCity) dbr:Dad's_Root_Beer) (JOIN (R dbp:state) dbr:Timothy_J._Roemer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which state of Timothy J. Roemer",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is also the location city of Dad's Root Beer",
                    "start": 33,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT Whihc) (NN state)) (PP (IN of) (NP (NNP Timothy) (NNP J.) (NNP Roemer)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location) (NN city)) (PP (IN of) (NP (NNP Dad's) (NNP Root) (NNP Beer))))) (. ?)))",
        "mask_entity": "Whihc state of [ENT] is also the location city of [ENT] ?",
        "entity": [
            "Timothy J. Roemer",
            "Dad's Root Beer"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "957",
        "question": "What is the type of Naval Station Bremerton ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Station_Bremerton> <http://dbpedia.org/property/type> ?uri } ",
        "SExpr": "(JOIN (R dbp:type) dbr:Naval_Station_Bremerton)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN type)) (PP (IN of) (NP (NNP Naval) (NNP Station) (NNP Bremerton)))))) (. ?)))",
        "mask_entity": "What is the type of [ENT] Bremerton ?",
        "entity": [
            "Naval Station"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3816",
        "question": "Name the  borough of the Bordesley railway station which is also the route end of the Birmingham and Oxford Junction Railway?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:borough) dbr:Bordesley_railway_station) (JOIN (R dbo:routeEnd) dbr:Birmingham_and_Oxford_Junction_Railway))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the borough of the Bordesley railway station",
                    "start": 0,
                    "end": 49
                },
                {
                    "description": "which is also the route end of the Birmingham and Oxford Junction Railway",
                    "start": 50,
                    "end": 123
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN borough)) (PP (IN of) (NP (NP (DT the) (NNP Bordesley) (NN railway) (NN station)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NP (DT the) (NNP Birmingham)) (CC and) (NP (NNP Oxford) (NNP Junction) (NNP Railway)))))))))))) (. ?)))",
        "mask_entity": "Name the  borough of the [ENT] railway station which is also the route end of the [ENT] and [ENT]?",
        "entity": [
            "Bordesley",
            "Birmingham",
            "Oxford Junction Railway"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "813",
        "question": "What are some movies written by British writers?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/British_people> . ?uri <http://dbpedia.org/ontology/writer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:writer (JOIN dbo:nationality dbr:British_people))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some movies",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "written by [IQ1]",
                    "start": 21,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "British writers",
                                "start": 32,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (JJ British) (NNS writers))))))) (. ?)))",
        "mask_entity": "What are some movies written by [ENT] writers?",
        "entity": [
            "British"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4532",
        "question": "Which university is led by Jay Gogue?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Jay_Gogue>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (JOIN dbo:president dbr:Jay_Gogue))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which university",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "is led by Jay Gogue",
                    "start": 17,
                    "end": 36
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN university)) (SQ (VP (VBZ is) (VP (VBN led) (PP (IN by) (NP (NNP Jay) (NNP Gogue)))))) (. ?)))",
        "mask_entity": "Which university is led by [ENT]?",
        "entity": [
            "Jay Gogue"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1914",
        "question": "Was Michael Schumacher a pole driver in the 1999 GP?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/1999_Japanese_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Michael) (NNP Schumacher)) (NP (NP (DT a) (NN pole) (NN driver)) (PP (IN in) (NP (DT the) (CD 1999) (NNP GP)))) (. ?)))",
        "mask_entity": "Was [ENT] a pole driver in the [ENT] GP?",
        "entity": [
            "Michael Schumacher",
            "1999"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4602",
        "question": "Count the number of artists who trained at the San Francisco Art Institute?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(AND dbo:Artist (JOIN dbp:training dbr:San_Francisco_Art_Institute))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of artists",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "who trained at the San Francisco Art Institute",
                    "start": 28,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBD trained) (PP (IN at) (NP (DT the) (NML (NNP San) (NNP Francisco)) (NNP Art) (NNP Institute)))))))))) (. ?)))",
        "mask_entity": "Count the number of artists who trained at [ENT]?",
        "entity": [
            "the San Francisco Art Institute"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3487",
        "question": "What tv shows were born out of a collaboration of playtone and dreamworks?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:company dbr:Playtone) (JOIN dbo:company dbr:DreamWorks_Television)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What tv shows",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "were born out of a collaboration of playtone and dreamworks",
                    "start": 14,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN tv) (NNS shows)) (SQ (VP (VBD were) (VP (VBN born) (PP (IN out) (PP (IN of) (NP (NP (DT a) (NN collaboration)) (PP (IN of) (NP (NN playtone) (CC and) (NNS dreamworks))))))))) (. ?)))",
        "mask_entity": "What tv shows were born out of a collaboration of playtone and dreamworks?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1297",
        "question": "What games can be played in schools founded by Fr. Orlando?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fr._Orlando> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:sport) (AND dbo:School (JOIN dbo:foundedBy dbr:Fr._Orlando))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What games",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "can be played in [IQ1]",
                    "start": 11,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "schools",
                                "start": 28,
                                "end": 35
                            },
                            {
                                "description": "founded by Fr. Orlando",
                                "start": 36,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS games)) (SQ (MD can) (VP (VB be) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (VP (VBN founded) (PP (IN by) (NP (NNP Fr.) (NNP Orlando))))))))) (. ?)))",
        "mask_entity": "What games can be played in schools founded by Fr. [ENT]?",
        "entity": [
            "Orlando"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4030",
        "question": "Is Ethics the main interests of Henry David Thoreau?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Ethics> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Ethics)) (NP (NP (DT the) (JJ main) (NNS interests)) (PP (IN of) (NP (NNP Henry) (NNP David) (NNP Thoreau)))) (. ?)))",
        "mask_entity": "Is Ethics the main interests of [ENT]?",
        "entity": [
            "Henry David Thoreau"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1804",
        "question": "Was Elizabeth Ann Seton canonized by Pope Paul VI?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Elizabeth_Ann_Seton> <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Paul_VI> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Elizabeth) (NNP Ann) (NNP Seton)) (VP (VBN canonized) (PP (IN by) (NP (NNP Pope) (NNP Paul) (NNP VI)))) (. ?)))",
        "mask_entity": "Was [ENT] canonized by Pope [ENT]?",
        "entity": [
            "Elizabeth Ann Seton",
            "Paul VI"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "758",
        "question": "List the leaders of the government agencies whose jurisdiction was German-occupied Europe.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
        "SExpr": "(JOIN (R dbo:leader) (AND dbo:GovernmentAgency (JOIN dbo:jurisdiction dbr:German-occupied_Europe))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the leaders of [IQ1]",
                    "start": 0,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the government agencies",
                                "start": 20,
                                "end": 43
                            },
                            {
                                "description": "whose jurisdiction was German-occupied Europe",
                                "start": 44,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS leaders)) (PP (IN of) (NP (NP (DT the) (NN government) (NNS agencies)) (SBAR (WHNP (WP$ whose) (NN jurisdiction)) (S (VP (VBD was) (NP (JJ German-occupied) (NNP Europe))))))))) (. .)))",
        "mask_entity": "List the leaders of the government agencies whose jurisdiction was German-occupied [ENT].",
        "entity": [
            "Europe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "250",
        "question": "List the cast member of the movies whose producer is Mark Johnson.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Mark_Johnson_(producer)> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(JOIN (R dbo:starring) (AND dbo:Film (JOIN dbo:producer dbr:Mark_Johnson_(producer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the cast member of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movies",
                                "start": 24,
                                "end": 34
                            },
                            {
                                "description": "whose producer is Mark Johnson",
                                "start": 35,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN cast) (NN member)) (PP (IN of) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN producer)) (S (VP (VBZ is) (NP (NNP Mark) (NNP Johnson))))))))) (. .)))",
        "mask_entity": "List the cast member of the movies whose producer is [ENT].",
        "entity": [
            "Mark Johnson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2461",
        "question": "Which city was designed by saleen Pator which is also the birht location of Jimmy Diggs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saleen_S5S_Raptor> <http://dbpedia.org/property/designer> ?uri. <http://dbpedia.org/resource/Jimmy_Diggs> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:designer) dbr:Saleen_S5S_Raptor) (JOIN (R dbo:birthPlace) dbr:Jimmy_Diggs))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "was designed by saleen Pator",
                    "start": 11,
                    "end": 39
                },
                {
                    "description": "which is also the birth location of Jimmy Diggs",
                    "start": 40,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBD was) (VP (VBN designed) (PP (IN by) (NP (NP (NNP saleen) (NNP Pator)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ birht) (NN location)) (PP (IN of) (NP (NNP Jimmy) (NNP Diggs)))))))))))) (. ?)))",
        "mask_entity": "Which city was designed by saleen [ENT] which is also the birht location of [ENT] ?",
        "entity": [
            "Pator",
            "Jimmy Diggs"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "545",
        "question": "Name the company whose products's predecessor is Boeing Vertol CH-46 Sea Knight?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Boeing_Vertol_CH-46_Sea_Knight> . ?uri <http://dbpedia.org/property/products> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (JOIN dbp:products (JOIN dbo:predecessor dbr:Boeing_Vertol_CH-46_Sea_Knight))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose products's [IQ1]",
                    "start": 17,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "predecessor is Boeing Vertol CH-46 Sea Knight",
                                "start": 34,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (VP (VB Name)) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WHNP (WP$ whose) (NNS products) (POS 's)) (NN predecessor)) (S (VP (VBZ is) (NP (NP (NNP Boeing) (NNP Vertol) (NNP CH) (CD -46)) (NP (NNP Sea) (NNP Knight))))))) (. ?)))",
        "mask_entity": "Name the company whose products's predecessor is [ENT] [ENT]?",
        "entity": [
            "Boeing",
            "Vertol CH-46 Sea Knight"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3241",
        "question": "What is the birth place of music artists which were associated with Albert Ayler ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Ayler> <http://dbpedia.org/property/associatedActs> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(JOIN (R dbo:birthPlace) (AND dbo:MusicalArtist (JOIN (R dbp:associatedActs) dbr:Albert_Ayler))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birth place of [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "music artists",
                                "start": 27,
                                "end": 40
                            },
                            {
                                "description": "which were associated with Albert Ayler",
                                "start": 41,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (NN music) (NNS artists)) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (VP (VBN associated) (PP (IN with) (NP (NNP Albert) (NNP Ayler)))))))))))) (. ?)))",
        "mask_entity": "What is the birth place of music artists which were associated with [ENT] ?",
        "entity": [
            "Albert Ayler"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "738",
        "question": "What is the religious affiliation of Wickramabahu Central College (National School) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
        "SExpr": "(JOIN (R dbp:religiousAffiliation) dbr:Wickramabahu_Central_College_(National_School))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ religious) (NN affiliation)) (PP (IN of) (NP (NP (NNP Wickramabahu) (NNP Central) (NNP College)) (VP (-LRB- () (NP (NNP National) (NNP School) (-RRB- ))))))))) (. ?)))",
        "mask_entity": "What is the religious affiliation of [ENT] ([ENT]) ?",
        "entity": [
            "Wickramabahu Central College",
            "National School"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "310",
        "question": "Name the nearest city to  Lake Victoria?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbo:nearestCity) dbr:Lake_Victoria)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (IN to) (NP (NNP Lake) (NNP Victoria)))) (. ?)))",
        "mask_entity": "Name the nearest city to  [ENT]?",
        "entity": [
            "Lake Victoria"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3780",
        "question": "Where is the tombstone of Johannes Gerhardus Strijdom?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri } ",
        "SExpr": "(JOIN (R dbp:restingplace) dbr:Johannes_Gerhardus_Strijdom)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN tombstone)) (PP (IN of) (NP (NNP Johannes) (NNP Gerhardus) (NNP Strijdom))))) (. ?)))",
        "mask_entity": "Where is the tombstone of [ENT]?",
        "entity": [
            "Johannes Gerhardus Strijdom"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2941",
        "question": "What is the common award won by Charles LeMaire and Eric Roth",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:awards) dbr:Charles_LeMaire) (JOIN (R dbo:award) dbr:Eric_Roth))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common award won by Charles LeMaire and Eric Roth",
                    "start": 0,
                    "end": 61
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN award)) (VP (VBN won) (PP (IN by) (NP (NP (NNP Charles) (NNP LeMaire)) (CC and) (NP (NNP Eric) (NNP Roth))))))))))",
        "mask_entity": "What is the common award won by [ENT] and [ENT]",
        "entity": [
            "Charles LeMaire",
            "Eric Roth"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1131",
        "question": "Was Gareth Southgate a manager of Middlesbrough F.C.?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Gareth_Southgate> <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/Middlesbrough_F.C.> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Gareth) (NNP Southgate)) (NP (NP (DT a) (NN manager)) (PP (IN of) (NP (NNP Middlesbrough) (NNP F.C.?))))))",
        "mask_entity": "Was [ENT] a manager of [ENT] F.C.?",
        "entity": [
            "Gareth Southgate",
            "Middlesbrough"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1449",
        "question": "What is the total number of  builder of the military structures whose builder is also United States?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/builder> ?uri }",
        "SExpr": "(JOIN (R dbo:builder) (JOIN dbo:builder dbr:United_States)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of builder of [IQ1]",
                    "start": 0,
                    "end": 98,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the military structures",
                                "start": 39,
                                "end": 62
                            },
                            {
                                "description": "whose builder is also United States",
                                "start": 63,
                                "end": 98
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN builder)) (PP (IN of) (NP (NP (DT the) (JJ military) (NNS structures)) (SBAR (WHNP (WP$ whose) (NN builder)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NNP United) (NNPS States)))))))))))) (. ?)))",
        "mask_entity": "What is the total number of  builder of the military structures whose builder is also [ENT]?",
        "entity": [
            "United States"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4919",
        "question": "Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (JOIN (R dbo:maintainedBy) (JOIN dbp:designer dbr:Malaysian_Public_Works_Department))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Tell me the total number of organizations",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "who maintain [IQ1]",
                    "start": 42,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bridges",
                                "start": 55,
                                "end": 66
                            },
                            {
                                "description": "made by the malaysian PWD",
                                "start": 67,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Tell) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS organizations)) (SBAR (WHNP (WP who)) (S (VP (VBP maintain) (NP (NP (DT the) (NNS bridges)) (VP (VBN made) (PP (IN by) (NP (DT the) (JJ malaysian) (NN PWD)))))))))))) (. ?)))",
        "mask_entity": "Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "15",
        "question": "How many shows does HBO have?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:company dbr:HBO))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many shows",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "does HBO have",
                    "start": 15,
                    "end": 28
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS shows)) (VP (VBZ does) (NP (NNP HBO)) (VP (VB have)))) (. ?)))",
        "mask_entity": "How many shows does [ENT] have?",
        "entity": [
            "HBO"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3232",
        "question": "How many people have been canonized by Pope Benedict XVI?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . }",
        "SExpr": "(JOIN dbp:canonizedBy dbr:Pope_Benedict_XVI)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN been) (VP (VBN canonized) (PP (IN by) (NP (NNP Pope) (NNP Benedict) (NNP XVI))))))) (. ?)))",
        "mask_entity": "How many people have been canonized by [ENT]?",
        "entity": [
            "Pope Benedict XVI"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2769",
        "question": "What party was in majority of Fourth Legislative Assembly of Delhi?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi> <http://dbpedia.org/property/party> ?uri } ",
        "SExpr": "(JOIN (R dbp:party) dbr:Fourth_Legislative_Assembly_of_Delhi)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN party)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (NN majority)) (PP (IN of) (NP (NP (NNP Fourth) (NNP Legislative) (NNP Assembly)) (PP (IN of) (NP (NNP Delhi))))))))) (. ?)))",
        "mask_entity": "What party was in majority of [ENT]?",
        "entity": [
            "Fourth Legislative Assembly of Delhi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3468",
        "question": "Bud Adams owns which american football team?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "SExpr": "(AND dbo:AmericanFootballTeam (JOIN dbo:owner dbr:Bud_Adams))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Bud Adams owns",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "which american football team",
                    "start": 15,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Bud) (NNP Adams)) (VP (VBZ owns) (SBAR (WHNP (WDT which)) (S (NP (JJ american) (NN football) (NN team))))) (. ?)))",
        "mask_entity": "[ENT] owns which american football team?",
        "entity": [
            "Bud Adams"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "920",
        "question": "Whose work is in the Musee d'orsay?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Mus\u00e9e_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artwork>}",
        "SExpr": "(JOIN (R dbp:artist) (AND dbo:Artwork (JOIN dbp:museum dbr:Mus\u00e9e_d'Orsay))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose work [IQ1]",
                    "start": 0,
                    "end": 34,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is in the Musee d'orsay",
                                "start": 11,
                                "end": 34
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NN work)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NNP Musee) (NN d'orsay)))) (. ?)))",
        "mask_entity": "Whose work is in the [ENT] d'orsay?",
        "entity": [
            "Musee"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3029",
        "question": "For which team did both Butch Metzger and Brian Horwitz debuted ? ",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Butch_Metzger> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Brian_Horwitz> <http://dbpedia.org/ontology/debutTeam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:debutTeam) dbr:Butch_Metzger) (JOIN (R dbo:debutTeam) dbr:Brian_Horwitz))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For which team",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "did both Butch Metzger and Brian Horwitz debuted",
                    "start": 15,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBD did) (NP (CC both) (NP (NNP Butch) (NNP Metzger)) (CC and) (NP (NNP Brian) (NNP Horwitz))) (VP (VBD debuted)))) (. ?)))",
        "mask_entity": "For which team did both [ENT] and [ENT] debuted ? ",
        "entity": [
            "Butch Metzger",
            "Brian Horwitz"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1372",
        "question": "Does the Sicklefin lemon shark belong in the animal kingdom?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP Sicklefin) (NN lemon) (NN shark)) (VP (VB belong) (PP (IN in) (NP (DT the) (NN animal) (NN kingdom)))) (. ?)))",
        "mask_entity": "Does the [ENT] lemon shark belong in the animal kingdom?",
        "entity": [
            "Sicklefin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3587",
        "question": "Does the stylistic origins of Plena lie in the Caribbean?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Plena> <http://dbpedia.org/property/stylisticOrigins> <http://dbpedia.org/resource/Caribbean> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NP (DT the) (JJ stylistic) (NNS origins)) (PP (IN of) (NP (NNP Plena)))) (VP (VB lie) (PP (IN in) (NP (DT the) (NNP Caribbean)))) (. ?)))",
        "mask_entity": "Does the stylistic origins of [ENT] lie in the [ENT]?",
        "entity": [
            "Plena",
            "Caribbean"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2544",
        "question": "What are the famous Uni Toronto scientists known for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/University_of_Toronto> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbo:knownFor) (AND dbo:Scientist (JOIN dbo:almaMater dbr:University_of_Toronto))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are [IQ1] known for",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the famous Uni Toronto scientists",
                                "start": 9,
                                "end": 42
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ famous) (NML (NNP Uni) (NNP Toronto)) (NNS scientists)) (VP (VBN known) (PP (IN for)))))) (. ?)))",
        "mask_entity": "What are the famous [ENT] scientists known for?",
        "entity": [
            "Uni Toronto"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3598",
        "question": "Who used to skate with the pupils of Laureano Ibarra?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Laureano_Ibarra> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
        "SExpr": "(JOIN (R dbo:formerPartner) (AND dbo:FigureSkater (JOIN dbp:coach dbr:Laureano_Ibarra))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who used to skate with [IQ1]",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the pupils of Laureano Ibarra",
                                "start": 23,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD used) (S (VP (TO to) (VP (VB skate) (PP (IN with) (NP (NP (DT the) (NNS pupils)) (PP (IN of) (NP (NNP Laureano) (NNP Ibarra)))))))))) (. ?)))",
        "mask_entity": "Who used to skate with the pupils of [ENT]?",
        "entity": [
            "Laureano Ibarra"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "38",
        "question": "How many books have been penned by Miguel de Cervantes?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (JOIN dbo:author dbr:Miguel_de_Cervantes))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many books",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "have been penned by Miguel de Cervantes",
                    "start": 15,
                    "end": 54
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS books)) (VP (VBP have) (VP (VBN been) (VP (VBN penned) (PP (IN by) (NP (NNP Miguel) (NNP de) (NNP Cervantes))))))) (. ?)))",
        "mask_entity": "How many books have been penned by [ENT]?",
        "entity": [
            "Miguel de Cervantes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "363",
        "question": "Name the river flowing through Reading and source place as Gloucestershire ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:city dbr:Reading,_Berkshire) (JOIN dbo:sourcePlace dbr:Gloucestershire)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "flowing through Reading",
                    "start": 15,
                    "end": 38
                },
                {
                    "description": "and source place as Gloucestershire",
                    "start": 39,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (VP (VBG flowing) (PP (IN through) (NP (NP (NN Reading)) (CC and) (NP (NN source) (NN place)))) (PP (IN as) (NP (NNP Gloucestershire)))))) (. ?)))",
        "mask_entity": "Name the river flowing through [ENT] and source place as [ENT] ?",
        "entity": [
            "Reading",
            "Gloucestershire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4101",
        "question": "Count the band members of Skull Gang?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:bandMember) dbr:Skull_Gang))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the band members of Skull Gang",
                    "start": 0,
                    "end": 36
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN band) (NNS members)) (PP (IN of) (NP (NNP Skull) (NNP Gang))))) (. ?)))",
        "mask_entity": "Count the band members of [ENT]?",
        "entity": [
            "Skull Gang"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "182",
        "question": "In which teams have league members of the Czech Extraliga played previously?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Czech_Extraliga> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
        "SExpr": "(JOIN (R dbo:formerTeam) (JOIN dbp:league dbr:Czech_Extraliga)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which teams",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "have [IQ1] played previously",
                    "start": 15,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "league members of the Czech Extraliga",
                                "start": 20,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS teams)) (VP (VBP have) (SBAR (S (NP (NP (NN league) (NNS members)) (PP (IN of) (NP (DT the) (JJ Czech) (NNP Extraliga)))) (VP (VBD played) (ADVP (RB previously))))))) (. ?)))",
        "mask_entity": "In which teams have league members of the [ENT] [ENT] played previously?",
        "entity": [
            "Czech",
            "Extraliga"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3033",
        "question": "Which country's people have graduated from Ghana School of Law?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Ghana_School_of_Law> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:nationality) (AND dbo:Person (JOIN dbp:almaMater dbr:Ghana_School_of_Law))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which country's [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 16,
                                "end": 22
                            },
                            {
                                "description": "have graduated from Ghana School of Law",
                                "start": 23,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN country) (POS 's)) (NNS people)) (VP (VBP have) (VP (VBN graduated) (PP (IN from) (NP (NP (NNP Ghana) (NNP School)) (PP (IN of) (NP (NNP Law))))))) (. ?)))",
        "mask_entity": "Which country's people have graduated from [ENT]?",
        "entity": [
            "Ghana School of Law"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2983",
        "question": "What does the river flow into, whose left tributary is Bukovica?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Bukovica_(river)> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
        "SExpr": "(JOIN (R dbo:mouthCountry) (JOIN dbo:leftTributary dbr:Bukovica_(river))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What does the river flow into, [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose left tributary is Bukovica",
                                "start": 31,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB flow) (PRT (IN into))))) (, ,) (SBARQ (WHNP (WP$ whose) (JJ left) (NN tributary)) (S (VP (VBZ is) (NP (NNP Bukovica))))) (. ?)))",
        "mask_entity": "What does the river flow into, whose left tributary is [ENT]?",
        "entity": [
            "Bukovica"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1194",
        "question": "For which team does hunter pence play for?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hunter_Pence> <http://dbpedia.org/ontology/team> ?uri } ",
        "SExpr": "(JOIN (R dbo:team) dbr:Hunter_Pence)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBZ does) (NP (NN hunter) (NN pence)) (VP (VB play) (PP (IN for))))) (. ?)))",
        "mask_entity": "For which team does hunter pence play for?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2852",
        "question": "Name the ground of Al-Rayan SC ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Rayan_SC> <http://dbpedia.org/ontology/ground> ?uri } ",
        "SExpr": "(JOIN (R dbo:ground) dbr:Al-Rayan_SC)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN ground)) (PP (IN of) (NP (NNP Al) (HYPH -) (NNP Rayan) (NNP SC))))) (. ?)))",
        "mask_entity": "Name the ground of [ENT] ?",
        "entity": [
            "Al-Rayan SC"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4542",
        "question": "In which cities were the chess grand masters born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Grandmaster_(chess)> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:birthPlace) (JOIN dbp:title dbr:Grandmaster_(chess))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "were [IQ1] born",
                    "start": 16,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the chess grand masters",
                                "start": 21,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS cities)) (VP (VBD were) (NP (NP (DT the) (NN chess) (JJ grand) (NNS masters)) (VP (VBN born))))) (. ?)))",
        "mask_entity": "In which cities were the chess grand masters born?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1121",
        "question": "Which city's governing body is led by Bruce Harrell?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Bruce_Harrell> . ?uri <http://dbpedia.org/property/governingBody> ?x  . }",
        "SExpr": "(JOIN dbp:governingBody (JOIN dbo:leader dbr:Bruce_Harrell)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city's governing body [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is led by Bruce Harrell",
                                "start": 28,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN city) (POS 's)) (VBG governing) (NN body)) (VP (VBZ is) (VP (VBN led) (PP (IN by) (NP (NNP Bruce) (NNP Harrell))))) (. ?)))",
        "mask_entity": "Which city's governing body is led by [ENT]?",
        "entity": [
            "Bruce Harrell"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2235",
        "question": "What band was Afrika Baby Bam a part of, and often performed with Q Tip?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Q-Tip_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Afrika_Baby_Bam) (JOIN (R dbo:associatedMusicalArtist) dbr:Q-Tip_(musician)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What band",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "was Afrika Baby Bam a part of,",
                    "start": 10,
                    "end": 40
                },
                {
                    "description": "and often performed with Q Tip",
                    "start": 41,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN band)) (SQ (VP (VBD was) (NP (NNP Afrika) (NNP Baby) (NNP Bam)) (NP (NP (DT a) (NN part)) (PP (IN of) (, ,) (CC and) (ADVP (RB often)) (S (VP (VBD performed) (PP (IN with) (NP (NNP Q) (NNP Tip))))))))) (. ?)))",
        "mask_entity": "What band was [ENT] a part of, and often performed with [ENT]?",
        "entity": [
            "Afrika Baby Bam",
            "Q Tip"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2667",
        "question": "Which  siler medalist of the Tennis at the 2012 Summer Olympics  Men's singles was also the  flagbearer of the Switzerland at the 2008 Summer Olympics",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Men's_singles> <http://dbpedia.org/ontology/silverMedalist> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:silverMedalist) dbr:Tennis_at_the_2012_Summer_Olympics_\u2013_Men's_singles) (JOIN (R dbp:flagbearer) dbr:Switzerland_at_the_2008_Summer_Olympics))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which siler medalist of the Tennis at the 2012 Summer Olympics Men's singles",
                    "start": 0,
                    "end": 76
                },
                {
                    "description": "was also the flagbearer of the Switzerland at the 2008 Summer Olympics",
                    "start": 77,
                    "end": 147
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN siler) (NN medalist)) (PP (IN of) (NP (DT the) (NNP Tennis))) (PP (IN at) (NP (DT the) (CD 2012) (NML (NML (NNP Summer) (NNPS Olympics)) (NNP Men's)) (NNS singles)))) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN flagbearer)) (PP (IN of) (NP (DT the) (NNP Switzerland))) (PP (IN at) (NP (DT the) (CD 2008) (NNP Summer) (NNPS Olympics))))))))",
        "mask_entity": "Which  siler medalist of the [ENT] at the [ENT] [ENT] singles was also the  flagbearer of the [ENT] at the [ENT] [ENT]",
        "entity": [
            "Tennis",
            "2012",
            "Summer Olympics  Men's",
            "Switzerland",
            "2008",
            "Summer Olympics"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3699",
        "question": "Who is the prime minister of the successor of Kingsley Wood?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "SExpr": "(JOIN (R dbp:primeminister) (JOIN (R dbo:successor) dbr:Kingsley_Wood)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the prime minister of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Kingsley Wood",
                                "start": 29,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ prime) (NN minister)) (PP (IN of) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Kingsley) (NNP Wood)))))))) (. ?)))",
        "mask_entity": "Who is the prime minister of the successor of [ENT]?",
        "entity": [
            "Kingsley Wood"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3223",
        "question": "List the common relegion affiliation of khadra Haji Ismail and Yasmin khatun ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Khadra_Haji_Ismail_Geid> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Yasmin_Khatun> <http://dbpedia.org/ontology/religion> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:religion) dbr:Khadra_Haji_Ismail_Geid) (JOIN (R dbo:religion) dbr:Yasmin_Khatun))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the common religion affiliation of khadra Haji Ismail and Yasmin khatun",
                    "start": 0,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ common) (JJ relegion) (NN affiliation)) (PP (IN of) (NP (NP (NNP khadra) (NNP Haji) (NNP Ismail)) (CC and) (NP (NNP Yasmin) (NNP khatun)))))) (. ?)))",
        "mask_entity": "List the common relegion affiliation of [ENT] and [ENT] ?",
        "entity": [
            "khadra Haji Ismail",
            "Yasmin khatun"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1182",
        "question": "Where was Thomy Bourdelle born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomy_Bourdelle> <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "SExpr": "(JOIN (R dbp:placeOfBirth) dbr:Thomy_Bourdelle)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Thomy) (NNP Bourdelle)) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where was [ENT] born?",
        "entity": [
            "Thomy Bourdelle"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4184",
        "question": "How many bands are based in London?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/London>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "SExpr": "(AND dbo:Band (JOIN dbo:hometown dbr:London))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many bands",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "are based in London",
                    "start": 15,
                    "end": 34
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS bands)) (VP (VBP are) (VP (VBN based) (PP (IN in) (NP (NNP London)))))) (. ?)))",
        "mask_entity": "How many bands are based in [ENT]?",
        "entity": [
            "London"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4293",
        "question": "Name few TV shows aired by Prime Time Entertainment Network?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:network dbr:Prime_Time_Entertainment_Network))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name few TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "aired by Prime Time Entertainment Network",
                    "start": 18,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NN Name)) (NP (JJ few) (NN TV) (NNS shows)) (VP (VBN aired) (PP (IN by) (NP (NNP Prime) (NNP Time) (NNP Entertainment) (NNP Network)))) (. ?)))",
        "mask_entity": "Name few TV shows aired by [ENT]?",
        "entity": [
            "Prime Time Entertainment Network"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "614",
        "question": "Which president of Lance Adams-Schneider had nickname Daniel O'Regan ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lance_Adams-Schneider> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Daniel_O'Regan> <http://dbpedia.org/property/nickname> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:president) dbr:Lance_Adams-Schneider) (JOIN (R dbp:nickname) dbr:Daniel_O'Regan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which president of Lance Adams-Schneider",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "had nickname Daniel O'Regan",
                    "start": 41,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN president)) (PP (IN of) (NP (NNP Lance) (NNP Adams) (, -) (NNP Schneider)))) (SQ (VP (VBD had) (NP (NN nickname) (NNP Daniel) (NNP O'Regan)))) (. ?)))",
        "mask_entity": "Which president of [ENT] had nickname [ENT] ?",
        "entity": [
            "Lance Adams-Schneider",
            "Daniel O'Regan"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4908",
        "question": "WHo gave the lyrcis of Doonesbury ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doonesbury_(musical)> <http://dbpedia.org/ontology/lyrics> ?uri } ",
        "SExpr": "(JOIN (R dbo:lyrics) dbr:Doonesbury_(musical))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP WHo)) (SQ (VP (VBD gave) (NP (NP (DT the) (NN lyrcis)) (PP (IN of) (NP (NNP Doonesbury)))))) (. ?)))",
        "mask_entity": "WHo gave the lyrcis of [ENT] ?",
        "entity": [
            "Doonesbury"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1466",
        "question": "Which series are Lennier and Londo Mollari both from?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennier> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:series) dbr:Lennier) (JOIN (R dbo:series) dbr:Londo_Mollari))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which series",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are Lennier and Londo Mollari both from",
                    "start": 13,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VP (VBP are) (NP (NP (NNP Lennier)) (CC and) (NP (NNP Londo) (NNP Mollari))) (CC both) (PP (IN from)))) (. ?)))",
        "mask_entity": "Which series are [ENT] and [ENT] both from?",
        "entity": [
            "Lennier",
            "Londo Mollari"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "401",
        "question": "Who coached the marquet golden eagels during 2013",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
        "SExpr": "(JOIN (R dbo:coach) dbr:2013\u201314_Marquette_Golden_Eagles_men's_basketball_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD coached) (NP (DT the) (NNP marquet) (JJ golden) (NNS eagels)) (PP (IN during) (NP (CD 2013)))))))",
        "mask_entity": "Who coached the marquet golden eagels during [ENT]",
        "entity": [
            "2013"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3042",
        "question": "Give me a list of computers whose CPU is in the US.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/cpu> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "SExpr": "(AND dbo:InformationAppliance (JOIN dbo:cpu (JOIN dbp:locationCity dbr:United_States))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a list of computers",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose CPU [IQ1]",
                    "start": 28,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is in the US",
                                "start": 38,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN list)) (PP (IN of) (NP (NP (NNS computers)) (SBAR (WHNP (WP$ whose) (NNP CPU)) (S (VP (VBZ is) (PP (IN in) (NP (DT the) (NNP US)))))))))) (. .)))",
        "mask_entity": "Give me a list of computers whose CPU is in the [ENT].",
        "entity": [
            "US"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "934",
        "question": "What is that something which made Breann McGregor famous, and Frank Thorne received as an award?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Thorne> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:award) dbr:Frank_Thorne) (JOIN (R dbp:knownFor) dbr:Breann_McGregor))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is that something",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "which made Breann McGregor famous,",
                    "start": 23,
                    "end": 57
                },
                {
                    "description": "and Frank Thorne received as an award",
                    "start": 58,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (IN that) (NN something)) (SBAR (WHNP (WDT which)) (S (VP (VBD made) (S (NP (NNP Breann) (NNP McGregor)) (ADJP (JJ famous)))))))))) (, ,) (CC and) (NP (NNP Frank) (NNP Thorne)) (VP (VBD received) (PP (IN as) (NP (DT an) (NN award)))) (. ?)))",
        "mask_entity": "What is that something which made [ENT] famous, and [ENT] received as an award?",
        "entity": [
            "Breann McGregor",
            "Frank Thorne"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2419",
        "question": "Which things have been located, where governance is Houston City Council?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Houston_City_Council> . ?uri <http://dbpedia.org/ontology/location> ?x  . }",
        "SExpr": "(JOIN dbo:location (JOIN dbp:governingBody dbr:Houston_City_Council)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which things",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "have been located, [IQ1]",
                    "start": 13,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "where governance is Houston City Council",
                                "start": 32,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS things)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN located))))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (NN governance)) (VP (VBZ is) (NP (NNP Houston) (NNP City) (NNP Council))))) (. ?)))",
        "mask_entity": "Which things have been located, where governance is [ENT]?",
        "entity": [
            "Houston City Council"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4860",
        "question": "What beverages originate in Leuven?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Leuven>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
        "SExpr": "(AND dbo:Beverage (JOIN dbo:origin dbr:Leuven))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What beverages",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "originate in Leuven",
                    "start": 15,
                    "end": 34
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NNS beverages)) (S (VP (VBP originate) (PP (IN in) (NP (NNP Leuven))))) (. ?)))",
        "mask_entity": "What beverages originate in [ENT]?",
        "entity": [
            "Leuven"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4910",
        "question": "Who are the parents of  Charles Phelps Taft II and Robert A. Taft?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Charles_Phelps_Taft_II> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Robert_A._Taft> . }",
        "SExpr": "(AND (JOIN dbo:child dbr:Charles_Phelps_Taft_II) (JOIN dbo:child dbr:Robert_A._Taft))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the parents of Charles Phelps Taft II and Robert A. Taft",
                    "start": 0,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS parents)) (PP (IN of) (NP (NP (NNP Charles) (NNP Phelps) (NNP Taft) (CD II)) (CC and) (NP (NNP Robert) (NNP A.) (NNP Taft))))))) (. ?)))",
        "mask_entity": "Who are the parents of  [ENT] and [ENT]?",
        "entity": [
            "Charles Phelps Taft II",
            "Robert A. Taft"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2641",
        "question": "What are the different religions followed by presidents whose prime minister was Surayud Chulanont?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Surayud_Chulanont> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:President (JOIN dbp:primeminister dbr:Surayud_Chulanont))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the different religions",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "followed by [IQ1]",
                    "start": 33,
                    "end": 98,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "presidents",
                                "start": 45,
                                "end": 55
                            },
                            {
                                "description": "whose prime minister was Surayud Chulanont",
                                "start": 56,
                                "end": 98
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ different) (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NP (NNS presidents)) (SBAR (WHNP (WP$ whose) (JJ prime) (NN minister)) (S (VP (VBD was) (NP (NNP Surayud) (NNP Chulanont))))))))))) (. ?)))",
        "mask_entity": "What are the different religions followed by presidents whose prime minister was [ENT]?",
        "entity": [
            "Surayud Chulanont"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4017",
        "question": "How many prime ministers did the predecessor of Duncan Sandys  serve?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Duncan_Sandys> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "SExpr": "(JOIN (R dbp:primeminister) (JOIN (R dbp:successor) dbr:Duncan_Sandys)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many prime ministers",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "did [IQ1] serve",
                    "start": 25,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the predecessor of Duncan Sandys",
                                "start": 29,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ prime) (NNS ministers)) (VP (VBD did) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Duncan) (NNP Sandys)))) (VP (VB serve)))) (. ?)))",
        "mask_entity": "How many prime ministers did the predecessor of [ENT]  serve?",
        "entity": [
            "Duncan Sandys"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "726",
        "question": "Name the city served by Juhu Aerodrome ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri } ",
        "SExpr": "(JOIN (R dbp:cityServed) dbr:Juhu_Aerodrome)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NP (NN Name)) (NP (DT the) (NN city))) (VP (VBN served) (PP (IN by) (NP (NNP Juhu) (NNP Aerodrome)))) (. ?)))",
        "mask_entity": "Name the city served by [ENT] ?",
        "entity": [
            "Juhu Aerodrome"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "826",
        "question": "What is the settlement whose neighboring municipalities is Lancy and mayor name is Esther Alder?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Esther_Alder>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "SExpr": "(AND dbo:Settlement (AND (JOIN dbp:neighboringMunicipalities dbr:Lancy) (JOIN dbo:mayor dbr:Esther_Alder)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the settlement",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose neighboring municipalities is Lancy",
                    "start": 23,
                    "end": 64
                },
                {
                    "description": "and mayor name is Esther Alder",
                    "start": 65,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN settlement)) (SBAR (WHNP (WP$ whose) (VBG neighboring) (NNS municipalities)) (S (VP (VBZ is) (NP (NNP Lancy))))))))) (CC and) (NP (NN mayor) (NN name)) (VP (VBZ is) (NP (NNP Esther) (NNP Alder))) (. ?)))",
        "mask_entity": "What is the settlement whose neighboring municipalities is [ENT] and mayor name is [ENT]?",
        "entity": [
            "Lancy",
            "Esther Alder"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1521",
        "question": "List the notable works of the writer of The Tony Randall Show ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Tony_Randall_Show> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "SExpr": "(JOIN (R dbo:notableWork) (JOIN (R dbp:writer) dbr:The_Tony_Randall_Show)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the notable works of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writer of The Tony Randall Show",
                                "start": 26,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ notable) (NNS works)) (PP (IN of) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (DT The) (NNP Tony) (NNP Randall) (NNP Show))))))) (. ?)))",
        "mask_entity": "List the notable works of the writer of [ENT] ?",
        "entity": [
            "The Tony Randall Show"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4856",
        "question": "How many cars succeed the cars assembled in Canada?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(AND dbo:Automobile (JOIN (R dbo:predecessor) (JOIN dbp:assembly dbr:Canada))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cars",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "succeed [IQ1]",
                    "start": 14,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the cars",
                                "start": 22,
                                "end": 30
                            },
                            {
                                "description": "assembled in Canada",
                                "start": 31,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cars)) (VP (VBP succeed) (NP (NP (DT the) (NNS cars)) (VP (VBN assembled) (PP (IN in) (NP (NNP Canada))))))) (. ?)))",
        "mask_entity": "How many cars succeed the cars assembled in [ENT]?",
        "entity": [
            "Canada"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2930",
        "question": "Where has the employee of Columbia Records  worked ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Columbia_Records> . ?x <http://dbpedia.org/ontology/employer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:employer) (JOIN dbo:employer dbr:Columbia_Records)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where has [IQ1] worked",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the employee of Columbia Records",
                                "start": 10,
                                "end": 42
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ has) (NP (NP (DT the) (NN employee)) (PP (IN of) (NP (NNP Columbia) (NNPS Records)))) (VP (VBN worked))) (. ?)))",
        "mask_entity": "Where has the employee of [ENT]  worked ?",
        "entity": [
            "Columbia Records"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "136",
        "question": "What is the birth place of the cast of Lagnacha Dhumdhadaka?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lagnacha_Dhumdhadaka> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "SExpr": "(JOIN (R dbp:placeOfBirth) (JOIN (R dbp:starring) dbr:Lagnacha_Dhumdhadaka)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birth place of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the cast of Lagnacha Dhumdhadaka",
                                "start": 27,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (DT the) (NN cast)) (PP (IN of) (NP (NNP Lagnacha) (NNP Dhumdhadaka)))))))) (. ?)))",
        "mask_entity": "What is the birth place of the cast of [ENT]?",
        "entity": [
            "Lagnacha Dhumdhadaka"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3590",
        "question": "Whci co founder of Sea gayle Music is also the artist of Brad Paisley Discography /",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Sea_Gayle_Music> <http://dbpedia.org/property/founder> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:Brad_Paisley_discography) (JOIN (R dbp:founder) dbr:Sea_Gayle_Music))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whci co founder of Sea gayle Music",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is also the artist of Brad Paisley Discography",
                    "start": 35,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (S (S (NP (NP (NNP Whci) (NNP co) (NN founder)) (PP (IN of) (NP (NNP Sea) (NNP gayle) (NNP Music)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN artist)) (PP (IN of) (NP (NNP Brad) (NNP Paisley) (NNP Discography)))))) (, /)))",
        "mask_entity": "Whci co founder of [ENT] is also the artist of [ENT] Discography /",
        "entity": [
            "Sea gayle Music",
            "Brad Paisley"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "628",
        "question": "Which wine region of Bogdanua is the mouth country of Upper Neretva ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogdanu\u0161a> <http://dbpedia.org/ontology/wineRegion> ?uri. <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:wineRegion) dbr:Bogdanu\u0161a) (JOIN (R dbo:mouthCountry) dbr:Upper_Neretva))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which wine region of Bogdanua",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "is the mouth country of Upper Neretva",
                    "start": 30,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN wine) (NN region)) (PP (IN of) (NP (NNP Bogdanua)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN mouth) (NN country)) (PP (IN of) (NP (NNP Upper) (NNP Neretva)))))) (. ?)))",
        "mask_entity": "Which wine region of [ENT] is the mouth country of [ENT] ?",
        "entity": [
            "Bogdanua",
            "Upper Neretva"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "334",
        "question": "Which television show's network  is BBC HD and is related to Doctor Who Confidential?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:network dbr:BBC_HD) (JOIN dbo:related dbr:Doctor_Who_Confidential)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which television show's",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "network is BBC HD",
                    "start": 24,
                    "end": 41
                },
                {
                    "description": "and is related to Doctor Who Confidential",
                    "start": 42,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN television) (NN show) (POS 's)) (NN network)) (VP (VP (VBZ is) (NP (NNP BBC) (NNP HD))) (CC and) (VP (VBZ is) (ADJP (JJ related) (PP (IN to) (NP (NNP Doctor) (WP Who) (JJ Confidential)))))) (. ?)))",
        "mask_entity": "Which television show's network  is [ENT] and is related to Doctor Who Confidential?",
        "entity": [
            "BBC HD"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "390",
        "question": "Name the products of Den norske Bank ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Den_norske_Bank> <http://dbpedia.org/property/products> ?uri } ",
        "SExpr": "(JOIN (R dbp:products) dbr:Den_norske_Bank)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS products)) (PP (IN of) (NP (NNP Den) (NNP norske) (NNP Bank))))) (. ?)))",
        "mask_entity": "Name the products of [ENT] ?",
        "entity": [
            "Den norske Bank"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4387",
        "question": "In how many places have people canonized by John Paul II died?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbp:deathPlace) (JOIN dbp:canonizedBy dbr:Pope_John_Paul_II))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many places",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "have [IQ1] died",
                    "start": 19,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 24,
                                "end": 30
                            },
                            {
                                "description": "canonized by John Paul II",
                                "start": 31,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (VBP have) (NP (NNS people)) (VP (VBN canonized) (PP (IN by) (NP (NNP John) (NNP Paul) (CD II))))))) (VP (VBD died)) (. ?)))",
        "mask_entity": "In how many places have people canonized by [ENT] died?",
        "entity": [
            "John Paul II"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4904",
        "question": "Where does the river flow into, which starts at the Sierra Madre de Chiapas?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Sierra_Madre_de_Chiapas> . ?x <http://dbpedia.org/property/mouthCountry> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbp:mouthCountry) (AND dbo:River (JOIN dbo:source dbr:Sierra_Madre_de_Chiapas))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river flow into, [IQ1]",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which starts at the Sierra Madre de Chiapas",
                                "start": 32,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VP (VB flow) (PRT (IN into))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ starts) (PP (IN at) (NP (DT the) (NNP Sierra) (NNP Madre) (NNP de) (NNP Chiapas)))))))) (. ?)))",
        "mask_entity": "Where does the river flow into, which starts at [ENT] de Chiapas?",
        "entity": [
            "the Sierra Madre"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3832",
        "question": "From which country did the Mauritius bank and the national commerce bank emerge?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/National_Commercial_Bank_Mauritius> <http://dbpedia.org/property/locationCountry> ?uri. <http://dbpedia.org/resource/Mauritius_Bank> <http://dbpedia.org/property/locationCountry> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:locationCountry) dbr:National_Commercial_Bank_Mauritius) (JOIN (R dbp:locationCountry) dbr:Mauritius_Bank))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From which country",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "did the Mauritius bank and the national commerce bank emerge",
                    "start": 19,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN From) (WHNP (WDT which) (NN country))) (SQ (VBD did) (NP (NP (DT the) (NNP Mauritius) (NN bank)) (CC and) (NP (DT the) (JJ national) (NN commerce) (NN bank))) (VP (VB emerge))) (. ?)))",
        "mask_entity": "From which country did the [ENT] bank and the national commerce bank emerge?",
        "entity": [
            "Mauritius"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1817",
        "question": "Who are the shareholder of the broadcast networks whose owning company is Jamie Kellner?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Jamie_Kellner> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:BroadcastNetwork (JOIN dbo:owningCompany dbr:Jamie_Kellner))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the shareholder of [IQ1]",
                    "start": 0,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the broadcast networks",
                                "start": 27,
                                "end": 49
                            },
                            {
                                "description": "whose owning company is Jamie Kellner",
                                "start": 50,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NN shareholder)) (PP (IN of) (NP (NP (DT the) (JJ broadcast) (NNS networks)) (SBAR (WHNP (WP$ whose) (NN owning) (NN company)) (S (VP (VBZ is) (NP (NNP Jamie) (NNP Kellner)))))))))) (. ?)))",
        "mask_entity": "Who are the shareholder of the broadcast networks whose owning company is [ENT]?",
        "entity": [
            "Jamie Kellner"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "400",
        "question": "The Prime minister who worked in the Khmer Issarak follows which religion?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Khmer_Issarak> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PrimeMinister>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:PrimeMinister (JOIN dbo:militaryBranch dbr:Khmer_Issarak))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] follows",
                    "start": 0,
                    "end": 13,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "The Prime minister",
                                "start": 0,
                                "end": 18
                            },
                            {
                                "description": "who worked in the Khmer Issarak",
                                "start": 19,
                                "end": 50
                            }
                        ]
                    }
                },
                {
                    "description": "which religion",
                    "start": 14,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT The) (JJ Prime) (NN minister)) (SBAR (WHNP (WP who)) (S (VP (VBD worked) (PP (IN in) (NP (DT the) (NNP Khmer) (NNP Issarak))))))) (VP (VBZ follows) (SBAR (WHNP (WDT which) (NN religion)) (. ?)))))",
        "mask_entity": "The Prime minister who worked in [ENT] follows which religion?",
        "entity": [
            "the Khmer Issarak"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "710",
        "question": "Which country does league of Nguendula Filipe belongs to?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nguendula_Filipe> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "SExpr": "(JOIN (R dbp:country) (JOIN (R dbo:league) dbr:Nguendula_Filipe)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which country",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "does [IQ1] belongs to",
                    "start": 14,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "league of Nguendula Filipe",
                                "start": 19,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (NP (NN league)) (PP (IN of) (NP (NNP Nguendula) (NNP Filipe)))) (VP (VBZ belongs) (PP (IN to)))) (. ?)))",
        "mask_entity": "Which country does league of [ENT] belongs to?",
        "entity": [
            "Nguendula Filipe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1039",
        "question": "Is the Bucyrus MT6300AC assembled in north america?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Bucyrus_MT6300AC> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (NML (NNP Bucyrus) (NNP MT6300)) (NN AC)) (VP (VBN assembled) (PP (IN in) (NP (JJ north) (NNP america)))) (. ?)))",
        "mask_entity": "Is the Bucyrus MT6300AC assembled in north [ENT]?",
        "entity": [
            "america"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3989",
        "question": "Which rivers flow into the lower manhatten?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Lower_Manhattan> } ",
        "SExpr": "(JOIN dbo:mouthMountain dbr:Lower_Manhattan)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN into) (NP (DT the) (JJR lower) (NN manhatten))))) (. ?)))",
        "mask_entity": "Which rivers flow into the lower manhatten?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3359",
        "question": "Who is the founder of Pittsburgh ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pittsburgh> <http://dbpedia.org/ontology/founder> ?uri } ",
        "SExpr": "(JOIN (R dbo:founder) dbr:Pittsburgh)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NNP Pittsburgh)))))) (. ?)))",
        "mask_entity": "Who is the founder of [ENT] ?",
        "entity": [
            "Pittsburgh"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "46",
        "question": "What are the airlines whose hub is San Francisco International Airport?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/San_Francisco_International_Airport>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(AND dbo:Airline (JOIN dbp:hubs dbr:San_Francisco_International_Airport))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the airlines",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose hub is San Francisco International Airport",
                    "start": 22,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NN hub)) (S (VP (VBZ is) (NP (NNP San) (NNP Francisco) (NNP International) (NNP Airport)))))))) (. ?)))",
        "mask_entity": "What are the airlines whose hub is [ENT]?",
        "entity": [
            "San Francisco International Airport"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1561",
        "question": "Who rented the stadium where the UFC 152 take place?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UFC_152> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(JOIN (R dbo:tenant) (AND dbo:Stadium (JOIN (R dbp:venue) dbr:UFC_152))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who rented [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 11,
                                "end": 22
                            },
                            {
                                "description": "where the UFC 152 take place",
                                "start": 23,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD rented) (NP (NP (DT the) (NN stadium)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NNP UFC) (CD 152)) (VP (NN take) (NP (NN place)))))))) (. ?)))",
        "mask_entity": "Who rented the stadium where [ENT] take place?",
        "entity": [
            "the UFC 152"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4799",
        "question": "Which appliance has cpu from Freescale Semiconductor and Marvell Technology Group?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Freescale_Semiconductor> . ?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "SExpr": "(AND dbo:InformationAppliance (AND (JOIN dbo:cpu dbr:Freescale_Semiconductor) (JOIN dbo:cpu dbr:Marvell_Technology_Group)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which appliance",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "has cpu from Freescale Semiconductor",
                    "start": 16,
                    "end": 52
                },
                {
                    "description": "and Marvell Technology Group",
                    "start": 53,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN appliance)) (SQ (VP (VBZ has) (NP (NP (NN cpu)) (PP (IN from) (NP (NP (NNP Freescale) (NNP Semiconductor)) (CC and) (NP (NNP Marvell) (NNP Technology) (NNP Group))))))) (. ?)))",
        "mask_entity": "Which appliance has cpu from [ENT] and [ENT]?",
        "entity": [
            "Freescale Semiconductor",
            "Marvell Technology Group"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3642",
        "question": "What is the place where the mayor's wife is Jean-Marc Germain?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Jean-Marc_Germain> . ?uri <http://dbpedia.org/ontology/mayor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN dbo:mayor (JOIN dbp:spouse dbr:Jean-Marc_Germain))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the place",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "where the mayor's [IQ1]",
                    "start": 18,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "wife is Jean-Marc Germain",
                                "start": 36,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (DT the) (NN mayor) (POS 's)) (NN wife)) (VP (VBZ is) (NP (NNP Jean) (HYPH -) (NNP Marc) (NNP Germain)))))))) (. ?)))",
        "mask_entity": "What is the place where the mayor's wife is [ENT]?",
        "entity": [
            "Jean-Marc Germain"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3726",
        "question": "Was 2658 Gingerich invented in Harvard?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/2658_Gingerich> <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Harvard_College> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (CD 2658) (NNP Gingerich)) (VP (VBN invented) (PP (IN in) (NP (NNP Harvard)))) (. ?)))",
        "mask_entity": "Was [ENT] [ENT] invented in [ENT]?",
        "entity": [
            "2658",
            "Gingerich",
            "Harvard"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4982",
        "question": "Which religions' people fought in the Miao rebellion?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miao_Rebellion_(1795\u20131806)> <http://dbpedia.org/property/combatant> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbp:combatant) dbr:Miao_Rebellion_(1795\u20131806))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which religions' [IQ1]",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 17,
                                "end": 23
                            },
                            {
                                "description": "fought in the Miao rebellion",
                                "start": 24,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NNS religions) (POS ')) (NNS people)) (VP (VBD fought) (PP (IN in) (NP (DT the) (NNP Miao) (NN rebellion)))) (. ?)))",
        "mask_entity": "Which religions' people fought in the [ENT] rebellion?",
        "entity": [
            "Miao"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1112",
        "question": "Which universities are alma mater to Charles Plosser?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Plosser> <http://dbpedia.org/property/almaMater> ?uri } ",
        "SExpr": "(JOIN (R dbp:almaMater) dbr:Charles_Plosser)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS universities)) (SQ (VP (VBP are) (NP (NP (JJ alma) (NN mater)) (PP (IN to) (NP (NNP Charles) (NNP Plosser)))))) (. ?)))",
        "mask_entity": "Which universities are alma mater to [ENT]?",
        "entity": [
            "Charles Plosser"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2513",
        "question": "What is the constituency of Santo Versace?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Santo_Versace> <http://dbpedia.org/property/constituency> ?uri } ",
        "SExpr": "(JOIN (R dbp:constituency) dbr:Santo_Versace)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN constituency)) (PP (IN of) (NP (NNP Santo) (NNP Versace)))))) (. ?)))",
        "mask_entity": "What is the constituency of [ENT]?",
        "entity": [
            "Santo Versace"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3608",
        "question": "Count all the shows whose music composers are in Oysterhead.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Oysterhead> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:themeMusicComposer (JOIN dbo:associatedMusicalArtist dbr:Oysterhead))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count all the shows",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose music composers [IQ1]",
                    "start": 20,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are in Oysterhead",
                                "start": 42,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN music) (NNS composers)) (S (VP (VBP are) (PP (IN in) (NP (NNP Oysterhead)))))))) (. .)))",
        "mask_entity": "Count all the shows whose music composers are in [ENT].",
        "entity": [
            "Oysterhead"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1223",
        "question": "List the significant building of the architect who also designed  Kiev?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Kiev> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
        "SExpr": "(JOIN (R dbo:significantBuilding) (AND dbo:Architect (JOIN dbo:significantBuilding dbr:Kiev))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the significant building of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the architect",
                                "start": 33,
                                "end": 46
                            },
                            {
                                "description": "who also designed Kiev",
                                "start": 47,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ significant) (NN building)) (PP (IN of) (NP (NP (DT the) (NN architect)) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBD designed) (NP (NNP Kiev))))))))) (. ?)))",
        "mask_entity": "List the significant building of the architect who also designed  [ENT]?",
        "entity": [
            "Kiev"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4060",
        "question": "How many other architect are there of the historic places whose architect is also Stanford White ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Stanford_White> . ?x <http://dbpedia.org/ontology/architect> ?uri }",
        "SExpr": "(JOIN (R dbo:architect) (JOIN dbo:architect dbr:Stanford_White)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other architect are there of [IQ1]",
                    "start": 0,
                    "end": 96,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the historic places",
                                "start": 38,
                                "end": 57
                            },
                            {
                                "description": "whose architect is also Stanford White",
                                "start": 58,
                                "end": 96
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ other) (NN architect)) (VP (VBP are) (ADVP (RB there)) (PP (IN of) (NP (NP (DT the) (JJ historic) (NNS places)) (SBAR (WHNP (WP$ whose) (NN architect)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NNP Stanford) (NNP White))))))))) (. ?)))",
        "mask_entity": "How many other architect are there of the historic places whose architect is also [ENT] ?",
        "entity": [
            "Stanford White"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3023",
        "question": "What is the deathplace of the rugby player who is the relatives of Anton Oliver ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Anton_Oliver> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathPlace) (JOIN (R dbp:relatives) dbr:Anton_Oliver)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the deathplace of [IQ1]",
                    "start": 0,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rugby player",
                                "start": 26,
                                "end": 42
                            },
                            {
                                "description": "who is the relatives of Anton Oliver",
                                "start": 43,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN deathplace)) (PP (IN of) (NP (NP (DT the) (JJ rugby) (NN player)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Anton) (NNP Oliver)))))))))))) (. ?)))",
        "mask_entity": "What is the deathplace of the rugby player who is the relatives of [ENT] ?",
        "entity": [
            "Anton Oliver"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2421",
        "question": "What is the alma mater of the Marshall Fletcher McCallie and has affiliation with  Vanderbilt University Medical Center ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marshall_Fletcher_McCallie> <http://dbpedia.org/property/almaMater> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:almaMater) dbr:Marshall_Fletcher_McCallie) (JOIN (R dbp:affiliation) dbr:Vanderbilt_University_Medical_Center))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of the Marshall Fletcher McCallie",
                    "start": 0,
                    "end": 56
                },
                {
                    "description": "and has affiliation with Vanderbilt University Medical Center",
                    "start": 57,
                    "end": 118
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (DT the) (NML (NNP Marshall) (NNP Fletcher)) (NNP McCallie))))) (CC and) (VP (VBZ has) (NP (NP (NN affiliation)) (PP (IN with) (NP (NML (NNP Vanderbilt) (NNP University)) (NNP Medical) (NNP Center))))))) (. ?)))",
        "mask_entity": "What is the alma mater of [ENT] and has affiliation with  [ENT] ?",
        "entity": [
            "the Marshall Fletcher McCallie",
            "Vanderbilt University Medical Center"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1508",
        "question": "Who has had been the tenant of the stadium built by PCL construction firm?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/PCL_Construction> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(JOIN (R dbo:tenant) (AND dbo:Stadium (JOIN dbo:builder dbr:PCL_Construction))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has had been the tenant of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 31,
                                "end": 42
                            },
                            {
                                "description": "built by PCL construction firm",
                                "start": 43,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ has) (VP (VBN had) (VP (VBN been) (NP (NP (DT the) (NN tenant)) (PP (IN of) (NP (NP (DT the) (NN stadium)) (VP (VBN built) (PP (IN by) (NP (NNP PCL) (NN construction) (NN firm)))))))))) (. ?)))",
        "mask_entity": "Who has had been the tenant of the stadium built by [ENT] construction firm?",
        "entity": [
            "PCL"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1750",
        "question": "Does the Amazon River start in Arequipa Region?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Amazon_River> <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP Amazon) (NNP River)) (VP (VB start) (PP (IN in) (NP (NNP Arequipa) (NNP Region)))) (. ?)))",
        "mask_entity": "Does [ENT] start in [ENT]?",
        "entity": [
            "the Amazon River",
            "Arequipa Region"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4837",
        "question": "Is San Salvador Island a part of the Bahamas?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/San_Salvador_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP San) (NNP Salvador) (NNP Island)) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (DT the) (NNPS Bahamas)))) (. ?)))",
        "mask_entity": "Is [ENT] a part of the [ENT]?",
        "entity": [
            "San Salvador Island",
            "Bahamas"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4096",
        "question": "List the people educated at Harvard-Westlake School and has resting place as Palo Alto, California?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (AND (JOIN dbo:almaMater dbr:Harvard-Westlake_School) (JOIN dbp:restingPlace dbr:Palo_Alto,_California)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "educated at Harvard-Westlake School",
                    "start": 16,
                    "end": 51
                },
                {
                    "description": "and has resting place as Palo Alto, California",
                    "start": 52,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB List) (NP (NP (DT the) (NNS people)) (VP (VBN educated) (PP (IN at) (NP (NNP Harvard) (NNP -Westlake) (NNP School)))))) (CC and) (VP (VBZ has) (VP (VBG resting) (NP (NN place)) (PP (IN as) (NP (NP (NNP Palo) (NNP Alto)) (, ,) (NP (NNP California))))))) (. ?)))",
        "mask_entity": "List the people educated at [ENT] and has resting place as [ENT], [ENT]?",
        "entity": [
            "Harvard-Westlake School",
            "Palo Alto",
            "California"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1799",
        "question": "Which companies published Super Mario Adventures?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Super_Mario_Adventures> <http://dbpedia.org/property/publisher> ?uri } ",
        "SExpr": "(JOIN (R dbp:publisher) dbr:Super_Mario_Adventures)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS companies)) (S (VP (VBD published) (NP (NNP Super) (NNP Mario) (NNPS Adventures)))) (. ?)))",
        "mask_entity": "Which companies published [ENT]?",
        "entity": [
            "Super Mario Adventures"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "338",
        "question": "What is the television show whose producer is Stephen E. Ambrose?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:producer dbr:Stephen_E._Ambrose))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose producer is Stephen E. Ambrose",
                    "start": 28,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN producer)) (S (VP (VBZ is) (NP (NNP Stephen) (NNP E.) (NNP Ambrose)))))))) (. ?)))",
        "mask_entity": "What is the television show whose producer is [ENT]?",
        "entity": [
            "Stephen E. Ambrose"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "215",
        "question": "Which artist of Madagascar: Operation Penguin is also the writer of He's a Pirate ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Madagascar:_Operation_Penguin> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/He's_a_Pirate> <http://dbpedia.org/property/writer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:Madagascar:_Operation_Penguin) (JOIN (R dbp:writer) dbr:He's_a_Pirate))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which artist of Madagascar: Operation Penguin",
                    "start": 0,
                    "end": 45
                },
                {
                    "description": "is also the writer of He's a Pirate",
                    "start": 46,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN artist)) (PP (IN of) (NP (NNP Madagascar)))) (: :) (S (NP (NNP Operation) (NNP Penguin)) (VP (VBZ is) (ADVP (RB also)) (S (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (PRP He)))) (VP (VBZ 's) (NP (DT a) (NNP Pirate)))))) (. ?)))",
        "mask_entity": "Which artist of [ENT] is also the writer of He's a Pirate ?",
        "entity": [
            "Madagascar: Operation Penguin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3663",
        "question": "Name the software whose operating system is Mac OS and programming language is C++ ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . ?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(AND dbo:Software (AND (JOIN dbo:operatingSystem dbr:Mac_OS) (JOIN dbp:programmingLanguage dbr:C++)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the software",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose operating system is Mac OS",
                    "start": 18,
                    "end": 50
                },
                {
                    "description": "and programming language is C++",
                    "start": 51,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WP$ whose) (NN operating) (NN system)) (S (VP (VBZ is) (NP (NNP Mac) (NNP OS)))))))) (CC and) (S (NP (NN programming) (NN language)) (VP (VBZ is) (NP (NNP C) (CD ++)))) (. ?)))",
        "mask_entity": "Name the software whose operating system is Mac OS and programming language is C++ ?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1341",
        "question": "In which state does the valley bordering the Modoc plateau lie?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/border> <http://dbpedia.org/resource/Modoc_Plateau> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
        "SExpr": "(JOIN (R dbo:state) (AND dbo:Valley (JOIN dbp:border dbr:Modoc_Plateau))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which state",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "does [IQ1] lie",
                    "start": 15,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the valley",
                                "start": 20,
                                "end": 30
                            },
                            {
                                "description": "bordering the Modoc plateau",
                                "start": 31,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN In) (WHNP (WDT which))) (SQ (VP (NN state) (VBZ does) (S (NP (NP (DT the) (NN valley)) (VP (VBG bordering) (NP (DT the) (NNP Modoc) (NN plateau)))) (VP (VB lie))))) (. ?)))",
        "mask_entity": "In which state does the valley bordering [ENT] lie?",
        "entity": [
            "the Modoc plateau"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "11",
        "question": "Where was the designer of REP Parasol born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/REP_Parasol> <http://dbpedia.org/ontology/designer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:birthPlace) (JOIN (R dbo:designer) dbr:REP_Parasol)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was [IQ1] born",
                    "start": 0,
                    "end": 42,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the designer of REP Parasol",
                                "start": 10,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN designer)) (PP (IN of) (NP (NNP REP) (NNP Parasol)))) (VP (VBN born))) (. ?)))",
        "mask_entity": "Where was the designer of [ENT] born?",
        "entity": [
            "REP Parasol"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1520",
        "question": "Which religion is followed by people in the family of Meadow Sopranos?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Meadow_Soprano> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:Person (JOIN dbp:family dbr:Meadow_Soprano))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which religion",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "is followed by [IQ1]",
                    "start": 15,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 30,
                                "end": 36
                            },
                            {
                                "description": "in the family of Meadow Sopranos",
                                "start": 37,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN religion)) (SQ (VP (VBZ is) (VP (VBN followed) (PP (IN by) (NP (NP (NNS people)) (PP (IN in) (NP (NP (DT the) (NN family)) (PP (IN of) (NP (NNP Meadow) (NNP Sopranos)))))))))) (. ?)))",
        "mask_entity": "Which religion is followed by people in the family of [ENT]?",
        "entity": [
            "Meadow Sopranos"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3640",
        "question": "What religion does roshan ranasinghe and nhiek tioulong follow?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roshan_Ranasinghe> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Nhiek_Tioulong> <http://dbpedia.org/ontology/religion> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:religion) dbr:Roshan_Ranasinghe) (JOIN (R dbo:religion) dbr:Nhiek_Tioulong))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religion",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "does roshan ranasinghe and nhiek tioulong follow",
                    "start": 14,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBZ does) (NP (NP (NNP roshan) (NNP ranasinghe)) (CC and) (NP (NN nhiek) (NN tioulong))) (VP (VB follow))) (. ?)))",
        "mask_entity": "What religion does roshan ranasinghe and nhiek tioulong follow?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3937",
        "question": "How many cars are the predecessor of cars similar to the Pontiac G8?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Pontiac_G8> <http://dbpedia.org/ontology/relatedMeanOfTransportation> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbo:predecessor) (AND dbo:Automobile (JOIN (R dbo:relatedMeanOfTransportation) dbr:Pontiac_G8))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cars",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "are the predecessor of [IQ1]",
                    "start": 14,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "cars",
                                "start": 37,
                                "end": 41
                            },
                            {
                                "description": "similar to the Pontiac G8",
                                "start": 42,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cars)) (VP (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NP (NNS cars)) (ADJP (JJ similar) (PP (IN to) (NP (DT the) (NNP Pontiac) (NNP G8))))))))) (. ?)))",
        "mask_entity": "How many cars are the predecessor of cars similar to [ENT]?",
        "entity": [
            "the Pontiac G8"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4427",
        "question": "What are some shows whose voice actors play the piano?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Piano> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:voices (JOIN dbo:instrument dbr:Piano))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some shows",
                    "start": 0,
                    "end": 19,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose voice actors",
                                "start": 20,
                                "end": 38
                            },
                            {
                                "description": "play the piano",
                                "start": 39,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN voice) (NNS actors)) (S (VP (VBP play) (NP (DT the) (NN piano)))))))) (. ?)))",
        "mask_entity": "What are some shows whose voice actors play the piano?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3004",
        "question": "What is the birth place of the successor of Ella T. Grasso ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ella_T._Grasso> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbp:birthPlace) (JOIN (R dbp:successor) dbr:Ella_T._Grasso)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birth place of [IQ1]",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Ella T. Grasso",
                                "start": 27,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Ella) (NNP T.) (NNP Grasso)))))))) (. ?)))",
        "mask_entity": "What is the birth place of the successor of [ENT] ?",
        "entity": [
            "Ella T. Grasso"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2864",
        "question": "From how many different places have participants of Breeders's Cup Turf come?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbp:birthPlace) (JOIN dbp:race dbr:Breeders'_Cup_Turf)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From how many different places",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "have [IQ1] come",
                    "start": 31,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "participants of Breeders's Cup Turf",
                                "start": 36,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN From) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS places))) (VBP have) (NP (NP (NNS participants)) (PP (IN of) (NP (NP (NNPS Breeders) (POS 's)) (NNP Cup) (NNP Turf)))) (VP (VBP come)) (. ?)))",
        "mask_entity": "From how many different places have participants of [ENT] come?",
        "entity": [
            "Breeders's Cup Turf"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3115",
        "question": "How many movies were cinematographed by Jordan Cronenweth?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:cinematography dbr:Jordan_Cronenweth))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "were cinematographed by Jordan Cronenweth",
                    "start": 16,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS movies)) (VP (VBD were) (VP (VBN cinematographed) (PP (IN by) (NP (NNP Jordan) (NNP Cronenweth)))))) (. ?)))",
        "mask_entity": "How many movies were cinematographed by [ENT]?",
        "entity": [
            "Jordan Cronenweth"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4840",
        "question": "South Side elevated railroad and twin cities 400 are operated by which city?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:operatedBy) dbr:South_Side_Elevated_Railroad) (JOIN (R dbo:operatedBy) dbr:Twin_Cities_400))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "South Side elevated railroad and twin cities 400 are operated by which city",
                    "start": 0,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (S (NP (NNP South) (NNP Side)) (VP (VBD elevated) (NP (NN railroad)))) (CC and) (S (NP (JJ twin) (NNS cities)) (NP (CD 400)) (VP (VBP are) (VP (VBN operated) (SBAR (WHPP (IN by) (WHNP (WDT which))) (S (VP (NN city))))))) (. ?)))",
        "mask_entity": "[ENT] elevated railroad and twin cities [ENT] are operated by which city?",
        "entity": [
            "South Side",
            "400"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2322",
        "question": "Who is the famous relative of Kelly Osbourne?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne>  . }",
        "SExpr": "(JOIN dbp:relatives dbr:Kelly_Osbourne)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ famous) (NN relative)) (PP (IN of) (NP (NNP Kelly) (NNP Osbourne)))))) (. ?)))",
        "mask_entity": "Who is the famous relative of [ENT]?",
        "entity": [
            "Kelly Osbourne"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2571",
        "question": "In how many different stadiums are the seasons of the 2015 NA Soccer league held?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/2015_North_American_Soccer_League_season> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(AND dbo:Stadium (JOIN (R dbo:ground) (JOIN dbo:league dbr:2015_North_American_Soccer_League_season))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many different stadiums",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "are [IQ1] held",
                    "start": 31,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the seasons of the 2015 NA Soccer league",
                                "start": 35,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN In) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS stadiums))) (VP (VBP are)) (NP (NP (DT the) (NNS seasons)) (PP (IN of) (NP (NP (DT the) (CD 2015) (NML (NNP NA) (NNP Soccer)) (NNP league)) (VP (VBN held))))) (. ?)))",
        "mask_entity": "In how many different stadiums are the seasons of the [ENT] [ENT] league held?",
        "entity": [
            "2015",
            "NA Soccer"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2913",
        "question": "What teams have Avangard Omsk's players played for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Avangard_Omsk> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
        "SExpr": "(JOIN (R dbo:formerTeam) (JOIN dbp:playedFor dbr:Avangard_Omsk)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What teams",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "have [IQ1] played for",
                    "start": 11,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Avangard Omsk's players",
                                "start": 16,
                                "end": 39
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS teams)) (SQ (VBP have) (NP (NP (NNP Avangard) (NNP Omsk) (POS 's)) (NNS players)) (VP (VBN played) (PP (IN for)))) (. ?)))",
        "mask_entity": "What teams have [ENT] players played for?",
        "entity": [
            "Avangard Omsk's"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "101",
        "question": "Who is the player who plays for the team that has the Michigan Stadium?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Michigan_Stadium> . ?uri <http://dbpedia.org/property/currentteam> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "SExpr": "(AND dbo:Athlete (JOIN dbp:currentteam (JOIN dbp:stadium dbr:Michigan_Stadium))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the player",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "who plays for [IQ1]",
                    "start": 18,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the team",
                                "start": 32,
                                "end": 40
                            },
                            {
                                "description": "that has the Michigan Stadium",
                                "start": 41,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN player)) (SBAR (WHNP (WP who)) (S (VP (VBZ plays) (PP (IN for) (NP (NP (DT the) (NN team)) (SBAR (WHNP (WDT that)) (S (VP (VBZ has) (NP (DT the) (NNP Michigan) (NNP Stadium))))))))))))) (. ?)))",
        "mask_entity": "Who is the player who plays for the team that has [ENT]?",
        "entity": [
            "the Michigan Stadium"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3549",
        "question": "How many athletic associations are there in all of the private universities?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Private_university> . ?x <http://dbpedia.org/property/athletics> ?uri  . }",
        "SExpr": "(JOIN (R dbp:athletics) (JOIN dbp:type dbr:Private_university)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many athletic associations are there",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "in [IQ1]",
                    "start": 41,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "all of the private universities",
                                "start": 44,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ athletic) (NNS associations)) (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NP (DT all)) (PP (IN of) (NP (DT the) (JJ private) (NNS universities))))))) (. ?)))",
        "mask_entity": "How many athletic associations are there in all of the private universities?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1458",
        "question": "In which cities can i find drinks similar to the IBC root beer?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/IBC_Root_Beer> . ?x <http://dbpedia.org/property/locationCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
        "SExpr": "(JOIN (R dbp:locationCity) (AND dbo:Beverage (JOIN dbo:related dbr:IBC_Root_Beer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "can i find [IQ1]",
                    "start": 16,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "drinks",
                                "start": 27,
                                "end": 33
                            },
                            {
                                "description": "similar to the IBC root beer",
                                "start": 34,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS cities)) (VP (MD can) (NP (PRP i)) (VP (VB find) (NP (NP (NNS drinks)) (ADJP (JJ similar) (PP (IN to) (NP (DT the) (NNP IBC) (NN root) (NN beer)))))))) (. ?)))",
        "mask_entity": "In which cities can i find drinks similar to the [ENT] root beer?",
        "entity": [
            "IBC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "171",
        "question": "Is Queen Latifah associated with Afrika Baby Bam?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Queen) (NNP Latifah)) (VP (VBN associated) (PP (IN with) (NP (NNP Afrika) (NNP Baby) (NNP Bam)))) (. ?)))",
        "mask_entity": "Is [ENT] associated with [ENT]?",
        "entity": [
            "Queen Latifah",
            "Afrika Baby Bam"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "107",
        "question": "Which royal person married the successor of Darius I?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Darius_I> . ?uri <http://dbpedia.org/property/spouse> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(AND dbo:Royalty (JOIN dbp:spouse (JOIN dbp:predecessor dbr:Darius_I))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which royal person",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "married [IQ1]",
                    "start": 19,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Darius I",
                                "start": 27,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ royal) (NN person)) (SQ (VP (VBD married) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Darius) (CD I)))))) (. ?)))",
        "mask_entity": "Which royal person married the successor of [ENT] I?",
        "entity": [
            "Darius"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4196",
        "question": "What are some products manufactured by Sony? ",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony>  . }",
        "SExpr": "(JOIN dbo:manufacturer dbr:Sony)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS products)) (VP (VBN manufactured) (PP (IN by) (NP (NNP Sony))))))) (. ?)))",
        "mask_entity": "What are some products manufactured by [ENT]? ",
        "entity": [
            "Sony"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3569",
        "question": "What is the producer of the television shows whose channel is CBBC?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/CBBC_(TV_channel)> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(JOIN (R dbo:producer) (AND dbo:TelevisionShow (JOIN dbp:channel dbr:CBBC_(TV_channel)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the producer of [IQ1]",
                    "start": 0,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the television shows",
                                "start": 24,
                                "end": 44
                            },
                            {
                                "description": "whose channel is CBBC",
                                "start": 45,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN channel)) (S (VP (VBZ is) (NP (NNP CBBC)))))))))) (. ?)))",
        "mask_entity": "What is the producer of the television shows whose channel is [ENT]?",
        "entity": [
            "CBBC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4991",
        "question": "List all the movies whose music has been made up with someone under RCA records?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/RCA_Records> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:music (JOIN dbo:recordLabel dbr:RCA_Records))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose music [IQ1]",
                    "start": 20,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has been made up",
                                "start": 32,
                                "end": 48
                            },
                            {
                                "description": "with someone under RCA records",
                                "start": 49,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN music)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN made) (PRT (RP up)) (PP (IN with) (NP (NP (NN someone)) (PP (IN under) (NP (NNP RCA) (NNS records)))))))))))) (. ?)))",
        "mask_entity": "List all the movies whose music has been made up with someone under [ENT] records?",
        "entity": [
            "RCA"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4295",
        "question": "Is N. C. Wyeth the illustration by of The Mysterious Stranger?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Mysterious_Stranger> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/N._C._Wyeth> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP N.) (NNP C)) (. .)))",
        "mask_entity": "Is [ENT]. [ENT] the illustration by of [ENT]?",
        "entity": [
            "N. C",
            "Wyeth",
            "The Mysterious Stranger"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4063",
        "question": "What cities are around the valley bordering Lake Mead?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/border> <http://dbpedia.org/resource/Lake_Mead> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
        "SExpr": "(JOIN (R dbo:city) (AND dbo:Valley (JOIN dbo:border dbr:Lake_Mead))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What cities",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are around [IQ1]",
                    "start": 12,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the valley",
                                "start": 23,
                                "end": 33
                            },
                            {
                                "description": "bordering Lake Mead",
                                "start": 34,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN valley)) (VP (VBG bordering) (NP (NNP Lake) (NNP Mead))))))) (. ?)))",
        "mask_entity": "What cities are around the valley bordering [ENT]?",
        "entity": [
            "Lake Mead"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3861",
        "question": "List the magazines published by Playbow Enterprises ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Playboy_Enterprises>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbo:publisher dbr:Playboy_Enterprises))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the magazines",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "published by Playbow Enterprises",
                    "start": 19,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS magazines)) (VP (VBN published) (PP (IN by) (NP (NNP Playbow) (NNPS Enterprises)))))) (. ?)))",
        "mask_entity": "List the magazines published by [ENT] ?",
        "entity": [
            "Playbow Enterprises"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4122",
        "question": "In which series do I find Minbari species' characters?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/species> <http://dbpedia.org/resource/Minbari> . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(JOIN (R dbo:series) (AND dbo:FictionalCharacter (JOIN dbp:species dbr:Minbari))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which series do I find [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Minbari species' characters?",
                                "start": 26,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN series)) (VP (VBP do) (NP (PRP I)) (S (VP (VB find) (NP (NP (JJ Minbari) (NNS species) (POS ')) (NNS characters)))))) (. ?)))",
        "mask_entity": "In which series do I find [ENT] species' characters?",
        "entity": [
            "Minbari"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4629",
        "question": "Did James brown make the song Killing is Out, School Is In?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Killing_Is_Out,_School_Is_In> <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/James_Brown> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (S (SINV (VP (VBD Did)) (NP (NNP James) (NNP brown)) (VP (VB make) (S (NP (DT the) (NN song) (NN Killing)) (VP (VBZ is) (ADVP (RP Out)))))) (, ,) (NP (NNP School)) (VP (VBZ Is) (PP (IN In))) (. ?)))",
        "mask_entity": "Did [ENT] brown make the song Killing is Out, School Is In?",
        "entity": [
            "James"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "60",
        "question": "What is the style of architecture of South Loop Printing House District ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Loop_Printing_House_District> <http://dbpedia.org/ontology/architecturalStyle> ?uri } ",
        "SExpr": "(JOIN (R dbo:architecturalStyle) dbr:South_Loop_Printing_House_District)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN style)) (PP (IN of) (NP (NP (NN architecture)) (PP (IN of) (NP (NML (NML (NNP South) (NNP Loop)) (NNP Printing) (NNP House)) (NNP District)))))))) (. ?)))",
        "mask_entity": "What is the style of architecture of [ENT] ?",
        "entity": [
            "South Loop Printing House District"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1240",
        "question": "What is the university whose campus are Indiana and Iowa?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbo:campus dbr:Indiana) (JOIN dbo:campus dbr:Iowa)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the university",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose campus are Indiana and Iowa",
                    "start": 23,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBP are) (NP (NNP Indiana) (CC and) (NNP Iowa)))))))) (. ?)))",
        "mask_entity": "What is the university whose campus are [ENT] and [ENT]?",
        "entity": [
            "Indiana",
            "Iowa"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4637",
        "question": "Name the ssignificant buildings of Ivan Fomin ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivan_Fomin> <http://dbpedia.org/ontology/significantBuilding> ?uri } ",
        "SExpr": "(JOIN (R dbo:significantBuilding) dbr:Ivan_Fomin)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ ssignificant) (NNS buildings)) (PP (IN of) (NP (NNP Ivan) (NNP Fomin))))) (. ?)))",
        "mask_entity": "Name the ssignificant buildings of [ENT] ?",
        "entity": [
            "Ivan Fomin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1040",
        "question": "What are all the religions in which Jacob and Abraham are important?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacob> <http://dbpedia.org/property/veneratedIn> ?uri. <http://dbpedia.org/resource/Abraham> <http://dbpedia.org/property/veneratedIn> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:veneratedIn) dbr:Jacob) (JOIN (R dbp:veneratedIn) dbr:Abraham))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are all the religions",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "in which Jacob and Abraham are important",
                    "start": 27,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (PDT all) (DT the) (NNS religions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Jacob) (CC and) (NNP Abraham)) (VP (VBP are) (ADJP (JJ important)))))))) (. ?)))",
        "mask_entity": "What are all the religions in which [ENT] and [ENT] are important?",
        "entity": [
            "Jacob",
            "Abraham"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4187",
        "question": "Is Robert Boyle a chemist?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Robert_Boyle> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Chemistry> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Robert) (NNP Boyle)) (NP (DT a) (NN chemist)) (. ?)))",
        "mask_entity": "Is [ENT] a chemist?",
        "entity": [
            "Robert Boyle"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2760",
        "question": "Where did the relatives of David Hume study?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/David_Hume> . ?x <http://dbpedia.org/property/education> ?uri  . }",
        "SExpr": "(JOIN (R dbp:education) (JOIN dbo:relative dbr:David_Hume)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] study",
                    "start": 0,
                    "end": 43,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of David Hume",
                                "start": 10,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NML (NNP David) (NNP Hume)) (NN study))))) (. ?)))",
        "mask_entity": "Where did the relatives of [ENT] study?",
        "entity": [
            "David Hume"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2120",
        "question": "Which state of Tendaho dam is the headquarters of Ethiopian People's revolutionary democratic Front located ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ethiopian_People's_Revolutionary_Democratic_Front> <http://dbpedia.org/property/headquarters> ?uri. <http://dbpedia.org/resource/Tendaho_Dam> <http://dbpedia.org/property/country> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:headquarters) dbr:Ethiopian_People's_Revolutionary_Democratic_Front) (JOIN (R dbp:country) dbr:Tendaho_Dam))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which state of Tendaho dam",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "is the headquarters of Ethiopian People's revolutionary democratic Front located",
                    "start": 27,
                    "end": 107
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN state)) (PP (IN of) (NP (NNP Tendaho) (NN dam)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (NP (JJ Ethiopian) (NNP People) (POS 's)) (JJ revolutionary) (JJ democratic) (NNP Front)) (VP (VBN located))))))) (. ?)))",
        "mask_entity": "Which state of [ENT] dam is the headquarters of [ENT] located ?",
        "entity": [
            "Tendaho",
            "Ethiopian People's revolutionary democratic Front"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1524",
        "question": "What prizes have been awarded to the relatives of Linn Ullmann?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linn_Ullmann> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN (R dbp:relatives) dbr:Linn_Ullmann)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What prizes",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have been awarded to [IQ1]",
                    "start": 12,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of Linn Ullmann",
                                "start": 33,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS prizes)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Linn) (NNP Ullmann))))))))) (. ?)))",
        "mask_entity": "What prizes have been awarded to the relatives of [ENT]?",
        "entity": [
            "Linn Ullmann"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3521",
        "question": "What are the television shows of a company headquartered in Geneva?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Geneva> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:company (JOIN dbp:headquarters dbr:Geneva))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the television shows",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "of [IQ1]",
                    "start": 30,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a company",
                                "start": 33,
                                "end": 42
                            },
                            {
                                "description": "headquartered in Geneva",
                                "start": 43,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN television) (NNS shows)) (PP (IN of) (NP (NP (DT a) (NN company)) (VP (VBN headquartered) (PP (IN in) (NP (NNP Geneva))))))))) (. ?)))",
        "mask_entity": "What are the television shows of a company headquartered in [ENT]?",
        "entity": [
            "Geneva"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "153",
        "question": "Name the television show whose distributor is Comedy central and  the character voice is given by Isaac hayes ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:distributor dbr:Comedy_Central) (JOIN dbp:voices dbr:Isaac_Hayes)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose distributor is Comedy central",
                    "start": 25,
                    "end": 60
                },
                {
                    "description": "and the character voice is given by Isaac hayes",
                    "start": 61,
                    "end": 108
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN distributor)) (S (VP (VBZ is) (NP (NNP Comedy) (JJ central)))))))) (CC and) (S (NP (DT the) (NN character) (NN voice)) (VP (VBZ is) (VP (VBN given) (PP (IN by) (NP (NNP Isaac) (NNP hayes)))))) (. ?)))",
        "mask_entity": "Name the television show whose distributor is [ENT] central and  the character voice is given by [ENT] hayes ?",
        "entity": [
            "Comedy",
            "Isaac"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2248",
        "question": "Give me the count of newspaper whose language is Sweedish and headquartered at stockholm ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> . ?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm> } ",
        "SExpr": "(AND (JOIN dbp:language dbr:Swedish_language) (JOIN dbp:headquarters dbr:Stockholm))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the count of newspaper",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "whose language is Sweedish",
                    "start": 31,
                    "end": 57
                },
                {
                    "description": "and headquartered at stockholm",
                    "start": 58,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (NN newspaper)) (SBAR (WHNP (WP$ whose) (NN language)) (S (VP (VP (VBZ is) (NP (NNP Sweedish))) (CC and) (VP (VBN headquartered) (PP (IN at) (NP (NNP stockholm))))))))))) (. ?)))",
        "mask_entity": "Give me the count of newspaper whose language is Sweedish and headquartered at stockholm ?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "481",
        "question": "What are the cities located on the sea into which the Aegean Sea flows?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
        "SExpr": "(JOIN (R dbp:cities) (JOIN (R dbo:outflow) dbr:Aegean_Sea)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the cities",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "located on [IQ1]",
                    "start": 20,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sea",
                                "start": 31,
                                "end": 38
                            },
                            {
                                "description": "into which the Aegean Sea flows",
                                "start": 39,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS cities)) (VP (VBN located) (PP (IN on) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (DT the) (JJ Aegean) (NNP Sea)) (VP (VBZ flows)))))))))) (. ?)))",
        "mask_entity": "What are the cities located on the sea into which [ENT] flows?",
        "entity": [
            "the Aegean Sea"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4233",
        "question": "In which areas did the pupils of Sylvain Levi work?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Sylvain_L\u00e9vi> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "SExpr": "(JOIN (R dbp:fields) (JOIN dbo:academicAdvisor dbr:Sylvain_L\u00e9vi)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which areas",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "did [IQ1] work",
                    "start": 15,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the pupils of Sylvain Levi",
                                "start": 19,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS areas)) (VP (VBD did) (NP (NP (DT the) (NNS pupils)) (PP (IN of) (NP (NML (NNP Sylvain) (NNP Levi)) (NN work)))))) (. ?)))",
        "mask_entity": "In which areas did the pupils of [ENT] work?",
        "entity": [
            "Sylvain Levi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4305",
        "question": "Name the movie whose producer is Michael Deeley and music is given by Vangelis ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Michael_Deeley> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbo:producer dbr:Michael_Deeley) (JOIN dbp:music dbr:Vangelis)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose producer is Michael Deeley",
                    "start": 15,
                    "end": 47
                },
                {
                    "description": "and music is given by Vangelis",
                    "start": 48,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN producer)) (S (VP (VBZ is) (NP (NNP Michael) (NNP Deeley)))))))) (CC and) (S (NP (NN music)) (VP (VBZ is) (VP (VBN given) (PP (IN by) (NP (NNP Vangelis)))))) (. ?)))",
        "mask_entity": "Name the movie whose producer is [ENT] and music is given by [ENT] ?",
        "entity": [
            "Michael Deeley",
            "Vangelis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3578",
        "question": "How many people are in the band with Juelz Santana?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:bandMember) (JOIN dbp:currentMembers dbr:Juelz_Santana))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are in [IQ1]",
                    "start": 16,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the band",
                                "start": 23,
                                "end": 31
                            },
                            {
                                "description": "with Juelz Santana",
                                "start": 32,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NN band)) (PP (IN with) (NP (NNP Juelz) (NNP Santana))))))) (. ?)))",
        "mask_entity": "How many people are in the band with [ENT]?",
        "entity": [
            "Juelz Santana"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4125",
        "question": "Name the partners of the models whose one of the partner is Thom Evans ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/partner> <http://dbpedia.org/resource/Thom_Evans> . ?x <http://dbpedia.org/ontology/partner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
        "SExpr": "(JOIN (R dbo:partner) (AND dbo:Model (JOIN dbo:partner dbr:Thom_Evans))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the partners of [IQ1]",
                    "start": 0,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the models",
                                "start": 21,
                                "end": 31
                            },
                            {
                                "description": "whose one of the partner is Thom Evans",
                                "start": 32,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS partners)) (PP (IN of) (NP (NP (DT the) (NNS models)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN partner)))) (S (VP (VBZ is) (NP (NNP Thom) (NNP Evans))))))))) (. ?)))",
        "mask_entity": "Name the partners of the models whose [ENT] of the partner is [ENT] ?",
        "entity": [
            "one",
            "Thom Evans"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3562",
        "question": "Who owns the broadcast network founded by CNN?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:BroadcastNetwork (JOIN dbo:foundedBy dbr:CNN))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the broadcast network",
                                "start": 9,
                                "end": 30
                            },
                            {
                                "description": "founded by CNN",
                                "start": 31,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (JJ broadcast) (NN network)) (VP (VBN founded) (PP (IN by) (NP (NNP CNN))))))) (. ?)))",
        "mask_entity": "Who owns the broadcast network founded by [ENT]?",
        "entity": [
            "CNN"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3315",
        "question": "List the writers of Tales of Suspense ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> ?uri } ",
        "SExpr": "(JOIN (R dbp:writers) dbr:Tales_of_Suspense)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS writers)) (PP (IN of) (NP (NP (NNPS Tales)) (PP (IN of) (NP (NNP Suspense))))))) (. ?)))",
        "mask_entity": "List the writers of [ENT] ?",
        "entity": [
            "Tales of Suspense"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1762",
        "question": "Which magazine has publisher as Jann Wenner?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Jann_Wenner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbo:publisher dbr:Jann_Wenner))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which magazine",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "has publisher as Jann Wenner",
                    "start": 15,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN magazine)) (SQ (VP (VBZ has) (NP (NP (NN publisher)) (PP (IN as) (NP (NNP Jann) (NNP Wenner)))))) (. ?)))",
        "mask_entity": "Which magazine has publisher as [ENT]?",
        "entity": [
            "Jann Wenner"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3538",
        "question": "List the academic discipline of the journals whose one of the discipline is neuro imaging ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
        "SExpr": "(JOIN (R dbo:academicDiscipline) (AND dbo:AcademicJournal (JOIN dbo:academicDiscipline dbr:Neuroimaging))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the academic discipline of [IQ1]",
                    "start": 0,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the journals",
                                "start": 32,
                                "end": 44
                            },
                            {
                                "description": "whose one of the discipline is neuro imaging",
                                "start": 45,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ academic) (NN discipline)) (PP (IN of) (NP (NP (DT the) (NNS journals)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN discipline)))) (S (VP (VBZ is) (NP (NN neuro) (NN imaging))))))))) (. ?)))",
        "mask_entity": "List the academic discipline of the journals whose one of the discipline is neuro imaging ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4803",
        "question": "Who has authored books published by the Perkins school for the Blind?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Perkins_School_for_the_Blind> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>}",
        "SExpr": "(JOIN (R dbo:author) (AND dbo:WrittenWork (JOIN dbo:publisher dbr:Perkins_School_for_the_Blind))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has authored [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "books",
                                "start": 17,
                                "end": 22
                            },
                            {
                                "description": "published by the Perkins school for the Blind",
                                "start": 23,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN authored) (NP (NP (NNS books)) (VP (VBN published) (PP (IN by) (NP (NP (DT the) (NNP Perkins) (NN school)) (PP (IN for) (NP (DT the) (NNP Blind)))))))))) (. ?)))",
        "mask_entity": "Who has authored books published by [ENT]?",
        "entity": [
            "the Perkins school for the Blind"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "750",
        "question": "Semani languages are spoken in which countries?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbp:languages dbr:Semnani_languages))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Semani languages are spoken in",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "which countries",
                    "start": 31,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Semani) (NNS languages)) (VP (VBP are) (VP (VBN spoken) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNS countries)) (. ?)))))))",
        "mask_entity": "[ENT] languages are spoken in which countries?",
        "entity": [
            "Semani"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3619",
        "question": "What kind of games does Blizzard games develop?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Blizzard_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "SExpr": "(JOIN (R dbo:genre) (AND dbo:VideoGame (JOIN dbo:developer dbr:Blizzard_Entertainment))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What kind of [IQ1]",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 13,
                                "end": 18
                            },
                            {
                                "description": "does Blizzard games develop",
                                "start": 19,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NNS games)))) (SQ (VBZ does) (NP (NNP Blizzard) (NNS games)) (VP (VB develop))) (. ?)))",
        "mask_entity": "What kind of games does [ENT] games develop?",
        "entity": [
            "Blizzard"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1785",
        "question": "How many different pole drivers are there, of the GPs when Renault was the first team?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Renault_in_Formula_One> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
        "SExpr": "(AND dbo:FormulaOneRacer (JOIN (R dbo:poleDriver) (JOIN dbp:firstTeam dbr:Renault_in_Formula_One))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different pole drivers are there,",
                    "start": 0,
                    "end": 42
                },
                {
                    "description": "of [IQ1]",
                    "start": 43,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the GPs",
                                "start": 46,
                                "end": 53
                            },
                            {
                                "description": "when Renault was the first team",
                                "start": 54,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WRB How) (JJ many)) (JJ different) (NN pole) (NNS drivers)) (VP (VBP are) (ADVP (RB there)) (, ,) (PP (IN of) (NP (NP (DT the) (NNP GPs)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Renault)) (VP (VBD was) (NP (DT the) (JJ first) (NN team)))))))) (. ?)))",
        "mask_entity": "How many different pole drivers are there, of the GPs when [ENT] was the [ENT] team?",
        "entity": [
            "Renault",
            "first"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4270",
        "question": "What is the label of Double Diamond (album) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Double_Diamond_(album)> <http://dbpedia.org/ontology/recordLabel> ?uri } ",
        "SExpr": "(JOIN (R dbo:recordLabel) dbr:Double_Diamond_(album))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (NP (NNP Double) (NNP Diamond)) (VP (-LRB- () (NP (NN album) (-RRB- ))))))))) (. ?)))",
        "mask_entity": "What is the label of [ENT] (album) ?",
        "entity": [
            "Double Diamond"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3383",
        "question": "Where is the VP buried, which was served by Frederick Cooke?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frederick_Cooke_(socialist)> <http://dbpedia.org/ontology/vicePresident> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:restingPlace) (JOIN (R dbo:vicePresident) dbr:Frederick_Cooke_(socialist))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the VP buried, [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which was served by Frederick Cooke",
                                "start": 24,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (DT the) (NNP VP)) (VP (VBN buried))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN served) (PP (IN by) (NP (NNP Frederick) (NNP Cooke))))))) (. ?)))",
        "mask_entity": "Where is the VP buried, which was served by [ENT]?",
        "entity": [
            "Frederick Cooke"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4348",
        "question": "Name the person whose child is Irne Joliot-Curie?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Ir\u00e8ne_Joliot-Curie>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbp:children dbr:Ir\u00e8ne_Joliot-Curie))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the person",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose child is Irne Joliot-Curie",
                    "start": 16,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP$ whose) (NN child)) (S (VP (VBZ is) (NP (NNP Irne) (NNP Joliot) (HYPH -) (NNP Curie))))))) (. ?)))",
        "mask_entity": "Name the person whose child is [ENT]?",
        "entity": [
            "Irne Joliot-Curie"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "405",
        "question": "How many destinations are covered by the airlines which also serves Europe ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Europe> . ?x <http://dbpedia.org/property/destinations> ?uri }",
        "SExpr": "(JOIN (R dbp:destinations) (JOIN dbp:destinations dbr:Europe)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many destinations",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "are covered by [IQ1]",
                    "start": 22,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airlines",
                                "start": 37,
                                "end": 49
                            },
                            {
                                "description": "which also serves Europe",
                                "start": 50,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS destinations)) (VP (VBP are) (VP (VBN covered) (PP (IN by) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBZ serves) (NP (NNP Europe)))))))))) (. ?)))",
        "mask_entity": "How many destinations are covered by the airlines which also serves [ENT] ?",
        "entity": [
            "Europe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "757",
        "question": "Where can i find companies which were started in Toronto?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/locations> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbp:locations) (AND dbo:Company (JOIN dbo:foundationPlace dbr:Toronto))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where can i find [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 17,
                                "end": 26
                            },
                            {
                                "description": "which were started in Toronto",
                                "start": 27,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP i)) (VP (VB find) (NP (NP (NNS companies)) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (VP (VBN started) (PP (IN in) (NP (NNP Toronto)))))))))) (. ?)))",
        "mask_entity": "Where can i find companies which were started in [ENT]?",
        "entity": [
            "Toronto"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2711",
        "question": "Name few companies where don berlin and michael sears have worked together?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:employer) dbr:Don_R._Berlin) (JOIN (R dbo:employer) dbr:Michael_M._Sears))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name few companies",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "where don berlin and michael sears have worked together",
                    "start": 19,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (JJ few) (NNS companies)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNP don) (NNP berlin)) (CC and) (NP (NNP michael) (NNS sears))) (VP (VBP have) (VP (VBN worked) (ADVP (RB together)))))))) (. ?)))",
        "mask_entity": "Name few companies where don [ENT] and michael sears have worked together?",
        "entity": [
            "berlin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2670",
        "question": "Name the university with mascot as Aubie and president as jay Gogue ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Aubie> . ?uri <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Jay_Gogue>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbp:mascot dbr:Aubie) (JOIN dbo:president dbr:Jay_Gogue)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the university",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "with mascot as Aubie",
                    "start": 20,
                    "end": 40
                },
                {
                    "description": "and president as jay Gogue",
                    "start": 41,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN university)) (PP (IN with) (NP (NP (NP (NN mascot)) (PP (IN as) (NP (NNP Aubie)))) (CC and) (NP (NP (NN president)) (PP (IN as) (NP (NNP jay) (NNP Gogue))))))) (. ?)))",
        "mask_entity": "Name the university with mascot as [ENT] and president as [ENT] ?",
        "entity": [
            "Aubie",
            "jay Gogue"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3983",
        "question": "How many things belong to phylum of Chordate?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . }",
        "SExpr": "(JOIN dbo:phylum dbr:Chordate)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP belong) (PP (IN to) (NP (NP (NN phylum)) (PP (IN of) (NP (NNP Chordate))))))) (. ?)))",
        "mask_entity": "How many things belong to phylum of [ENT]?",
        "entity": [
            "Chordate"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "97",
        "question": "Did Gwo Ka originate in Western Africa?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Gwo_ka> <http://dbpedia.org/property/stylisticOrigins> <http://dbpedia.org/resource/West_Africa> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Gwo) (NNP Ka)) (VP (VB originate) (PP (IN in) (NP (JJ Western) (NNP Africa)))) (. ?)))",
        "mask_entity": "Did [ENT] originate in [ENT]?",
        "entity": [
            "Gwo Ka",
            "Western Africa"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1333",
        "question": "People from how many political parties exist in Maharashtra?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "SExpr": "(JOIN (R dbo:party) (JOIN dbp:placeOfBirth dbr:Maharashtra)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (NP (NP (NNS People)) (PP (IN from) (SBAR (WHADVP (WRB how)) (S (NP (JJ many) (JJ political) (NNS parties)) (VP (VBP exist) (PP (IN in) (NP (NNP Maharashtra))))))) (. ?)))",
        "mask_entity": "People from how many political parties exist in [ENT]?",
        "entity": [
            "Maharashtra"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4451",
        "question": "What would be the most important creation which involved both Neil Cross and Russel Davies ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:notableWork) dbr:Neil_Cross) (JOIN (R dbo:notableWork) dbr:Russell_T_Davies))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What would be the most important creation",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "which involved both Neil Cross and Russel Davies",
                    "start": 42,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (MD would) (VP (VB be) (NP (NP (DT the) (ADJP (RBS most) (JJ important)) (NN creation)) (SBAR (WHNP (WDT which)) (S (VP (VBD involved) (NP (CC both) (NP (NNP Neil) (NNP Cross)) (CC and) (NP (NNP Russel) (NNPS Davies))))))))) (. ?)))",
        "mask_entity": "What would be the most important creation which involved both [ENT] and [ENT] ?",
        "entity": [
            "Neil Cross",
            "Russel Davies"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2791",
        "question": "With which musical artist is the music group which sung Mind Blowin' related to ?  ",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mind_Blowin'_(Smooth_song)> <http://dbpedia.org/ontology/musicalArtist> ?x . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "SExpr": "(JOIN (R dbo:associatedMusicalArtist) (JOIN (R dbo:musicalArtist) dbr:Mind_Blowin'_(Smooth_song))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "With which musical artist",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "is [IQ1] related to",
                    "start": 26,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the music group",
                                "start": 29,
                                "end": 44
                            },
                            {
                                "description": "which sung Mind Blowin'",
                                "start": 45,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHPP (IN With) (WHNP (WDT which))) (S (NP (JJ musical) (NN artist)) (VP (VBZ is) (NP (NP (DT the) (NN music) (NN group)) (SBAR (WHNP (WDT which)) (S (VP (VBD sung) (NP (NN Mind) (NNP Blowin))))))))) ('' ') (ADJP (JJ related) (PP (IN to))) (. ?)))",
        "mask_entity": "With which musical artist is the music group which sung [ENT] related to ?  ",
        "entity": [
            "Mind Blowin'"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2854",
        "question": "Where did the office holder died who also have faith in Episcopal Church ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Episcopal_Church_(United_States)> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(JOIN (R dbo:deathPlace) (AND dbo:OfficeHolder (JOIN dbo:religion dbr:Episcopal_Church_(United_States)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the office holder died [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who also have faith in Episcopal Church",
                                "start": 33,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN office) (NN holder)) (VP (VBN died) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBP have) (NP (NP (NN faith)) (PP (IN in) (NP (NNP Episcopal) (NNP Church))))))))) (. ?)))",
        "mask_entity": "Where did the office holder died who also have faith in [ENT] ?",
        "entity": [
            "Episcopal Church"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "186",
        "question": "Who are buried in  Rome and Mausoleum of Augustus?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> . }",
        "SExpr": "(AND (JOIN dbp:placeOfBurial dbr:Rome) (JOIN dbp:placeOfBurial dbr:Mausoleum_of_Augustus))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are buried in Rome",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "and Mausoleum of Augustus",
                    "start": 23,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (VP (VBN buried) (PP (IN in) (NP (NP (NNP Rome) (CC and) (NNP Mausoleum)) (PP (IN of) (NP (NNP Augustus)))))))) (. ?)))",
        "mask_entity": "Who are buried in  [ENT] and [ENT]?",
        "entity": [
            "Rome",
            "Mausoleum of Augustus"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4003",
        "question": "To which branch Edwin F. Hunter  belong ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri } ",
        "SExpr": "(JOIN (R dbp:branch) dbr:Edwin_F._Hunter)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN branch) (NNP Edwin) (NNP F.) (NNP Hunter)) (VP (VBP belong))) (. ?)))",
        "mask_entity": "To which branch [ENT]  belong ?",
        "entity": [
            "Edwin F. Hunter"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2723",
        "question": "Which university has affiliations to Graham Holdings and Kaplan, Inc.?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Graham_Holdings_Company> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbp:affiliations dbr:Graham_Holdings_Company) (JOIN dbp:affiliations dbr:Kaplan,_Inc.)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which university",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "has affiliations to Graham Holdings and Kaplan, Inc",
                    "start": 17,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN university)) (SQ (VP (VBZ has) (NP (NP (NNS affiliations)) (PP (IN to) (NP (NP (NNP Graham) (NNPS Holdings)) (CC and) (NP (NP (NNP Kaplan)) (, ,) (NP (NNP Inc)))))))) (. .) (. ?)))",
        "mask_entity": "Which university has affiliations to [ENT] and [ENT].?",
        "entity": [
            "Graham Holdings",
            "Kaplan, Inc"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3583",
        "question": "Which band's past member are Joe Jonas and Nick Jonas?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "SExpr": "(AND dbo:Band (AND (JOIN dbp:pastMembers dbr:Joe_Jonas) (JOIN dbp:pastMembers dbr:Nick_Jonas)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which band's",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "past member are Joe Jonas and Nick Jonas",
                    "start": 13,
                    "end": 53
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN band) (POS 's)) (JJ past) (NN member)) (VP (VBP are) (NP (NP (NNP Joe) (NNP Jonas)) (CC and) (NP (NNP Nick) (NNP Jonas)))) (. ?)))",
        "mask_entity": "Which band's past member are [ENT] and [ENT]?",
        "entity": [
            "Joe Jonas",
            "Nick Jonas"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2058",
        "question": "Who are the children of Abigail Adams?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abigail_Adams> <http://dbpedia.org/property/children> ?uri } ",
        "SExpr": "(JOIN (R dbp:children) dbr:Abigail_Adams)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NNP Abigail) (NNP Adams)))))) (. ?)))",
        "mask_entity": "Who are the children of [ENT]?",
        "entity": [
            "Abigail Adams"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1319",
        "question": "Which things are Breann McGregor known for ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri } ",
        "SExpr": "(JOIN (R dbp:knownFor) dbr:Breann_McGregor)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS things)) (SQ (VBP are) (NP (NNP Breann) (NNP McGregor)) (VP (VBN known) (PP (IN for)))) (. ?)))",
        "mask_entity": "Which things are [ENT] known for ?",
        "entity": [
            "Breann McGregor"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "148",
        "question": "what are some common games played at both Fr Agnel Multipurpose School and Vishwajyot High School?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:sport) dbr:Fr._Agnel_Multipurpose_School_and_Junior_College) (JOIN (R dbo:sport) dbr:Vishwajyot_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some common games played at both Fr Agnel Multipurpose School and Vishwajyot High School",
                    "start": 0,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP what)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ common) (NNS games)) (VP (VBN played) (PP (IN at) (NP (CC both) (NP (NNP Fr) (NNP Agnel) (NNP Multipurpose) (NNP School)) (CC and) (NP (NNP Vishwajyot) (NNP High) (NNP School)))))))) (. ?)))",
        "mask_entity": "what are some common games played at both [ENT] and [ENT]?",
        "entity": [
            "Fr Agnel Multipurpose School",
            "Vishwajyot High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "28",
        "question": "Who have done their PhDs under a National Medal of Science winner?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . }",
        "SExpr": "(JOIN dbp:doctoralAdvisor (JOIN dbp:prizes dbr:National_Medal_of_Science)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who have done their PhDs under [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a National Medal of Science winner",
                                "start": 31,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP have) (VP (VBN done) (NP (PRP$ their) (NNS PhDs)) (PP (IN under) (NP (NP (DT a) (NNP National) (NNP Medal)) (PP (IN of) (NP (NNP Science) (NN winner)))))))) (. ?)))",
        "mask_entity": "Who have done their PhDs under a National Medal of Science winner?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4140",
        "question": "List the profession of senate whose one of the profession is United States Coast Guard ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/United_States_Coast_Guard> . ?x <http://dbpedia.org/ontology/profession> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "SExpr": "(JOIN (R dbo:profession) (AND dbo:Politician (JOIN dbo:profession dbr:United_States_Coast_Guard))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the profession of [IQ1]",
                    "start": 0,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "senate",
                                "start": 23,
                                "end": 29
                            },
                            {
                                "description": "whose one of the profession is United States Coast Guard",
                                "start": 30,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (NP (DT the) (NN profession)) (PP (IN of) (NP (NN senate)))) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN profession)))) (VP (VBZ is) (NP (NNP United) (NNPS States) (NNP Coast) (NNP Guard))))))) (. ?)))",
        "mask_entity": "List the profession of senate whose [ENT] of the profession is [ENT] ?",
        "entity": [
            "one",
            "United States Coast Guard"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4009",
        "question": "Who is known for are Battle of the Thames and War of 1812?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Battle_of_the_Thames> . ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/War_of_1812> . }",
        "SExpr": "(AND (JOIN dbo:knownFor dbr:Battle_of_the_Thames) (JOIN dbo:knownFor dbr:War_of_1812))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is known for are Battle of the Thames and War of 1812",
                    "start": 0,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN known) (PP (IN for) (SINV (VP (VBP are)) (NP (NP (NNP Battle)) (PP (IN of) (NP (NP (DT the) (NNP Thames)) (CC and) (NP (NP (NNP War)) (PP (IN of) (NP (CD 1812)))))))))))) (. ?)))",
        "mask_entity": "Who is known for are Battle of the Thames and [ENT]?",
        "entity": [
            "War of 1812"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3363",
        "question": "Where is the headquarters of the public transit system which operators Go-to-card ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Go-To_card> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
        "SExpr": "(JOIN (R dbp:headquarters) (AND dbo:PublicTransitSystem (JOIN (R dbp:operator) dbr:Go-To_card))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the headquarters of [IQ1]",
                    "start": 0,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the public transit system",
                                "start": 29,
                                "end": 54
                            },
                            {
                                "description": "which operators Go-to-card",
                                "start": 55,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ operators) (NP (NNP Go-to-card))))))))) (. ?)))",
        "mask_entity": "Where is the headquarters of the public transit system which operators Go-to-card ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "692",
        "question": "How many people are there who have relationship with Kennedy family?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Kennedy_family>  . }",
        "SExpr": "(JOIN dbo:relation dbr:Kennedy_family)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (NP (NP (NN relationship)) (PP (IN with) (NP (NNP Kennedy) (NN family)))))))))) (. ?)))",
        "mask_entity": "How many people are there who have relationship with [ENT] family?",
        "entity": [
            "Kennedy"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2866",
        "question": "Name the company founded by Jim Harris located in Harris County, Texas ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Harris_County,_Texas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:foundedBy dbr:Jim_Harris_(entrepreneur)) (JOIN dbo:locationCity dbr:Harris_County,_Texas)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "founded by Jim Harris",
                    "start": 17,
                    "end": 38
                },
                {
                    "description": "located in Harris County, Texas",
                    "start": 39,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (VP (VBN founded) (PP (IN by) (NP (NP (NNP Jim) (NNP Harris)) (VP (VBN located) (PP (IN in) (NP (NP (NNP Harris) (NNP County)) (, ,) (NP (NNP Texas)))))))))) (. ?)))",
        "mask_entity": "Name the company founded by [ENT] located in [ENT], [ENT] ?",
        "entity": [
            "Jim Harris",
            "Harris County",
            "Texas"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3776",
        "question": "What is the total number of fictional characters whose created by  Greg Daniels and series is The Office (U.S. TV series)?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Greg_Daniels> . ?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)> } ",
        "SExpr": "(AND (JOIN dbo:creator dbr:Greg_Daniels) (JOIN dbo:series dbr:The_Office_(U.S._TV_series)))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of fictional characters",
                    "start": 0,
                    "end": 48
                },
                {
                    "description": "whose created by Greg Daniels",
                    "start": 49,
                    "end": 78
                },
                {
                    "description": "and series is The Office (U.S. TV series)",
                    "start": 79,
                    "end": 120
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ fictional) (NNS characters)) (SBAR (WHNP (WP$ whose) (VP (VBN created) (PP (IN by) (NP (NP (NNP Greg) (NNP Daniels)) (CC and) (NP (NN series)))))) (S (VP (VBZ is) (NP (NP (DT The) (NNP Office)) (-LRB- () (NP (NML (NNP U.S.) (NNP TV)) (NN series) (-RRB- )))))))))))) (. ?)))",
        "mask_entity": "What is the total number of fictional characters whose created by  [ENT] and series is [ENT] ([ENT] series)?",
        "entity": [
            "Greg Daniels",
            "The Office",
            "U.S. TV"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1386",
        "question": "Which local authority of Buckhurst Hill County High School is the palce of burial of Elizabeth Rhuddlan ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_of_Rhuddlan> <http://dbpedia.org/property/placeOfBurial> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:placeOfBurial) dbr:Elizabeth_of_Rhuddlan) (JOIN (R dbo:localAuthority) dbr:Buckhurst_Hill_County_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which local authority of Buckhurst Hill County High School",
                    "start": 0,
                    "end": 58
                },
                {
                    "description": "is the place of burial of Elizabeth Rhuddlan",
                    "start": 59,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ local) (NN authority)) (PP (IN of) (NP (NML (NML (NNP Buckhurst) (NNP Hill)) (NNP County)) (NNP High) (NNP School)))) (S (VP (VBZ is) (NP (NP (DT the) (NN palce)) (PP (IN of) (NP (NP (NN burial)) (PP (IN of) (NP (NNP Elizabeth) (NNP Rhuddlan)))))))) (. ?)))",
        "mask_entity": "Which local authority of [ENT] is the palce of burial of [ENT] ?",
        "entity": [
            "Buckhurst Hill County High School",
            "Elizabeth Rhuddlan"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1845",
        "question": "In which city where there is a headquarters of Orient News and also Feras Saied died?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Orient_News> <http://dbpedia.org/property/headquarters> ?uri. <http://dbpedia.org/resource/Feras_Saied> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:headquarters) dbr:Orient_News) (JOIN (R dbo:deathPlace) dbr:Feras_Saied))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which city",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "where there is a headquarters of Orient News",
                    "start": 14,
                    "end": 58
                },
                {
                    "description": "and also Feras Saied died",
                    "start": 59,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (FRAG (NP (NP (NP (NN city)) (SBAR (WHADVP (WRB where)) (S (NP (EX there)) (VP (VBZ is) (NP (NP (DT a) (NN headquarters)) (PP (IN of) (NP (NNP Orient) (NNP News)))))))) (CC and) (NP (ADVP (RB also)) (NP (NNP Feras) (NNP Saied)) (VP (VBD died))))) (. ?)))",
        "mask_entity": "In which city where there is a headquarters of [ENT] and also [ENT] died?",
        "entity": [
            "Orient News",
            "Feras Saied"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4730",
        "question": "Who were the opponents of employees of Henry Howard, the Northampton Earl?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Henry_Howard,_1st_Earl_of_Northampton> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . }",
        "SExpr": "(JOIN (R dbo:opponent) (JOIN dbo:employer dbr:Henry_Howard,_1st_Earl_of_Northampton)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who were the opponents of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "employees of Henry Howard, the Northampton Earl",
                                "start": 26,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD were) (NP (NP (DT the) (NNS opponents)) (PP (IN of) (NP (NP (NNS employees)) (PP (IN of) (NP (NP (NNP Henry) (NNP Howard)) (, ,) (NP (DT the) (NNP Northampton) (NNP Earl))))))))) (. ?)))",
        "mask_entity": "Who were the opponents of employees of [ENT], the [ENT] Earl?",
        "entity": [
            "Henry Howard",
            "Northampton"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "129",
        "question": "What newspapers's owners is Schibsted",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/Schibsted>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "SExpr": "(AND dbo:Newspaper (JOIN dbp:owners dbr:Schibsted))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What newspapers's",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "owners is Schibsted",
                    "start": 18,
                    "end": 37
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NNS newspapers) (POS 's)) (NNS owners)) (VP (VBZ is) (ADJP (JJ Schibsted)))))",
        "mask_entity": "What newspapers's owners is [ENT]",
        "entity": [
            "Schibsted"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1599",
        "question": "Who is the common parent of Gettv and hypnotize mind ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/Hypnotize_Minds> <http://dbpedia.org/property/parent> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:parentOrganisation) dbr:GetTV) (JOIN (R dbp:parent) dbr:Hypnotize_Minds))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the common parent of Gettv and hypnotize mind",
                    "start": 0,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN parent)) (PP (IN of) (NP (NNP Gettv))))) (CC and) (VP (VB hypnotize) (NP (NN mind))))) (. ?)))",
        "mask_entity": "Who is the common parent of [ENT] and hypnotize mind ?",
        "entity": [
            "Gettv"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3629",
        "question": "Name a fictional character whose relative is Uncle Henry and species is Human?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Uncle_Henry_(Oz)> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbo:relative dbr:Uncle_Henry_(Oz)) (JOIN dbo:species dbr:Human)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a fictional character",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "whose relative is Uncle Henry",
                    "start": 27,
                    "end": 56
                },
                {
                    "description": "and species is Human",
                    "start": 57,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT a) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN relative)) (S (VP (VBZ is) (NP (NNP Uncle) (NNP Henry)))))))) (CC and) (S (NP (NN species)) (VP (VBZ is) (ADJP (JJ Human)))) (. ?)))",
        "mask_entity": "Name a fictional character whose relative is [ENT] and species is Human?",
        "entity": [
            "Uncle Henry"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4503",
        "question": "Which river inflow of the Cahora Bassa is also Batoka Gorge Hydroelectric Power Station's river ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cahora_Bassa> <http://dbpedia.org/property/inflow> ?uri. <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:inflow) dbr:Cahora_Bassa) (JOIN (R dbo:river) dbr:Batoka_Gorge_Hydroelectric_Power_Station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which river",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "inflow of the Cahora Bassa",
                    "start": 12,
                    "end": 38
                },
                {
                    "description": "is also Batoka Gorge Hydroelectric Power Station's river",
                    "start": 39,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN river) (NN inflow)) (PP (IN of) (NP (DT the) (NNP Cahora) (NNP Bassa)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (NNP Batoka) (NNP Gorge) (NNP Hydroelectric) (NNP Power) (NNP Station) (POS 's)) (NN river))) (. ?)))",
        "mask_entity": "Which river inflow of [ENT] is also [ENT] river ?",
        "entity": [
            "the Cahora Bassa",
            "Batoka Gorge Hydroelectric Power Station's"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "701",
        "question": "Which cities come in the course of the river, into which Big Creek around Texas flows too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Big_Creek_(Texas_Co._Missouri)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbo:city) (AND dbo:River (JOIN dbo:rightTributary dbr:Big_Creek_(Texas_Co._Missouri)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which cities",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "come in the course of [IQ1]",
                    "start": 13,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the river,",
                                "start": 35,
                                "end": 45
                            },
                            {
                                "description": "into which Big Creek around Texas flows too",
                                "start": 46,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS cities)) (SQ (VP (VBP come) (PP (IN in) (NP (NP (DT the) (NN course)) (PP (IN of) (NP (NP (DT the) (NN river)) (, ,) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (NP (NNP Big) (NNP Creek)) (PP (IN around) (NP (NNP Texas)))) (VP (VBZ flows) (ADVP (RB too))))))))))) (. ?)))",
        "mask_entity": "Which cities come in the course of the river, into which [ENT] around [ENT] flows too?",
        "entity": [
            "Big Creek",
            "Texas"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3982",
        "question": "What islands are there on the Greater Antilles archipelago?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Greater_Antilles> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
        "SExpr": "(JOIN (R dbp:name) (AND dbo:Island (JOIN dbp:archipelago dbr:Greater_Antilles))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What islands",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are there on [IQ1]",
                    "start": 13,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Greater Antilles archipelago",
                                "start": 26,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS islands)) (SQ (VBP are) (ADVP (RB there)) (PP (IN on) (NP (DT the) (NML (JJ Greater) (NNPS Antilles)) (NN archipelago)))) (. ?)))",
        "mask_entity": "What islands are there on [ENT] archipelago?",
        "entity": [
            "the Greater Antilles"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3028",
        "question": "Was Zachary taylor a major general?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Zachary_Taylor> <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Major_general_(United_States)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Zachary) (NNP taylor)) (NP (DT a) (JJ major) (NN general)) (. ?)))",
        "mask_entity": "Was [ENT] a major general?",
        "entity": [
            "Zachary taylor"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2969",
        "question": "Name the military units whose command structure's headquarters is The Pentagon?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/The_Pentagon> . ?uri <http://dbpedia.org/ontology/commandStructure> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (JOIN dbo:commandStructure (JOIN dbp:headquarters dbr:The_Pentagon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the military units",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "whose command structure's [IQ1]",
                    "start": 24,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "headquarters is The Pentagon",
                                "start": 50,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ military) (NNS units)) (SBAR (WHNP (WP$ whose) (NN command) (NN structure) (POS 's)) (S (NP (NN headquarters)) (VP (VBZ is) (NP (DT The) (NNP Pentagon))))))) (. ?)))",
        "mask_entity": "Name the military units whose command structure's headquarters is The [ENT]?",
        "entity": [
            "Pentagon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4356",
        "question": "Which TV show's setting is in Massachusetts and is the subsequent work of Fraiser ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:subsequentWork dbr:Frasier) (JOIN dbo:location dbr:Massachusetts)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which TV show's",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "setting is in Massachusetts",
                    "start": 16,
                    "end": 43
                },
                {
                    "description": "and is the subsequent work of Fraiser",
                    "start": 44,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN TV) (NN show) (POS 's)) (NN setting)) (VP (VP (VBZ is) (PP (IN in) (NP (NNP Massachusetts)))) (CC and) (VP (VBZ is) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Fraiser)))))) (. ?)))",
        "mask_entity": "Which TV show's setting is in [ENT] and is the subsequent work of [ENT] ?",
        "entity": [
            "Massachusetts",
            "Fraiser"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1708",
        "question": "Which bands are associated to David Paton?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedBand> ?uri } ",
        "SExpr": "(JOIN (R dbo:associatedBand) dbr:David_Paton)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS bands)) (SQ (VP (VBP are) (VP (VBN associated) (PP (IN to) (NP (NNP David) (NNP Paton)))))) (. ?)))",
        "mask_entity": "Which bands are associated to [ENT]?",
        "entity": [
            "David Paton"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2953",
        "question": "In how many teams have people previously played who play as defencemen?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(AND dbo:SportsTeam (JOIN (R dbo:formerTeam) (JOIN dbp:position dbr:Defenceman))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many teams",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "have people previously played [IQ1]",
                    "start": 18,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who play as defencemen",
                                "start": 48,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS teams)) (SQ (VBP have) (NP (NNS people)) (ADVP (RB previously)) (VP (VBN played) (SBAR (WHNP (WP who)) (S (VP (VBP play) (PP (IN as) (NP (NNS defencemen)))))))) (. ?))))",
        "mask_entity": "In how many teams have people previously played who play as defencemen?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "454",
        "question": "What is the Team Name  of St. Viator High School ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/St._Viator_High_School> <http://dbpedia.org/property/teamName> ?uri } ",
        "SExpr": "(JOIN (R dbp:teamName) dbr:St._Viator_High_School)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN Team) (NN Name)) (PP (IN of) (NP (NNP St.) (NNP Viator) (NNP High) (NNP School)))))) (. ?)))",
        "mask_entity": "What is the Team Name  of [ENT] ?",
        "entity": [
            "St. Viator High School"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2868",
        "question": "Give me the count of tenants of the stadia whose one of the tenants is Toronto Furies?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Toronto_Furies> . ?x <http://dbpedia.org/property/tenants> ?uri }",
        "SExpr": "(JOIN (R dbp:tenants) (JOIN dbp:tenants dbr:Toronto_Furies)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the count of tenants of [IQ1]",
                    "start": 0,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadia",
                                "start": 32,
                                "end": 42
                            },
                            {
                                "description": "whose one of the tenants is Toronto Furies",
                                "start": 43,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (NNS tenants)) (PP (IN of) (NP (NP (DT the) (NNS stadia)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NNS tenants)))) (S (VP (VBZ is) (NP (NNP Toronto) (NNPS Furies))))))))))) (. ?)))",
        "mask_entity": "Give me the count of tenants of the stadia whose [ENT] of the tenants is [ENT]?",
        "entity": [
            "one",
            "Toronto Furies"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2040",
        "question": "Who is the headcoach of 2013-14 Marquette Golden Eagles men's basketball team ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri } ",
        "SExpr": "(JOIN (R dbp:headcoach) dbr:2013\u201314_Marquette_Golden_Eagles_men's_basketball_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN headcoach)) (PP (IN of) (NP (NP (CD 2013)) (PP (HYPH -) (NP (CD 14)))))) (NP (NML (NML (NNP Marquette) (NNP Golden) (NNPS Eagles)) (NNP men's) (NN basketball)) (NN team))))) (. ?)))",
        "mask_entity": "Who is the headcoach of [ENT] [ENT] men's basketball team ?",
        "entity": [
            "2013-14",
            "Marquette Golden Eagles"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1772",
        "question": "To what nation do Victor Gunasekara and Anuruddha Ratwatte owe their allegiance?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victor_Gunasekara> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Anuruddha_Ratwatte> <http://dbpedia.org/property/allegiance> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:allegiance) dbr:Victor_Gunasekara) (JOIN (R dbp:allegiance) dbr:Anuruddha_Ratwatte))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To what nation",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "do Victor Gunasekara and Anuruddha Ratwatte owe their allegiance",
                    "start": 15,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (WHPP (IN To) (WHNP (WDT what) (NN nation)) (SQ (VBP do) (NP (NP (NNP Victor) (NNP Gunasekara)) (CC and) (NP (NNP Anuruddha) (NNP Ratwatte))) (VP (VB owe) (NP (PRP$ their) (NN allegiance)))) (. ?)))",
        "mask_entity": "To what nation do [ENT] and [ENT] owe their allegiance?",
        "entity": [
            "Victor Gunasekara",
            "Anuruddha Ratwatte"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2315",
        "question": "Who is the musician of Before I let you Go ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri } ",
        "SExpr": "(JOIN (R dbo:musicalArtist) dbr:Before_I_Let_You_Go)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN musician)) (PP (IN of) (SBAR (IN Before) (S (NP (PRP I)) (VP (VBD let) (S (NP (PRP you)) (VP (VB Go)))))))))) (. ?)))",
        "mask_entity": "Who is the musician of Before I let you Go ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "609",
        "question": "Who developed the programming languages designed by Rob Pike?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Rob_Pike> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage>}",
        "SExpr": "(JOIN (R dbo:developer) (AND dbo:ProgrammingLanguage (JOIN dbo:designer dbr:Rob_Pike))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who developed [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the programming languages",
                                "start": 14,
                                "end": 39
                            },
                            {
                                "description": "designed by Rob Pike",
                                "start": 40,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD developed) (NP (NP (DT the) (NN programming) (NNS languages)) (VP (VBN designed) (PP (IN by) (NP (NNP Rob) (NNP Pike))))))) (. ?)))",
        "mask_entity": "Who developed the programming languages designed by [ENT]?",
        "entity": [
            "Rob Pike"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "167",
        "question": "Name the military unit whose garrison is Arlington County, Virginia and command structure is United States Department of Defense?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (AND (JOIN dbo:garrison dbr:Arlington_County,_Virginia) (JOIN dbo:commandStructure dbr:United_States_Department_of_Defense)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the military unit",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose garrison is Arlington County, Virginia",
                    "start": 23,
                    "end": 67
                },
                {
                    "description": "and command structure is United States Department of Defense",
                    "start": 68,
                    "end": 128
                }
            ]
        },
        "constituency": "(ROOT (SINV (VP (VB Name) (NP (NP (DT the) (JJ military) (NN unit)) (SBAR (WHNP (WP$ whose) (NN garrison)) (S (VP (VBZ is) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia)) (CC and) (NP (NN command) (NN structure)))))))) (VP (VBZ is)) (NP (NP (NNP United) (NNPS States) (NNP Department)) (PP (IN of) (NP (NNP Defense)))) (. ?)))",
        "mask_entity": "Name the military unit whose garrison is [ENT], [ENT] and command structure is [ENT] [ENT]?",
        "entity": [
            "Arlington County",
            "Virginia",
            "United States",
            "Department of Defense"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "730",
        "question": "Which races has the horse bred by Jacques Van't Hart participated in?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "SExpr": "(JOIN (R dbp:race) (AND dbo:Horse (JOIN dbo:breeder dbr:Jacques_Van't_Hart))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which races",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "has [IQ1] participated in",
                    "start": 12,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the horse",
                                "start": 16,
                                "end": 25
                            },
                            {
                                "description": "bred by Jacques Van't Hart",
                                "start": 26,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS races)) (SQ (VBZ has) (NP (NP (DT the) (NN horse)) (VP (VBN bred) (PP (IN by) (NP (NP (NNP Jacques) (NNP Va)) (RB n't) (NP (NNP Hart)))))) (VP (VBD participated) (PP (IN in)))) (. ?)))",
        "mask_entity": "Which races has the horse bred by [ENT] participated in?",
        "entity": [
            "Jacques Van't Hart"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4248",
        "question": "Is the Journal of Cerebral Blood Flow and Metabolism about Brains?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Brain> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (DT the) (NNP Journal)) (PP (IN of) (NP (NP (NNP Cerebral) (NNP Blood) (NNP Flow)) (CC and) (NP (NNP Metabolism)))) (PP (IN about) (NP (NNPS Brains)))) (. ?)))",
        "mask_entity": "Is the Journal of Cerebral Blood Flow and Metabolism about Brains?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3358",
        "question": "What are all the countires where food related to tuna salad is consumed ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Tuna_salad> . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "SExpr": "(JOIN (R dbp:country) (JOIN dbo:related dbr:Tuna_salad)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are all the countries",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "where [IQ1] is consumed",
                    "start": 27,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "food",
                                "start": 33,
                                "end": 37
                            },
                            {
                                "description": "related to tuna salad",
                                "start": 38,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (PDT all) (DT the) (NNS countires)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NN food)) (ADJP (JJ related) (PP (IN to) (NP (NN tuna) (NN salad))))) (VP (VBZ is) (VP (VBN consumed)))))))) (. ?)))",
        "mask_entity": "What are all the countires where food related to tuna salad is consumed ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2074",
        "question": "What is the layout of the automobiles whose designer company is Olivier Boulay?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/Olivier_Boulay> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbo:layout) (AND dbo:Automobile (JOIN dbo:designCompany dbr:Olivier_Boulay))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the layout of [IQ1]",
                    "start": 0,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the automobiles",
                                "start": 22,
                                "end": 37
                            },
                            {
                                "description": "whose designer company is Olivier Boulay",
                                "start": 38,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN layout)) (PP (IN of) (NP (NP (DT the) (NNS automobiles)) (SBAR (WHNP (WP$ whose) (NN designer) (NN company)) (S (VP (VBZ is) (NP (NNP Olivier) (NNP Boulay)))))))))) (. ?)))",
        "mask_entity": "What is the layout of the automobiles whose designer company is [ENT]?",
        "entity": [
            "Olivier Boulay"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4039",
        "question": "Is the Caterpullar 797F assembled in North America?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Caterpullar) (CD 797F)) (VP (VBN assembled) (PP (IN in) (NP (NNP North) (NNP America)))) (. ?)))",
        "mask_entity": "Is [ENT] assembled in [ENT]?",
        "entity": [
            "the Caterpullar 797F",
            "North America"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3700",
        "question": "which band was Roger waters in?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Roger_Waters> } ",
        "SExpr": "(JOIN dbo:formerBandMember dbr:Roger_Waters)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT which) (NN band)) (SQ (VP (VBD was) (NP (NNP Roger) (NNS waters)) (PP (IN in)))) (. ?)))",
        "mask_entity": "which band was [ENT] waters in?",
        "entity": [
            "Roger"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1622",
        "question": "In which places can we find the people won the Project Runaway Canada?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Project_Runway_Canada> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:residence) (AND dbo:Person (JOIN dbo:award dbr:Project_Runway_Canada))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which places",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "can we find [IQ1]",
                    "start": 16,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 28,
                                "end": 38
                            },
                            {
                                "description": "won the Project Runaway Canada",
                                "start": 39,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS places)) (VP (MD can) (NP (PRP we)) (VP (VB find) (SBAR (S (NP (DT the) (NNS people)) (VP (VBD won) (NP (DT the) (NNP Project) (NNP Runaway) (NNP Canada)))))))) (. ?)))",
        "mask_entity": "In which places can we find the people won [ENT]?",
        "entity": [
            "the Project Runaway Canada"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "587",
        "question": "Who is the coach of England national under-21 football team ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri } ",
        "SExpr": "(JOIN (R dbp:coach) dbr:England_national_under-21_football_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN coach)) (PP (IN of) (NP (NNP England) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 21)))) (NN football) (NN team)))))) (. ?)))",
        "mask_entity": "Who is the coach of [ENT] national under-21 football team ?",
        "entity": [
            "England"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1401",
        "question": "Which rivers end in Old Saybrook, Connecticut?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Old_Saybrook,_Connecticut> } ",
        "SExpr": "(JOIN dbo:mouthMountain dbr:Old_Saybrook,_Connecticut)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP end) (PP (IN in) (NP (NP (NNP Old) (NNP Saybrook)) (, ,) (NP (NNP Connecticut)))))) (. ?)))",
        "mask_entity": "Which rivers end in [ENT], [ENT]?",
        "entity": [
            "Old Saybrook",
            "Connecticut"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3045",
        "question": "Where does the river end, into which the Rakitnica flows?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Rakitnica> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
        "SExpr": "(JOIN (R dbo:mouthCountry) (JOIN dbo:rightTributary dbr:Rakitnica)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river end, [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "into which the Rakitnica flows",
                                "start": 26,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB end))) (, ,)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (DT the) (NNP Rakitnica)) (VP (VBZ flows)))) (. ?)))",
        "mask_entity": "Where does the river end, into which the Rakitnica flows?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3224",
        "question": "What does the bridge go over, which is in Katima Mulilo?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Katima_Mulilo> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
        "SExpr": "(JOIN (R dbp:crosses) (AND dbo:Bridge (JOIN dbo:locatedInArea dbr:Katima_Mulilo))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What does the bridge go over, [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which is in Katima Mulilo",
                                "start": 30,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (DT the) (NN bridge)) (VP (VB go) (PRT (RP over)))) (, ,) (SBARQ (WHNP (WDT which)) (SQ (VP (VBZ is) (PP (IN in) (NP (NNP Katima) (NNP Mulilo))))) (. ?))))",
        "mask_entity": "What does the bridge go over, which is in [ENT]?",
        "entity": [
            "Katima Mulilo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1700",
        "question": "What are the baseball players who played for San Francisco Giants?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
        "SExpr": "(AND dbo:BaseballPlayer (JOIN dbo:team dbr:San_Francisco_Giants))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the baseball players",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "who played for San Francisco Giants",
                    "start": 30,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN baseball) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBD played) (PP (IN for) (NP (NML (NNP San) (NNP Francisco)) (NNPS Giants))))))))) (. ?)))",
        "mask_entity": "What are the baseball players who played for [ENT]?",
        "entity": [
            "San Francisco Giants"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3088",
        "question": "How many airlines have a hub at an airport run by LA World Airports?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(AND dbo:Airline (JOIN dbo:hubAirport (JOIN dbo:operator dbr:Los_Angeles_World_Airports))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many airlines",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "have [IQ1]",
                    "start": 18,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a hub at an airport",
                                "start": 23,
                                "end": 42
                            },
                            {
                                "description": "run by LA World Airports",
                                "start": 43,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS airlines)) (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN at) (NP (NP (DT an) (NN airport)) (VP (VBN run) (PP (IN by) (NP (NNP LA) (NNP World) (NNPS Airports))))))))) (. ?)))",
        "mask_entity": "How many airlines have a hub at an airport run by [ENT]?",
        "entity": [
            "LA World Airports"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4390",
        "question": "where is the thorington train station located?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thorington_railway_station> <http://dbpedia.org/ontology/district> ?uri } ",
        "SExpr": "(JOIN (R dbo:district) dbr:Thorington_railway_station)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB where)) (SQ (VBZ is) (NP (DT the) (NN thorington) (NN train) (NN station)) (VP (VBN located))) (. ?)))",
        "mask_entity": "where is the thorington train station located?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2981",
        "question": "Who is the person whose parent is Ptolemy XII Auletes?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:parent dbr:Ptolemy_XII_Auletes))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the person",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose parent is Ptolemy XII Auletes",
                    "start": 18,
                    "end": 53
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP$ whose) (NN parent)) (S (VP (VBZ is) (NP (NNP Ptolemy) (CD XII) (NNP Auletes)))))))) (. ?)))",
        "mask_entity": "Who is the person whose parent is [ENT]?",
        "entity": [
            "Ptolemy XII Auletes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "40",
        "question": "What are the schools whose city is Reading, Berkshire?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> } ",
        "SExpr": "(JOIN dbo:city dbr:Reading,_Berkshire)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS schools)) (SBAR (WHNP (WP$ whose) (NN city)) (S (VP (VBZ is) (VP (VBG Reading) (, ,) (NP (NNP Berkshire))))))))) (. ?)))",
        "mask_entity": "What are the schools whose city is [ENT], [ENT]?",
        "entity": [
            "Reading",
            "Berkshire"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1379",
        "question": "List the television shows whose network's executive officer is Steve Burke.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:network (JOIN dbo:keyPerson dbr:Steve_Burke_(businessman)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the television shows",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose network's [IQ1]",
                    "start": 26,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "executive officer is Steve Burke",
                                "start": 42,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (S (NP (WHNP (WP$ whose) (NN network) (POS 's)) (JJ executive) (NN officer)) (VP (VBZ is) (NP (NNP Steve) (NNP Burke))))))) (. .)))",
        "mask_entity": "List the television shows whose network's executive officer is [ENT].",
        "entity": [
            "Steve Burke"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2089",
        "question": "With whom were the engagements of Alpine Brigade Taurinense?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alpine_Brigade_Taurinense> <http://dbpedia.org/ontology/battle> ?uri } ",
        "SExpr": "(JOIN (R dbo:battle) dbr:Alpine_Brigade_Taurinense)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN With) (WHNP (WP whom))) (SINV (VP (VBD were)) (NP (NP (DT the) (NNS engagements)) (PP (IN of) (NP (NNP Alpine) (NNP Brigade) (NNP Taurinense))))) (. ?)))",
        "mask_entity": "With whom were the engagements of [ENT] Taurinense?",
        "entity": [
            "Alpine Brigade"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2175",
        "question": "Find the total number of tenants of the stadium whose tenants was Toronto Marlies?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Toronto_Marlies> . ?x <http://dbpedia.org/property/tenants> ?uri }",
        "SExpr": "(JOIN (R dbp:tenants) (JOIN dbp:tenants dbr:Toronto_Marlies)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Find the total number of tenants of [IQ1]",
                    "start": 0,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 36,
                                "end": 47
                            },
                            {
                                "description": "whose tenants was Toronto Marlies",
                                "start": 48,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Find) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS tenants)) (PP (IN of) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WP$ whose) (NNS tenants)) (S (VP (VBD was) (NP (NNP Toronto) (NNPS Marlies))))))))))) (. ?)))",
        "mask_entity": "Find the total number of tenants of the stadium whose tenants was [ENT]?",
        "entity": [
            "Toronto Marlies"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3217",
        "question": "Whose relatives are Uncle Henry (Oz) and Aunt Em?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Uncle_Henry_(Oz)> . ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Aunt_Em> . }",
        "SExpr": "(AND (JOIN dbo:relative dbr:Uncle_Henry_(Oz)) (JOIN dbo:relative dbr:Aunt_Em))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose relatives are Uncle Henry (Oz) and Aunt Em",
                    "start": 0,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS relatives)) (VP (VBP are) (NP (NP (NP (NNP Uncle) (NNP Henry)) (PP (-LRB- () (NP (NNP Oz) (-RRB- ))))) (CC and) (NP (NNP Aunt) (PRP Em)))) (. ?)))",
        "mask_entity": "Whose relatives are [ENT]) and [ENT]?",
        "entity": [
            "Uncle Henry (Oz",
            "Aunt Em"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2885",
        "question": "What genres of games are available on the Commodore 64?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "SExpr": "(JOIN (R dbp:genre) (AND dbo:VideoGame (JOIN dbo:computingPlatform dbr:Commodore_64))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What genres of [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 15,
                                "end": 20
                            },
                            {
                                "description": "are available on the Commodore 64",
                                "start": 21,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NNS genres)) (PP (IN of) (NP (NNS games)))) (SQ (VP (VBP are) (ADJP (JJ available)) (PP (IN on) (NP (DT the) (NNP Commodore) (CD 64))))) (. ?)))",
        "mask_entity": "What genres of games are available on [ENT]?",
        "entity": [
            "the Commodore 64"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "74",
        "question": "Who gave the voice for Allen Walker ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri } ",
        "SExpr": "(JOIN (R dbo:voice) dbr:Allen_Walker)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD gave) (NP (DT the) (NN voice)) (PP (IN for) (NP (NNP Allen) (NNP Walker))))) (. ?)))",
        "mask_entity": "Who gave the voice for [ENT] ?",
        "entity": [
            "Allen Walker"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3909",
        "question": "Which companies have Kumho Asiana Group as their parent company?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> } ",
        "SExpr": "(JOIN dbo:parentCompany dbr:Kumho_Asiana_Group)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS companies)) (SQ (VP (VBP have) (NP (NNP Kumho) (NNP Asiana) (NNP Group)) (PP (IN as) (NP (PRP$ their) (NN parent) (NN company))))) (. ?)))",
        "mask_entity": "Which companies have [ENT] as their parent company?",
        "entity": [
            "Kumho Asiana Group"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4964",
        "question": "How many buildings are located in Toronto ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Toronto>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
        "SExpr": "(AND dbo:Building (JOIN dbp:location dbr:Toronto))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many buildings",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are located in Toronto",
                    "start": 19,
                    "end": 41
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS buildings)) (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (NNP Toronto)))))) (. ?)))",
        "mask_entity": "How many buildings are located in [ENT] ?",
        "entity": [
            "Toronto"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2657",
        "question": "Where does the river flows into, which starts in Gredelj?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Gredelj> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
        "SExpr": "(JOIN (R dbo:riverMouth) (JOIN dbo:source dbr:Gredelj)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river flows into, [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which starts in Gredelj",
                                "start": 33,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VBZ flows) (PRT (IN into)))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ starts) (PP (IN in) (NP (NNP Gredelj)))))) (. ?)))",
        "mask_entity": "Where does the river flows into, which starts in [ENT]?",
        "entity": [
            "Gredelj"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3180",
        "question": "What is the country which lies on the European route E8, and where Ragnhild Jolson was born?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_route_E8> <http://dbpedia.org/ontology/county> ?uri. <http://dbpedia.org/resource/Ragnhild_J\u00f8lsen> <http://dbpedia.org/property/birthplace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:county) dbr:European_route_E8) (JOIN (R dbp:birthplace) dbr:Ragnhild_J\u00f8lsen))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the country",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "which lies on the European route E8,",
                    "start": 20,
                    "end": 56
                },
                {
                    "description": "and where Ragnhild Jolson was born",
                    "start": 57,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN country)) (SBAR (SBAR (WHNP (WDT which)) (S (VP (VBZ lies) (PP (IN on) (NP (DT the) (JJ European) (NN route) (NNP E8)))))) (, ,) (CC and) (SBAR (WHADVP (WRB where)) (S (NP (NNP Ragnhild) (NNP Jolson)) (VP (VBD was) (VP (VBN born))))))))) (. ?)))",
        "mask_entity": "What is the country which lies on the [ENT] route E8, and where [ENT] was born?",
        "entity": [
            "European",
            "Ragnhild Jolson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2076",
        "question": "How many people have been the head coach for Middlesbrough FC?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:manager) (JOIN dbp:club dbr:Middlesbrough_F.C.))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been [IQ1]",
                    "start": 16,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the head coach for Middlesbrough FC",
                                "start": 26,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN been) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN for) (NP (NNP Middlesbrough) (NNP FC))))))) (. ?)))",
        "mask_entity": "How many people have been the head coach for [ENT]?",
        "entity": [
            "Middlesbrough FC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "441",
        "question": "Where do the people, famous for the Panathinaikos FC reside?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Panathinaikos_F.C.> . ?x <http://dbpedia.org/property/residence> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:residence) (AND dbo:Person (JOIN dbo:knownFor dbr:Panathinaikos_F.C.))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do [IQ1] reside",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people,",
                                "start": 9,
                                "end": 20
                            },
                            {
                                "description": "famous for the Panathinaikos FC",
                                "start": 21,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (DT the) (NNS people)) (, ,) (ADJP (JJ famous) (SBAR (IN for) (S (NP (DT the) (NNP Panathinaikos) (NNP FC)) (VP (VB reside)))))) (. ?)))",
        "mask_entity": "Where do the people, famous for [ENT] reside?",
        "entity": [
            "the Panathinaikos FC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4051",
        "question": "Who is the office holder whose resting place is Monticello?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Monticello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbo:restingPlace dbr:Monticello))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the office holder",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose resting place is Monticello",
                    "start": 25,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (NN resting) (NN place)) (S (VP (VBZ is) (NP (NNP Monticello)))))))) (. ?)))",
        "mask_entity": "Who is the office holder whose resting place is [ENT]?",
        "entity": [
            "Monticello"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2051",
        "question": "What was founded by pina Records which has name of Geography of Puerto Rico ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Geography_of_Puerto_Rico> <http://dbpedia.org/property/name> ?uri. <http://dbpedia.org/resource/Pina_Records> <http://dbpedia.org/property/founded> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:name) dbr:Geography_of_Puerto_Rico) (JOIN (R dbp:founded) dbr:Pina_Records))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What was founded by pina Records",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "which has name of Geography of Puerto Rico",
                    "start": 33,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NP (NNP pina) (NNPS Records)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN name)) (PP (IN of) (NP (NP (NNP Geography)) (PP (IN of) (NP (NNP Puerto) (NNP Rico)))))))))))))) (. ?)))",
        "mask_entity": "What was founded by [ENT] which has name of Geography of [ENT] ?",
        "entity": [
            "pina Records",
            "Puerto Rico"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2541",
        "question": "Is The Universe in a Single Atom a book about buddhism?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Universe_in_a_Single_Atom> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT The) (NNP Universe)) (PP (IN in) (NP (DT a) (JJ Single) (NNP Atom))) (NP (NP (DT a) (NN book)) (PP (IN about) (NP (NN buddhism)))) (. ?)))",
        "mask_entity": "Is [ENT] a book about buddhism?",
        "entity": [
            "The Universe in a Single Atom"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3306",
        "question": "Where is the tunnel, which is operated by BNSF railways?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/BNSF_Railway> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayTunnel>}",
        "SExpr": "(JOIN (R dbp:location) (AND dbo:RailwayTunnel (JOIN dbo:operatedBy dbr:BNSF_Railway))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the tunnel,",
                                "start": 9,
                                "end": 20
                            },
                            {
                                "description": "which is operated by BNSF railways",
                                "start": 21,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN tunnel)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN operated) (PP (IN by) (NP (NNP BNSF) (NNS railways))))))))) (. ?)))",
        "mask_entity": "Where is the tunnel, which is operated by [ENT] railways?",
        "entity": [
            "BNSF"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1301",
        "question": "Is Frontaccounting licensed under GNU license?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Frontaccounting> <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/GNU> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Frontaccounting)) (VP (VBN licensed) (PP (IN under) (NP (NNP GNU) (NN license)))) (. ?)))",
        "mask_entity": "Is Frontaccounting licensed under GNU license?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1781",
        "question": "Terminal Station at Chattanooga is made by architects from which University?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Terminal_Station_(Chattanooga)> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
        "SExpr": "(JOIN (R dbp:education) (AND dbo:Architect (JOIN dbp:knownFor dbr:Terminal_Station_(Chattanooga)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] from",
                    "start": 0,
                    "end": 10,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Terminal Station at Chattanooga is made by",
                                "start": 0,
                                "end": 42
                            },
                            {
                                "description": "architects",
                                "start": 43,
                                "end": 53
                            }
                        ]
                    }
                },
                {
                    "description": "which University",
                    "start": 11,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Terminal) (NNP Station)) (PP (IN at) (NP (NNP Chattanooga)))) (VP (VBZ is) (VP (VBN made) (PP (IN by) (NP (NP (NNS architects)) (SBAR (WHPP (IN from) (WHNP (WDT which))) (NP (NNP University))))))) (. ?)))",
        "mask_entity": "[ENT] at [ENT] is made by architects from which [ENT]?",
        "entity": [
            "Terminal Station",
            "Chattanooga",
            "University"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4814",
        "question": "How many producers have casted Michael Jackson?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Michael_Jackson> . ?x <http://dbpedia.org/property/producer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:producer) (JOIN dbp:starring dbr:Michael_Jackson)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many producers have [IQ1]",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "casted Michael Jackson",
                                "start": 24,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS producers)) (VP (VBP have) (VP (VBN casted) (NP (NNP Michael) (NNP Jackson))))) (. ?)))",
        "mask_entity": "How many producers have casted [ENT]?",
        "entity": [
            "Michael Jackson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3430",
        "question": "Who is married to a Miss Louisiana, USA?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Miss_Louisiana_USA> . ?uri <http://dbpedia.org/property/spouse> ?x  . }",
        "SExpr": "(JOIN dbp:spouse (JOIN dbp:title dbr:Miss_Louisiana_USA)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN married) (PP (IN to) (NP (NP (DT a) (NNP Miss) (NNP Louisiana)) (, ,) (NP (NNP USA))))))) (. ?)))",
        "mask_entity": "Who is married to a Miss [ENT], [ENT]?",
        "entity": [
            "Louisiana",
            "USA"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1304",
        "question": "What sports are played by school which owns Fr. Agnel Stadium ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:sport) (AND dbo:School (JOIN (R dbp:owner) dbr:Fr._Agnel_Stadium))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What sports",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are played by [IQ1]",
                    "start": 12,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "school",
                                "start": 26,
                                "end": 32
                            },
                            {
                                "description": "which owns Fr. Agnel Stadium",
                                "start": 33,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VP (VBP are) (VP (VBN played) (PP (IN by) (NP (NP (NN school)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NNP Fr.) (NNP Agnel) (NNP Stadium)))))))))) (. ?)))",
        "mask_entity": "What sports are played by school which owns [ENT] ?",
        "entity": [
            "Fr. Agnel Stadium"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "236",
        "question": "What is the major shrine of Jacques-Dsir Laval ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-D\u00e9sir\u00e9_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri } ",
        "SExpr": "(JOIN (R dbo:majorShrine) dbr:Jacques-D\u00e9sir\u00e9_Laval)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ major) (NN shrine)) (PP (IN of) (NP (NNP Jacques) (HYPH -) (NNP Dsir) (NNP Laval)))))) (. ?)))",
        "mask_entity": "What is the major shrine of [ENT] ?",
        "entity": [
            "Jacques-Dsir Laval"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2599",
        "question": "What fictional character's species is American Pekin duck",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> } ",
        "SExpr": "(JOIN dbo:species dbr:American_Pekin_duck)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (JJ fictional) (NN character) (POS 's)) (NNS species)) (VP (VBZ is) (NP (NML (JJ American) (NNP Pekin)) (NN duck)))))",
        "mask_entity": "What fictional character's species is [ENT] duck",
        "entity": [
            "American Pekin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "520",
        "question": "What is the television show whose subsequent work is Crusade (TV series) and developed by  J. Michael Straczynski?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:subsequentWork dbr:Crusade_(TV_series)) (JOIN dbo:developer dbr:J._Michael_Straczynski)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose subsequent work is Crusade (TV series)",
                    "start": 28,
                    "end": 72
                },
                {
                    "description": "and developed by J. Michael Straczynski",
                    "start": 73,
                    "end": 112
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (JJ subsequent) (NN work)) (S (VP (VBZ is) (NP (NP (NP (NML (NNP Crusade) (-LRB- () (NN TV)) (NN series)) (ADVP (-RRB- )) (CC and) (VBN developed))) (PP (IN by) (NP (NNP J.) (NNP Michael) (NNP Straczynski)))))))))) (. ?)))",
        "mask_entity": "What is the television show whose subsequent work is [ENT] (TV series) and developed by  [ENT]?",
        "entity": [
            "Crusade",
            "J. Michael Straczynski"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2573",
        "question": "What is the county of Saint Lucia national cricket team ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Lucia_national_cricket_team> <http://dbpedia.org/ontology/county> ?uri } ",
        "SExpr": "(JOIN (R dbo:county) dbr:Saint_Lucia_national_cricket_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN county)) (PP (IN of) (NP (NML (JJ Saint) (NNP Lucia)) (JJ national) (NN cricket) (NN team)))))) (. ?)))",
        "mask_entity": "What is the county of [ENT] national cricket team ?",
        "entity": [
            "Saint Lucia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3280",
        "question": "Who is the Pole driver of 1997 Canadian Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
        "SExpr": "(JOIN (R dbp:poleDriver) dbr:1997_Canadian_Grand_Prix)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (CD 1997) (NNP Canadian) (NNP Grand) (NNP Prix)))))) (. ?)))",
        "mask_entity": "Who is the [ENT] driver of [ENT] [ENT] ?",
        "entity": [
            "Pole",
            "1997",
            "Canadian Grand Prix"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3186",
        "question": "What is the common region of the braod cast area of ITV and nationality of Ajahn Thate ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/ITV_(Thailand)> <http://dbpedia.org/property/broadcastArea> ?uri. <http://dbpedia.org/resource/Ajahn_Thate> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:broadcastArea) dbr:ITV_(Thailand)) (JOIN (R dbo:nationality) dbr:Ajahn_Thate))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common region of the board cast area of ITV",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "and nationality of Ajahn Thate",
                    "start": 56,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN region)) (PP (IN of) (NP (NP (NP (DT the) (NN braod) (NN cast) (NN area)) (PP (IN of) (NP (NNP ITV)))) (CC and) (NP (NP (NN nationality)) (PP (IN of) (NP (NNP Ajahn) (NNP Thate))))))))) (. ?)))",
        "mask_entity": "What is the common region of the braod cast area of [ENT] and nationality of [ENT] ?",
        "entity": [
            "ITV",
            "Ajahn Thate"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2768",
        "question": "Who is the president of United World College of Costa Rica ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/ontology/president> ?uri } ",
        "SExpr": "(JOIN (R dbo:president) dbr:United_World_College_of_Costa_Rica)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NP (NNP United) (NNP World) (NNP College)) (PP (IN of) (NP (NNP Costa) (NNP Rica)))))))) (. ?)))",
        "mask_entity": "Who is the president of [ENT] of [ENT] ?",
        "entity": [
            "United World College",
            "Costa Rica"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "735",
        "question": "Things going to the mediterranean sea also go where?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/ontology/destination> ?uri  . }",
        "SExpr": "(JOIN (R dbo:destination) (JOIN dbp:destinations dbr:Mediterranean_Sea)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] also go where",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Things",
                                "start": 0,
                                "end": 6
                            },
                            {
                                "description": "going to the mediterranean sea",
                                "start": 7,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS Things)) (VP (VBG going) (PP (IN to) (NP (DT the) (JJ mediterranean) (NN sea))))) (ADVP (RB also)) (VP (VB go) (ADVP (WRB where))) (. ?)))",
        "mask_entity": "Things going to the mediterranean sea also go where?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4703",
        "question": "Who is the  distributor of Rev (drink) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri } ",
        "SExpr": "(JOIN (R dbo:distributor) dbr:Rev_(drink))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NNP Rev) (-LRB- () (NN drink) (-RRB- ))))))) (. ?)))",
        "mask_entity": "Who is the  distributor of Rev (drink) ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "4929",
        "question": "In how many different places are Brown haired models living?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
        "SExpr": "(JOIN (R dbo:residence) (JOIN dbp:hairColor dbr:Brown_hair)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many different places",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "are [IQ1] living",
                    "start": 29,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Brown haired models",
                                "start": 33,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN In) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS places))) (VP (VBP are)) (NP (NP (JJ Brown) (VBN haired) (NNS models)) (VP (VBG living))) (. ?)))",
        "mask_entity": "In how many different places are [ENT] haired models living?",
        "entity": [
            "Brown"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2106",
        "question": "Mouse Morris' horses have raced in which races?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Mouse_Morris> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "SExpr": "(JOIN (R dbp:race) (AND dbo:Horse (JOIN dbo:trainer dbr:Mouse_Morris))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have raced in",
                    "start": 0,
                    "end": 19,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Mouse Morris' horses",
                                "start": 0,
                                "end": 20
                            }
                        ]
                    }
                },
                {
                    "description": "which races",
                    "start": 20,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NN Mouse) (NNP Morris) (POS ')) (NNS horses)) (VP (VBP have) (VP (VBN raced) (SBAR (WHPP (IN in) (WHNP (WDT which) (NNS races))) (. ?))))))",
        "mask_entity": "[ENT] horses have raced in which races?",
        "entity": [
            "Mouse Morris'"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2679",
        "question": "What are the television shows telecasted on the network which has headquarters at Atlanta?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Atlanta> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:network (JOIN dbp:headquarters dbr:Atlanta))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the television shows",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "telecasted on [IQ1]",
                    "start": 30,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the network",
                                "start": 44,
                                "end": 55
                            },
                            {
                                "description": "which has headquarters at Atlanta",
                                "start": 56,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN television) (NNS shows)) (VP (VBN telecasted) (PP (IN on) (NP (NP (DT the) (NN network)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN headquarters)) (PP (IN at) (NP (NNP Atlanta))))))))))))) (. ?)))",
        "mask_entity": "What are the television shows telecasted on the network which has headquarters at [ENT]?",
        "entity": [
            "Atlanta"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3229",
        "question": "Name the award given in Norway and presented by Swedish Academy ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "SExpr": "(AND dbo:Award (AND (JOIN dbo:presenter dbr:Swedish_Academy) (JOIN dbo:country dbr:Norway)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the award",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "given in Norway",
                    "start": 15,
                    "end": 30
                },
                {
                    "description": "and presented by Swedish Academy",
                    "start": 31,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN award)) (VP (VP (VBN given) (PP (IN in) (NP (NNP Norway)))) (CC and) (VP (VBN presented) (PP (IN by) (NP (NNP Swedish) (NNP Academy))))))) (. ?)))",
        "mask_entity": "Name the award given in [ENT] and presented by [ENT] ?",
        "entity": [
            "Norway",
            "Swedish Academy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2761",
        "question": "Which producer of Boeing F/A has Dennis Muilenburg as an important person ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg>  . }",
        "SExpr": "(AND (JOIN dbo:product dbr:F_Super_Hornet) (JOIN dbp:keyPeople dbr:Dennis_Muilenburg))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which producer of Boeing FA",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "has Dennis Muilenburg as an important person",
                    "start": 28,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN producer)) (PP (IN of) (NP (NNP Boeing) (NNP F/A)))) (SQ (VP (VBZ has) (NP (NNP Dennis) (NNP Muilenburg)) (PP (IN as) (NP (DT an) (JJ important) (NN person))))) (. ?)))",
        "mask_entity": "Which producer of [ENT] has [ENT] as an important person ?",
        "entity": [
            "Boeing F/A",
            "Dennis Muilenburg"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "592",
        "question": "Where is the assembly of Plymouth Savoy, and where Special 26 was recorded?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Plymouth_Savoy> <http://dbpedia.org/ontology/assembly> ?uri. <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:assembly) dbr:Plymouth_Savoy) (JOIN (R dbp:recorded) dbr:Special_26))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the assembly of Plymouth Savoy,",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and where Special 26 was recorded",
                    "start": 41,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN assembly)) (PP (IN of) (NP (NNP Plymouth) (NNP Savoy))))) (, ,) (CC and) (SBAR (WHADVP (WRB where)) (S (NP (JJ Special) (CD 26)) (VP (VBD was) (VP (VBN recorded))))) (. ?)))",
        "mask_entity": "Where is the assembly of [ENT], and where [ENT] was recorded?",
        "entity": [
            "Plymouth Savoy",
            "Special 26"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1303",
        "question": "What is an airport inside ontario?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Ontario,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
        "SExpr": "(AND dbo:Airport (JOIN dbp:cityServed dbr:Ontario,_California))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is an airport",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "inside ontario",
                    "start": 19,
                    "end": 33
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT an) (NN airport)) (PP (IN inside) (NP (NNP ontario)))))) (. ?)))",
        "mask_entity": "What is an airport inside ontario?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1387",
        "question": "Is Queen Latifah the narrator of Arctic Tale?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Arctic_Tale> <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Queen_Latifah> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Queen) (NNP Latifah)) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NNP Arctic) (NNP Tale)))) (. ?)))",
        "mask_entity": "Is [ENT] the narrator of [ENT]?",
        "entity": [
            "Queen Latifah",
            "Arctic Tale"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4695",
        "question": "What is the career of George Arceneaux, Jr. ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri } ",
        "SExpr": "(JOIN (R dbo:occupation) dbr:George_Arceneaux,_Jr.)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN career)) (PP (IN of) (NP (NP (NNP George) (NNP Arceneaux)) (, ,) (NP (NNP Jr.))))))) (. ?)))",
        "mask_entity": "What is the career of [ENT], [ENT] ?",
        "entity": [
            "George Arceneaux",
            "Jr."
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4526",
        "question": "What are some shows by Comedy Central?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:network dbr:Comedy_Central))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some shows",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "by Comedy Central",
                    "start": 20,
                    "end": 37
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS shows)) (PP (IN by) (NP (NNP Comedy) (NNP Central)))))) (. ?)))",
        "mask_entity": "What are some shows by [ENT]?",
        "entity": [
            "Comedy Central"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3947",
        "question": "What are the party of the politicians whose deputy was Chaudhary Devi Lal?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Chaudhary_Devi_Lal> . ?x <http://dbpedia.org/ontology/otherParty> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(JOIN (R dbo:otherParty) (AND dbo:OfficeHolder (JOIN dbp:deputy dbr:Chaudhary_Devi_Lal))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the party of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the politicians",
                                "start": 22,
                                "end": 37
                            },
                            {
                                "description": "whose deputy was Chaudhary Devi Lal",
                                "start": 38,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN party)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NN deputy)) (S (VP (VBD was) (NP (NNP Chaudhary) (NNP Devi) (NNP Lal)))))))))) (. ?)))",
        "mask_entity": "What are the party of the politicians whose deputy was [ENT]?",
        "entity": [
            "Chaudhary Devi Lal"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1890",
        "question": "Which movies' music is composed by people associated with the band Yes?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:musicComposer (JOIN dbo:associatedMusicalArtist dbr:Yes_(band)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which movies'",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "music is composed by [IQ1]",
                    "start": 14,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 35,
                                "end": 41
                            },
                            {
                                "description": "associated with the band Yes",
                                "start": 42,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NNS movies) (POS ')) (NN music)) (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NP (NNS people)) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (NN band)) (ADJP (UH Yes))))))))) (. ?)))",
        "mask_entity": "Which movies' music is composed by people associated with the band Yes?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2987",
        "question": "What came before  PlayStation 4 and uses PlayStation 3 system software as OS?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/PlayStation_4> . ?uri <http://dbpedia.org/property/os> <http://dbpedia.org/resource/PlayStation_3_system_software>  . }",
        "SExpr": "(AND (JOIN dbo:successor dbr:PlayStation_4) (JOIN dbp:os dbr:PlayStation_3_system_software))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What came before PlayStation 4",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "and uses PlayStation 3 system software as OS",
                    "start": 31,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VP (VBD came) (PP (IN before) (NP (NNP PlayStation) (CD 4)))) (CC and) (VP (VBZ uses) (NP (NNP PlayStation) (CD 3) (NN system) (NN software)) (PP (IN as) (NP (NNP OS)))))) (. ?)))",
        "mask_entity": "What came before  [ENT] and uses [ENT] system software as OS?",
        "entity": [
            "PlayStation 4",
            "PlayStation 3"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4924",
        "question": "List the affiliation of Indian general election, 2004 (Andhra Pradesh) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri } ",
        "SExpr": "(JOIN (R dbo:affiliation) dbr:Indian_general_election,_2004_(Andhra_Pradesh))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN affiliation)) (PP (IN of) (NP (NP (JJ Indian) (JJ general) (NN election)) (, ,) (NP (NP (CD 2004)) (PP (-LRB- () (NP (NNP Andhra) (NNP Pradesh) (-RRB- ))))))))) (. ?)))",
        "mask_entity": "List the affiliation of [ENT] general election, [ENT] ([ENT]) ?",
        "entity": [
            "Indian",
            "2004",
            "Andhra Pradesh"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3297",
        "question": "How many religion's commanders have served in the Royal Thai Army?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Royal_Thai_Army> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbp:notableCommanders) dbr:Royal_Thai_Army)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religion's [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "commanders have served in the Royal Thai Army",
                                "start": 20,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (NP (JJ many) (NN religion) (POS 's)) (NNS commanders)) (VP (VBP have) (VP (VBN served) (PP (IN in) (NP (DT the) (NML (NNP Royal) (NNP Thai)) (NNP Army)))))) (. ?)))",
        "mask_entity": "How many religion's commanders have served in [ENT]?",
        "entity": [
            "the Royal Thai Army"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "904",
        "question": "Who are the people which were the influencer of the person, who influenced Costanzo Preve ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Costanzo_Preve> <http://dbpedia.org/ontology/influencedBy> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:influencedBy) (AND dbo:Person (JOIN (R dbo:influencedBy) dbr:Costanzo_Preve))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the people",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "which were the influencer of [IQ1]",
                    "start": 19,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person,",
                                "start": 48,
                                "end": 59
                            },
                            {
                                "description": "who influenced Costanzo Preve",
                                "start": 60,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (NP (NP (NP (DT the) (NN influencer)) (PP (IN of) (NP (DT the) (NN person)))) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD influenced) (NP (NNP Costanzo) (NNP Preve)))))))))))) (. ?)))",
        "mask_entity": "Who are the people which were the influencer of the person, who influenced [ENT] ?",
        "entity": [
            "Costanzo Preve"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4609",
        "question": "What is manufactured by Asus and Sony togather?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . }",
        "SExpr": "(AND (JOIN dbo:manufacturer dbr:Asus) (JOIN dbo:manufacturer dbr:Sony))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is manufactured by Asus and Sony togather",
                    "start": 0,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (VP (VBN manufactured) (PP (IN by) (NP (NNP Asus) (CC and) (NNP Sony) (NNP togather)))))) (. ?)))",
        "mask_entity": "What is manufactured by [ENT] and [ENT] togather?",
        "entity": [
            "Asus",
            "Sony"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1279",
        "question": "Name the TV show with theme music by Primus and broadcasted on Comedy Central ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:network dbr:Comedy_Central) (JOIN dbp:themeMusicComposer dbr:Primus_(band))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV show",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with theme music by Primus",
                    "start": 17,
                    "end": 43
                },
                {
                    "description": "and broadcasted on Comedy Central",
                    "start": 44,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN TV) (NN show)) (PP (IN with) (NP (NP (NN theme) (NN music)) (PP (IN by) (NP (NNP Primus)))))) (CC and) (VP (VBN broadcasted) (PP (IN on) (NP (NNP Comedy) (NNP Central))))) (. ?)))",
        "mask_entity": "Name the TV show with theme music by [ENT] and broadcasted on [ENT] ?",
        "entity": [
            "Primus",
            "Comedy Central"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "933",
        "question": "Count all the games whose distributors are located in America",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/distributor> ?x  . }",
        "SExpr": "(JOIN dbp:distributor (JOIN dbp:country dbr:United_States)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count all the games",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose distributors [IQ1]",
                    "start": 20,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are located in America",
                                "start": 39,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (NNS games)) (SBAR (WHNP (WP$ whose) (NNS distributors)) (S (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (NNP America)))))))))))",
        "mask_entity": "Count all the games whose distributors are located in [ENT]",
        "entity": [
            "America"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4899",
        "question": "What is the location of the pope whose major shrine is St. Peter's Basilica ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/St._Peter's_Basilica> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Pope>}",
        "SExpr": "(JOIN (R dbp:birthPlace) (AND dbo:Pope (JOIN dbp:majorShrine dbr:St._Peter's_Basilica))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the location of [IQ1]",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the pope",
                                "start": 24,
                                "end": 32
                            },
                            {
                                "description": "whose major shrine is St. Peter's Basilica",
                                "start": 33,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (NP (DT the) (NN pope)) (SBAR (WHNP (WP$ whose) (JJ major) (NN shrine)) (S (VP (VBZ is) (NP (NP (NNP St.) (NNP Peter) (POS 's)) (NNP Basilica)))))))))) (. ?)))",
        "mask_entity": "What is the location of the pope whose major shrine is [ENT] ?",
        "entity": [
            "St. Peter's Basilica"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2308",
        "question": "List all the faiths that British Columbian politicians follow?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "SExpr": "(JOIN (R dbp:religion) (AND dbo:Politician (JOIN dbp:residence dbr:British_Columbia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the faiths",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "that [IQ1] follow",
                    "start": 20,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "British Columbian politicians",
                                "start": 25,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS faiths)) (SBAR (WHNP (WDT that)) (S (NP (NML (JJ British) (NNP Columbian)) (NNS politicians)) (VP (VBP follow)))))) (. ?)))",
        "mask_entity": "List all the faiths that [ENT] [ENT] politicians follow?",
        "entity": [
            "British",
            "Columbian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1555",
        "question": "What is the birthplace of the Ferrel Harris which is also resting palce of  Green Wix Unthank?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ferrel_Harris> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Green_Wix_Unthank> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:birthplace) dbr:Ferrel_Harris) (JOIN (R dbo:restingPlace) dbr:Green_Wix_Unthank))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birthplace of the Ferrel Harris",
                    "start": 0,
                    "end": 43
                },
                {
                    "description": "which is also resting place of Green Wix Unthank",
                    "start": 44,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (DT the) (NNP Ferrel) (NNP Harris)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBG resting) (NP (NML (NML (NN palce)) (PP (IN of) (NP (NNP Green)))) (NNP Wix) (NNP Unthank))))))))) (. ?)))",
        "mask_entity": "What is the birthplace of [ENT] which is also resting palce of  [ENT]?",
        "entity": [
            "the Ferrel Harris",
            "Green Wix Unthank"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4533",
        "question": "What is the river one of whose left tributary's native name is Arabic?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nativeName> <http://dbpedia.org/resource/Arabic> . ?uri <http://dbpedia.org/ontology/leftTributary> ?x  . }",
        "SExpr": "(JOIN dbo:leftTributary (JOIN dbp:nativeName dbr:Arabic)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the river",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "one of whose left tributary's [IQ1]",
                    "start": 18,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "native name is Arabic",
                                "start": 48,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (S (NP (NP (CD one)) (WHPP (IN of) (NP (WHNP (WP$ whose) (JJ left) (NN tributary) (POS 's)) (JJ native) (NN name)))) (VP (VBZ is) (NP (NNP Arabic)))))))) (. ?)))",
        "mask_entity": "What is the river one of whose left tributary's native name is [ENT]?",
        "entity": [
            "Arabic"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3190",
        "question": "What work has been directed by Orson Welles and distributed by  RKO Pictures?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
        "SExpr": "(AND dbo:Work (AND (JOIN dbp:director dbr:Orson_Welles) (JOIN dbp:distributor dbr:RKO_Pictures)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What work",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "has been directed by Orson Welles",
                    "start": 10,
                    "end": 43
                },
                {
                    "description": "and distributed by RKO Pictures",
                    "start": 44,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN work)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Orson) (NNP Welles)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (NNP RKO) (NNPS Pictures)))))))) (. ?)))",
        "mask_entity": "What work has been directed by [ENT] and distributed by  [ENT]?",
        "entity": [
            "Orson Welles",
            "RKO Pictures"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4441",
        "question": "What is the alma mater of Andrew W. Lewis ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Andrew_W._Lewis> <http://dbpedia.org/ontology/almaMater> ?uri } ",
        "SExpr": "(JOIN (R dbo:almaMater) dbr:Andrew_W._Lewis)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Andrew) (NNP W.) (NNP Lewis)))))) (. ?)))",
        "mask_entity": "What is the alma mater of [ENT] ?",
        "entity": [
            "Andrew W. Lewis"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "706",
        "question": "Who is the spouse of Daniel Gibson? ",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
        "SExpr": "(JOIN dbp:spouse dbr:Daniel_Gibson)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN spouse)) (PP (IN of) (NP (NNP Daniel) (NNP Gibson)))))) (. ?)))",
        "mask_entity": "Who is the spouse of [ENT]? ",
        "entity": [
            "Daniel Gibson"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4690",
        "question": "Spanish harlem incident and girl from the north country were originally composed by whom?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spanish_Harlem_Incident> <http://dbpedia.org/ontology/composer> ?uri. <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:composer) dbr:Spanish_Harlem_Incident) (JOIN (R dbo:composer) dbr:Girl_from_the_North_Country))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Spanish harlem incident and girl from the north country were originally composed by whom",
                    "start": 0,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NP (JJ Spanish) (NN harlem) (NN incident)) (CC and) (NP (NN girl))) (PP (IN from) (NP (DT the) (JJ north) (NN country)))) (VP (VBD were) (ADVP (RB originally)) (VP (VBN composed) (WHPP (IN by) (WHNP (WP whom))))) (. ?)))",
        "mask_entity": "[ENT] harlem incident and girl from the north country were originally composed by whom?",
        "entity": [
            "Spanish"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3070",
        "question": "Name the nearest city to the historic place which has Englewood, Colorado as one of them ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nearestCity> <http://dbpedia.org/resource/Englewood,_Colorado> . ?x <http://dbpedia.org/ontology/nearestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HistoricPlace>}",
        "SExpr": "(JOIN (R dbo:nearestCity) (AND dbo:HistoricPlace (JOIN dbp:nearestCity dbr:Englewood,_Colorado))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the nearest city to [IQ1]",
                    "start": 0,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the historic place",
                                "start": 25,
                                "end": 43
                            },
                            {
                                "description": "which has Englewood, Colorado as one of them",
                                "start": 44,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (IN to) (NP (NP (DT the) (JJ historic) (NN place)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NNP Englewood)) (, ,) (NP (NNP Colorado))) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (PRP them))))))))))) (. ?)))",
        "mask_entity": "Name the nearest city to the historic place which has [ENT], [ENT] as [ENT] of them ?",
        "entity": [
            "Englewood",
            "Colorado",
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "745",
        "question": "What are the movies directed by Joel Schumacher?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:director dbr:Joel_Schumacher))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "directed by Joel Schumacher",
                    "start": 20,
                    "end": 47
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NNP Joel) (NNP Schumacher))))))) (. ?)))",
        "mask_entity": "What are the movies directed by [ENT]?",
        "entity": [
            "Joel Schumacher"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3594",
        "question": "Where did the music genre of Harry and the Potters originate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_and_the_Potters_(album)> <http://dbpedia.org/ontology/genre> ?x . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . }",
        "SExpr": "(JOIN (R dbo:stylisticOrigin) (JOIN (R dbo:genre) dbr:Harry_and_the_Potters_(album))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] originate",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the music genre of Harry and the Potters",
                                "start": 10,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NN music) (NN genre)) (PP (IN of) (NP (NP (NNP Harry)) (CC and) (NP (DT the) (NNPS Potters))))) (VP (VB originate))) (. ?)))",
        "mask_entity": "Where did the music genre of [ENT] and the [ENT] originate?",
        "entity": [
            "Harry",
            "Potters"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1939",
        "question": "To which political party do the children of Sonia Gandhi belong?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "SExpr": "(JOIN (R dbo:party) (JOIN (R dbp:children) dbr:Sonia_Gandhi)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which political party",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "do [IQ1] belong",
                    "start": 25,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the children of Sonia Gandhi",
                                "start": 28,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (JJ political) (NN party)) (VP (VBP do) (S (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NNP Sonia) (NNP Gandhi)))) (VP (VB belong))))) (. ?)))",
        "mask_entity": "To which political party do the children of [ENT] belong?",
        "entity": [
            "Sonia Gandhi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4400",
        "question": "Name some relatives of the people studied in Manurewa High School?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Manurewa_High_School> . ?x <http://dbpedia.org/ontology/relative> ?uri  . }",
        "SExpr": "(JOIN (R dbo:relative) (JOIN dbo:school dbr:Manurewa_High_School)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name some relatives of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 23,
                                "end": 33
                            },
                            {
                                "description": "studied in Manurewa High School",
                                "start": 34,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NNS relatives)) (PP (IN of) (NP (NP (DT the) (NNS people)) (VP (VBN studied) (PP (IN in) (NP (NNP Manurewa) (NNP High) (NNP School)))))))) (. ?)))",
        "mask_entity": "Name some relatives of the people studied in [ENT]?",
        "entity": [
            "Manurewa High School"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2862",
        "question": "Name a TV show judged by Jennifier Lopez and presented by Brian Dunkleman ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Jennifer_Lopez) (JOIN dbp:presenter dbr:Brian_Dunkleman)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a TV show",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "judged by Jennifier Lopez",
                    "start": 15,
                    "end": 40
                },
                {
                    "description": "and presented by Brian Dunkleman",
                    "start": 41,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN TV) (NN show)) (VP (VP (VBN judged) (PP (IN by) (NP (NNP Jennifier) (NNP Lopez)))) (CC and) (VP (VBN presented) (PP (IN by) (NP (NNP Brian) (NNP Dunkleman))))))) (. ?)))",
        "mask_entity": "Name a TV show judged by [ENT] and presented by [ENT] ?",
        "entity": [
            "Jennifier Lopez",
            "Brian Dunkleman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3996",
        "question": "What is the draft team of Antoine Bibeau ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri } ",
        "SExpr": "(JOIN (R dbp:draftTeam) dbr:Antoine_Bibeau)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NNP Antoine) (NNP Bibeau)))))) (. ?)))",
        "mask_entity": "What is the draft team of [ENT] ?",
        "entity": [
            "Antoine Bibeau"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "513",
        "question": "What are a few molluscas whose family is Buccinidae?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mollusca>}",
        "SExpr": "(AND dbo:Mollusca (JOIN dbo:family dbr:Buccinidae))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are a few molluscas",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose family is Buccinidae",
                    "start": 25,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT a) (JJ few) (NNS molluscas)) (SBAR (WHNP (WP$ whose) (NN family)) (S (VP (VBZ is) (NP (NNP Buccinidae)))))))) (. ?)))",
        "mask_entity": "What are a few molluscas whose family is [ENT]?",
        "entity": [
            "Buccinidae"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "81",
        "question": "What is the television show whose vocals are performed by  April Stewart and Mona Marshall?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:voices dbr:April_Stewart) (JOIN dbp:voices dbr:Mona_Marshall)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose vocals are performed by April Stewart and Mona Marshall",
                    "start": 28,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NNS vocals)) (S (VP (VBP are) (VP (VBN performed) (PP (IN by) (NP (NP (NNP April) (NNP Stewart)) (CC and) (NP (NNP Mona) (NNP Marshall))))))))))) (. ?)))",
        "mask_entity": "What is the television show whose vocals are performed by  [ENT] and [ENT]?",
        "entity": [
            "April Stewart",
            "Mona Marshall"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4976",
        "question": "How many have family as Ape and order (taxonomy) is Primate ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> } ",
        "SExpr": "(AND (JOIN dbo:family dbr:Ape) (JOIN dbo:order dbr:Primate))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many have family as Ape",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "and order (taxonomy) is Primate",
                    "start": 28,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHADVP (WRB How)) (S (NP (JJ many)) (VP (VBP have) (NP (NP (NN family)) (PP (IN as) (NP (NNP Ape))))))) (CC and) (NP (NN order) (-LRB- () (NN taxonomy) (-RRB- ))) (VP (VBZ is) (NP (NNP Primate))) (. ?)))",
        "mask_entity": "How many have family as [ENT] and order (taxonomy) is Primate ?",
        "entity": [
            "Ape"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1308",
        "question": "From which team did Marv McFadden played ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> ?uri } ",
        "SExpr": "(JOIN (R dbp:pastteams) dbr:Marv_McFadden)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN From) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBD did) (NP (NNP Marv) (NNP McFadden)) (VP (VBD played)))) (. ?)))",
        "mask_entity": "From which team did [ENT] played ?",
        "entity": [
            "Marv McFadden"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4614",
        "question": "Who studied at  Harvard-Westlake School and has Henry E. Catto, Jr. as   predecessor ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . }",
        "SExpr": "(AND (JOIN dbo:almaMater dbr:Harvard-Westlake_School) (JOIN dbo:predecessor dbr:Henry_E._Catto,_Jr.))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who studied at Harvard-Westlake School",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "and has Henry E. Catto, Jr. as predecessor",
                    "start": 39,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VP (VBD studied) (PP (IN at) (NP (NNP Harvard) (NNP -Westlake) (NNP School)))) (CC and) (VP (VBZ has) (NP (NP (NNP Henry) (NNP E.) (NNP Catto)) (, ,) (NP (NNP Jr.))) (PP (IN as) (NP (NN predecessor)))))) (. ?)))",
        "mask_entity": "Who studied at  [ENT] and has [ENT], [ENT] as   predecessor ?",
        "entity": [
            "Harvard-Westlake School",
            "Henry E. Catto",
            "Jr."
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "914",
        "question": "Name the licensee of the WRVU who has the affiliation of  Monroe Carell Jr. Children's Hospital at Vanderbilt ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WRVU> <http://dbpedia.org/property/licensee> ?uri. <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:licensee) dbr:WRVU) (JOIN (R dbp:affiliation) dbr:Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the license of the WRVU",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "who has the affiliation of Monroe Carell Jr. Children's Hospital at Vanderbilt",
                    "start": 29,
                    "end": 107
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN licensee)) (PP (IN of) (NP (NP (DT the) (NNP WRVU)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (DT the) (NN affiliation)) (PP (IN of) (NP (NP (NP (NNP Monroe) (NNP Carell) (NNP Jr.) (NNP Children) (POS 's)) (NNP Hospital)) (PP (IN at) (NP (NNP Vanderbilt))))))))))))) (. ?)))",
        "mask_entity": "Name the licensee of the [ENT] who has the affiliation of  [ENT] at [ENT] ?",
        "entity": [
            "WRVU",
            "Monroe Carell Jr. Children's Hospital",
            "Vanderbilt"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3452",
        "question": "Is Rajya Sabha a house of parliament in India?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> <http://dbpedia.org/resource/Rajya_Sabha> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Rajya) (NNP Sabha)) (NP (NP (DT a) (NN house)) (PP (IN of) (NP (NN parliament))) (PP (IN in) (NP (NNP India)))) (. ?)))",
        "mask_entity": "Is [ENT] a house of parliament in [ENT]?",
        "entity": [
            "Rajya Sabha",
            "India"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3695",
        "question": "Who are the trainersof Candice Michelle?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Candice_Michelle> <http://dbpedia.org/ontology/trainer> ?uri } ",
        "SExpr": "(JOIN (R dbo:trainer) dbr:Candice_Michelle)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (DT the) (NN trainersof) (NNP Candice) (NNP Michelle)))) (. ?)))",
        "mask_entity": "Who are the trainersof [ENT]?",
        "entity": [
            "Candice Michelle"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4804",
        "question": "Which constructor's team won the 1967 Mexican Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri } ",
        "SExpr": "(JOIN (R dbp:firstTeam) dbr:1967_Mexican_Grand_Prix)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN constructor) (POS 's)) (NN team)) (VP (VBD won) (NP (DT the) (CD 1967) (NNP Mexican) (NNP Grand) (NNP Prix))) (. ?)))",
        "mask_entity": "Which constructor's team won the [ENT] [ENT] ?",
        "entity": [
            "1967",
            "Mexican Grand Prix"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3156",
        "question": "Where is the main ground of soccer seasons whose chairman is Ronaldo?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Ronaldo> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "SExpr": "(JOIN (R dbo:ground) (AND dbo:SoccerClubSeason (JOIN dbo:chairman dbr:Ronaldo))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the main ground of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "soccer seasons",
                                "start": 28,
                                "end": 42
                            },
                            {
                                "description": "whose chairman is Ronaldo",
                                "start": 43,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (NP (DT the) (JJ main) (NN ground)) (PP (IN of) (NP (NN soccer) (NNS seasons)))) (SBAR (WHNP (WP$ whose) (NN chairman)) (S (VP (VBZ is) (NP (NNP Ronaldo))))))) (. ?)))",
        "mask_entity": "Where is the main ground of soccer seasons whose chairman is [ENT]?",
        "entity": [
            "Ronaldo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2198",
        "question": "Which person belongs to the board of Howard Hughes Medical Institute?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Howard_Hughes_Medical_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:board dbr:Howard_Hughes_Medical_Institute))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which person",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "belongs to the board of Howard Hughes Medical Institute",
                    "start": 13,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN person)) (S (VP (VBZ belongs) (PP (IN to) (NP (NP (DT the) (NN board)) (PP (IN of) (NP (NNP Howard) (NNP Hughes) (NNP Medical) (NNP Institute))))))) (. ?)))",
        "mask_entity": "Which person belongs to the board of [ENT]?",
        "entity": [
            "Howard Hughes Medical Institute"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4232",
        "question": "Who is the stock holder of the bank where  Peter Grauer works  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Grauer> <http://dbpedia.org/property/occupation> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Bank (JOIN (R dbp:occupation) dbr:Peter_Grauer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the stock holder of [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bank",
                                "start": 27,
                                "end": 35
                            },
                            {
                                "description": "where Peter Grauer works",
                                "start": 36,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN stock) (NN holder)) (PP (IN of) (NP (NP (DT the) (NN bank)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Peter) (NNP Grauer)) (VP (VBZ works))))))))) (. ?)))",
        "mask_entity": "Who is the stock holder of the bank where  [ENT] works  ?",
        "entity": [
            "Peter Grauer"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "774",
        "question": "Does the asiana airlines fly into the Gimhae International Airport?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Asiana_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NN asiana) (NNS airlines)) (VP (VB fly) (PP (IN into) (NP (DT the) (NNP Gimhae) (NNP International) (NNP Airport)))) (. ?)))",
        "mask_entity": "Does the asiana airlines fly into [ENT]?",
        "entity": [
            "the Gimhae International Airport"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "329",
        "question": "Where is the head quarters of the owner of Hamline Avenue?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hamline_Avenue_(Metro_Transit_station)> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
        "SExpr": "(JOIN (R dbp:headquarters) (JOIN (R dbo:owner) dbr:Hamline_Avenue_(Metro_Transit_station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the head quarters of [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the owner of Hamline Avenue",
                                "start": 30,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN head) (NNS quarters)) (PP (IN of) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Hamline) (NNP Avenue))))))) (. ?)))",
        "mask_entity": "Where is the head quarters of the owner of [ENT]?",
        "entity": [
            "Hamline Avenue"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2054",
        "question": "Who is the co-founder of the city where Owen Dougherty died?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Owen_Dougherty> <http://dbpedia.org/property/placeOfDeath> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
        "SExpr": "(JOIN (R dbo:founder) (AND dbo:City (JOIN (R dbp:placeOfDeath) dbr:Owen_Dougherty))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the co-founder of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the city",
                                "start": 25,
                                "end": 33
                            },
                            {
                                "description": "where Owen Dougherty died",
                                "start": 34,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN co-founder)) (PP (IN of) (NP (NP (DT the) (NN city)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Owen) (NNP Dougherty)) (VP (VBD died))))))))) (. ?)))",
        "mask_entity": "Who is the co-founder of the city where [ENT] died?",
        "entity": [
            "Owen Dougherty"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2001",
        "question": "For which teams did the Hawai graduated players play their first game?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Hawaii> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "SExpr": "(JOIN (R dbo:debutTeam) (AND dbo:Athlete (JOIN dbp:college dbr:Hawaii))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For which teams",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "did [IQ1] play their first game",
                    "start": 16,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Hawai graduated players",
                                "start": 20,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NNS teams)) (VP (VBD did) (NP (DT the) (NNP Hawai) (VBN graduated) (NNS players)) (VP (VB play) (NP (PRP$ their) (JJ first) (NN game))))) (. ?)))",
        "mask_entity": "For which teams did the [ENT] graduated players play their [ENT] game?",
        "entity": [
            "Hawai",
            "first"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "943",
        "question": "What is the title of Kakae ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kakae> <http://dbpedia.org/property/title> ?uri } ",
        "SExpr": "(JOIN (R dbp:title) dbr:Kakae)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN title)) (PP (IN of) (NP (NNP Kakae)))))) (. ?)))",
        "mask_entity": "What is the title of [ENT] ?",
        "entity": [
            "Kakae"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "822",
        "question": "Which broadcast area of Mauritius Broadcasting Corporation is also the nationality of Michael Medor ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation> <http://dbpedia.org/property/broadcastArea> ?uri. <http://dbpedia.org/resource/Michael_Medor> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:broadcastArea) dbr:Mauritius_Broadcasting_Corporation) (JOIN (R dbo:nationality) dbr:Michael_Medor))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which broadcast area of Mauritius Broadcasting Corporation",
                    "start": 0,
                    "end": 58
                },
                {
                    "description": "is also the nationality of Michael Medor",
                    "start": 59,
                    "end": 99
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN broadcast) (NN area)) (PP (IN of) (NP (NNP Mauritius) (NNP Broadcasting) (NNP Corporation)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN nationality)) (PP (IN of) (NP (NNP Michael) (NNP Medor)))))) (. ?)))",
        "mask_entity": "Which broadcast area of [ENT] is also the nationality of [ENT] ?",
        "entity": [
            "Mauritius Broadcasting Corporation",
            "Michael Medor"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4527",
        "question": "What is the county of the road whose route end is Pahang ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Pahang> . ?x <http://dbpedia.org/ontology/county> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
        "SExpr": "(JOIN (R dbo:county) (AND dbo:Road (JOIN dbo:routeEnd dbr:Pahang))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the county of [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the road",
                                "start": 22,
                                "end": 30
                            },
                            {
                                "description": "whose route end is Pahang",
                                "start": 31,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN county)) (PP (IN of) (NP (NP (DT the) (NN road)) (SBAR (WHNP (WP$ whose) (NN route) (NN end)) (S (VP (VBZ is) (NP (NNP Pahang)))))))))) (. ?)))",
        "mask_entity": "What is the county of the road whose route end is [ENT] ?",
        "entity": [
            "Pahang"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "909",
        "question": "Who wrote Heroman?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heroman> <http://dbpedia.org/property/author> ?uri } ",
        "SExpr": "(JOIN (R dbp:author) dbr:Heroman)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NNP Heroman)))) (. ?)))",
        "mask_entity": "Who wrote [ENT]?",
        "entity": [
            "Heroman"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2516",
        "question": "Name the person who died in Fair Lane ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Fair_Lane>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbp:deathPlace dbr:Fair_Lane))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the person",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "who died in Fair Lane",
                    "start": 16,
                    "end": 37
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Fair) (NNP Lane)))))))) (. ?)))",
        "mask_entity": "Name the person who died in [ENT] ?",
        "entity": [
            "Fair Lane"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "181",
        "question": "List the religion of people in the Cambodian human rights party?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Human_Rights_Party_(Cambodia)> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:Person (JOIN dbo:otherParty dbr:Human_Rights_Party_(Cambodia)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the religion of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 21,
                                "end": 27
                            },
                            {
                                "description": "in the Cambodian human rights party",
                                "start": 28,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (NNS people)) (PP (IN in) (NP (DT the) (JJ Cambodian) (NML (JJ human) (NNS rights)) (NN party))))))) (. ?)))",
        "mask_entity": "List the religion of people in the [ENT] human rights party?",
        "entity": [
            "Cambodian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "164",
        "question": "What relegious affiliation of Josiah Idowu-Fearon was canonized by john of Damasucs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_of_Damascus> <http://dbpedia.org/ontology/canonizedBy> ?uri. <http://dbpedia.org/resource/Josiah_Idowu-Fearon> <http://dbpedia.org/ontology/religion> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:canonizedBy) dbr:John_of_Damascus) (JOIN (R dbo:religion) dbr:Josiah_Idowu-Fearon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What relegious",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "affiliation of Josiah Idowu-Fearon",
                    "start": 15,
                    "end": 49
                },
                {
                    "description": "was canonized by john of Damasucs",
                    "start": 50,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT What) (JJ relegious) (NN affiliation)) (PP (IN of) (NP (NNP Josiah) (NNP Idowu-Fearon)))) (S (VP (VBD was) (VP (VBN canonized) (PP (IN by) (NP (NP (NNP john)) (PP (IN of) (NP (NNP Damasucs)))))))) (. ?)))",
        "mask_entity": "What relegious affiliation of [ENT] was canonized by [ENT] of [ENT] ?",
        "entity": [
            "Josiah Idowu-Fearon",
            "john",
            "Damasucs"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1523",
        "question": "Which draft team od Dale Mitchell is also the tenant of Master Card center /",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri. <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:draftTeam) dbr:Dale_Mitchell_(ice_hockey)) (JOIN (R dbp:tenants) dbr:MasterCard_Centre))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which draft team od Dale Mitchell",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "is also the tenant of Master Card center",
                    "start": 34,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which) (NN draft) (NN team) (NNP od) (NNP Dale) (NNP Mitchell)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN tenant)) (PP (IN of) (NP (NML (NN Master) (NNP Card)) (NN center))))))) (, /)))",
        "mask_entity": "Which draft team od [ENT] is also the tenant of [ENT] center /",
        "entity": [
            "Dale Mitchell",
            "Master Card"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "451",
        "question": "What cities does the river goes through, whose tributary is the little black river in Arkansas?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Little_Black_River_(Missouri_-_Arkansas)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbo:city) (AND dbo:River (JOIN dbo:leftTributary dbr:Little_Black_River_(Missouri_-_Arkansas)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What cities",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "does the river goes through, [IQ1]",
                    "start": 12,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose tributary is the little black river in Arkansas",
                                "start": 41,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBZ does) (SBAR (S (NP (DT the) (NN river)) (VP (VBZ goes) (PRT (RP through)))))))) (, ,) (PRN (WHNP (WP$ whose) (NN tributary)) (S (VP (VBZ is) (NP (NP (DT the) (JJ little) (JJ black) (NN river)) (PP (IN in) (NP (NNP Arkansas))))))) (. ?)))",
        "mask_entity": "What cities does the river goes through, whose tributary is the little black river in [ENT]?",
        "entity": [
            "Arkansas"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2538",
        "question": "Where did the ultimate fighter: a champion will be crowned tonight and ultimate fighter: team rousey vs team tate take place?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_A_Champion_Will_Be_Crowned> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:city) dbr:The_Ultimate_Fighter:_A_Champion_Will_Be_Crowned) (JOIN (R dbp:city) dbr:The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the ultimate fighter: a champion will be crowned tonight and ultimate fighter: team rousey vs team tate take place",
                    "start": 0,
                    "end": 124
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (JJ ultimate) (NN fighter)) (: :) (S (NP (DT a) (NN champion)) (VP (MD will) (VP (VB be) (VP (VBN crowned) (NP (NP (NP (NN tonight)) (CC and) (NP (JJ ultimate) (NN fighter))) (: :) (NP (NP (NN team) (NN rousey)) (PP (IN vs) (NP (NP (NN team) (NN tate)) (VP (NN take) (NP (NN place)))))))))))) (. ?)))",
        "mask_entity": "Where did the ultimate fighter: a champion will be crowned [ENT] and ultimate fighter: team rousey vs team tate take place?",
        "entity": [
            "tonight"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4137",
        "question": "Is Roger Federer the flagbearer of Switzerland at the 2004 Summer Olympics?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> <http://dbpedia.org/resource/Roger_Federer> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Roger) (NNP Federer)) (NP (NP (DT the) (NN flagbearer)) (PP (IN of) (NP (NNP Switzerland))) (PP (IN at) (NP (DT the) (CD 2004) (NNP Summer) (NNPS Olympics)))) (. ?)))",
        "mask_entity": "Is [ENT] the flagbearer of [ENT] at the [ENT] [ENT]?",
        "entity": [
            "Roger Federer",
            "Switzerland",
            "2004",
            "Summer Olympics"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4775",
        "question": "What show has  judge as Randy Jackson sculptors as Simon Fuller?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Randy_Jackson) (JOIN dbp:creator dbr:Simon_Fuller)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What show",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "has judge as Randy Jackson",
                    "start": 10,
                    "end": 36
                },
                {
                    "description": "sculptors as Simon Fuller",
                    "start": 37,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN show)) (SQ (VP (VBZ has) (NP (NN judge)) (PP (IN as) (NP (NP (NML (NNP Randy) (NNP Jackson)) (NNS sculptors)) (PP (IN as) (NP (NNP Simon) (NNP Fuller))))))) (. ?)))",
        "mask_entity": "What show has  judge as [ENT] sculptors as [ENT]?",
        "entity": [
            "Randy Jackson",
            "Simon Fuller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1311",
        "question": "Which nation's engineers have graduated in Poland?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Poland> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>}",
        "SExpr": "(JOIN (R dbp:nationality) (AND dbo:Engineer (JOIN dbo:education dbr:Poland))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which nation's engineers [IQ1]",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "have graduated in Poland",
                                "start": 25,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN nation) (POS 's)) (NNS engineers)) (VP (VBP have) (VP (VBN graduated) (PP (IN in) (NP (NNP Poland))))) (. ?)))",
        "mask_entity": "Which nation's engineers have graduated in [ENT]?",
        "entity": [
            "Poland"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3149",
        "question": "Give me a count of movies whose music composer is Bernard Herrmann?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:musicComposer dbr:Bernard_Herrmann))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a count of movies",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose music composer is Bernard Herrmann",
                    "start": 26,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NP (NNS movies)) (SBAR (WHNP (WP$ whose) (NN music) (NN composer)) (S (VP (VBZ is) (NP (NNP Bernard) (NNP Herrmann))))))))) (. ?)))",
        "mask_entity": "Give me a count of movies whose music composer is [ENT]?",
        "entity": [
            "Bernard Herrmann"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1111",
        "question": "What awards have been given to the artists coming out of the university of Melbourne, faculty of VCA and MCM?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(JOIN (R dbo:award) (AND dbo:Artist (JOIN dbo:training dbr:University_of_Melbourne_Faculty_of_VCA_and_MCM))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What awards",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 12,
                    "end": 108,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the artists",
                                "start": 31,
                                "end": 42
                            },
                            {
                                "description": "coming out of the university of Melbourne, faculty of VCA and MCM",
                                "start": 43,
                                "end": 108
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NNS artists)) (VP (VBG coming) (PP (IN out) (PP (IN of) (NP (NP (DT the) (NN university)) (PP (IN of) (NP (NP (NNP Melbourne)) (, ,) (NP (NP (NN faculty)) (PP (IN of) (NP (NNP VCA) (CC and) (NNP MCM)))))))))))))))) (. ?)))",
        "mask_entity": "What awards have been given to the artists coming out of the university of [ENT], faculty of [ENT] and [ENT]?",
        "entity": [
            "Melbourne",
            "VCA",
            "MCM"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4547",
        "question": "List the destinations of Novair International Airways ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri } ",
        "SExpr": "(JOIN (R dbp:destinations) dbr:Novair_International_Airways)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS destinations)) (PP (IN of) (NP (NNP Novair) (NNP International) (NNPS Airways))))) (. ?)))",
        "mask_entity": "List the destinations of [ENT] ?",
        "entity": [
            "Novair International Airways"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4085",
        "question": "Name the state of Timothy J. Roemer ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timothy_J._Roemer> <http://dbpedia.org/property/state> ?uri } ",
        "SExpr": "(JOIN (R dbp:state) dbr:Timothy_J._Roemer)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Timothy) (NNP J.) (NNP Roemer))))) (. ?)))",
        "mask_entity": "Name the state of [ENT] ?",
        "entity": [
            "Timothy J. Roemer"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3489",
        "question": "What are all the religions that have been followed by the Sir Lankan attorneys?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Attorneys_in_Sri_Lanka> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:profession dbr:Attorneys_in_Sri_Lanka)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are all the religions",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "that have been followed by [IQ1]",
                    "start": 27,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Sir Lankan attorneys",
                                "start": 54,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (PDT all) (DT the) (NNS religions)) (SBAR (WHNP (WDT that)) (S (VP (VBP have) (VP (VBN been) (VP (VBN followed) (PP (IN by) (NP (DT the) (ADJP (NNP Sir) (JJ Lankan)) (NNS attorneys))))))))))) (. ?)))",
        "mask_entity": "What are all the religions that have been followed by the Sir [ENT] attorneys?",
        "entity": [
            "Lankan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1287",
        "question": "Which awards have been given to the horse who sired Triplicate ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Triplicate> <http://dbpedia.org/property/sire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . }",
        "SExpr": "(JOIN (R dbo:honours) (JOIN (R dbp:sire) dbr:Triplicate)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which awards",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 13,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the horse",
                                "start": 32,
                                "end": 41
                            },
                            {
                                "description": "who sired Triplicate",
                                "start": 42,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NN horse)) (SBAR (WHNP (WP who)) (S (VP (VBD sired) (NP (NNP Triplicate))))))))))) (. ?)))",
        "mask_entity": "Which awards have been given to the horse who sired [ENT] ?",
        "entity": [
            "Triplicate"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4177",
        "question": "Where did the spouse of pmare ii die?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/P\u014dmare_II> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathPlace) (JOIN dbp:spouse dbr:P\u014dmare_II)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] die",
                    "start": 0,
                    "end": 36,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the spouse of pmare ii",
                                "start": 10,
                                "end": 32
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NN spouse)) (PP (IN of) (S (VP (VB pmare) (S (NP (CD ii)) (VP (VB die)))))))) (. ?)))",
        "mask_entity": "Where did the spouse of pmare ii die?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4645",
        "question": "What killed John Thompson Mason and Martino Martini?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Thomson_Mason_(1787\u20131850)> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:deathCause) dbr:John_Thomson_Mason_(1787\u20131850)) (JOIN (R dbo:deathCause) dbr:Martino_Martini))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What killed John Thompson Mason and Martino Martini",
                    "start": 0,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBD killed) (NP (NP (NNP John) (NNP Thompson) (NNP Mason)) (CC and) (NP (NNP Martino) (NNP Martini))))) (. ?)))",
        "mask_entity": "What killed [ENT] and [ENT]?",
        "entity": [
            "John Thompson Mason",
            "Martino Martini"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3680",
        "question": "Into which water bodies does Lake Uniamsi outflow?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/property/outflow> ?uri } ",
        "SExpr": "(JOIN (R dbp:outflow) dbr:Lake_Uniam\u00e9si)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN Into) (WHNP (WDT which))) (S (NP (NN water) (NNS bodies)) (VP (VBZ does) (NP (NNP Lake) (NNP Uniamsi)) (S (VP (NN outflow))))) (. ?)))",
        "mask_entity": "Into which water bodies does [ENT] outflow?",
        "entity": [
            "Lake Uniamsi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4511",
        "question": "Which river does Katima Mulilo Bridge cross?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katima_Mulilo_Bridge> <http://dbpedia.org/property/crosses> ?uri } ",
        "SExpr": "(JOIN (R dbp:crosses) dbr:Katima_Mulilo_Bridge)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VBZ does) (NP (NNP Katima) (NNP Mulilo) (NNP Bridge)) (VP (NN cross))) (. ?)))",
        "mask_entity": "Which river does [ENT] cross?",
        "entity": [
            "Katima Mulilo Bridge"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4168",
        "question": "Which office holder's successor is Adrian A. Basora and child named Lori Black?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:successor dbr:Adrian_A._Basora) (JOIN dbp:children dbr:Lori_Black)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which office holder's successor is Adrian A. Basora",
                    "start": 0,
                    "end": 51
                },
                {
                    "description": "and child named Lori Black",
                    "start": 52,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN office) (NN holder) (POS 's)) (NN successor)) (VP (VBZ is) (NP (NP (NNP Adrian) (NNP A.) (NNP Basora)) (CC and) (NP (NP (NN child)) (VP (VBN named) (S (NP (NNP Lori) (NNP Black))))))) (. ?)))",
        "mask_entity": "Which office holder's successor is [ENT] and child named [ENT]?",
        "entity": [
            "Adrian A. Basora",
            "Lori Black"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3300",
        "question": "What is the debut team of Tom O'Malley ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tom_O'Malley> <http://dbpedia.org/property/debutteam> ?uri } ",
        "SExpr": "(JOIN (R dbp:debutteam) dbr:Tom_O'Malley)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NNP Tom) (NNP O'Malley)))))) (. ?)))",
        "mask_entity": "What is the debut team of [ENT] ?",
        "entity": [
            "Tom O'Malley"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3310",
        "question": "In which country is Bocas del toro a capital of some region?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Bocas_Town,_Bocas_del_Toro> . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "SExpr": "(JOIN (R dbp:country) (JOIN dbp:capital dbr:Bocas_Town,_Bocas_del_Toro)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country is [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Bocas del toro a capital of some region",
                                "start": 20,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ is) (NP (NP (NNP Bocas) (FW del) (NN toro)) (NP (NP (DT a) (NN capital)) (PP (IN of) (NP (DT some) (NN region))))))) (. ?)))",
        "mask_entity": "In which country is [ENT] a capital of some region?",
        "entity": [
            "Bocas del toro"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4556",
        "question": "What is the political party to which Purnima Banerjee is a member of??",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purnima_Banerjee> <http://dbpedia.org/ontology/party> ?uri } ",
        "SExpr": "(JOIN (R dbo:party) dbr:Purnima_Banerjee)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NNP Purnima) (NNP Banerjee)) (VP (VBZ is) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (. ??))))))))))))",
        "mask_entity": "What is the political party to which [ENT] is a member of??",
        "entity": [
            "Purnima Banerjee"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3125",
        "question": "Jimmie Fisher and Winston Bryant were governors under which president?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmie_Lou_Fisher> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:governor) dbr:Jimmie_Lou_Fisher) (JOIN (R dbp:governor) dbr:Winston_Bryant))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Jimmie Fisher and Winston Bryant were governors under which president",
                    "start": 0,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Jimmie) (NNP Fisher)) (CC and) (NP (NNP Winston) (NNP Bryant))) (VP (VBD were) (NP (NP (NNS governors)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NN president)) (. ?)))))))",
        "mask_entity": "[ENT] and [ENT] were governors under which president?",
        "entity": [
            "Jimmie Fisher",
            "Winston Bryant"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "327",
        "question": "What is the headquarters of the public transit system which is the section of Red Ahead ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_Ahead> <http://dbpedia.org/ontology/isPartOf> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
        "SExpr": "(JOIN (R dbp:headquarters) (AND dbo:PublicTransitSystem (JOIN (R dbo:isPartOf) dbr:Red_Ahead))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the headquarters of [IQ1]",
                    "start": 0,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the public transit system",
                                "start": 28,
                                "end": 53
                            },
                            {
                                "description": "which is the section of Red Ahead",
                                "start": 54,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN section)) (PP (IN of) (NP (NNP Red) (NNP Ahead)))))))))))) (. ?)))",
        "mask_entity": "What is the headquarters of the public transit system which is the section of [ENT] ?",
        "entity": [
            "Red Ahead"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1790",
        "question": "List the leaders of all the cities through which the Ganga river flows ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
        "SExpr": "(JOIN (R dbo:leaderName) (AND dbo:City (JOIN (R dbp:city) dbr:Ganges))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the leaders of [IQ1]",
                    "start": 0,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "all the cities",
                                "start": 20,
                                "end": 34
                            },
                            {
                                "description": "through which the Ganga river flows",
                                "start": 35,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS leaders)) (PP (IN of) (NP (NP (PDT all) (DT the) (NNS cities)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Ganga) (NN river)) (VP (VBZ flows)))))))) (. ?)))",
        "mask_entity": "List the leaders of all the cities through which the [ENT] river flows ?",
        "entity": [
            "Ganga"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2490",
        "question": "Did Christian Barnard study in the University of Minnesota?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Christiaan_Barnard> <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/University_of_Minnesota> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Did)) (NP (NNP Christian) (NNP Barnard)) (VP (VB study) (PP (IN in) (NP (NP (DT the) (NNP University)) (PP (IN of) (NP (NNP Minnesota)))))) (. ?)))",
        "mask_entity": "Did [ENT] study in [ENT]?",
        "entity": [
            "Christian Barnard",
            "the University of Minnesota"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2006",
        "question": "Who has written works found in the Gangan comics?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Gangan_Comics> . ?x <http://dbpedia.org/property/author> ?uri  . }",
        "SExpr": "(JOIN (R dbp:author) (JOIN dbp:magazine dbr:Gangan_Comics)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has written [IQ1]",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "works found in the Gangan comics",
                                "start": 16,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN written) (NP (NP (NNS works)) (VP (VBN found) (PP (IN in) (NP (DT the) (NNP Gangan) (NNS comics)))))))) (. ?)))",
        "mask_entity": "Who has written works found in the [ENT] comics?",
        "entity": [
            "Gangan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2007",
        "question": "What is the currency of Republic of Montenegro (1992-2006) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)> <http://dbpedia.org/property/currency> ?uri } ",
        "SExpr": "(JOIN (R dbp:currency) dbr:Republic_of_Montenegro_(1992\u20132006))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN currency)) (PP (IN of) (NP (NP (NNP Republic)) (PP (IN of) (NP (NNP Montenegro))))))))) (VP (-LRB- () (NP (CD 1992-2006) (-RRB- )))) (. ?)))",
        "mask_entity": "What is the currency of [ENT] ([ENT]) ?",
        "entity": [
            "Republic of Montenegro",
            "1992-2006"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1858",
        "question": "What is the device whose successor's CPU is by AMD?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Advanced_Micro_Devices> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Device>}",
        "SExpr": "(AND dbo:Device (JOIN dbo:successor (JOIN dbo:cpu dbr:Advanced_Micro_Devices))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the device",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "whose successor's [IQ1]",
                    "start": 19,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "CPU is by AMD",
                                "start": 37,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN device)) (SBAR (WHNP (WHNP (WP$ whose) (NN successor) (POS 's)) (NP (NNP CPU))) (S (VP (VBZ is) (PP (IN by) (NP (NNP AMD))))))))) (. ?)))",
        "mask_entity": "What is the device whose successor's CPU is by AMD?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4685",
        "question": "What is the club of Perianne Jones ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri } ",
        "SExpr": "(JOIN (R dbp:club) dbr:Perianne_Jones)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN club)) (PP (IN of) (NP (NNP Perianne) (NNP Jones)))))) (. ?)))",
        "mask_entity": "What is the club of [ENT] ?",
        "entity": [
            "Perianne Jones"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "312",
        "question": "What awards did the founder of Grameen Bank win?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbp:founder) dbr:Grameen_Bank)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What awards",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "did [IQ1] win",
                    "start": 12,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the founder of Grameen Bank",
                                "start": 16,
                                "end": 43
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS awards)) (SQ (VBD did) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NNP Grameen) (NNP Bank)))) (VP (VB win))) (. ?)))",
        "mask_entity": "What awards did the founder of [ENT] win?",
        "entity": [
            "Grameen Bank"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "832",
        "question": "What television show is aired on channel Sirius XM Holdings?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Sirius_XM_Holdings>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:channel dbr:Sirius_XM_Holdings))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What television show",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "is aired on channel Sirius XM Holdings",
                    "start": 21,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN television) (NN show)) (SQ (VP (VBZ is) (VP (VBN aired) (PP (IN on) (NP (NN channel))) (NP (NNP Sirius) (NNP XM) (NNPS Holdings))))) (. ?)))",
        "mask_entity": "What television show is aired on channel [ENT]?",
        "entity": [
            "Sirius XM Holdings"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3079",
        "question": "How many have order (taxonomy) as Bacillales and division as Firmicutes are there?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes> } ",
        "SExpr": "(AND (JOIN dbo:order dbr:Bacillales) (JOIN dbo:division dbr:Firmicutes))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many have order (taxonomy) as Bacillales",
                    "start": 0,
                    "end": 44
                },
                {
                    "description": "and division as Firmicutes are there",
                    "start": 45,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many)) (VP (VBP have) (NP (NP (NP (NN order) (-LRB- () (NN taxonomy)) (ADJP (-RRB- )))) (PP (IN as) (NP (NNP Bacillales) (CC and) (NN division)))) (SBAR (IN as) (S (NP (NNPS Firmicutes)) (VP (VBP are) (ADVP (RB there))))))) (. ?)))",
        "mask_entity": "How many have order (taxonomy) as Bacillales and division as Firmicutes are there?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4717",
        "question": "What is the movie whose producer is Michael Deeley and directed by  Ridley Scott?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Michael_Deeley> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:producer dbr:Michael_Deeley) (JOIN dbp:director dbr:Ridley_Scott)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the movie",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose producer is Michael Deeley",
                    "start": 18,
                    "end": 50
                },
                {
                    "description": "and directed by Ridley Scott",
                    "start": 51,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN producer)) (S (VP (VP (VBZ is) (NP (NNP Michael) (NNP Deeley))) (CC and) (VP (VBN directed) (PP (IN by) (NP (NNP Ridley) (NNP Scott)))))))))) (. ?)))",
        "mask_entity": "What is the movie whose producer is [ENT] and directed by  [ENT]?",
        "entity": [
            "Michael Deeley",
            "Ridley Scott"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3462",
        "question": "Which manufacturer of  Ford Y-block engine is the parent of  Ford Air Transport Service ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri. <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/property/parent> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:manufacturer) dbr:Ford_Y-block_engine) (JOIN (R dbp:parent) dbr:Ford_Air_Transport_Service))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which manufacturer of Ford Y-block engine",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "is the parent of Ford Air Transport Service",
                    "start": 42,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN manufacturer)) (PP (IN of) (NP (NNP Ford) (NNP Y-block) (NN engine)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN parent)) (PP (IN of) (NP (NNP Ford) (NNP Air) (NNP Transport) (NNP Service)))))) (. ?)))",
        "mask_entity": "Which manufacturer of  [ENT] [ENT] engine is the parent of  [ENT] Air Transport Service ?",
        "entity": [
            "Ford",
            "Y-block",
            "Ford Air Transport Service"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1201",
        "question": "Which  governing body of the Oahu Railway and Land Company is also the military branch of the Jimmy Quillen ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri. <http://dbpedia.org/resource/Jimmy_Quillen> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:governingBody) dbr:Oahu_Railway_and_Land_Company) (JOIN (R dbo:militaryBranch) dbr:Jimmy_Quillen))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which governing body of the Oahu Railway and Land Company",
                    "start": 0,
                    "end": 57
                },
                {
                    "description": "is also the military branch of the Jimmy Quillen",
                    "start": 58,
                    "end": 106
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (VBG governing) (NN body)) (PP (IN of) (NP (NP (DT the) (NNP Oahu) (NNP Railway)) (CC and) (NP (NNP Land) (NNP Company))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (DT the) (NNP Jimmy) (NNP Quillen))))) (. ?)))",
        "mask_entity": "Which  governing body of [ENT] is also the military branch of [ENT] ?",
        "entity": [
            "the Oahu Railway and Land Company",
            "the Jimmy Quillen"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4391",
        "question": "Which arena of WPC Dynamo Moscow is the death palce of Mikhail Voronin ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Mikhail_Voronin> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:arena) dbr:WPC_Dynamo_Moscow) (JOIN (R dbp:deathPlace) dbr:Mikhail_Voronin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which arena of WPC Dynamo Moscow",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is the death place of Mikhail Voronin",
                    "start": 33,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN arena)) (PP (IN of) (NP (NNP WPC) (NNP Dynamo) (NNP Moscow)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN death) (NN palce)) (PP (IN of) (NP (NNP Mikhail) (NNP Voronin)))))) (. ?)))",
        "mask_entity": "Which arena of [ENT] is the death palce of [ENT] ?",
        "entity": [
            "WPC Dynamo Moscow",
            "Mikhail Voronin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3547",
        "question": "Name the TV show with Simon Fuller as artist and Fox as the channel ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:creator dbr:Simon_Fuller) (JOIN dbp:channel dbr:Fox_Broadcasting_Company)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV show",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with Simon Fuller as artist",
                    "start": 17,
                    "end": 44
                },
                {
                    "description": "and Fox as the channel",
                    "start": 45,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN TV) (NN show)) (PP (IN with) (NP (NP (NNP Simon) (NNP Fuller)) (PP (IN as) (NP (NN artist) (CC and) (NNP Fox))))) (PP (IN as) (NP (DT the) (NN channel))))) (. ?)))",
        "mask_entity": "Name the TV show with [ENT] as artist and [ENT] as the channel ?",
        "entity": [
            "Simon Fuller",
            "Fox"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4922",
        "question": "list the  software which works on both the OS  - Microsoft Windows and Mac OS ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . }",
        "SExpr": "(AND (JOIN dbo:operatingSystem dbr:Microsoft_Windows) (JOIN dbo:operatingSystem dbr:Mac_OS))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the software",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "which works on both the OS - Microsoft Windows and Mac OS",
                    "start": 18,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB list) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBZ works) (PP (IN on) (NP (CC both) (NP (DT the) (NML (NNP OS) (HYPH -) (NNP Microsoft)) (NNPS Windows)) (CC and) (NP (NNP Mac) (NNP OS))))))))) (. ?)))",
        "mask_entity": "list the  software which works on both the OS  - [ENT] [ENT] and [ENT] ?",
        "entity": [
            "Microsoft",
            "Windows",
            "Mac OS"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2134",
        "question": "Who are the opponents of graduates of the Middle Temple?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Middle_Temple> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . }",
        "SExpr": "(JOIN (R dbo:opponent) (JOIN dbp:education dbr:Middle_Temple)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the opponents of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "graduates of the Middle Temple",
                                "start": 25,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS opponents)) (PP (IN of) (NP (NP (NNS graduates)) (PP (IN of) (NP (DT the) (NNP Middle) (NNP Temple)))))))) (. ?)))",
        "mask_entity": "Who are the opponents of graduates of [ENT]?",
        "entity": [
            "the Middle Temple"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3451",
        "question": "What religions are followed by economists?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Economist> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:profession dbr:Economist)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religions",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "are followed by [IQ1]",
                    "start": 15,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "economists",
                                "start": 31,
                                "end": 41
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VP (VBP are) (VP (VBN followed) (PP (IN by) (NP (NNS economists)))))) (. ?)))",
        "mask_entity": "What religions are followed by economists?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2209",
        "question": "What are some important works of US citizens?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationality> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "SExpr": "(JOIN (R dbo:notableWork) (JOIN dbp:nationality dbr:United_States)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some important works of [IQ1]",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "US citizens",
                                "start": 33,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ important) (NNS works)) (PP (IN of) (NP (NNP US) (NNS citizens)))))) (. ?)))",
        "mask_entity": "What are some important works of [ENT] citizens?",
        "entity": [
            "US"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1901",
        "question": "Name the rivers whose source country's capital is Lusaka?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Lusaka> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:sourceCountry (JOIN dbo:capital dbr:Lusaka))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the rivers",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose source country's [IQ1]",
                    "start": 16,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "capital is Lusaka",
                                "start": 39,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (SBAR (WHNP (WP$ whose) (NN source) (NN country) (POS 's)) (S (NP (NN capital)) (VP (VBZ is) (NP (NNP Lusaka))))))) (. ?)))",
        "mask_entity": "Name the rivers whose source country's capital is [ENT]?",
        "entity": [
            "Lusaka"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1481",
        "question": "Which sports are played typically in private schools?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/schooltype> <http://dbpedia.org/resource/Private_school> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
        "SExpr": "(JOIN (R dbo:sport) (JOIN dbp:schooltype dbr:Private_school)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sports",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are played typically in [IQ1]",
                    "start": 13,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "private schools",
                                "start": 37,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS sports)) (SQ (VP (VBP are) (VP (VBN played) (ADVP (RB typically)) (PP (IN in) (NP (JJ private) (NNS schools)))))) (. ?)))",
        "mask_entity": "Which sports are played typically in private schools?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "777",
        "question": "What is the state of the senator whose successor is Nathaniel P. Hill ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Nathaniel_P._Hill> . ?x <http://dbpedia.org/property/state> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
        "SExpr": "(JOIN (R dbp:state) (AND dbo:Senator (JOIN dbo:successor dbr:Nathaniel_P._Hill))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the state of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the senator",
                                "start": 21,
                                "end": 32
                            },
                            {
                                "description": "whose successor is Nathaniel P. Hill",
                                "start": 33,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (DT the) (NN senator)) (SBAR (WHNP (WP$ whose) (NN successor)) (S (VP (VBZ is) (NP (NNP Nathaniel) (NNP P.) (NNP Hill)))))))))) (. ?)))",
        "mask_entity": "What is the state of the senator whose successor is [ENT] ?",
        "entity": [
            "Nathaniel P. Hill"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "799",
        "question": "How many shows is Russell Davies known for?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN (R dbp:notableworks) dbr:Russell_T_Davies))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many shows",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "is Russell Davies known for",
                    "start": 15,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS shows)) (VP (VBZ is) (NP (NP (NNP Russell) (NNPS Davies)) (VP (VBN known) (PP (IN for)))))) (. ?)))",
        "mask_entity": "How many shows is [ENT] known for?",
        "entity": [
            "Russell Davies"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3714",
        "question": "Who manages the operator of Norman Park Branch, CTA?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Normal_Park_branch_(CTA)> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . }",
        "SExpr": "(JOIN (R dbo:operatedBy) (JOIN (R dbp:operator) dbr:Normal_Park_branch_(CTA))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who manages [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the operator of Norman Park Branch, CTA",
                                "start": 12,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ manages) (NP (NP (DT the) (NN operator)) (PP (IN of) (NP (NP (NNP Norman) (NNP Park) (NNP Branch)) (, ,) (NP (NNP CTA))))))) (. ?)))",
        "mask_entity": "Who manages the operator of [ENT], [ENT]?",
        "entity": [
            "Norman Park Branch",
            "CTA"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3942",
        "question": "What is the casting of the movie directed by Justin Zackham ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Justin_Zackham> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(JOIN (R dbp:starring) (AND dbo:Film (JOIN dbo:director dbr:Justin_Zackham))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the casting of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movie",
                                "start": 23,
                                "end": 32
                            },
                            {
                                "description": "directed by Justin Zackham",
                                "start": 33,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN casting)) (PP (IN of) (NP (NP (DT the) (NN movie)) (VP (VBN directed) (PP (IN by) (NP (NNP Justin) (NNP Zackham))))))))) (. ?)))",
        "mask_entity": "What is the casting of the movie directed by [ENT] ?",
        "entity": [
            "Justin Zackham"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "54",
        "question": "Name the island with archipelago as Society Islands and has the largest city named Faaa ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Faaa> . ?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Society_Islands>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
        "SExpr": "(AND dbo:Island (AND (JOIN dbo:largestCity dbr:Faaa) (JOIN dbp:archipelago dbr:Society_Islands)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the island",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "with archipelago as Society Islands",
                    "start": 16,
                    "end": 51
                },
                {
                    "description": "and has the largest city named Faaa",
                    "start": 52,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN island)) (PP (IN with) (NP (NP (NN archipelago)) (PP (IN as) (NP (NNP Society) (NNPS Islands)))))) (CC and) (VP (VBZ has) (NP (NP (DT the) (JJS largest) (NN city)) (VP (VBN named) (S (NP (NNP Faaa))))))) (. ?)))",
        "mask_entity": "Name the island with archipelago as [ENT] and has the largest city named [ENT] ?",
        "entity": [
            "Society Islands",
            "Faaa"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2972",
        "question": "List all the mmebers of  Mekong River Commission?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mekong_River_Commission> <http://dbpedia.org/property/membership> ?uri } ",
        "SExpr": "(JOIN (R dbp:membership) dbr:Mekong_River_Commission)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS mmebers)) (PP (IN of) (NP (NNP Mekong) (NNP River) (NNP Commission))))) (. ?)))",
        "mask_entity": "List all the mmebers of  [ENT]?",
        "entity": [
            "Mekong River Commission"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3335",
        "question": "Name the actors of the TV show which has an episode named The Five ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Five_(The_Vampire_Diaries)> <http://dbpedia.org/property/series> ?x . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(JOIN (R dbp:starring) (AND dbo:TelevisionShow (JOIN (R dbp:series) dbr:The_Five_(The_Vampire_Diaries)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the actors of [IQ1]",
                    "start": 0,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the TV show",
                                "start": 19,
                                "end": 30
                            },
                            {
                                "description": "which has an episode named The Five",
                                "start": 31,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS actors)) (PP (IN of) (NP (NP (DT the) (NN TV) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT an) (NN episode)) (VP (VBN named) (S (NP (DT The) (CD Five)))))))))))) (. ?)))",
        "mask_entity": "Name the actors of the TV show which has an episode named [ENT] ?",
        "entity": [
            "The Five"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1920",
        "question": "How many religion's people have died in Malaysia?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Malaysia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:deathPlace dbr:Malaysia)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religion's [IQ1]",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 20,
                                "end": 26
                            },
                            {
                                "description": "have died in Malaysia",
                                "start": 27,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (NP (JJ many) (NN religion) (POS 's)) (NNS people)) (VP (VBP have) (VP (VBN died) (PP (IN in) (NP (NNP Malaysia)))))) (. ?)))",
        "mask_entity": "How many religion's people have died in [ENT]?",
        "entity": [
            "Malaysia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3715",
        "question": "Name the HBO TV show written by Erik jendresen  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:company dbr:HBO) (JOIN dbp:writer dbr:Erik_Jendresen)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the HBO TV show",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "written by Erik jendresen",
                    "start": 21,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NML (NNP HBO) (NN TV)) (NN show)) (VP (VBN written) (PP (IN by) (NP (NNP Erik) (NNP jendresen)))))) (. ?)))",
        "mask_entity": "Name the [ENT] TV show written by [ENT] jendresen  ?",
        "entity": [
            "HBO",
            "Erik"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4646",
        "question": "How many different currencies are used in the places governed by the president of France?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/leaderTitle> <http://dbpedia.org/resource/President_of_France> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "SExpr": "(JOIN (R dbo:currency) (JOIN dbp:leaderTitle dbr:President_of_France)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different currencies",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "are used in [IQ1]",
                    "start": 30,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the places",
                                "start": 42,
                                "end": 52
                            },
                            {
                                "description": "governed by the president of France",
                                "start": 53,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ different) (NNS currencies)) (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (NP (DT the) (NNS places)) (VP (VBN governed) (PP (IN by) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP France))))))))))) (. ?)))",
        "mask_entity": "How many different currencies are used in the places governed by the president of [ENT]?",
        "entity": [
            "France"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "946",
        "question": "List the team for which Doug Acomb played ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri } ",
        "SExpr": "(JOIN (R dbp:playedFor) dbr:Doug_Acomb)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN team)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NNP Doug) (NNP Acomb)) (VP (VBD played)))))) (. ?)))",
        "mask_entity": "List the team for which [ENT] played ?",
        "entity": [
            "Doug Acomb"
        ],
        "compositionality_type": "simple"
    }
]