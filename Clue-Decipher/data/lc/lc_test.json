[
    {
        "ID": "1701",
        "question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:architect) dbr:Marine_Corps_Air_Station_Kaneohe_Bay) (JOIN (R dbo:tenant) dbr:New_Sanno_Hotel))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which architect of Marine Corps Air Station Kaneohe Bay",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "was also tenant of New Sanno hotel /'",
                    "start": 56,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WHNP (WDT Which) (NN architect)) (PP (IN of) (NP (NNP Marine) (NNP Corps) (NNP Air) (NNP Station) (NNP Kaneohe) (NNP Bay)))) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (NN tenant)) (PP (IN of) (NP (NML (NNP New) (NNP Sanno)) (NN hotel))))))) (. /')))",
        "mask_entity": "Which architect of [ENT] Air Station [ENT] was also tenant of [ENT] hotel /'",
        "entity": [
            "Marine Corps",
            "Kaneohe Bay",
            "New Sanno"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3293",
        "question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:PoliticalParty (JOIN dbp:international dbr:Muslim_Brotherhood))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sects",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "people are part of [IQ1]",
                    "start": 12,
                    "end": 108,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "local political parties",
                                "start": 31,
                                "end": 54
                            },
                            {
                                "description": "which fall under the International Muslim Brotherhood",
                                "start": 55,
                                "end": 108
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS sects) (NNS people)) (SQ (VP (VBP are) (NP (NP (NN part)) (PP (IN of) (NP (NP (JJ local) (JJ political) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (DT the) (NNP International) (NNP Muslim) (NNP Brotherhood))))))))))) (. ?)))",
        "mask_entity": "Which sects people are part of local political parties which fall under [ENT]?",
        "entity": [
            "the International Muslim Brotherhood"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2161",
        "question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:developer) dbr:Google_Videos) (JOIN (R dbo:author) dbr:Google_Web_Toolkit))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List common systems",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "are developed by of the Google Videos",
                    "start": 20,
                    "end": 57
                },
                {
                    "description": "and written by of the Google Web Toolkit",
                    "start": 58,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NN List) (JJ common) (NNS systems)) (VP (VBP are) (VP (VP (VBN developed) (PP (IN by) (PP (IN of) (NP (DT the) (NNP Google) (NNPS Videos))))) (CC and) (VP (VBN written) (PP (IN by) (PP (IN of) (NP (DT the) (NML (NNP Google) (NNP Web)) (NNP Toolkit))))))) (. ?)))",
        "mask_entity": "List common systems are developed by of [ENT] and written by of [ENT] ?",
        "entity": [
            "the Google Videos",
            "the Google Web Toolkit"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1136",
        "question": "For which games are Sam Loyd and Eric Schiller both famous?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:knownFor) dbr:Sam_Loyd) (JOIN (R dbo:knownFor) dbr:Eric_Schiller))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For which games are Sam Loyd and Eric Schiller both famous",
                    "start": 0,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NNS games)) (VP (VBP are) (NP (NP (NNP Sam) (NNP Loyd)) (CC and) (NP (NNP Eric) (NNP Schiller))) (ADJP (CC both) (JJ famous)))) (. ?)))",
        "mask_entity": "For which games are [ENT] and [ENT] both famous?",
        "entity": [
            "Sam Loyd",
            "Eric Schiller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "987",
        "question": "Is Peter Piper Pizza in the pizza industry?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Peter) (NNP Piper) (NNP Pizza)) (PP (IN in) (NP (DT the) (NN pizza) (NN industry))) (. ?)))",
        "mask_entity": "Is [ENT] in the pizza industry?",
        "entity": [
            "Peter Piper Pizza"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2549",
        "question": "Name the artist who made Dream Dancing and is often associated with Joe Pass?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joe_Pass> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Dream_Dancing_(album)> <http://dbpedia.org/property/artist> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Joe_Pass) (JOIN (R dbp:artist) dbr:Dream_Dancing_(album)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the artist",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "who made Dream Dancing",
                    "start": 16,
                    "end": 38
                },
                {
                    "description": "and is often associated with Joe Pass",
                    "start": 39,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD made) (NP (NN Dream) (NN Dancing))) (CC and) (VP (VBZ is) (ADVP (RB often)) (VP (VBN associated) (PP (IN with) (NP (NNP Joe) (NNP Pass)))))))))) (. ?)))",
        "mask_entity": "Name the artist who made [ENT] and is often associated with [ENT]?",
        "entity": [
            "Dream Dancing",
            "Joe Pass"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "193",
        "question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:deputy dbr:Neil_Brown_(Australian_politician)) (JOIN dbp:deputy dbr:Andrew_Peacock)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the office holder",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "with deputies as Neil Brown and Andrew Peacock",
                    "start": 25,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NNS deputies)) (PP (IN as) (NP (NP (NNP Neil) (NNP Brown)) (CC and) (NP (NNP Andrew) (NNP Peacock))))))))) (. ?)))",
        "mask_entity": "Who is the office holder with deputies as [ENT] and [ENT]?",
        "entity": [
            "Neil Brown",
            "Andrew Peacock"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3057",
        "question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:nationalOrigin) dbr:Focke-Wulf_Fw_260) (JOIN (R dbp:nationalOrigin) dbr:Start_+_Flug_H-101))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
                    "start": 0,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT these) (JJ popular) (NNS aeroplanes) (, -) (NNP Focke) (NNP Wulf) (CD 260)) (CC and) (NP (NNP Start) (SYM +) (NNP Flug) (NNP H) (CD 101))) (VP (VB originate))) (. ?)))",
        "mask_entity": "Where did these popular aeroplanes - Focke Wulf [ENT] and Start+Flug H 101 originate?",
        "entity": [
            "260"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3246",
        "question": "Which television show 's producer is Stephen E. Ambrose and written by Erik Jendresen?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:producer dbr:Stephen_E._Ambrose) (JOIN dbp:writer dbr:Erik_Jendresen)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which television show 's",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "producer is Stephen E. Ambrose",
                    "start": 25,
                    "end": 55
                },
                {
                    "description": "and written by Erik Jendresen",
                    "start": 56,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN television) (NN show) (POS 's)) (NN producer)) (VP (VP (VBZ is) (NP (NNP Stephen) (NNP E.) (NNP Ambrose))) (CC and) (VP (VBN written) (PP (IN by) (NP (NNP Erik) (NNP Jendresen))))) (. ?)))",
        "mask_entity": "Which television show 's producer is [ENT] and written by [ENT]?",
        "entity": [
            "Stephen E. Ambrose",
            "Erik Jendresen"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1394",
        "question": "Who created the Women in the Garden and also the L'Enfant a la tasse ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:Women_in_the_Garden) (JOIN (R dbp:artist) dbr:L'Enfant_a_la_tasse))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who created the Women in the Garden",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "and also the L'Enfant a la tasse",
                    "start": 36,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD created) (NP (DT the) (NNPS Women)) (PP (IN in) (NP (NP (DT the) (NNP Garden)) (CC and) (ADVP (RB also)) (NP (DT the) (NNP L'Enfant)))) (NP (DT a) (NNP la) (NN tasse)))) (. ?)))",
        "mask_entity": "Who created [ENT] and also the [ENT] a la tasse ?",
        "entity": [
            "the Women in the Garden",
            "L'Enfant"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2637",
        "question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/War_Of_Attrition_(horse)> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:race) dbr:War_Of_Attrition_(horse)) (JOIN (R dbp:race) dbr:Fergie_Sutherland))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which famous horserace",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "has seen both Fergie sutherland",
                    "start": 23,
                    "end": 54
                },
                {
                    "description": "and the illustrious War of Attrition",
                    "start": 55,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ famous) (NN horserace)) (SQ (VP (VBZ has) (VP (VBN seen) (NP (CC both) (NP (NNP Fergie) (NNP sutherland)) (CC and) (NP (NP (DT the) (JJ illustrious) (NNP War)) (PP (IN of) (NP (NNP Attrition)))))))) (. ?)))",
        "mask_entity": "Which famous horserace has seen both [ENT] sutherland and the illustrious [ENT]?",
        "entity": [
            "Fergie",
            "War of Attrition"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "768",
        "question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:artist dbr:Christopher_Franke) (JOIN dbo:network dbr:Prime_Time_Entertainment_Network)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Tell me the name of the Prime Time Entertainment Network's TV show",
                    "start": 0,
                    "end": 66
                },
                {
                    "description": "whose Artist is Christopher Franke",
                    "start": 67,
                    "end": 101
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Tell) (NP (PRP me)) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (NP (DT the) (NNP Prime) (NNP Time) (NNP Entertainment) (NNP Network) (POS 's)) (NN TV) (NN show)) (SBAR (WHNP (WP$ whose) (NNP Artist)) (S (VP (VBZ is) (NP (NNP Christopher) (NNP Franke))))))))) (. ?)))",
        "mask_entity": "Tell me the name of [ENT] TV show whose Artist is [ENT] ?",
        "entity": [
            "the Prime Time Entertainment Network's",
            "Christopher Franke"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4702",
        "question": "How many other battles have the military person fought whose one of the battles is World War II ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "SExpr": "(JOIN (R dbp:battles) (JOIN dbp:battles dbr:World_War_II)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other battles have [IQ1]",
                    "start": 0,
                    "end": 95,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the military person",
                                "start": 28,
                                "end": 47
                            },
                            {
                                "description": "fought whose one of the battles is World War II",
                                "start": 48,
                                "end": 95
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ other) (NNS battles)) (VP (VBP have) (NP (NP (DT the) (JJ military) (NN person)) (VP (VBN fought) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NNS battles)))) (S (VP (VBZ is) (NP (NNP World) (NNP War) (CD II))))))))) (. ?)))",
        "mask_entity": "How many other battles have the military person fought whose [ENT] of the battles is [ENT] ?",
        "entity": [
            "one",
            "World War II"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3090",
        "question": "Whose network's parent organisation is Comcast?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "SExpr": "(JOIN dbo:network (JOIN dbo:parentOrganisation dbr:Comcast)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose network's [IQ1]",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "parent organisation is Comcast",
                                "start": 16,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (WP$ Whose) (NN network) (POS 's)) (NN parent) (NN organisation)) (VP (VBZ is) (NP (NNP Comcast))) (. ?)))",
        "mask_entity": "Whose network's parent organisation is [ENT]?",
        "entity": [
            "Comcast"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3495",
        "question": "Is William H Blanchard buried in Colorado?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP William) (NNP H) (NNP Blanchard)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
        "mask_entity": "Is [ENT] buried in [ENT]?",
        "entity": [
            "William H Blanchard",
            "Colorado"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3215",
        "question": "Which cport of Vishwajyot High School is also the genere of Battle chess ",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:genre) dbr:Battle_Chess) (JOIN (R dbo:sport) dbr:Vishwajyot_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sport of Vishwajyot High School",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "is also the genre of Battle chess",
                    "start": 38,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN cport)) (PP (IN of) (NP (NNP Vishwajyot) (NNP High) (NNP School)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN genere)) (PP (IN of) (NP (NNP Battle) (NN chess))))))))",
        "mask_entity": "Which cport of [ENT] is also the genere of Battle chess ",
        "entity": [
            "Vishwajyot High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "285",
        "question": "In which state is the Channel district?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Channel_District> <http://dbpedia.org/ontology/state> ?uri } ",
        "SExpr": "(JOIN (R dbo:state) dbr:Channel_District)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN state)) (VP (VBZ is) (NP (DT the) (NNP Channel) (NN district)))) (. ?)))",
        "mask_entity": "In which state is [ENT]?",
        "entity": [
            "the Channel district"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4938",
        "question": "Who was in the missions of Apollo 11 and Gemini 8?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . }",
        "SExpr": "(AND (JOIN dbp:mission dbr:Apollo_11) (JOIN dbp:mission dbr:Gemini_8))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was in the missions of Apollo 11 and Gemini 8",
                    "start": 0,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (DT the) (NNS missions)) (PP (IN of) (NP (NP (NNP Apollo) (CD 11)) (CC and) (NP (NNP Gemini) (CD 8)))))))) (. ?)))",
        "mask_entity": "Who was in the missions of [ENT] and [ENT]?",
        "entity": [
            "Apollo 11",
            "Gemini 8"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "428",
        "question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
        "SExpr": "(JOIN (R dbo:tenant) (JOIN dbo:tenant dbr:Raptors_905)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of other tenant of [IQ1]",
                    "start": 0,
                    "end": 93,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadia",
                                "start": 44,
                                "end": 54
                            },
                            {
                                "description": "whose one of the tenant is Raptors 905",
                                "start": 55,
                                "end": 93
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN tenant)) (PP (IN of) (NP (NP (DT the) (NNS stadia)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN tenant))))) (S (VP (VBZ is) (NP (NNPS Raptors) (CD 905)))))))))))) (. ?)))",
        "mask_entity": "What is the total number of other tenant of the stadia whose [ENT] of the tenant is [ENT]?",
        "entity": [
            "one",
            "Raptors 905"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4448",
        "question": "Where can one find the Dzogchen Ponolop Rinpoche?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri } ",
        "SExpr": "(JOIN (R dbp:location) dbr:Dzogchen_Ponlop_Rinpoche)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (CD one)) (VP (VB find) (NP (DT the) (NNP Dzogchen) (NNP Ponolop) (NNP Rinpoche)))) (. ?)))",
        "mask_entity": "Where can one find the Dzogchen Ponolop Rinpoche?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2332",
        "question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:RoadTunnel (JOIN dbp:operator dbr:Massachusetts_Department_of_Transportation))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the stockholder of [IQ1]",
                    "start": 0,
                    "end": 101,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the road tunnels",
                                "start": 26,
                                "end": 42
                            },
                            {
                                "description": "operated by the Massachusetts Department of Transportation",
                                "start": 43,
                                "end": 101
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN stockholder)) (PP (IN of) (NP (NP (DT the) (NN road) (NNS tunnels)) (VP (VBN operated) (PP (IN by) (NP (NP (DT the) (NNP Massachusetts) (NNP Department)) (PP (IN of) (NP (NNP Transportation))))))))))) (. ?)))",
        "mask_entity": "Who is the stockholder of the road tunnels operated by [ENT]?",
        "entity": [
            "the Massachusetts Department of Transportation"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2717",
        "question": "What are the awards won by the film director of Saraband ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN (R dbo:director) dbr:Saraband)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the awards",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "won by [IQ1]",
                    "start": 20,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the film director of Saraband",
                                "start": 27,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Saraband))))))))) (. ?)))",
        "mask_entity": "What are the awards won by the film director of [ENT] ?",
        "entity": [
            "Saraband"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2079",
        "question": "What is the almamater of the president whose vice president was Enrique Jos Varona?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "SExpr": "(JOIN (R dbo:almaMater) (JOIN dbo:vicePresident dbr:Enrique_Jos\u00e9_Varona)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the almamater of [IQ1]",
                    "start": 0,
                    "end": 82,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the president",
                                "start": 25,
                                "end": 38
                            },
                            {
                                "description": "whose vice president was Enrique Jos Varona",
                                "start": 39,
                                "end": 82
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN almamater)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NN vice) (NN president)) (S (VP (VBD was) (NP (NNP Enrique) (NNP Jos) (NNP Varona)))))))))) (. ?)))",
        "mask_entity": "What is the almamater of the president whose vice president was [ENT]?",
        "entity": [
            "Enrique Jos Varona"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3389",
        "question": "What is the route end of Birmingham and Oxford Junction Railway ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
        "SExpr": "(JOIN (R dbo:routeEnd) dbr:Birmingham_and_Oxford_Junction_Railway)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NP (NNP Birmingham)) (CC and) (NP (NNP Oxford) (NNP Junction) (NNP Railway))))))) (. ?)))",
        "mask_entity": "What is the route end of [ENT] and [ENT] ?",
        "entity": [
            "Birmingham",
            "Oxford Junction Railway"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "722",
        "question": "Where did the Vitis Vinifera grapes originate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
        "SExpr": "(JOIN (R dbo:origin) (AND dbo:Grape (JOIN dbo:species dbr:Vitis_vinifera))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the [IQ1] originate",
                    "start": 0,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Vitis Vinifera grapes",
                                "start": 14,
                                "end": 35
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NML (NNP Vitis) (NNP Vinifera)) (NNS grapes)) (VP (VB originate))) (. ?)))",
        "mask_entity": "Where did the [ENT] Vinifera grapes originate?",
        "entity": [
            "Vitis"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "951",
        "question": "How many people are there whose children died in Indiana?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:child (JOIN dbo:deathPlace dbr:Indiana))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are there whose children [IQ1]",
                    "start": 16,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "died in Indiana",
                                "start": 41,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBD died) (PP (IN in) (NP (NNP Indiana))))))))) (. ?)))",
        "mask_entity": "How many people are there whose children died in [ENT]?",
        "entity": [
            "Indiana"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4383",
        "question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:militaryBranch) dbr:William_French_Smith) (JOIN (R dbp:branch) dbr:Pierre_R._Graham))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the military branch of the William French Smith",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "which is also the branch of Pierre R. Graham",
                    "start": 56,
                    "end": 100
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (DT the) (NNP William) (NNP French) (NNP Smith)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NNP Pierre) (NNP R.) (NNP Graham)))))))))) (. ?)))",
        "mask_entity": "What is the military branch of [ENT] which is also the branch of [ENT] ?",
        "entity": [
            "the William French Smith",
            "Pierre R. Graham"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4366",
        "question": "What is the river whose source is Lake Ontario?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Lake_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:source dbr:Lake_Ontario))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the river",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose source is Lake Ontario",
                    "start": 18,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source)) (S (VP (VBZ is) (NP (NNP Lake) (NNP Ontario)))))))) (. ?)))",
        "mask_entity": "What is the river whose source is [ENT]?",
        "entity": [
            "Lake Ontario"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2262",
        "question": "Whichlocation city of the Denver Broncos is the palce of birth of Steven Clark Cunningham ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:locationCity) dbr:Denver_Broncos) (JOIN (R dbo:birthPlace) dbr:Steven_Clark_Cunningham))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which location city of the Denver Broncos",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "is the place of birth of Steven Clark Cunningham",
                    "start": 42,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Whichlocation) (NN city)) (PP (IN of) (NP (DT the) (NNP Denver) (NNP Broncos)))) (VP (VBZ is) (NP (NP (DT the) (NN palce)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Steven) (NNP Clark) (NNP Cunningham))))))) (. ?)))",
        "mask_entity": "Whichlocation city of [ENT] is the palce of birth of [ENT] ?",
        "entity": [
            "the Denver Broncos",
            "Steven Clark Cunningham"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "989",
        "question": "What is the religion of the person who founded the Emel magazine?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:Person (JOIN (R dbp:founder) dbr:Emel_(magazine)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the religion of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 24,
                                "end": 34
                            },
                            {
                                "description": "who founded the Emel magazine",
                                "start": 35,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD founded) (NP (DT the) (NNP Emel) (NN magazine)))))))))) (. ?)))",
        "mask_entity": "What is the religion of the person who founded the [ENT] magazine?",
        "entity": [
            "Emel"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3212",
        "question": "Give the name of the  managers of England national under-20 football team and England national under-21 football team?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }",
        "SExpr": "(AND (JOIN dbp:managerclubs dbr:England_national_under-20_football_team) (JOIN dbp:managerclubs dbr:England_national_under-21_football_team))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
                    "start": 0,
                    "end": 116
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS managers)) (PP (IN of) (NP (NP (NNP England) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 20)))) (NN football) (NN team)) (CC and) (NP (NNP England) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 21)))) (NN football) (NN team)))))))) (. ?)))",
        "mask_entity": "Give the name of the  managers of [ENT] national under-[ENT] football team and [ENT] national under-21 football team?",
        "entity": [
            "England",
            "20",
            "England"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1759",
        "question": "How many cities are around the sea in which the the fig tree bay meets?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fig_Tree_Bay> <http://dbpedia.org/ontology/inflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(JOIN (R dbp:cities) (AND dbo:Sea (JOIN (R dbo:inflow) dbr:Fig_Tree_Bay))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are around [IQ1]",
                    "start": 16,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sea",
                                "start": 27,
                                "end": 34
                            },
                            {
                                "description": "in which the fig tree bay meets",
                                "start": 35,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cities)) (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (DT the) (DT the) (JJ fig) (NN tree) (NN bay)) (VP (VBZ meets)))))))) (. ?)))",
        "mask_entity": "How many cities are around the sea in which the the fig tree bay meets?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4579",
        "question": "is blue lagoon island a part of the bahamas achipelago?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ is)) (NP (JJ blue) (NN lagoon) (NN island)) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (DT the) (NNPS bahamas) (NN achipelago)))) (. ?)))",
        "mask_entity": "is blue lagoon island a part of the bahamas achipelago?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "326",
        "question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:distributor dbr:RKO_Pictures) (JOIN dbo:musicComposer dbr:Bernard_Herrmann)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "distributed by RKO Pictures",
                    "start": 16,
                    "end": 43
                },
                {
                    "description": "and has music composer as Bernard Herrmann",
                    "start": 44,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NNS movies)) (VP (VBN distributed) (PP (IN by) (NP (NNP RKO) (NNPS Pictures)))))) (CC and) (VP (VBZ has) (NP (NP (NN music) (NN composer)) (PP (IN as) (NP (NNP Bernard) (NNP Herrmann)))))) (. ?)))",
        "mask_entity": "Name the movies distributed by [ENT] and has music composer as [ENT]?",
        "entity": [
            "RKO Pictures",
            "Bernard Herrmann"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2608",
        "question": "Did the New Way party merge in the One Israel party?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/New_Way_(Israel)> <http://dbpedia.org/ontology/mergedIntoParty> <http://dbpedia.org/resource/One_Israel> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (DT the) (NML (NNP New) (NNP Way)) (NN party)) (VP (VB merge) (PP (IN in) (NP (DT the) (NML (CD One) (NNP Israel)) (NN party)))) (. ?)))",
        "mask_entity": "Did [ENT] merge in the [ENT] [ENT] party?",
        "entity": [
            "the New Way party",
            "One",
            "Israel"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1383",
        "question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
        "SExpr": "(AND dbo:FormulaOneRacer (JOIN (R dbo:poleDriver) (JOIN dbo:firstDriver dbr:Damon_Hill))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many pole drivers",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "have been there in [IQ1]",
                    "start": 22,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "grand prixes",
                                "start": 41,
                                "end": 53
                            },
                            {
                                "description": "where first driver was Damon Hill",
                                "start": 54,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN pole) (NNS drivers)) (VP (VBP have) (VP (VBN been) (ADVP (RB there)) (PP (IN in) (NP (NP (JJ grand) (NNS prixes)) (SBAR (WHADVP (WRB where)) (S (NP (JJ first) (NN driver)) (VP (VBD was) (NP (NNP Damon) (NNP Hill)))))))))) (. ?)))",
        "mask_entity": "How many pole drivers have been there in grand prixes where [ENT] driver was [ENT]?",
        "entity": [
            "first",
            "Damon Hill"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1724",
        "question": "Where are jockeys in Dubai World Cup from?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/race> <http://dbpedia.org/resource/Dubai_World_Cup> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
        "SExpr": "(JOIN (R dbp:birthPlace) (AND dbo:Jockey (JOIN dbo:race dbr:Dubai_World_Cup))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where are [IQ1] from",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "jockeys",
                                "start": 10,
                                "end": 17
                            },
                            {
                                "description": "in Dubai World Cup",
                                "start": 18,
                                "end": 36
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NP (NNS jockeys)) (PP (IN in) (NP (NNP Dubai) (NNP World) (NNP Cup))) (PP (IN from)))) (. ?)))",
        "mask_entity": "Where are jockeys in [ENT] from?",
        "entity": [
            "Dubai World Cup"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1086",
        "question": "Who owns the newspaper which was founded by Nehru?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "SExpr": "(JOIN (R dbo:owner) (AND dbo:Newspaper (JOIN dbp:founder dbr:Jawaharlal_Nehru))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the newspaper",
                                "start": 9,
                                "end": 22
                            },
                            {
                                "description": "which was founded by Nehru",
                                "start": 23,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN newspaper)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Nehru)))))))))) (. ?)))",
        "mask_entity": "Who owns the newspaper which was founded by [ENT]?",
        "entity": [
            "Nehru"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2523",
        "question": "To which places do the flights go by airlines headquartered in the UK?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/United_Kingdom> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(JOIN (R dbp:destinations) (AND dbo:Airline (JOIN dbp:headquarters dbr:United_Kingdom))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which places",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "do the flights go by [IQ1]",
                    "start": 16,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "airlines",
                                "start": 37,
                                "end": 45
                            },
                            {
                                "description": "headquartered in the UK",
                                "start": 46,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NNS places)) (VP (VBP do) (NP (DT the) (NNS flights)) (S (VP (VB go) (PP (IN by) (NP (NP (NNS airlines)) (VP (VBN headquartered) (PP (IN in) (NP (DT the) (NNP UK)))))))))) (. ?)))",
        "mask_entity": "To which places do the flights go by airlines headquartered in the [ENT]?",
        "entity": [
            "UK"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "341",
        "question": "What is the magazine which have been  founded by Ralph J. Gleason?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbo:founder dbr:Ralph_J._Gleason))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the magazine",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "which have been founded by Ralph J. Gleason",
                    "start": 21,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN magazine)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN founded) (PP (IN by) (NP (NNP Ralph) (NNP J.) (NNP Gleason))))))))))) (. ?)))",
        "mask_entity": "What is the magazine which have been  founded by [ENT]?",
        "entity": [
            "Ralph J. Gleason"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3701",
        "question": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Seattle)) (NP (NP (DT the) (NNP Ship) (NN builder)) (PP (IN of) (NP (NP (NNP USS) (NNP Marmora)) (PP (-LRB- () (NP (NP (CD IX)) (PP (SYM -) (NP (CD 189)))))))) (VP (-RRB- ))) (. ?)))",
        "mask_entity": "Is [ENT] the Ship builder of [ENT] (IX-189)?",
        "entity": [
            "Seattle",
            "USS Marmora"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "147",
        "question": "Is Tirana the largest city of Albania?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Tirana)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Albania)))) (. ?)))",
        "mask_entity": "Is [ENT] the largest city of [ENT]?",
        "entity": [
            "Tirana",
            "Albania"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "688",
        "question": "In which cities can the beverage related to Barq's be found?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . }",
        "SExpr": "(JOIN (R dbp:locationCity) (JOIN (R dbo:related) dbr:Barq's)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "can [IQ1] be found",
                    "start": 16,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the beverage related to Barq's",
                                "start": 20,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS cities)) (VP (MD can) (NP (DT the) (NN beverage)) (VP (VBN related) (PP (IN to) (S (NP (NNP Barq) (POS 's)) (VP (VB be) (VP (VBN found)))))))) (. ?)))",
        "mask_entity": "In which cities can the beverage related to [ENT]'s be found?",
        "entity": [
            "Barq"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3432",
        "question": "What is the birth place of the astronaut whose mission was the Vostok programmer?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Vostok_programme> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "SExpr": "(JOIN (R dbo:birthPlace) (AND dbo:Astronaut (JOIN dbp:mission dbr:Vostok_programme))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birth place of [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the astronaut",
                                "start": 27,
                                "end": 40
                            },
                            {
                                "description": "whose mission was the Vostok programmer",
                                "start": 41,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (DT the) (NN astronaut)) (SBAR (WHNP (WP$ whose) (NN mission)) (S (VP (VBD was) (NP (DT the) (NNP Vostok) (NN programmer)))))))))) (. ?)))",
        "mask_entity": "What is the birth place of the astronaut whose mission was the [ENT] programmer?",
        "entity": [
            "Vostok"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1107",
        "question": "Count everyone who studied at an institute which are in Suburbs?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
        "SExpr": "(JOIN dbp:education (JOIN dbo:campus dbr:Suburb)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count everyone",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "who studied at [IQ1]",
                    "start": 15,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "an institute",
                                "start": 30,
                                "end": 42
                            },
                            {
                                "description": "which are in Suburbs",
                                "start": 43,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBD studied) (PP (IN at) (NP (NP (DT an) (NN institute)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN in) (NP (NNPS Suburbs))))))))))))) (. ?)))",
        "mask_entity": "Count everyone who studied at an institute which are in [ENT]?",
        "entity": [
            "Suburbs"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "848",
        "question": "Where did Whitney Wistert debut?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Whitey_Wistert> <http://dbpedia.org/property/debutteam> ?uri } ",
        "SExpr": "(JOIN (R dbp:debutteam) dbr:Whitey_Wistert)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Whitney) (NNP Wistert)) (VP (NN debut))) (. ?)))",
        "mask_entity": "Where did [ENT] debut?",
        "entity": [
            "Whitney Wistert"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "966",
        "question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "SExpr": "(JOIN (R dbp:majorShrine) (AND dbo:Monarch (JOIN dbo:successor dbr:Dragimir_of_Travunia_and_Zachlumia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the major shrine of [IQ1]",
                    "start": 0,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the monarchs",
                                "start": 28,
                                "end": 40
                            },
                            {
                                "description": "whose successor is Dragimir of Travunia and Zachlumia",
                                "start": 41,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ major) (NN shrine)) (PP (IN of) (NP (NP (DT the) (NNS monarchs)) (SBAR (WHNP (WP$ whose) (NN successor)) (S (VP (VBZ is) (NP (NP (NNP Dragimir)) (PP (IN of) (NP (NNP Travunia) (CC and) (NNP Zachlumia)))))))))))) (. ?)))",
        "mask_entity": "What is the major shrine of the monarchs whose successor is [ENT] and [ENT]?",
        "entity": [
            "Dragimir of Travunia",
            "Zachlumia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4727",
        "question": "How many television shows have  Fox Broadcasting Company as their channel?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:channel dbr:Fox_Broadcasting_Company))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many television shows",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "have Fox Broadcasting Company as their channel",
                    "start": 26,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN television) (NNS shows)) (VP (VBP have) (NP (NNP Fox) (NNP Broadcasting) (NN Company)) (PP (IN as) (NP (PRP$ their) (NN channel))))) (. ?)))",
        "mask_entity": "How many television shows have  [ENT] as their channel?",
        "entity": [
            "Fox Broadcasting Company"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1492",
        "question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbp:mouthLocation dbr:Arctic_Ocean) (JOIN dbp:mouthLocation dbr:Laptev_Sea)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the river",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose mouth locations are Arctic Ocean and Laptev Sea",
                    "start": 18,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN mouth) (NNS locations)) (S (VP (VBP are) (NP (NP (NNP Arctic) (NNP Ocean)) (CC and) (NP (NNP Laptev) (NNP Sea))))))))) (. ?)))",
        "mask_entity": "What is the river whose mouth locations are [ENT] and [ENT]?",
        "entity": [
            "Arctic Ocean",
            "Laptev Sea"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3953",
        "question": "What are some wars fought when Chung Il Kwon as the country's prime minister?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Il-kwon> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(AND dbo:MilitaryConflict (JOIN dbo:commander (JOIN dbp:primeminister dbr:Chung_Il-kwon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some wars",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "fought [IQ1]",
                    "start": 19,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "when Chung Il Kwon as the country's prime minister",
                                "start": 26,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS wars)) (VP (VBN fought) (SBAR (WHADVP (WRB when)) (S (NP (NP (NNP Chung) (NNP Il) (NNP Kwon)) (PP (IN as) (NP (NP (DT the) (NN country) (POS 's)) (JJ prime) (NN minister)))) (. ?)))))))))",
        "mask_entity": "What are some wars fought when [ENT] as the country's prime minister?",
        "entity": [
            "Chung Il Kwon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2203",
        "question": "Where was the person born who died in Bryn Mawr Hospital?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "SExpr": "(JOIN (R dbp:placeOfBirth) (JOIN dbp:placeOfDeath dbr:Bryn_Mawr_Hospital)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was the person born [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who died in Bryn Mawr Hospital",
                                "start": 26,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN person)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Bryn) (NNP Mawr) (NNP Hospital)))))))) (. ?)))",
        "mask_entity": "Where was the person born who died in [ENT]?",
        "entity": [
            "Bryn Mawr Hospital"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2713",
        "question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:religion) dbr:Ajith_Perera) (JOIN (R dbp:religiousAffiliation) dbr:Neungin_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the faith of the Ajith Perera",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "and religious affiliation of the Neungin High School",
                    "start": 38,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NP (DT the) (NNP Ajith) (NNP Perera)) (CC and) (NP (NP (JJ religious) (NN affiliation)) (PP (IN of) (NP (DT the) (NNP Neungin) (NNP High) (NNP School))))))))) (. ?)))",
        "mask_entity": "What is the faith of [ENT] and religious affiliation of [ENT]?",
        "entity": [
            "the Ajith Perera",
            "the Neungin High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "661",
        "question": "Who was in military unit which played the role of Air interdiction?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
        "SExpr": "(JOIN dbo:militaryUnit (JOIN dbp:role dbr:Air_interdiction)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was in military unit",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "which played [IQ1]",
                    "start": 25,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the role of Air interdiction",
                                "start": 38,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (JJ military) (NN unit)) (SBAR (WHNP (WDT which)) (S (VP (VBD played) (NP (NP (DT the) (NN role)) (PP (IN of) (NP (NNP Air) (NN interdiction))))))))))) (. ?)))",
        "mask_entity": "Who was in military unit which played the role of Air interdiction?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1002",
        "question": "Who are the current members of Insects vs Robots?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri } ",
        "SExpr": "(JOIN (R dbp:currentMembers) dbr:Insects_vs_Robots)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ current) (NNS members)) (PP (IN of) (NP (NNPS Insects))) (PP (IN vs) (NP (NNPS Robots)))))) (. ?)))",
        "mask_entity": "Who are the current members of [ENT]?",
        "entity": [
            "Insects vs Robots"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "62",
        "question": "Is Ombla originate in Croatia?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Croatia> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Ombla)) (VP (VB originate) (PP (IN in) (NP (NNP Croatia)))) (. ?)))",
        "mask_entity": "Is Ombla originate in [ENT]?",
        "entity": [
            "Croatia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "284",
        "question": "Greater Napanee is the home town of what people?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:hometown dbr:Greater_Napanee))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Greater Napanee is the home town of",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "what people",
                    "start": 36,
                    "end": 47
                }
            ]
        },
        "constituency": "(ROOT (S (NP (JJ Greater) (NNP Napanee)) (VP (VBZ is) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (SBAR (WHNP (WDT what)) (S (NP (NNS people)) (. ?))))))))",
        "mask_entity": "[ENT] is the home town of what people?",
        "entity": [
            "Greater Napanee"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2224",
        "question": "What place did Edwin Adams die at, which gave birth to William A Purtell?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:placeOfDeath) dbr:Edwin_Adams_(politician)) (JOIN (R dbo:birthPlace) dbr:William_A._Purtell))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What place",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "did Edwin Adams die at,",
                    "start": 11,
                    "end": 34
                },
                {
                    "description": "which gave birth to William A Purtell",
                    "start": 35,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN place)) (SQ (VBD did) (NP (NNP Edwin) (NNP Adams)) (VP (VP (VB die) (PP (IN at))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP William) (NNP A) (NNP Purtell)))))))) (. ?)))",
        "mask_entity": "What place did [ENT] die at, which gave birth to [ENT]?",
        "entity": [
            "Edwin Adams",
            "William A Purtell"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4706",
        "question": "Name the nationalteam of Trn Vit Hng ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng> <http://dbpedia.org/property/nationalteam> ?uri } ",
        "SExpr": "(JOIN (R dbp:nationalteam) dbr:Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN nationalteam)) (PP (IN of) (NP (NNP Trn) (NNP Vit) (NNP Hng))))) (. ?)))",
        "mask_entity": "Name the nationalteam of Trn Vit Hng ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1879",
        "question": "Which designer of RENFE also owns Renaissance Center ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/owner> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:designer) dbr:RENFE_Class_333) (JOIN (R dbp:owner) dbr:Renaissance_Center))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which designer of RENFE",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "also owns Renaissance Center",
                    "start": 24,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN designer)) (PP (IN of) (NP (NNP RENFE)))) (S (ADVP (RB also)) (VP (VBZ owns) (NP (NNP Renaissance) (NNP Center)))) (. ?)))",
        "mask_entity": "Which designer of [ENT] also owns [ENT] ?",
        "entity": [
            "RENFE",
            "Renaissance Center"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3572",
        "question": "Whihc uni did Joshua A. Siegel attend ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri } ",
        "SExpr": "(JOIN (R dbp:education) dbr:Joshua_A._Siegel)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (DT Whihc) (NN uni)) (VP (VBD did) (S (NP (NNP Joshua) (NNP A.) (NNP Siegel)) (VP (VB attend)))) (. ?)))",
        "mask_entity": "Whihc uni did [ENT] attend ?",
        "entity": [
            "Joshua A. Siegel"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4857",
        "question": "How many books are written by the author who is famous for Novelas Ejemplares?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (JOIN dbo:author (JOIN dbo:notableWork dbr:Novelas_ejemplares))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many books",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "are written by [IQ1]",
                    "start": 15,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the author",
                                "start": 30,
                                "end": 40
                            },
                            {
                                "description": "who is famous for Novelas Ejemplares",
                                "start": 41,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS books)) (VP (VBP are) (VP (VBN written) (PP (IN by) (NP (NP (DT the) (NN author)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADJP (JJ famous)) (PP (IN for) (NP (NNP Novelas) (NNPS Ejemplares))))))))))) (. ?)))",
        "mask_entity": "How many books are written by the author who is famous for [ENT]?",
        "entity": [
            "Novelas Ejemplares"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1203",
        "question": "Name the rivers who originate from Essex?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:mouthPlace dbr:Essex))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the rivers",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "who originate from Essex",
                    "start": 16,
                    "end": 40
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (SBAR (WHNP (WP who)) (S (VP (VBP originate) (PP (IN from) (NP (NNP Essex)))))))) (. ?)))",
        "mask_entity": "Name the rivers who originate from [ENT]?",
        "entity": [
            "Essex"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1990",
        "question": "Companies founded in Taiwan have typically which divisions?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Taiwan> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:division) (AND dbo:Company (JOIN dbo:foundationPlace dbr:Taiwan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have typically which divisions",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Companies",
                                "start": 0,
                                "end": 9
                            },
                            {
                                "description": "founded in Taiwan",
                                "start": 10,
                                "end": 27
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS Companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Taiwan))))) (VP (VBP have) (ADVP (RB typically)) (SBAR (WHNP (WDT which) (NNS divisions)) (. ?)))))",
        "mask_entity": "Companies founded in [ENT] have typically which divisions?",
        "entity": [
            "Taiwan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "24",
        "question": "Did Timm Gunn guest in Sunrise (HIMYM)?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Did)) (NP (NP (NNP Timm) (NNP Gunn) (NN guest)) (PP (IN in) (NP (NNP Sunrise)))) (VP (-LRB- () (NP (NNP HIMYM) (-RRB- )))) (. ?)))",
        "mask_entity": "Did [ENT] guest in [ENT] (HIMYM)?",
        "entity": [
            "Timm Gunn",
            "Sunrise"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4852",
        "question": "to which university did both, the Stanford Cardinal and Gerald Reaven go?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:university) dbr:Stanford_Cardinal) (JOIN (R dbo:institution) dbr:Gerald_Reaven))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "to which university",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "did both, the Stanford Cardinal and Gerald Reaven go",
                    "start": 20,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NN university)) (VP (VBD did) (NP (DT both))))) (, ,) (NP (DT the) (NML (NML (NNP Stanford) (NNP Cardinal)) (CC and) (NML (NNP Gerald) (NNP Reaven)))) (VP (VBP go)) (. ?)))",
        "mask_entity": "to which university did both, [ENT] and [ENT] go?",
        "entity": [
            "the Stanford Cardinal",
            "Gerald Reaven"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4102",
        "question": "Name the nearest city to David W. Brown House ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbo:nearestCity) dbr:David_W._Brown_House)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (IN to) (NP (NNP David) (NNP W.) (NNP Brown) (NNP House)))) (. ?)))",
        "mask_entity": "Name the nearest city to [ENT] ?",
        "entity": [
            "David W. Brown House"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4167",
        "question": "where did Deion Sanders debut?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri } ",
        "SExpr": "(JOIN (R dbp:debutteam) dbr:Deion_Sanders)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB where)) (SQ (VBD did) (NP (NNP Deion) (NNP Sanders)) (VP (NN debut))) (. ?)))",
        "mask_entity": "where did [ENT] debut?",
        "entity": [
            "Deion Sanders"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "762",
        "question": "What cities are nearer to Fuountain Lake Farm?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbp:nearestCity) dbr:Fountain_Lake_Farm)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (ADJP (JJR nearer) (PP (IN to) (NP (NNP Fuountain) (NNP Lake) (NNP Farm)))))) (. ?)))",
        "mask_entity": "What cities are nearer to [ENT]?",
        "entity": [
            "Fuountain Lake Farm"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "875",
        "question": "Who are the characters of Batman Live?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri } ",
        "SExpr": "(JOIN (R dbp:characters) dbr:Batman_Live)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NNP Batman) (NNP Live)))))) (. ?)))",
        "mask_entity": "Who are the characters of [ENT]?",
        "entity": [
            "Batman Live"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4742",
        "question": "Which artists trained in San Francisco Art Institute?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(AND dbo:Artist (JOIN dbp:training dbr:San_Francisco_Art_Institute))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which artists",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "trained in San Francisco Art Institute",
                    "start": 14,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS artists)) (S (VP (VBN trained) (PP (IN in) (NP (NML (NNP San) (NNP Francisco)) (NNP Art) (NNP Institute))))) (. ?)))",
        "mask_entity": "Which artists trained in [ENT]?",
        "entity": [
            "San Francisco Art Institute"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "938",
        "question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:owningOrganisation) dbr:Ford_Kansas_City_Assembly_Plant) (JOIN (R dbo:manufacturer) dbr:Ford_Y-block_engine))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the owning organisation of the Ford Kansas City Assembly Plant",
                    "start": 0,
                    "end": 70
                },
                {
                    "description": "and also the builder of the Ford Y-block engine",
                    "start": 71,
                    "end": 118
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owning) (NN organisation)) (PP (IN of) (NP (NP (DT the) (NML (NML (NNP Ford) (NNP Kansas)) (NNP City)) (NNP Assembly) (NNP Plant)) (CC and) (ADVP (RB also)) (NP (NP (DT the) (NN builder)) (PP (IN of) (NP (DT the) (NML (NNP Ford) (NNP Y-block)) (NN engine))))))))) (. ?)))",
        "mask_entity": "What is the owning organisation of [ENT] and also the builder of the [ENT] [ENT] engine?",
        "entity": [
            "the Ford Kansas City Assembly Plant",
            "Ford",
            "Y-block"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2687",
        "question": "Name the country with currency as Aureus ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbo:currency dbr:Aureus))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with currency as Aureus",
                    "start": 17,
                    "end": 40
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN country)) (PP (IN with) (NP (NP (NN currency)) (PP (IN as) (NP (NNP Aureus)))))) (. ?)))",
        "mask_entity": "Name the country with currency as [ENT] ?",
        "entity": [
            "Aureus"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3600",
        "question": "what awards have been given to A. Peter Dewey?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/ontology/award> ?uri } ",
        "SExpr": "(JOIN (R dbo:award) dbr:A._Peter_Dewey)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT what)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NNP A.) (NNP Peter) (NNP Dewey))))))) (. ?)))",
        "mask_entity": "what awards have been given to [ENT]?",
        "entity": [
            "A. Peter Dewey"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2394",
        "question": "How many shows belong to the network one of whose sister station is Cartoonite?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:network (JOIN dbo:sisterStation dbr:Cartoonito))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many shows",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "belong to [IQ1]",
                    "start": 15,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the network",
                                "start": 25,
                                "end": 36
                            },
                            {
                                "description": "one of whose sister station is Cartoonite",
                                "start": 37,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS shows)) (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN network)) (NP (NP (CD one)) (PP (IN of) (SBAR (WHNP (WP$ whose) (NN sister) (NN station)) (S (VP (VBZ is) (NP (NNP Cartoonite))))))))))) (. ?)))",
        "mask_entity": "How many shows belong to the network one of whose sister station is Cartoonite?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4567",
        "question": "what has been developed by John Fanning?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)> } ",
        "SExpr": "(JOIN dbo:developer dbr:John_Fanning_(businessman))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP what)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN developed) (PP (IN by) (NP (NNP John) (NNP Fanning))))))) (. ?)))",
        "mask_entity": "what has been developed by [ENT]?",
        "entity": [
            "John Fanning"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4980",
        "question": "Muhammad Yunus has won how many awards?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) dbr:Muhammad_Yunus)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Muhammad) (NNP Yunus)) (VP (VBZ has) (VP (VBN won) (SBAR (WHNP (WHADJP (WRB how) (JJ many)) (NNS awards)) (. ?))))))",
        "mask_entity": "[ENT] has won how many awards?",
        "entity": [
            "Muhammad Yunus"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4124",
        "question": "List the associates of bands which have a label by Motown ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "SExpr": "(JOIN (R dbp:associatedActs) (AND dbo:Band (JOIN dbo:recordLabel dbr:Motown))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the associates of [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "bands",
                                "start": 23,
                                "end": 28
                            },
                            {
                                "description": "which have a label by Motown",
                                "start": 29,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS associates)) (PP (IN of) (NP (NP (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN label)) (PP (IN by) (NP (NNP Motown))))))))))) (. ?)))",
        "mask_entity": "List the associates of bands which have a label by [ENT] ?",
        "entity": [
            "Motown"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4564",
        "question": "Who wrote the musical whose composer is Emil Dean Zoghby?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Emil_Dean_Zoghby> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "SExpr": "(JOIN (R dbo:author) (AND dbo:Musical (JOIN dbo:musicBy dbr:Emil_Dean_Zoghby))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the musical",
                                "start": 10,
                                "end": 21
                            },
                            {
                                "description": "whose composer is Emil Dean Zoghby",
                                "start": 22,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD wrote) (NP (NP (DT the) (NN musical)) (SBAR (WHNP (WP$ whose) (NN composer)) (S (VP (VBZ is) (NP (NNP Emil) (NNP Dean) (NNP Zoghby)))))))) (. ?)))",
        "mask_entity": "Who wrote the musical whose composer is [ENT]?",
        "entity": [
            "Emil Dean Zoghby"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "385",
        "question": "Count the units garrisoned at Arlington County, Virginia.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (JOIN dbo:garrison dbr:Arlington_County,_Virginia))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the units",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "garrisoned at Arlington County, Virginia",
                    "start": 16,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS units)) (VP (VBN garrisoned) (PP (IN at) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia))))))) (. .)))",
        "mask_entity": "Count the units garrisoned at [ENT], [ENT].",
        "entity": [
            "Arlington County",
            "Virginia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3877",
        "question": "What is the faith of Kwai Chang Caine ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?uri } ",
        "SExpr": "(JOIN (R dbo:religion) dbr:Kwai_Chang_Caine)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NNP Kwai) (NNP Chang) (NNP Caine)))))) (. ?)))",
        "mask_entity": "What is the faith of [ENT] ?",
        "entity": [
            "Kwai Chang Caine"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4370",
        "question": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
        "SExpr": "(AND (JOIN dbp:relatives dbr:Kelly_Osbourne) (JOIN dbp:relatives dbr:Ozzy_Osbourne))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is related to Kelly Osbourne & Ozzy Osbourne",
                    "start": 0,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (ADJP (JJ related) (PP (IN to) (NP (NNP Kelly) (NNP Osbourne) (CC &) (NNP Ozzy) (NNP Osbourne)))))) (. ?)))",
        "mask_entity": "Who is  related to [ENT] & [ENT]?",
        "entity": [
            "Kelly Osbourne",
            "Ozzy Osbourne"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4569",
        "question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pullaiahgaripalli> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
        "SExpr": "(JOIN (R dbp:houses) (AND dbo:Legislature (JOIN (R dbp:leaderTitle) dbr:Pullaiahgaripalli))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the houses of [IQ1]",
                    "start": 0,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the legislature",
                                "start": 23,
                                "end": 38
                            },
                            {
                                "description": "where the leader is called Pullaiahgaripalli",
                                "start": 39,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS houses)) (PP (IN of) (NP (NP (DT the) (NN legislature)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN leader)) (VP (VBZ is) (VP (VBN called) (S (NP (NNP Pullaiahgaripalli)))))))))))) (. ?)))",
        "mask_entity": "What are the houses of the legislature where the leader is called [ENT] ?",
        "entity": [
            "Pullaiahgaripalli"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "536",
        "question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:servingRailwayLine) dbr:Daund_Junction_railway_station) (JOIN (R dbp:recorded) dbr:99_(2009_film)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which serving railway line of the Daund Junction railway station",
                    "start": 0,
                    "end": 64
                },
                {
                    "description": "was also the place",
                    "start": 65,
                    "end": 83
                },
                {
                    "description": "where 99 (2009 film) was recorded",
                    "start": 84,
                    "end": 117
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (VBG serving) (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NML (NNP Daund) (NNP Junction)) (NN railway) (NN station)))) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (CD 99) (-LRB- () (CD 2009) (NN film) (-RRB- ))) (VP (VBD was) (VP (VBN recorded)))))))) (. ?)))",
        "mask_entity": "Which serving railway line of the [ENT] railway station was also the place where [ENT] ([ENT] film) was recorded ?",
        "entity": [
            "Daund Junction",
            "99",
            "2009"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2291",
        "question": "List the ethnicity of Riley Reid?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri } ",
        "SExpr": "(JOIN (R dbp:ethnicity) dbr:Riley_Reid)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN ethnicity)) (PP (IN of) (NP (NNP Riley) (NNP Reid))))) (. ?)))",
        "mask_entity": "List the ethnicity of [ENT]?",
        "entity": [
            "Riley Reid"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4665",
        "question": "Which shows are from a company whose subsidiary is Viacom Productions?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:company (JOIN dbo:subsidiary dbr:Viacom_Productions))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which shows",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are from [IQ1]",
                    "start": 12,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a company",
                                "start": 21,
                                "end": 30
                            },
                            {
                                "description": "whose subsidiary is Viacom Productions",
                                "start": 31,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS shows)) (SQ (VP (VBP are) (PP (IN from) (NP (NP (DT a) (NN company)) (SBAR (WHNP (WP$ whose) (NN subsidiary)) (S (VP (VBZ is) (NP (NNP Viacom) (NNPS Productions))))))))) (. ?)))",
        "mask_entity": "Which shows are from a company whose subsidiary is [ENT]?",
        "entity": [
            "Viacom Productions"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3874",
        "question": " Giuseppe Bertello and Pietro Parolin are leaders of which place ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (AND (JOIN dbo:leader dbr:Giuseppe_Bertello) (JOIN dbo:leader dbr:Pietro_Parolin)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Giuseppe Bertello and Pietro Parolin are leaders of",
                    "start": 0,
                    "end": 51
                },
                {
                    "description": "which place",
                    "start": 52,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Giuseppe) (NNP Bertello)) (CC and) (NP (NNP Pietro) (NNP Parolin))) (VP (VBP are) (NP (NP (NNS leaders)) (WHPP (IN of) (WHNP (WDT which) (NN place))))) (. ?)))",
        "mask_entity": " [ENT] and [ENT] are leaders of which place ?",
        "entity": [
            "Giuseppe Bertello",
            "Pietro Parolin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "936",
        "question": "What is the university whose campus is Mount Moosilauke?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (JOIN dbo:campus dbr:Mount_Moosilauke))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the university",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose campus is Mount Moosilauke",
                    "start": 23,
                    "end": 55
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (NP (NNP Mount) (NNP Moosilauke)))))))) (. ?)))",
        "mask_entity": "What is the university whose campus is [ENT]?",
        "entity": [
            "Mount Moosilauke"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3737",
        "question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:EthnicGroup (JOIN (R dbp:architecturalStyle) dbr:Sanggar_Agung))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religions",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are followed by [IQ1]",
                    "start": 19,
                    "end": 99,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the group",
                                "start": 35,
                                "end": 44
                            },
                            {
                                "description": "whose architectural style can be seen on Sanggar Agung",
                                "start": 45,
                                "end": 99
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS religions)) (VP (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN group)) (SBAR (WHNP (WP$ whose) (JJ architectural) (NN style)) (S (VP (MD can) (VP (VB be) (VP (VBN seen) (PP (IN on) (NP (NNP Sanggar) (NNP Agung))))))))))))) (. ?)))",
        "mask_entity": "How many religions are followed by the group whose architectural style can be seen on [ENT]?",
        "entity": [
            "Sanggar Agung"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4728",
        "question": "How many things are written in C++?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . }",
        "SExpr": "(JOIN dbp:programmingLanguage dbr:C++)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP are) (VP (VBN written) (PP (IN in) (NP (NNP C))))))) (. ++?)))",
        "mask_entity": "How many things are written in C++?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2360",
        "question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:garrison) dbr:Western_Naval_Command) (JOIN (R dbp:line) dbr:Vadodara_Junction_railway_station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the garrison of the Western Naval Command",
                    "start": 0,
                    "end": 46
                },
                {
                    "description": "and line of the Vadodara Junction railway station",
                    "start": 47,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN garrison)) (PP (IN of) (NP (DT the) (NML (NNP Western) (NNP Naval)) (NNP Command)))) (CC and) (NP (NP (NN line)) (PP (IN of) (NP (DT the) (NML (NNP Vadodara) (NNP Junction)) (NN railway) (NN station)))))) (. ?)))",
        "mask_entity": "Name the garrison of [ENT] and line of the [ENT] railway station ?",
        "entity": [
            "the Western Naval Command",
            "Vadodara Junction"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3507",
        "question": "Who are the shareholder of the soccer club for whom Steve Holland plays?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
        "SExpr": "(JOIN (R dbp:owner) (JOIN (R dbp:currentclub) dbr:Steve_Holland_(footballer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the shareholder of [IQ1]",
                    "start": 0,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the soccer club",
                                "start": 27,
                                "end": 42
                            },
                            {
                                "description": "for whom Steve Holland plays",
                                "start": 43,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NN shareholder)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (SBAR (WHPP (IN for) (WHNP (WP whom))) (S (NP (NNP Steve) (NNP Holland)) (VP (VBZ plays))))))))) (. ?)))",
        "mask_entity": "Who are the shareholder of the soccer club for whom [ENT] plays?",
        "entity": [
            "Steve Holland"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "201",
        "question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:stadium) dbr:2014\u201315_Panionios_G.S.S._season) (JOIN (R dbp:cities) dbr:Mediterranean_Sea))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "located on Mediterranean Sea",
                    "start": 11,
                    "end": 39
                },
                {
                    "description": "is also the stadium of Panionios G.S.S. season",
                    "start": 40,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN city)) (SQ (VP (VBN located) (PP (IN on) (NP (NNP Mediterranean) (NNP Sea)))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (NML (NNP Panionios) (NNP G.S.S.)) (NN season))))) (. ?)))",
        "mask_entity": "Which city located on [ENT] is also the stadium of [ENT] G.S.S. season ?",
        "entity": [
            "Mediterranean Sea",
            "Panionios"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3208",
        "question": "Was Don't Bring Me Down recorded in West Germany?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Don't)) (VP (VB Bring) (NP (PRP Me)) (ADVP (RP Down)) (S (VP (VBN recorded) (PP (IN in) (NP (NNP West) (NNP Germany)))))) (. ?)))",
        "mask_entity": "Was Don't Bring Me Down recorded in [ENT]?",
        "entity": [
            "West Germany"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1332",
        "question": "Through which cities do the rivers starting at the Montauk State Park flow?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbo:city) (AND dbo:River (JOIN dbo:sourcePlace dbr:Montauk_State_Park))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Through which cities",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "do [IQ1]",
                    "start": 21,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rivers",
                                "start": 24,
                                "end": 34
                            },
                            {
                                "description": "starting at the Montauk State Park flow",
                                "start": 35,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Through) (WHNP (WDT which))) (S (NP (NNS cities)) (VP (VBP do) (NP (DT the) (NNS rivers)) (S (VP (VBG starting) (PP (IN at) (NP (DT the) (NML (NML (NNP Montauk) (NNP State)) (NNP Park)) (NN flow))))))) (. ?)))",
        "mask_entity": "Through which cities do the rivers starting at the [ENT] flow?",
        "entity": [
            "Montauk State Park"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3016",
        "question": "How many ideologies do the political party of Boonchu Rojanastien hold?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "SExpr": "(JOIN (R dbo:ideology) (AND dbo:PoliticalParty (JOIN (R dbp:party) dbr:Boonchu_Rojanastien))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many ideologies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "do [IQ1] hold",
                    "start": 20,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the political party of Boonchu Rojanastien",
                                "start": 23,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS ideologies)) (VP (VBP do) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NNP Boonchu) (NNP Rojanastien)))) (VP (VB hold)))) (. ?)))",
        "mask_entity": "How many ideologies do the political party of [ENT] hold?",
        "entity": [
            "Boonchu Rojanastien"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3502",
        "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PLUS_Expressways> <http://dbpedia.org/property/hubs> ?uri } ",
        "SExpr": "(JOIN (R dbp:hubs) dbr:PLUS_Expressways)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS hubs)) (PP (IN of) (NP (CC PLUS) (NP (NNP Helicopter) (NNPS Services)) (, ,) (NP (NP (DT a) (NML (NN highway) (NN helicopter)) (NN unit)) (PP (IN of) (NP (CC PLUS) (NNPS Expressways))))))))) (. ?)))",
        "mask_entity": "What are the hubs of [ENT], a highway helicopter unit of PLUS Expressways?",
        "entity": [
            "PLUS Helicopter Services"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2708",
        "question": "Name the movies for which music was given by  Geoffrey Burgon and distributed by  Cinema International Corporation?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:music dbr:Geoffrey_Burgon) (JOIN dbp:distributor dbr:Cinema_International_Corporation)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "for which music was given by Geoffrey Burgon",
                    "start": 16,
                    "end": 60
                },
                {
                    "description": "and distributed by Cinema International Corporation",
                    "start": 61,
                    "end": 112
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VP (VBN given) (PP (IN by) (NP (NNP Geoffrey) (NNP Burgon)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (NNP Cinema) (NNP International) (NNP Corporation)))))))))) (. ?)))",
        "mask_entity": "Name the movies for which music was given by  [ENT] and distributed by  [ENT]?",
        "entity": [
            "Geoffrey Burgon",
            "Cinema International Corporation"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4021",
        "question": "Is Henry David Thoreau interested in Politics?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Henry) (NNP David) (NNP Thoreau)) (ADJP (JJ interested) (PP (IN in) (NP (NNP Politics)))) (. ?)))",
        "mask_entity": "Is [ENT] interested in Politics?",
        "entity": [
            "Henry David Thoreau"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1854",
        "question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbp:keyPeople dbr:Dennis_Muilenburg) (JOIN dbp:products dbr:Boeing_CH-47_Chinook)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Among the companies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "who has product named Chinook",
                    "start": 20,
                    "end": 49
                },
                {
                    "description": "who has a key person as Dennis Muilenburg",
                    "start": 50,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (PP (IN Among) (NP (NP (DT the) (NNS companies)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (NP (NN product)) (VP (VBN named) (S (NP (NNP Chinook))))) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (DT a) (JJ key) (NN person)) (PP (IN as) (NP (NNP Dennis) (NNP Muilenburg)))))))))))) (. ?)))",
        "mask_entity": "Among the companies who has product named [ENT] who has a key person as [ENT] ?",
        "entity": [
            "Chinook",
            "Dennis Muilenburg"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4469",
        "question": "Which country's leader  is Giuseppe Bertello?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbo:leader dbr:Giuseppe_Bertello))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which country's",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "leader is Giuseppe Bertello",
                    "start": 16,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN country) (POS 's)) (NN leader)) (VP (VBZ is) (NP (NNP Giuseppe) (NNP Bertello))) (. ?)))",
        "mask_entity": "Which country's leader  is [ENT]?",
        "entity": [
            "Giuseppe Bertello"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2872",
        "question": "Who wrote the subsequent work of One Day at a Time (Em's Version) ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:writer) (JOIN (R dbo:subsequentWork) dbr:One_Day_at_a_Time_(Em's_Version))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the subsequent work of One Day at a Time (Em's Version)",
                                "start": 10,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (CD One) (NN Day))) (PP (IN at) (NP (DT a) (NML (NN Time) (-LRB- () (NNP Em's)) (NN Version) (-RRB- ))))))) (. ?)))",
        "mask_entity": "Who wrote the subsequent work of [ENT]) ?",
        "entity": [
            "One Day at a Time (Em's Version"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3030",
        "question": "Name the TV shows with network as NBC and company as Paramount Television ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:network dbr:NBC) (JOIN dbp:company dbr:Paramount_Television)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "with network as NBC",
                    "start": 18,
                    "end": 37
                },
                {
                    "description": "and company as Paramount Television",
                    "start": 38,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN TV) (NNS shows)) (PP (IN with) (NP (NP (NN network)) (PP (IN as) (NP (NP (NNP NBC) (CC and) (NN company)) (PP (IN as) (NP (NNP Paramount) (NNP Television))))))))) (. ?)))",
        "mask_entity": "Name the TV shows with network as [ENT] and company as [ENT] ?",
        "entity": [
            "NBC",
            "Paramount Television"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1205",
        "question": "Name the fictional character whose voice's animator is Hardie Gramatky?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Hardie_Gramatky> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:voice (JOIN dbp:animator dbr:Hardie_Gramatky))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the fictional character",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "whose voice's [IQ1]",
                    "start": 29,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "animator is Hardie Gramatky",
                                "start": 43,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN voice) (POS 's)) (S (NP (NN animator)) (VP (VBZ is) (NP (NNP Hardie) (NNP Gramatky))))))) (. ?)))",
        "mask_entity": "Name the fictional character whose voice's animator is [ENT]?",
        "entity": [
            "Hardie Gramatky"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1645",
        "question": "Which license provider of MSX basic is also the designer of Language Integrated Query ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:designer) dbr:Language_Integrated_Query) (JOIN (R dbp:license) dbr:MSX_BASIC))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which license provider of MSX basic",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "is also the designer of Language Integrated Query",
                    "start": 36,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN license) (NN provider)) (PP (IN of) (NP (NNP MSX) (NN basic)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN designer)) (PP (IN of) (NP (NN Language) (NNP Integrated) (NNP Query))))) (. ?)))",
        "mask_entity": "Which license provider of MSX basic is also the designer of Language Integrated Query ?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3417",
        "question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
        "SExpr": "(JOIN (R dbp:architect) (JOIN dbp:architect dbr:Louis_D._Astorino)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the architect of [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 25,
                                "end": 36
                            },
                            {
                                "description": "whose one of the architect is louis D. Astorino",
                                "start": 37,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NN architect)) (PP (IN of) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN architect))))) (S (VP (VBZ is) (NP (NNP louis) (NNP D.) (NNP Astorino)))))))))) (. ?)))",
        "mask_entity": "Who are the architect of the stadium whose [ENT] of the architect is [ENT] ?",
        "entity": [
            "one",
            "louis D. Astorino"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3476",
        "question": "Who are the astronauts associated with NASA?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "SExpr": "(AND dbo:Astronaut (JOIN dbp:type dbr:NASA))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the astronauts",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "associated with NASA",
                    "start": 23,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS astronauts)) (VP (VBN associated) (PP (IN with) (NP (NNP NASA))))))) (. ?)))",
        "mask_entity": "Who are the astronauts associated with [ENT]?",
        "entity": [
            "NASA"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2861",
        "question": "What is a common ingredient used in boyt Blodpalt and Kaszanka ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri. <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:ingredient) dbr:Blodpalt) (JOIN (R dbo:ingredient) dbr:Kaszanka))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
                    "start": 0,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT a) (JJ common) (NN ingredient)) (VP (VBN used) (PP (IN in) (NP (NP (NNP boyt) (NNP Blodpalt)) (CC and) (NP (NNP Kaszanka)))))))) (. ?)))",
        "mask_entity": "What is a common ingredient used in boyt [ENT] and [ENT] ?",
        "entity": [
            "Blodpalt",
            "Kaszanka"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1792",
        "question": "Who is the partner of Rob Patterson?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson>  . }",
        "SExpr": "(JOIN dbp:partner dbr:Rob_Patterson)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN partner)) (PP (IN of) (NP (NNP Rob) (NNP Patterson)))))) (. ?)))",
        "mask_entity": "Who is the partner of [ENT]?",
        "entity": [
            "Rob Patterson"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3797",
        "question": "How many politicians are there from the city of Ganges?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
        "SExpr": "(JOIN (R dbo:leaderName) (JOIN (R dbp:city) dbr:Ganges)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many politicians are there [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "from the city of Ganges",
                                "start": 31,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS politicians)) (VP (VBP are) (ADVP (RB there)) (PP (IN from) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNPS Ganges))))))) (. ?)))",
        "mask_entity": "How many politicians are there from the city of [ENT]?",
        "entity": [
            "Ganges"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3368",
        "question": "To which american football teams does the Heinz Field serve as home stadium?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Field> <http://dbpedia.org/property/tenants> ?uri } ",
        "SExpr": "(JOIN (R dbp:tenants) dbr:Heinz_Field)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (JJ american) (NN football) (NNS teams)) (VP (VBZ does) (S (NP (DT the) (NNP Heinz) (NNP Field)) (VP (VB serve) (PP (IN as) (NP (NN home) (NN stadium))))))) (. ?)))",
        "mask_entity": "To which american football teams does [ENT] serve as home stadium?",
        "entity": [
            "the Heinz Field"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3367",
        "question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:architect) dbr:Marine_Corps_Air_Station_Kaneohe_Bay) (JOIN (R dbp:branch) dbr:Burnet_R._Maybank))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which architect of the Marine Corps Air Station Kaneohe Bay",
                    "start": 0,
                    "end": 59
                },
                {
                    "description": "is the branch of the Burnet R. Maybank",
                    "start": 60,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN architect)) (PP (IN of) (NP (DT the) (NML (NNP Marine) (NNP Corps)) (NNP Air) (NNP Station) (NNP Kaneohe) (NNP Bay)))) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (DT the) (NNP Burnet) (NNP R.) (NNP Maybank))))) (. ?)))",
        "mask_entity": "Which architect of [ENT] [ENT] is the branch of [ENT]?",
        "entity": [
            "the Marine Corps Air Station",
            "Kaneohe Bay",
            "the Burnet R. Maybank"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3533",
        "question": "Which movies's screenplay is written by Akiva Goldsman",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:screenplay dbr:Akiva_Goldsman))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which movies'",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "screenplay is written by Akiva Goldsman",
                    "start": 14,
                    "end": 53
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NNS movies) (POS 's)) (NN screenplay)) (VP (VBZ is) (VP (VBN written) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))))))",
        "mask_entity": "Which movies's screenplay is written by [ENT]",
        "entity": [
            "Akiva Goldsman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3449",
        "question": "How many TV shows are similar to the ones belonging to fantasy genre?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Fantasy_television> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:related (JOIN dbo:genre dbr:Fantasy_television))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "are similar to [IQ1]",
                    "start": 18,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 33,
                                "end": 41
                            },
                            {
                                "description": "belonging to fantasy genre",
                                "start": 42,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN TV) (NNS shows)) (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBG belonging) (PP (IN to) (NP (NN fantasy) (NN genre))))))))) (. ?)))",
        "mask_entity": "How many TV shows are similar to the ones belonging to fantasy genre?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "603",
        "question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:commander) dbr:Battle_of_Fort_Stephenson) (JOIN (R dbo:commander) dbr:Battle_of_the_Thames))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me all commanders",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
                    "start": 23,
                    "end": 114
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS commanders)) (SBAR (WHNP (WDT which)) (S (VP (VBD had) (NP (NP (DT an) (JJ important) (NN role)) (PP (IN in) (NP (NP (DT both)) (, ,) (NP (NP (NP (DT the) (NNP Battle)) (PP (IN of) (NP (NNP Fort) (NNP Stephenson)))) (CC and) (NP (NP (NNP Battle)) (PP (IN of) (NP (DT the) (NNP Thames))))))))))))) (. ?)))",
        "mask_entity": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3056",
        "question": "How many developers were involved in creating games whose score is composed by Gerard Marino?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:developer) (JOIN dbo:composer dbr:Gerard_Marino)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many developers",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "were involved in creating [IQ1]",
                    "start": 20,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 46,
                                "end": 51
                            },
                            {
                                "description": "whose score is composed by Gerard Marino",
                                "start": 52,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS developers)) (VP (VBD were) (VP (VBN involved) (PP (IN in) (S (VP (VBG creating) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NN score)) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Gerard) (NNP Marino)))))))))))))) (. ?)))",
        "mask_entity": "How many developers were involved in creating games whose score is composed by [ENT]?",
        "entity": [
            "Gerard Marino"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4531",
        "question": "Which sea is surrounded by Rostock and Kaliningrad?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(AND dbo:Sea (AND (JOIN dbp:cities dbr:Rostock) (JOIN dbp:cities dbr:Kaliningrad)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sea",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "is surrounded by Rostock and Kaliningrad",
                    "start": 10,
                    "end": 50
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN sea)) (SQ (VP (VBZ is) (VP (VBN surrounded) (PP (IN by) (NP (NNP Rostock) (CC and) (NNP Kaliningrad)))))) (. ?)))",
        "mask_entity": "Which sea is surrounded by [ENT] and [ENT]?",
        "entity": [
            "Rostock",
            "Kaliningrad"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "126",
        "question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:developer dbr:Brian_Graden) (JOIN dbp:voices dbr:Isaac_Hayes)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which television show's",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "developer is Brian Graden",
                    "start": 24,
                    "end": 49
                },
                {
                    "description": "and voices to the character is by Isaac Hayes",
                    "start": 50,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN television) (NN show) (POS 's)) (NN developer)) (VP (VBZ is) (SBAR (S (NP (NP (NNP Brian) (NNP Graden)) (CC and) (NP (NP (NNS voices)) (PP (IN to) (NP (DT the) (NN character))))) (VP (VBZ is) (PP (IN by) (NP (NNP Isaac) (NNP Hayes))))))) (. ?)))",
        "mask_entity": "Which television show's developer is [ENT] and voices to the character is by [ENT]?",
        "entity": [
            "Brian Graden",
            "Isaac Hayes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3876",
        "question": "How did the child of Stevens T. Mason die?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathCause) (JOIN (R dbo:child) dbr:Stevens_Thomson_Mason_(Virginia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How did [IQ1] die",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the child of Stevens T. Mason",
                                "start": 8,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (NNP Stevens) (NNP T.) (NNP Mason)))) (VP (VB die))) (. ?)))",
        "mask_entity": "How did the child of [ENT] die?",
        "entity": [
            "Stevens T. Mason"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2935",
        "question": "Does the Ontario International Airport serve the Inland Empire?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP Ontario) (NNP International) (NNP Airport)) (VP (VB serve) (NP (DT the) (NNP Inland) (NNP Empire))) (. ?)))",
        "mask_entity": "Does [ENT] serve [ENT]?",
        "entity": [
            "the Ontario International Airport",
            "the Inland Empire"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3531",
        "question": "Is semnani one of the languages spoken in Iran?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Iran> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (DT semnani) (CD one)) (PP (IN of) (NP (NP (DT the) (NNS languages)) (VP (VBN spoken) (PP (IN in) (NP (NNP Iran))))))) (. ?)))",
        "mask_entity": "Is semnani one of the languages spoken in [ENT]?",
        "entity": [
            "Iran"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2730",
        "question": "What is the nickname of the home stadium of Angels Toru?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "SExpr": "(JOIN (R dbp:nickname) (JOIN (R dbo:homeStadium) dbr:Angels_Toru\u0144)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the nickname of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the home stadium of Angels Toru",
                                "start": 24,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN nickname)) (PP (IN of) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (NNPS Angels) (NNP Toru)))))))) (. ?)))",
        "mask_entity": "What is the nickname of the home stadium of [ENT]?",
        "entity": [
            "Angels Toru"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "827",
        "question": "What is the television show whose executive producer is Douglas Netter?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:executiveProducer dbr:Douglas_Netter))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose executive producer is Douglas Netter",
                    "start": 28,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (JJ executive) (NN producer)) (S (VP (VBZ is) (NP (NNP Douglas) (NNP Netter)))))))) (. ?)))",
        "mask_entity": "What is the television show whose executive producer is [ENT]?",
        "entity": [
            "Douglas Netter"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1639",
        "question": "List out the people who are related to the relatives of Jared Kushner ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:relation) (JOIN (R dbo:relation) dbr:Jared_Kushner)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List out the people",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "who are related to [IQ1]",
                    "start": 20,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of Jared Kushner",
                                "start": 39,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (PRT (RP out)) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (JJ related) (PP (IN to) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Jared) (NNP Kushner))))))))))) (. ?)))",
        "mask_entity": "List out the people who are related to the relatives of [ENT] ?",
        "entity": [
            "Jared Kushner"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "984",
        "question": "List all the doctoral student of the scientist who has advised john Bowlby ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbp:doctoralStudents) (AND dbo:Scientist (JOIN dbp:doctoralStudents dbr:John_Bowlby))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the doctoral student of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the scientist",
                                "start": 33,
                                "end": 46
                            },
                            {
                                "description": "who has advised john Bowlby",
                                "start": 47,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (JJ doctoral) (NN student)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN advised) (NP (NNP john) (NNP Bowlby)))))))))) (. ?)))",
        "mask_entity": "List all the doctoral student of the scientist who has advised [ENT] ?",
        "entity": [
            "john Bowlby"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3281",
        "question": "To which series does the book belong which came after the Blade Runner 2?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "SExpr": "(JOIN (R dbo:series) (JOIN dbo:previousWork dbr:Blade_Runner_2:_The_Edge_of_Human)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which series",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "does the book belong [IQ1]",
                    "start": 16,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which came after the Blade Runner 2",
                                "start": 37,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN To) (WHNP (WDT which) (NN series))) (SQ (VBZ does) (NP (DT the) (NN book)) (VP (VB belong) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (PP (IN after) (NP (DT the) (NNP Blade) (NNP Runner) (CD 2)))))))) (. ?)))",
        "mask_entity": "To which series does the book belong which came after [ENT]?",
        "entity": [
            "the Blade Runner 2"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4971",
        "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri } ",
        "SExpr": "(JOIN (R dbp:city) dbr:The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NN Team) (NNP Tate)) (VP (VB take) (NP (NN place))) (. ?)))",
        "mask_entity": "In which city did The Ultimate Fighter: Team [ENT] vs. [ENT] take place ?",
        "entity": [
            "Rousey",
            "Team Tate"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2188",
        "question": "Where was Sino-French War fought ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri } ",
        "SExpr": "(JOIN (R dbo:territory) dbr:Sino-French_War)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Sino-) (JJ French) (NNP War)) (VP (VBN fought))) (. ?)))",
        "mask_entity": "Where was [ENT] fought ?",
        "entity": [
            "Sino-French War"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4612",
        "question": "Who did Daniel Gibson marry?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
        "SExpr": "(JOIN dbo:spouse dbr:Daniel_Gibson)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Daniel) (NNP Gibson)) (VP (VB marry))) (. ?)))",
        "mask_entity": "Who did [ENT] marry?",
        "entity": [
            "Daniel Gibson"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2443",
        "question": "What is the political party of the daughter of Jawaharlal Nehru ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "SExpr": "(JOIN (R dbo:party) (JOIN (R dbo:child) dbr:Jawaharlal_Nehru)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the political party of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the daughter of Jawaharlal Nehru",
                                "start": 31,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (DT the) (NN daughter)) (PP (IN of) (NP (NNP Jawaharlal) (NNP Nehru)))))))) (. ?)))",
        "mask_entity": "What is the political party of the daughter of [ENT] ?",
        "entity": [
            "Jawaharlal Nehru"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "362",
        "question": "Name the river with source as Shannon Pot and its mouth is located in Limerick?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:source dbr:Shannon_Pot) (JOIN dbp:mouthLocation dbr:Limerick)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "with source as Shannon Pot",
                    "start": 15,
                    "end": 41
                },
                {
                    "description": "and its mouth is located in Limerick",
                    "start": 42,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NN source))) (SBAR (IN as) (S (NP (NP (NNP Shannon) (NNP Pot)) (CC and) (NP (PRP$ its) (NN mouth))) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Limerick)))))))) (. ?)))",
        "mask_entity": "Name the river with source as [ENT] and its mouth is located in [ENT]?",
        "entity": [
            "Shannon Pot",
            "Limerick"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2349",
        "question": "What is the organisation whose purposes are Environmentalism and Peace?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (AND (JOIN dbp:purpose dbr:Environmentalism) (JOIN dbp:purpose dbr:Peace)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the organisation",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose purposes are Environmentalism and Peace",
                    "start": 25,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN organisation)) (SBAR (WHNP (WP$ whose) (NNS purposes)) (S (VP (VBP are) (NP (NNP Environmentalism) (CC and) (NNP Peace)))))))) (. ?)))",
        "mask_entity": "What is the organisation whose purposes are Environmentalism and Peace?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "345",
        "question": "Count the number of sports team members  which have player named Matt Williams ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/name> <http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)> . ?x <http://dbpedia.org/property/name> ?uri }",
        "SExpr": "(JOIN (R dbp:name) (JOIN dbp:name dbr:Matt_Williams_(New_Zealand_footballer))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "sports team members",
                                "start": 20,
                                "end": 39
                            },
                            {
                                "description": "which have player named Matt Williams",
                                "start": 40,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS sports) (NN team) (NNS members)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NN player)) (VP (VBN named) (S (NP (NNP Matt) (NNP Williams)))))))))))) (. ?)))",
        "mask_entity": "Count the number of sports team members  which have player named [ENT] ?",
        "entity": [
            "Matt Williams"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "814",
        "question": "How many different people own the Timeform award winners?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbo:owner) (JOIN dbp:awards dbr:Timeform))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different people",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "own [IQ1]",
                    "start": 26,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Timeform award winners",
                                "start": 30,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ different) (NNS people)) (VP (VBP own) (NP (DT the) (NNP Timeform) (NN award) (NNS winners)))) (. ?)))",
        "mask_entity": "How many different people own the [ENT] award winners?",
        "entity": [
            "Timeform"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3205",
        "question": "What religions do diplomats typically follow?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbp:religion) (JOIN dbo:profession dbr:Diplomacy)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religions",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "do [IQ1] typically follow",
                    "start": 15,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "diplomats",
                                "start": 18,
                                "end": 27
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VBP do) (NP (NNS diplomats)) (ADVP (RB typically)) (VP (VB follow))) (. ?)))",
        "mask_entity": "What religions do diplomats typically follow?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4160",
        "question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> . ?uri <http://dbpedia.org/property/owner> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "SExpr": "(AND dbo:BaseballTeam (JOIN dbp:owner (JOIN dbp:founder dbr:Guggenheim_family))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1]",
                    "start": 0,
                    "end": 5,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Guggenheim family is the cofounder of a company",
                                "start": 0,
                                "end": 47
                            }
                        ]
                    }
                },
                {
                    "description": "that invested stocks in which baseball teams",
                    "start": 6,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Guggenheim) (NN family)) (VP (VBZ is) (NP (NP (DT the) (NN cofounder)) (PP (IN of) (NP (NP (DT a) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD invested) (NP (NP (NNS stocks)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN baseball) (NNS teams)) (. ?)))))))))))))",
        "mask_entity": "[ENT] family is the cofounder of a company that invested stocks in which baseball teams?",
        "entity": [
            "Guggenheim"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4795",
        "question": "Was John muir one of the first to ascend a mountain on Mt hoffmann?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP John) (NNP muir)) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (JJ first)) (SBAR (S (VP (TO to) (VP (VB ascend) (NP (NP (DT a) (NN mountain)) (PP (IN on) (NP (NNP Mt) (NNP hoffmann))))))))))) (. ?)))",
        "mask_entity": "Was [ENT] muir [ENT] of the [ENT] to ascend a mountain on [ENT]?",
        "entity": [
            "John",
            "one",
            "first",
            "Mt hoffmann"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3325",
        "question": "Which city is known for the people working in the western penn hospital?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:knownFor) (AND dbo:Person (JOIN dbp:workInstitutions dbr:Western_Pennsylvania_Hospital))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "is known for [IQ1]",
                    "start": 11,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 24,
                                "end": 34
                            },
                            {
                                "description": "working in the western penn hospital",
                                "start": 35,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (DT the) (NNS people)) (VP (VBG working) (PP (IN in) (NP (DT the) (JJ western) (NNP penn) (NN hospital))))))))) (. ?)))",
        "mask_entity": "Which city is known for the people working in the western penn hospital?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4106",
        "question": "In which country does the publishing house exist which was cofounded by Panos Loannides?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
        "SExpr": "(JOIN (R dbp:country) (AND dbo:Publisher (JOIN dbo:founder dbr:Panos_Ioannides))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "does the publishing house exist",
                    "start": 17,
                    "end": 48
                },
                {
                    "description": "[IQ1]",
                    "start": 49,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which was cofounded by Panos Loannides",
                                "start": 49,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ does) (NP (NP (DT the) (NN publishing) (NN house)) (VP (VB exist) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN cofounded) (PP (IN by) (NP (NNP Panos) (NNP Loannides))))))))))) (. ?)))",
        "mask_entity": "In which country does the publishing house exist which was cofounded by [ENT]?",
        "entity": [
            "Panos Loannides"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2116",
        "question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:firstTeam) dbr:1967_Mexican_Grand_Prix) (JOIN (R dbp:owner) dbr:Dagenham_wind_turbines))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the team",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "which is owned by Dafenham wind turbines",
                    "start": 14,
                    "end": 54
                },
                {
                    "description": "and stood first in 1967 mexican Grand Prix",
                    "start": 55,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VP (VBN owned) (PP (IN by) (NP (NNP Dafenham) (NN wind) (NNS turbines)))) (CC and) (VP (VBD stood) (ADVP (RB first)) (PP (IN in) (NP (NP (CD 1967)) (NP (JJ mexican) (NNP Grand) (NNP Prix))))))))))) (. ?)))",
        "mask_entity": "Name the team which is owned by [ENT] wind turbines and stood [ENT] in [ENT] mexican [ENT] ?",
        "entity": [
            "Dafenham",
            "first",
            "1967",
            "Grand Prix"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1834",
        "question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:education) dbr:Sidney_Catlin_Partridge) (JOIN (R dbo:almaMater) dbr:Lisa_Brummel))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which education center",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "Sidney Catlin Partrodge attended",
                    "start": 23,
                    "end": 55
                },
                {
                    "description": "which was also the alma mater of Lisa Brummel",
                    "start": 56,
                    "end": 101
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NML (NN education) (NN center)) (NNP Sidney) (NNP Catlin) (NNP Partrodge)) (S (VP (VBD attended) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Lisa) (NNP Brummel))))))))) (. ?)))",
        "mask_entity": "Which education center [ENT] attended which was also the alma mater of [ENT] ?",
        "entity": [
            "Sidney Catlin Partrodge",
            "Lisa Brummel"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "793",
        "question": "What sports can be played in Kharghar's schools",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Kharghar> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:sport) (AND dbo:School (JOIN dbo:city dbr:Kharghar))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What sports",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "can be played in [IQ1]",
                    "start": 12,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Kharghar's schools",
                                "start": 29,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NNS sports)) (S (VP (MD can) (VP (VB be) (VP (VBN played) (PP (IN in) (NP (NP (NNP Kharghar) (POS 's)) (NNS schools)))))))))",
        "mask_entity": "What sports can be played in [ENT]'s schools",
        "entity": [
            "Kharghar"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4946",
        "question": "Which ethinicity of  Riley Reid is the state of origin of Holmes Colbert?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:ethnicity) dbr:Riley_Reid) (JOIN (R dbo:stateOfOrigin) dbr:Holmes_Colbert))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which ethnicity of Riley Reid",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "is the state of origin of Holmes Colbert",
                    "start": 30,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN ethinicity)) (PP (IN of) (NP (NNP Riley) (NNP Reid)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert)))))))) (. ?)))",
        "mask_entity": "Which ethinicity of  [ENT] is the state of origin of [ENT]?",
        "entity": [
            "Riley Reid",
            "Holmes Colbert"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2674",
        "question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> <http://dbpedia.org/resource/John_Boehner> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP John) (NNP Boehner)) (NP (NP (DT the) (NN winner)) (PP (IN of) (NP (NP (DT the) (NNP US) (NNP House)) (PP (IN of) (NP (NNPS Representatives) (NNS elections))) (PP (IN in) (NP (NNP Ohio))) (PP (IN in) (NP (CD 2010)))))) (. ?)))",
        "mask_entity": "Was [ENT] the winner of the [ENT] [ENT] elections in [ENT] in [ENT]?",
        "entity": [
            "John Boehner",
            "US",
            "House of Representatives",
            "Ohio",
            "2010"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "94",
        "question": "Which american football team  has stadium as O.co Coliseum?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "SExpr": "(AND dbo:AmericanFootballTeam (JOIN dbo:locationCity dbr:O.co_Coliseum))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which american football team",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "has stadium as O.co Coliseum",
                    "start": 29,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NML (JJ american) (NN football)) (NN team)) (SQ (VP (VBZ has) (NP (NP (NN stadium)) (PP (IN as) (NP (NNP O.co) (NNP Coliseum)))))) (. ?)))",
        "mask_entity": "Which american football team  has stadium as [ENT]?",
        "entity": [
            "O.co Coliseum"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3756",
        "question": "How many subjects are covered in the publications of Doubleday?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
        "SExpr": "(JOIN (R dbo:nonFictionSubject) (JOIN dbo:publisher dbr:Doubleday_(publisher))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many subjects",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "are covered in [IQ1]",
                    "start": 18,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the publications of Doubleday",
                                "start": 33,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS subjects)) (VP (VBP are) (VP (VBN covered) (PP (IN in) (NP (NP (DT the) (NNS publications)) (PP (IN of) (NP (NNP Doubleday)))))))) (. ?)))",
        "mask_entity": "How many subjects are covered in the publications of [ENT]?",
        "entity": [
            "Doubleday"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2891",
        "question": "In which city of Pittsburg Steelers was the Congress of Inductrial Organization founded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Pittsburgh_Steelers> <http://dbpedia.org/property/city> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:founded) dbr:Congress_of_Industrial_Organizations) (JOIN (R dbp:city) dbr:Pittsburgh_Steelers))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which city of Pittsburg Steelers",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "was the Congress of Industrial Organization founded",
                    "start": 36,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NP (NN city)) (PP (IN of) (NP (NNP Pittsburg) (NNP Steelers)))) (VP (VBD was) (NP (NP (DT the) (NNP Congress)) (PP (IN of) (NP (NNP Inductrial) (NNP Organization)))) (VP (VBN founded)))) (. ?)))",
        "mask_entity": "In which city of [ENT] was [ENT] founded ?",
        "entity": [
            "Pittsburg Steelers",
            "the Congress of Inductrial Organization"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2371",
        "question": "What is the hometown of the residents of Martha's vineyards?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Martha's_Vineyard> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
        "SExpr": "(JOIN (R dbo:hometown) (JOIN dbo:residence dbr:Martha's_Vineyard)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the hometown of [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the residents of Martha's vineyards",
                                "start": 24,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN hometown)) (PP (IN of) (NP (NP (DT the) (NNS residents)) (PP (IN of) (NP (NP (NNP Martha) (POS 's)) (NNS vineyards)))))))) (. ?)))",
        "mask_entity": "What is the hometown of the residents of [ENT]'s vineyards?",
        "entity": [
            "Martha"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4149",
        "question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the city on the shore ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(AND dbo:Sea (AND (JOIN dbp:cities dbr:Kaliningrad) (JOIN dbp:outflow dbr:Danish_straits)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the sea",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "into which Danish Straits flows",
                    "start": 13,
                    "end": 44
                },
                {
                    "description": "and has Kaliningrad as one of the cities on the shore",
                    "start": 45,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (JJ Danish) (NNPS Straits)) (VP (VP (VBZ flows)) (CC and) (VP (VBZ has) (NP (NNP Kaliningrad)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN city)) (PP (IN on) (NP (DT the) (NN shore))))))))))))) (. ?)))",
        "mask_entity": "Name the sea into which [ENT] flows and has [ENT] as one of the city on the shore ?",
        "entity": [
            "Danish Straits",
            "Kaliningrad"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4432",
        "question": "Name the team manger of Middlebrough F.C season 2006-07 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
        "SExpr": "(JOIN (R dbo:manager) dbr:2006\u201307_Middlesbrough_F.C._season)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team) (NN manger)) (PP (IN of) (NP (NML (NNP Middlebrough) (NNP F.C)) (NN season))) (NP (CD 2006-) (CD 07)))) (. ?)))",
        "mask_entity": "Name the team manger of [ENT] F.C season [ENT] ?",
        "entity": [
            "Middlebrough",
            "2006-07"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3228",
        "question": "What city has the football team in which Lee Robinson debuted?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lee_Robinson_(American_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
        "SExpr": "(JOIN (R dbo:locationCity) (JOIN (R dbo:debutTeam) dbr:Lee_Robinson_(American_football))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "has [IQ1]",
                    "start": 10,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the football team",
                                "start": 14,
                                "end": 31
                            },
                            {
                                "description": "in which Lee Robinson debuted",
                                "start": 32,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN football) (NN team)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Lee) (NNP Robinson)) (VP (VBD debuted))))))) (. ?)))",
        "mask_entity": "What city has the football team in which [ENT] debuted?",
        "entity": [
            "Lee Robinson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2853",
        "question": "Who is the owner of the bank which owns Bloomberg Radio?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Bank (JOIN (R dbo:owner) dbr:Bloomberg_Radio))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the owner of [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bank",
                                "start": 20,
                                "end": 28
                            },
                            {
                                "description": "which owns Bloomberg Radio",
                                "start": 29,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN bank)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NNP Bloomberg) (NNP Radio))))))))) (. ?)))",
        "mask_entity": "Who is the owner of the bank which owns [ENT]?",
        "entity": [
            "Bloomberg Radio"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2912",
        "question": "Which companies were behind the renovation of McKechnie Field ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McKechnie_Field> <http://dbpedia.org/property/architect> ?uri } ",
        "SExpr": "(JOIN (R dbp:architect) dbr:McKechnie_Field)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS companies)) (SQ (VP (VBD were) (PP (IN behind) (NP (NP (DT the) (NN renovation)) (PP (IN of) (NP (NNP McKechnie) (NNP Field))))))) (. ?)))",
        "mask_entity": "Which companies were behind the renovation of [ENT] ?",
        "entity": [
            "McKechnie Field"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1865",
        "question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
        "SExpr": "(JOIN (R dbo:coach) dbr:2012\u201313_Marquette_Golden_Eagles_men's_basketball_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (DT the) (NN coach)) (PP (IN of) (NP (NP (NNP marquette) (NML (NML (NNP Golden) (NNPS Eagles)) (NNS men's) (NN basketball)) (NN team)) (HYPH -) (NP (CD 2012,13) (NN season))))))) (. ?)))",
        "mask_entity": "Who was the coach of marquette [ENT] men's basketball team-[ENT] ?",
        "entity": [
            "Golden Eagles",
            "2012,13 season"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1857",
        "question": "Miluk and Cayuse are still spoken in which part of the world?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:region) dbr:Miluk_language) (JOIN (R dbp:region) dbr:Cayuse_language))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Miluk and Cayuse are still spoken in",
                    "start": 0,
                    "end": 36
                },
                {
                    "description": "which part of the world",
                    "start": 37,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Miluk) (CC and) (NNP Cayuse)) (VP (VBP are) (ADVP (RB still)) (VP (VBN spoken) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (NN part)) (PP (IN of) (NP (DT the) (NN world)))) (. ?)))))))",
        "mask_entity": "[ENT] and [ENT] are still spoken in which part of the world?",
        "entity": [
            "Miluk",
            "Cayuse"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2645",
        "question": "Which governer of Winston bryant is also the president of Carl Stokes ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:governor) dbr:Winston_Bryant) (JOIN (R dbp:president) dbr:Carl_Stokes))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which governor of Winston bryant",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is also the president of Carl Stokes",
                    "start": 33,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN governer)) (PP (IN of) (NP (NNP Winston) (NNP bryant)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Carl) (NNP Stokes))))) (. ?)))",
        "mask_entity": "Which governer of [ENT] bryant is also the president of [ENT] ?",
        "entity": [
            "Winston",
            "Carl Stokes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2243",
        "question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:athletics) dbr:PATTS_College_of_Aeronautics) (JOIN (R dbo:field) dbr:Jon_Speelman))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the sports of PATTS College of Aeronautics",
                    "start": 0,
                    "end": 47
                },
                {
                    "description": "which are of interest of Jon Speelman",
                    "start": 48,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (NP (DT the) (NNS sports)) (PP (IN of) (NP (NP (NNP PATTS) (NNP College)) (PP (IN of) (NP (NNPS Aeronautics)))))) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN interest)) (PP (IN of) (NP (NNP Jon) (NNP Speelman)))))))))) (. ?)))",
        "mask_entity": "List the sports of [ENT] which are of interest of [ENT] ?",
        "entity": [
            "PATTS College of Aeronautics",
            "Jon Speelman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2336",
        "question": "What is the home stadium of the club coached by Justine Omojong?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Justine_Omojong> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "SExpr": "(JOIN (R dbp:homeStadium) (AND dbo:SoccerClub (JOIN dbp:coach dbr:Justine_Omojong))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the home stadium of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the club",
                                "start": 28,
                                "end": 36
                            },
                            {
                                "description": "coached by Justine Omojong",
                                "start": 37,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (NP (DT the) (NN club)) (VP (VBN coached) (PP (IN by) (NP (NNP Justine) (NNP Omojong))))))))) (. ?)))",
        "mask_entity": "What is the home stadium of the club coached by [ENT]?",
        "entity": [
            "Justine Omojong"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "950",
        "question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . }",
        "SExpr": "(JOIN (R dbo:predecessor) (JOIN (R dbp:related) dbr:Oldsmobile_88)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which are the predecessors of [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the cars",
                                "start": 30,
                                "end": 38
                            },
                            {
                                "description": "which are similar to the Oldsmobile 88",
                                "start": 39,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS predecessors)) (PP (IN of) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (DT the) (NNP Oldsmobile) (CD 88)))))))))))) (. ?)))",
        "mask_entity": "Which are the predecessors of the cars which are similar to the [ENT] [ENT]?",
        "entity": [
            "Oldsmobile",
            "88"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3068",
        "question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(AND dbo:Royalty (AND (JOIN dbo:parent dbr:Ptolemy_XII_Auletes) (JOIN dbp:spouse dbr:Ptolemy_XIII_Theos_Philopator)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a queen",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "whose parent is Ptolemy XII Auletes",
                    "start": 13,
                    "end": 48
                },
                {
                    "description": "and consort is Ptolemy XIII Theos Philopator",
                    "start": 49,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT a) (NN queen)) (SBAR (WHNP (WP$ whose) (NN parent)) (S (VP (VBZ is) (NP (NNP Ptolemy) (CD XII) (NNP Auletes)))))))) (CC and) (S (NP (NN consort)) (VP (VBZ is) (NP (NNP Ptolemy) (NNP XIII) (NNP Theos) (NNP Philopator)))) (. ?)))",
        "mask_entity": "Name a queen whose parent is [ENT] and consort is [ENT]?",
        "entity": [
            "Ptolemy XII Auletes",
            "Ptolemy XIII Theos Philopator"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1120",
        "question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:themeMusicComposer dbr:Primus_(band)) (JOIN dbp:voices dbr:Isaac_Hayes)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which show's",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "theme music was composed by Primus",
                    "start": 13,
                    "end": 47
                },
                {
                    "description": "and voiced by Isaac Hayes",
                    "start": 48,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN show) (POS 's)) (NN theme) (NN music)) (VP (VBD was) (VP (VP (VBN composed) (PP (IN by) (NP (NNP Primus)))) (CC and) (VP (VBN voiced) (PP (IN by) (NP (NNP Isaac) (NNP Hayes)))))) (. ?)))",
        "mask_entity": "Which show's theme music was composed by [ENT] and voiced by [ENT]?",
        "entity": [
            "Primus",
            "Isaac Hayes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2597",
        "question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Woodlane,_New_Jersey> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(JOIN (R dbp:chancellor) (AND dbo:University (JOIN dbo:campus dbr:Woodlane,_New_Jersey))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the chancellor of [IQ1]",
                    "start": 0,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the university",
                                "start": 25,
                                "end": 39
                            },
                            {
                                "description": "whose campus is in Woodlane, New Jersey",
                                "start": 40,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (PP (IN in) (NP (NP (NNP Woodlane)) (, ,) (NP (NNP New) (NNP Jersey)))))))))))) (. ?)))",
        "mask_entity": "Who is the chancellor of the university whose campus is in [ENT], [ENT] ?",
        "entity": [
            "Woodlane",
            "New Jersey"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2204",
        "question": "Name the mountain whose parent peak is located in Mexico.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
        "SExpr": "(AND dbo:Mountain (JOIN dbo:parentMountainPeak (JOIN dbo:locatedInArea dbr:State_of_Mexico))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the mountain",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose parent peak [IQ1]",
                    "start": 18,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is located in Mexico",
                                "start": 36,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN mountain)) (SBAR (WHNP (WP$ whose) (NN parent) (NN peak)) (S (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Mexico))))))))) (. .)))",
        "mask_entity": "Name the mountain whose parent peak is located in [ENT].",
        "entity": [
            "Mexico"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "419",
        "question": "List the ingredient of Blodpalt ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri } ",
        "SExpr": "(JOIN (R dbo:ingredient) dbr:Blodpalt)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN ingredient)) (PP (IN of) (NP (NNP Blodpalt))))) (. ?)))",
        "mask_entity": "List the ingredient of Blodpalt ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "922",
        "question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:developer) dbr:GNOWSYS) (JOIN (R dbo:developer) dbr:GNU_TeXmacs))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the developers",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "who has contributed to both GNOWSYS and GNU TeXmacs",
                    "start": 20,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS developers)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN contributed) (PP (IN to) (NP (CC both) (NP (NNPS GNOWSYS)) (CC and) (NP (NNP GNU) (NNPS TeXmacs)))))))))) (. ?)))",
        "mask_entity": "List the developers who has contributed to both GNOWSYS and [ENT] ?",
        "entity": [
            "GNU TeXmacs"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1254",
        "question": "List the served region of the organisations of Trade association.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(JOIN (R dbo:regionServed) (AND dbo:Organisation (JOIN dbo:type dbr:Trade_association))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the served region of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the organisations of Trade association",
                                "start": 26,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (VBN served) (NN region)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (PP (IN of) (NP (NNP Trade) (NN association))))))) (. .)))",
        "mask_entity": "List the served region of the organisations of [ENT] association.",
        "entity": [
            "Trade"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "477",
        "question": "Is Hyundai Lavita assembled in Malaysia?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Hyundai) (NNP Lavita)) (VP (VBN assembled) (PP (IN in) (NP (NNP Malaysia)))) (. ?)))",
        "mask_entity": "Is [ENT] assembled in [ENT]?",
        "entity": [
            "Hyundai Lavita",
            "Malaysia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2035",
        "question": "Who composed the music for Tonight's the Night ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri } ",
        "SExpr": "(JOIN (R dbp:music) dbr:Tonight's_the_Night_(2003_musical))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD composed) (NP (DT the) (NN music)) (PP (IN for) (NP (NP (NN Tonight) (POS 's)) (NP (DT the) (NN Night)))))) (. ?)))",
        "mask_entity": "Who composed the music for [ENT] ?",
        "entity": [
            "Tonight's the Night"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1202",
        "question": "How many things are made by companies who produce mass media articles?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Mass_media> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "SExpr": "(JOIN dbo:manufacturer (JOIN dbp:products dbr:Mass_media)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many things",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are made by [IQ1]",
                    "start": 16,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 28,
                                "end": 37
                            },
                            {
                                "description": "who produce mass media articles",
                                "start": 38,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP are) (VP (VBN made) (PP (IN by) (NP (NP (NNS companies)) (SBAR (WHNP (WP who)) (S (VP (VBP produce) (NP (JJ mass) (NN media) (NNS articles)))))))))) (. ?)))",
        "mask_entity": "How many things are made by companies who produce mass media articles?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2626",
        "question": "What awards have been given to race horses bred by Bert Michell?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Bert_S._Michell> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
        "SExpr": "(JOIN (R dbo:honours) (AND dbo:RaceHorse (JOIN dbp:trainer dbr:Bert_S._Michell))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What awards",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 12,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "race horses",
                                "start": 31,
                                "end": 42
                            },
                            {
                                "description": "bred by Bert Michell",
                                "start": 43,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN given) (S (VP (TO to) (VP (VB race) (NP (NP (NNS horses)) (VP (VBN bred) (PP (IN by) (NP (NNP Bert) (NNP Michell)))))))))))) (. ?)))",
        "mask_entity": "What awards have been given to race horses bred by [ENT]?",
        "entity": [
            "Bert Michell"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4818",
        "question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . }",
        "SExpr": "(JOIN dbo:leaderName (JOIN dbp:affiliation dbr:Christen-Democratisch_en_Vlaams)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose mayors [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are affiliated with Christen-Democratisch en Vlaams",
                                "start": 13,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS mayors)) (VP (VBP are) (VP (VBN affiliated) (PP (IN with) (NP (NNP Christen-Democratisch) (NNP en) (NNP Vlaams))))) (. ?)))",
        "mask_entity": "Whose mayors are affiliated with [ENT]?",
        "entity": [
            "Christen-Democratisch en Vlaams"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1970",
        "question": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:citizenship) dbr:Viveka_Babajee) (JOIN (R dbo:nationality) dbr:Ronny_Vencatachellum))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
                    "start": 0,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (NP (NP (NNP Viveka) (NNP Babajee)) (PP (IN anad) (NP (NNP Ronny) (NNP Vencatachellum)))))))) (. ?)))",
        "mask_entity": "What is the common nationality of [ENT] anad [ENT] ?",
        "entity": [
            "Viveka Babajee",
            "Ronny Vencatachellum"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3110",
        "question": "Is the Hyundai Lavita assembled in Ulsan?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai) (NNP Lavita)) (VP (VBN assembled) (PP (IN in) (NP (NNP Ulsan)))) (. ?)))",
        "mask_entity": "Is [ENT] assembled in [ENT]?",
        "entity": [
            "the Hyundai Lavita",
            "Ulsan"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4018",
        "question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Election>}",
        "SExpr": "(JOIN (R dbo:affiliation) (AND dbo:Election (JOIN dbp:leader dbr:Y._S._Rajasekhara_Reddy))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which party",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "won [IQ1]",
                    "start": 12,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the elections",
                                "start": 16,
                                "end": 29
                            },
                            {
                                "description": "when Y.S. Rajasekhara Reddy was in power",
                                "start": 30,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN party)) (S (VP (VBD won) (NP (DT the) (NNS elections)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Y.S.) (NNP Rajasekhara) (NNP Reddy)) (VP (VBD was) (PP (IN in) (NP (NN power)))))))) (. ?)))",
        "mask_entity": "Which party won the elections when [ENT] was in power?",
        "entity": [
            "Y.S. Rajasekhara Reddy"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2151",
        "question": "Where does the river begin whose left tributary is Krapanski Potok?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Krapanski_Potok> . ?x <http://dbpedia.org/ontology/source> ?uri  . }",
        "SExpr": "(JOIN (R dbo:source) (JOIN dbo:leftTributary dbr:Krapanski_Potok)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river begin [IQ1]",
                    "start": 0,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose left tributary is Krapanski Potok",
                                "start": 27,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB begin) (SBAR (WHNP (WP$ whose) (JJ left) (NN tributary)) (S (VP (VBZ is) (NP (NNP Krapanski) (NNP Potok))))))) (. ?)))",
        "mask_entity": "Where does the river begin whose left tributary is [ENT]?",
        "entity": [
            "Krapanski Potok"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3687",
        "question": "What are the notable commanders of the army  whose one of the notable commanders is Paul Hausser?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Paul_Hausser> . ?x <http://dbpedia.org/property/notableCommanders> ?uri  . }",
        "SExpr": "(JOIN (R dbp:notableCommanders) (JOIN dbp:notableCommanders dbr:Paul_Hausser)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the notable commanders of [IQ1]",
                    "start": 0,
                    "end": 95,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the army",
                                "start": 35,
                                "end": 43
                            },
                            {
                                "description": "whose one of the notable commanders is Paul Hausser",
                                "start": 44,
                                "end": 95
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NP (DT the) (JJ notable) (NNS commanders)) (PP (IN of) (NP (DT the) (NN army)))) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (JJ notable) (NNS commanders)))) (S (VP (VBZ is) (NP (NNP Paul) (NNP Hausser)))))))) (. ?)))",
        "mask_entity": "What are the notable commanders of the army  whose [ENT] of the notable commanders is [ENT]?",
        "entity": [
            "one",
            "Paul Hausser"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1997",
        "question": "Name the source of Raa ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri } ",
        "SExpr": "(JOIN (R dbo:source) dbr:Ra\u0161a_(river))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN source)) (PP (IN of) (NP (NNP Raa))))) (. ?)))",
        "mask_entity": "Name the source of [ENT] ?",
        "entity": [
            "Raa"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4033",
        "question": "Does Fa'a' International Airport serve tahiti too?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Fa'a'\u0101_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Tahiti> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Fa'a) (`` ')) (NP (NNP International) (NNP Airport)) (VP (VB serve) (NP (NNP tahiti)) (ADVP (RB too))) (. ?)))",
        "mask_entity": "Does [ENT] serve tahiti too?",
        "entity": [
            "Fa'a' International Airport"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3054",
        "question": "Who is the producer of  Frampton's Camel ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?uri } ",
        "SExpr": "(JOIN (R dbp:producer) dbr:Frampton's_Camel)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NNP Frampton) (POS 's)) (NNP Camel)))))) (. ?)))",
        "mask_entity": "Who is the producer of  [ENT]'s [ENT] ?",
        "entity": [
            "Frampton",
            "Camel"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1248",
        "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)> <http://dbpedia.org/ontology/director> ?uri } ",
        "SExpr": "(JOIN (R dbo:director) dbr:Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VB Name)) (NP (NP (DT the) (NNS directors)) (PP (IN of) (NP (NP (NNP Lennon) (NNP Legend)) (: :) (NP (NP (DT The) (RB Very) (JJS Best)) (PP (IN of) (NP (NNP John) (NNP Lennon))))))) (VP (-LRB- () (NP (NNP DVD) (-RRB- )))) (. ?)))",
        "mask_entity": "Name the directors of [ENT]: [ENT] (DVD) ?",
        "entity": [
            "Lennon Legend",
            "The Very Best of John Lennon"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2192",
        "question": "What is the political party of Arun Chandra Guha and Indira Gandhi?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arun_Chandra_Guha> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:party) dbr:Arun_Chandra_Guha) (JOIN (R dbo:party) dbr:Indira_Gandhi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the political party of Arun Chandra Guha and Indira Gandhi",
                    "start": 0,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (NNP Arun) (NNP Chandra) (NNP Guha)) (CC and) (NP (NNP Indira) (NNP Gandhi))))))) (. ?)))",
        "mask_entity": "What is the political party of [ENT] and [ENT]?",
        "entity": [
            "Arun Chandra Guha",
            "Indira Gandhi"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2712",
        "question": "To which country is Svetlana Navasardyan from?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri } ",
        "SExpr": "(JOIN (R dbp:origin) dbr:Svetlana_Navasardyan)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ is) (NP (NNP Svetlana) (NNP Navasardyan)) (PP (IN from)))) (. ?)))",
        "mask_entity": "To which country is [ENT] from?",
        "entity": [
            "Svetlana Navasardyan"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "992",
        "question": "What is the alma mater of the scientist who is known for Rational analysis ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbo:almaMater) (AND dbo:Scientist (JOIN dbo:knownFor dbr:Rational_analysis))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the scientist",
                                "start": 26,
                                "end": 39
                            },
                            {
                                "description": "who is known for Rational analysis",
                                "start": 40,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (JJ Rational) (NN analysis)))))))))))) (. ?)))",
        "mask_entity": "What is the alma mater of the scientist who is known for Rational analysis ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2190",
        "question": "Who is the owner of  Chelsea F.C. ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri } ",
        "SExpr": "(JOIN (R dbp:owner) dbr:Chelsea_F.C.)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Chelsea) (NNP F.C.)))))) (. ?)))",
        "mask_entity": "Who is the owner of  [ENT] ?",
        "entity": [
            "Chelsea F.C."
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3762",
        "question": "In how many places has Don R. Berlin worked?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:employer) dbr:Don_R._Berlin)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (VBZ has) (NP (NNP Don) (NNP R.) (NNP Berlin)) (VP (VBN worked))) (. ?))))",
        "mask_entity": "In how many places has [ENT] worked?",
        "entity": [
            "Don R. Berlin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3597",
        "question": "For how many movies are there whose musicians home town is in Volos ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:music (JOIN dbo:hometown dbr:Volos))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For how many movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "are there whose musicians [IQ1]",
                    "start": 20,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "home town is in Volos",
                                "start": 46,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN For) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS movies)) (SQ (VBP are) (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS musicians) (NN home) (NN town)) (S (VP (VBZ is) (PP (IN in) (NP (NNP Volos))))))) (. ?))))",
        "mask_entity": "For how many movies are there whose musicians home town is in [ENT] ?",
        "entity": [
            "Volos"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1318",
        "question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stagecoach,_Colorado> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:location) dbr:Stagecoach,_Colorado) (JOIN (R dbp:location) dbr:Peetz_Table_Wind_Energy_Center))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In all the places with a stagecoach,",
                    "start": 0,
                    "end": 36
                },
                {
                    "description": "where is a Peetz Table Wind Energy Center located too",
                    "start": 37,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (PP (IN In) (NP (NP (PDT all) (DT the) (NNS places)) (PP (IN with) (NP (NP (DT a) (NN stagecoach)) (, ,) (SBAR (WHADVP (WRB where)) (S (VP (VBZ is) (NP (NP (DT a) (NML (NML (NML (NNP Peetz) (NNP Table)) (NNP Wind)) (NNP Energy)) (NNP Center)) (VP (VBN located) (ADVP (RB too)))))))))) (. ?)))",
        "mask_entity": "In all the places with a stagecoach, where is [ENT] located too?",
        "entity": [
            "a Peetz Table Wind Energy Center"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1863",
        "question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbp:relatives dbr:Huey,_Dewey,_and_Louie) (JOIN dbo:species dbr:American_Pekin_duck)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the fictional character",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "whose relatives are Huey, Dewey, and Louie",
                    "start": 29,
                    "end": 71
                },
                {
                    "description": "and is of species American Pekin duck",
                    "start": 72,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NNS relatives)) (S (VP (VP (VBP are) (NP (NNP Huey) (, ,) (NNP Dewey) (, ,) (CC and) (NNP Louie))) (CC and) (VP (VBZ is) (PP (IN of) (NP (NP (NN species)) (NP (NML (JJ American) (NNP Pekin)) (NN duck)))))))))) (. ?)))",
        "mask_entity": "Name the fictional character whose relatives are [ENT], [ENT], and [ENT] and is of species [ENT] Pekin duck?",
        "entity": [
            "Huey",
            "Dewey",
            "Louie",
            "American"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2343",
        "question": "Who is the owner of the website which has the label Seed Eight ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seed_Eight> <http://dbpedia.org/property/label> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Website>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Website (JOIN (R dbp:label) dbr:Seed_Eight))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the owner of [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the website",
                                "start": 20,
                                "end": 31
                            },
                            {
                                "description": "which has the label Seed Eight",
                                "start": 32,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN website)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN label) (NN Seed) (CD Eight)))))))))) (. ?)))",
        "mask_entity": "Who is the owner of the website which has the label [ENT] ?",
        "entity": [
            "Seed Eight"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2449",
        "question": "In which country is Sierra del Merendin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri  . }",
        "SExpr": "(JOIN (R dbo:country) dbr:Sierra_del_Merend\u00f3n)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ is) (NP (NNP Sierra) (NNP del) (NNP Merendin)))) (. ?)))",
        "mask_entity": "In which country is [ENT]?",
        "entity": [
            "Sierra del Merendin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2136",
        "question": "What is on the border of the places which fall under crook county municipality, oregon?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Crook_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
        "SExpr": "(JOIN (R dbo:border) (JOIN dbo:municipality dbr:Crook_County,_Oregon)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is on the border of [IQ1]",
                    "start": 0,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the places",
                                "start": 25,
                                "end": 35
                            },
                            {
                                "description": "which fall under crook county municipality, Oregon",
                                "start": 36,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (NN border)) (PP (IN of) (NP (NP (DT the) (NNS places)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (NP (NN crook) (NN county) (NN municipality)) (, ,) (NP (NNP oregon))))))))))))) (. ?)))",
        "mask_entity": "What is on the border of the places which fall under crook county municipality, [ENT]?",
        "entity": [
            "oregon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1065",
        "question": "Which is the university of Vanderbilt Commodores ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri } ",
        "SExpr": "(JOIN (R dbo:university) dbr:Vanderbilt_Commodores)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN university)) (PP (IN of) (NP (NNP Vanderbilt) (NNP Commodores)))))) (. ?)))",
        "mask_entity": "Which is the university of [ENT] ?",
        "entity": [
            "Vanderbilt Commodores"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4960",
        "question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }",
        "SExpr": "(AND (JOIN dbp:relatives dbr:Clan_McDuck) (JOIN dbp:relatives dbr:Huey,_Dewey,_and_Louie))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie",
                    "start": 0,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS relatives)) (VP (VBP are) (NP (NP (NNP Clan) (NNP McDuck)) (CC and) (NP (NP (NNP Huey)) (, ,) (NP (NNP Dewey)) (, ,) (CC and) (NP (NNP Louie))))) (. ?)))",
        "mask_entity": "Whose relatives are [ENT] and [ENT], [ENT], and [ENT]?",
        "entity": [
            "Clan McDuck",
            "Huey",
            "Dewey",
            "Louie"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2621",
        "question": "What musicians are signed up with colpix records?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Colpix_Records>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(AND dbo:MusicalArtist (JOIN dbp:label dbr:Colpix_Records))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What musicians",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "are signed up with colpix records",
                    "start": 15,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS musicians)) (SQ (VP (VBP are) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NN colpix) (NNS records)))))) (. ?)))",
        "mask_entity": "What musicians are signed up with colpix records?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "77",
        "question": "Who is the person that first ascented the Cathedral Peak and Mount Hoffmann?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri. <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:firstAscentPerson) dbr:Cathedral_Peak_(California)) (JOIN (R dbo:firstAscentPerson) dbr:Mount_Hoffmann))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the person",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "that first ascended the Cathedral Peak and Mount Hoffmann",
                    "start": 18,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WDT that)) (S (ADVP (RB first)) (VP (VBD ascented) (NP (DT the) (NML (NML (NNP Cathedral) (NNP Peak)) (CC and) (NML (NNP Mount) (NNP Hoffmann)))))))))) (. ?)))",
        "mask_entity": "Who is the person that [ENT] ascented [ENT] and [ENT]?",
        "entity": [
            "first",
            "the Cathedral Peak",
            "Mount Hoffmann"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2898",
        "question": "What currencies are used in the country whose capital is Podgorica?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Podgorica> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
        "SExpr": "(JOIN (R dbp:currency) (JOIN dbo:capital dbr:Podgorica)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What currencies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are used in [IQ1]",
                    "start": 16,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the country",
                                "start": 28,
                                "end": 39
                            },
                            {
                                "description": "whose capital is Podgorica",
                                "start": 40,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS currencies)) (SQ (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WP$ whose) (NN capital)) (S (VP (VBZ is) (NP (NNP Podgorica)))))))))) (. ?)))",
        "mask_entity": "What currencies are used in the country whose capital is [ENT]?",
        "entity": [
            "Podgorica"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1314",
        "question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri }",
        "SExpr": "(JOIN (R dbo:homeStadium) (JOIN dbo:homeStadium dbr:Luzhniki_Stadium)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many other home stadium are there of [IQ1]",
                    "start": 0,
                    "end": 95,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the soccer club",
                                "start": 41,
                                "end": 56
                            },
                            {
                                "description": "whose home stadium is Luzhniki Stadium",
                                "start": 57,
                                "end": 95
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ other) (NN home) (NN stadium)) (VP (VBP are) (ADVP (RB there)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (SBAR (WHNP (WP$ whose) (NN home) (NN stadium)) (S (VP (VBZ is) (NP (NNP Luzhniki) (NNP Stadium))))))))) (. ?)))",
        "mask_entity": "How many other home stadium are there of the soccer club whose home stadium is [ENT] ?",
        "entity": [
            "Luzhniki Stadium"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4372",
        "question": "Where was  William Anthony  trained ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri } ",
        "SExpr": "(JOIN (R dbo:training) dbr:William_Anthony_(artist))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP William) (NNP Anthony)) (VP (VBN trained))) (. ?)))",
        "mask_entity": "Where was  [ENT]  trained ?",
        "entity": [
            "William Anthony"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "872",
        "question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:composer) dbr:Motorpsycho_Nitemare) (JOIN (R dbo:musicBy) dbr:The_Times_They_Are_a-Changin'_(musical)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which composer of Motorpsycho Nitemare",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "has also composed The time are A-Changing",
                    "start": 39,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (S (NP (DT The) (NN time)) (VP (VBP are) (NP (NN A-) (VBG Changing))) (. ?)))",
        "mask_entity": "Which composer of [ENT] has also composed The time are A-Changing ?",
        "entity": [
            "Motorpsycho Nitemare"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3850",
        "question": "What river is it whose source is Dowra?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbp:sourceLocation dbr:Dowra))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What river is it",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose source is Dowra",
                    "start": 17,
                    "end": 38
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VP (VBZ is) (NP (NP (PRP it)) (SBAR (WHNP (WP$ whose) (NN source)) (S (VP (VBZ is) (NP (NNP Dowra)))))))) (. ?)))",
        "mask_entity": "What river is it whose source is [ENT]?",
        "entity": [
            "Dowra"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4787",
        "question": "What is the religion of the president who won the Mongolian legislative election, 2004 ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mongolian_legislative_election,_2004> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbp:leader) dbr:Mongolian_legislative_election,_2004)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the religion of [IQ1]",
                    "start": 0,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the president",
                                "start": 24,
                                "end": 37
                            },
                            {
                                "description": "who won the Mongolian legislative election, 2004",
                                "start": 38,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD won) (NP (DT the) (JJ Mongolian) (JJ legislative) (NN election)) (, ,) (NP (CD 2004)))))))))) (. ?)))",
        "mask_entity": "What is the religion of the president who won the [ENT] legislative election, [ENT] ?",
        "entity": [
            "Mongolian",
            "2004"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2965",
        "question": "Give me everything owned by networks which is lead by Steve Burke?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "SExpr": "(JOIN dbo:network (JOIN dbo:keyPerson dbr:Steve_Burke_(businessman))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me everything",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "owned by [IQ1]",
                    "start": 19,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "networks",
                                "start": 28,
                                "end": 36
                            },
                            {
                                "description": "which is lead by Steve Burke",
                                "start": 37,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN everything)) (VP (VBN owned) (PP (IN by) (NP (NP (NNS networks)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN lead) (PP (IN by) (NP (NNP Steve) (NNP Burke)))))))))))) (. ?)))",
        "mask_entity": "Give me everything owned by networks which is lead by [ENT]?",
        "entity": [
            "Steve Burke"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3391",
        "question": "What is the municipality of Homestead Grays Bridge ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "SExpr": "(JOIN (R dbo:municipality) dbr:Homestead_Grays_Bridge)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (NNP Homestead) (NNP Grays) (NNP Bridge)))))) (. ?)))",
        "mask_entity": "What is the municipality of [ENT] ?",
        "entity": [
            "Homestead Grays Bridge"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2560",
        "question": "What religion do the politicians follow, who graduated from the Yokkohama Nationaal University?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:Politician (JOIN dbp:almaMater dbr:Yokohama_National_University))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religion",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "do the politicians follow,",
                    "start": 14,
                    "end": 40
                },
                {
                    "description": "[IQ1]",
                    "start": 41,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who",
                                "start": 41,
                                "end": 44
                            },
                            {
                                "description": "graduated from the Yokohama National University",
                                "start": 45,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS politicians)) (VP (VB follow)))) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD graduated) (PP (IN from) (NP (DT the) (NML (NNP Yokkohama) (NNP Nationaal)) (NNP University)))))) (. ?)))",
        "mask_entity": "What religion do the politicians follow, who graduated from [ENT]?",
        "entity": [
            "the Yokkohama Nationaal University"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4896",
        "question": "Who is the narrator of The Incredible Hulk , 1982 TV series ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri } ",
        "SExpr": "(JOIN (R dbp:narrated) dbr:The_Incredible_Hulk_(1982_TV_series))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (DT The) (NNP Incredible) (NNP Hulk)) (, ,) (NP (CD 1982) (NN TV) (NN series))))))) (. ?)))",
        "mask_entity": "Who is the narrator of [ENT] , [ENT] TV series ?",
        "entity": [
            "The Incredible Hulk",
            "1982"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2635",
        "question": "What sports are played in schools where Swahili is the official language?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swahili_language> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
        "SExpr": "(JOIN (R dbo:sport) (JOIN dbo:language dbr:Swahili_language)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What sports",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are played in [IQ1]",
                    "start": 12,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "schools",
                                "start": 26,
                                "end": 33
                            },
                            {
                                "description": "where Swahili is the official language",
                                "start": 34,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VP (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Swahili)) (VP (VBZ is) (NP (DT the) (JJ official) (NN language)))))))))) (. ?)))",
        "mask_entity": "What sports are played in schools where [ENT] is the official language?",
        "entity": [
            "Swahili"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3530",
        "question": "Which interest of Philip Novak is the relegion of Vesak ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:mainInterests) dbr:Philip_Novak) (JOIN (R dbo:type) dbr:Vesak))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which interest of Philip Novak",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "is the religion of Vesak",
                    "start": 31,
                    "end": 55
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN interest)) (PP (IN of) (NP (NNP Philip) (NNP Novak)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN relegion)) (PP (IN of) (NP (NNP Vesak)))))) (. ?)))",
        "mask_entity": "Which interest of [ENT] is the relegion of [ENT] ?",
        "entity": [
            "Philip Novak",
            "Vesak"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "375",
        "question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Anglo-Frisian_languages> . ?uri <http://dbpedia.org/property/languages> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "SExpr": "(AND dbo:EthnicGroup (JOIN dbp:languages (JOIN dbo:languageFamily dbr:Anglo-Frisian_languages))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count all the ethinic group",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "who speaks [IQ1]",
                    "start": 28,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "language",
                                "start": 39,
                                "end": 47
                            },
                            {
                                "description": "which belongs to Anglo-Frisian language family",
                                "start": 48,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ ethinic) (NN group)) (SBAR (WHNP (WP who)) (S (VP (VBZ speaks) (NP (NP (NN language)) (SBAR (WHNP (WDT which)) (S (VP (VBZ belongs) (PP (IN to) (NP (ADJP (JJ Anglo) (HYPH -) (JJ Frisian)) (NN language) (NN family)))))))))))) (. ?)))",
        "mask_entity": "Count all the ethinic group who speaks language which belongs to [ENT] language family ?",
        "entity": [
            "Anglo-Frisian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1908",
        "question": "What is the area of the Tar Heel Sports Network which is  official residence of the Michael Nichols (photographer) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri. <http://dbpedia.org/resource/Michael_Nichols_(photographer)> <http://dbpedia.org/ontology/residence> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:area) dbr:Tar_Heel_Sports_Network) (JOIN (R dbo:residence) dbr:Michael_Nichols_(photographer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the area of the Tar Heel Sports Network",
                    "start": 0,
                    "end": 47
                },
                {
                    "description": "which is official residence of the Michael Nichols (photographer)",
                    "start": 48,
                    "end": 113
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NML (NNP Tar) (NNP Heel)) (NNP Sports) (NNP Network)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (JJ official) (NN residence)) (PP (IN of) (NP (NP (DT the) (NML (NML (NNP Michael) (NNP Nichols)) (-LRB- ()) (NN photographer)) (ADVP (-RRB- )))))))))))))) (. ?)))",
        "mask_entity": "What is the area of [ENT] which is  official residence of the [ENT] (photographer) ?",
        "entity": [
            "the Tar Heel Sports Network",
            "Michael Nichols"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4332",
        "question": "Cologny and Lancy are the neighboring municipalities of which place ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (AND (JOIN dbp:neighboringMunicipalities dbr:Cologny) (JOIN dbp:neighboringMunicipalities dbr:Lancy)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Cologny and Lancy are the neighboring municipalities of",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "which place",
                    "start": 56,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Cologny) (CC and) (NNP Lancy)) (VP (VBP are) (NP (NP (DT the) (VBG neighboring) (NNS municipalities)) (WHPP (IN of) (WHNP (WDT which) (NN place))))) (. ?)))",
        "mask_entity": "[ENT] and [ENT] are the neighboring municipalities of which place ?",
        "entity": [
            "Cologny",
            "Lancy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4379",
        "question": "How many artists have their works in the Sao Paolo Museum of Art?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(AND dbo:Artist (JOIN (R dbp:artist) (JOIN dbp:museum dbr:S\u00e3o_Paulo_Museum_of_Art))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many artists",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "have their works [IQ1]",
                    "start": 17,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "in the Sao Paolo Museum of Art",
                                "start": 34,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS artists)) (VP (VBP have) (NP (NP (PRP$ their) (NNS works)) (PP (IN in) (NP (NP (DT the) (NML (NNP Sao) (NNP Paolo)) (NNP Museum)) (PP (IN of) (NP (NNP Art)))))))) (. ?)))",
        "mask_entity": "How many artists have their works in [ENT]?",
        "entity": [
            "the Sao Paolo Museum of Art"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4027",
        "question": "VP-8 and VP-10 shares which command structure ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/VP-8> <http://dbpedia.org/ontology/commandStructure> ?uri. <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:commandStructure) dbr:VP-8) (JOIN (R dbo:commandStructure) dbr:VP-10))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "VP-8 and VP-10 shares which command structure",
                    "start": 0,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NP (NNP VP) (, -) (CD 8)) (CC and) (NP (NML (NNP VP) (SYM -) (CD 10)) (NNS shares))) (SBAR (WHNP (WDT which)) (S (VP (NN command) (NP (NN structure))))) (. ?)))",
        "mask_entity": "VP-8 and [ENT] shares which command structure ?",
        "entity": [
            "VP-10"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1604",
        "question": "What is used as money for French Southern and Antarctic Lands is also the  product of the Karafarin Bank ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:currency) dbr:French_Southern_and_Antarctic_Lands) (JOIN (R dbo:product) dbr:Karafarin_Bank))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is used as money for French Southern and Antarctic Lands",
                    "start": 0,
                    "end": 61
                },
                {
                    "description": "is also the product of the Karafarin Bank",
                    "start": 62,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WP What)) (S (VP (VBZ is) (VP (VBN used) (PP (IN as) (NP (NP (NN money)) (PP (IN for) (NP (NP (JJ French) (JJ Southern)) (CC and) (NP (NNP Antarctic) (NNPS Lands)))))))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN product)) (PP (IN of) (NP (DT the) (NNP Karafarin) (NNP Bank))))) (. ?)))",
        "mask_entity": "What is used as money for [ENT] and [ENT] is also the  product of [ENT] ?",
        "entity": [
            "French Southern",
            "Antarctic Lands",
            "the Karafarin Bank"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1118",
        "question": "Give me the total number of membership of the organisations which have memebers as  Azerbaijan?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> . ?x <http://dbpedia.org/property/membership> ?uri }",
        "SExpr": "(JOIN (R dbp:membership) (JOIN dbp:membership dbr:Azerbaijan)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the total number of membership of [IQ1]",
                    "start": 0,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the organisations",
                                "start": 42,
                                "end": 59
                            },
                            {
                                "description": "which have members as Azerbaijan",
                                "start": 60,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN membership)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS memebers)) (PP (IN as) (NP (NNP Azerbaijan))))))))))))) (. ?)))",
        "mask_entity": "Give me the total number of membership of the organisations which have memebers as  [ENT]?",
        "entity": [
            "Azerbaijan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3677",
        "question": "What is the content licence of MSX BASIC ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri } ",
        "SExpr": "(JOIN (R dbp:license) dbr:MSX_BASIC)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN content) (NN licence)) (PP (IN of) (NP (NNP MSX) (NNP BASIC)))))) (. ?)))",
        "mask_entity": "What is the content licence of MSX BASIC ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3490",
        "question": "What are the central characters in spy kids series?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Spy_Kids_(franchise)>  . }",
        "SExpr": "(JOIN dbo:series dbr:Spy_Kids_(franchise))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ central) (NNS characters)) (PP (IN in) (NP (NML (NN spy) (NNS kids)) (NN series)))))) (. ?)))",
        "mask_entity": "What are the central characters in spy kids series?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "4864",
        "question": "Which comic characters were created by Paul Dini?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "SExpr": "(AND dbo:ComicsCharacter (JOIN dbp:creators dbr:Paul_Dini))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which comic characters",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "were created by Paul Dini",
                    "start": 23,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ comic) (NNS characters)) (SQ (VP (VBD were) (VP (VBN created) (PP (IN by) (NP (NNP Paul) (NNP Dini)))))) (. ?)))",
        "mask_entity": "Which comic characters were created by [ENT]?",
        "entity": [
            "Paul Dini"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2958",
        "question": "who owns the ship Victoria?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victoria_(ship)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "SExpr": "(JOIN (R dbo:owner) dbr:Victoria_(ship))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP who)) (S (VP (VBZ owns) (NP (DT the) (NN ship)) (NP (NNP Victoria)))) (. ?)))",
        "mask_entity": "who owns the ship [ENT]?",
        "entity": [
            "Victoria"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1994",
        "question": "Where was the predecessor of Sevan Ross born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "SExpr": "(JOIN (R dbp:placeOfBirth) (JOIN dbo:successor dbr:Sevan_Ross)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was [IQ1] born",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the predecessor of Sevan Ross",
                                "start": 10,
                                "end": 39
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NP (NNP Sevan) (NNP Ross)) (VP (VBN born)))))) (. ?)))",
        "mask_entity": "Where was the predecessor of [ENT] born?",
        "entity": [
            "Sevan Ross"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4955",
        "question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:owner) dbr:Ted_Williams_Tunnel) (JOIN (R dbp:owner) dbr:Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which city council",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "owns the Ted Williams tunnel and Leonard Memorial ridge",
                    "start": 19,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN city) (NN council)) (S (VP (VBZ owns) (NP (NP (DT the) (NML (NNP Ted) (NNP Williams)) (NN tunnel)) (CC and) (NP (NML (NNP Leonard) (NNP Memorial)) (NN ridge))))) (. ?)))",
        "mask_entity": "Which city council owns the [ENT] tunnel and [ENT] ridge?",
        "entity": [
            "Ted Williams",
            "Leonard Memorial"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4355",
        "question": "Where is the school which is the rival of Somerset Berkley Regional High?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:region) (AND dbo:School (JOIN (R dbo:rival) dbr:Somerset_Berkley_Regional_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the school",
                                "start": 9,
                                "end": 19
                            },
                            {
                                "description": "which is the rival of Somerset Berkley Regional High",
                                "start": 20,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN school)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN rival)) (PP (IN of) (NP (NNP Somerset) (NNP Berkley) (NNP Regional) (NNP High))))))))) (. ?)))",
        "mask_entity": "Where is the school which is the rival of [ENT]?",
        "entity": [
            "Somerset Berkley Regional High"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2376",
        "question": "How many soccer manager have been in the Spain nation football team?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
        "SExpr": "(AND dbo:SoccerManager (JOIN dbp:nationalteam dbr:Spain_national_football_team))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many soccer manager",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "have been in the Spain nation football team",
                    "start": 24,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN soccer) (NN manager)) (VP (VBP have) (VP (VBN been) (PP (IN in) (NP (DT the) (NML (NNP Spain) (NN nation)) (NN football) (NN team)))))) (. ?)))",
        "mask_entity": "How many soccer manager have been in the [ENT] nation football team?",
        "entity": [
            "Spain"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1342",
        "question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:education) dbr:Henry_Morton_Dexter) (JOIN (R dbo:education) dbr:Jack_McGregor))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
                    "start": 0,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NML (JJ common) (NN alma)) (NN mater)) (PP (IN of) (NP (NP (DT the) (NML (NNP Henry) (NNP Morton)) (NNP Dexter)) (CC and) (NP (NNP Jack) (NNP McGregor))))))))",
        "mask_entity": "Name the common alma mater of [ENT] and [ENT]",
        "entity": [
            "the Henry Morton Dexter",
            "Jack McGregor"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "320",
        "question": "What are some companies which are founded in Dallas Jurisdiction?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (JOIN dbo:foundationPlace (JOIN dbp:governingBody dbr:Dallas))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some companies",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "which are founded in [IQ1]",
                    "start": 24,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Dallas Jurisdiction",
                                "start": 45,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS companies)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN founded) (PP (IN in) (NP (NNP Dallas) (NNP Jurisdiction)))))))))) (. ?)))",
        "mask_entity": "What are some companies which are founded in [ENT]?",
        "entity": [
            "Dallas Jurisdiction"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1619",
        "question": "How many bands collaborated with artists who signed up with EMI?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "SExpr": "(AND dbo:Band (JOIN (R dbo:associatedMusicalArtist) (JOIN dbo:recordLabel dbr:EMI))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many bands",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "collaborated with [IQ1]",
                    "start": 15,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "artists",
                                "start": 33,
                                "end": 40
                            },
                            {
                                "description": "who signed up with EMI",
                                "start": 41,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS bands)) (VP (VBD collaborated) (PP (IN with) (NP (NP (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI)))))))))) (. ?)))",
        "mask_entity": "How many bands collaborated with artists who signed up with [ENT]?",
        "entity": [
            "EMI"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3713",
        "question": "What is the purpose of New Zealand Chess Federation ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri } ",
        "SExpr": "(JOIN (R dbp:purpose) dbr:New_Zealand_Chess_Federation)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN purpose)) (PP (IN of) (NP (NNP New) (NNP Zealand) (NNP Chess) (NNP Federation)))))) (. ?)))",
        "mask_entity": "What is the purpose of [ENT] ?",
        "entity": [
            "New Zealand Chess Federation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2060",
        "question": "How many TV shows are of the company which are of company which is a subsidiary of Big  Ticket Entertainment ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:company (JOIN dbo:subsidiary dbr:Big_Ticket_Entertainment))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many TV shows",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "are of the company [IQ1]",
                    "start": 18,
                    "end": 107,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which are of company",
                                "start": 37,
                                "end": 57
                            },
                            {
                                "description": "which is a subsidiary of Big Ticket Entertainment",
                                "start": 58,
                                "end": 107
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN TV) (NNS shows)) (VP (VBP are) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT a) (NN subsidiary)) (PP (IN of) (NP (NNP Big) (NNP Ticket) (NNP Entertainment)))))))))))))))) (. ?)))",
        "mask_entity": "How many TV shows are of the company which are of company which is a subsidiary of [ENT] ?",
        "entity": [
            "Big  Ticket Entertainment"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2219",
        "question": "Who operates twin Cities 400 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "SExpr": "(JOIN (R dbo:operatedBy) dbr:Twin_Cities_400)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBZ operates) (NP (JJ twin) (NNS Cities) (CD 400)))) (. ?)))",
        "mask_entity": "Who operates twin Cities [ENT] ?",
        "entity": [
            "400"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1673",
        "question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri. <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/property/restingplace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:authority) dbr:Maine_School_of_Science_and_Mathematics) (JOIN (R dbp:restingplace) dbr:Charles_A._Boutelle))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the city of the Maine School of Science and Mathematics",
                    "start": 0,
                    "end": 63
                },
                {
                    "description": "is also the resting place of Charles A. Boutelle",
                    "start": 64,
                    "end": 112
                }
            ]
        },
        "constituency": "(ROOT (SINV (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NP (DT the) (NNP Maine) (NNP School)) (PP (IN of) (NP (NNP Science) (CC and) (NNP Mathematics))))))))) (VP (VBZ is)) (ADVP (RB also)) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (NNP Charles) (NNP A.) (NNP Boutelle)))) (. ?)))",
        "mask_entity": "What is the city of [ENT] is also the resting place of [ENT] ?",
        "entity": [
            "the Maine School of Science and Mathematics",
            "Charles A. Boutelle"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "260",
        "question": "Give me a count of royalties buried in Rome ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(AND dbo:Royalty (JOIN dbp:placeOfBurial dbr:Rome))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me a count of royalties",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "buried in Rome",
                    "start": 29,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NP (NNS royalties)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. ?)))",
        "mask_entity": "Give me a count of royalties buried in [ENT] ?",
        "entity": [
            "Rome"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4417",
        "question": "In how many places are Marjas found?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Marja'> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "SExpr": "(AND dbo:Location (JOIN (R dbo:location) (JOIN dbp:title dbr:Marja'))",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (VBP are) (NP (NNP Marjas)) (VP (VBN found))) (. ?))))",
        "mask_entity": "In how many places are [ENT] found?",
        "entity": [
            "Marjas"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2039",
        "question": "List the soccer players whose current team has the ground Stoke-on-Trent.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "SExpr": "(AND dbo:SoccerPlayer (JOIN dbp:currentclub (JOIN dbp:ground dbr:Stoke-on-Trent))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the soccer players",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "whose current team [IQ1]",
                    "start": 24,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has the ground Stoke-on-Trent",
                                "start": 43,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ current) (NN team)) (S (VP (VBZ has) (NP (DT the) (NN ground) (NNP Stoke-on) (HYPH -) (NNP Trent))))))) (. .)))",
        "mask_entity": "List the soccer players whose current team has the ground Stoke-on-Trent.",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "901",
        "question": "Which are the countires where Pioneer Corporation has flourished?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri } ",
        "SExpr": "(JOIN (R dbp:country) dbr:Pioneer_Corporation)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS countires)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Pioneer) (NNP Corporation)) (VP (VBZ has) (VP (VBN flourished)))))))) (. ?)))",
        "mask_entity": "Which are the countires where [ENT] has flourished?",
        "entity": [
            "Pioneer Corporation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3744",
        "question": "Who is the president of Carl Stokes nad Wyche Fowler ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:president) dbr:Carl_Stokes) (JOIN (R dbo:president) dbr:Wyche_Fowler))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the president of Carl Stokes and Wyche Fowler",
                    "start": 0,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NP (NNP Carl) (NNP Stokes)) (PP (IN nad) (NP (NNP Wyche) (NNP Fowler)))))))) (. ?)))",
        "mask_entity": "Who is the president of [ENT] nad [ENT] ?",
        "entity": [
            "Carl Stokes",
            "Wyche Fowler"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2026",
        "question": "Is God Save the Queen the national anthem of United Kingdom?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP God)) (VP (VB Save) (NP (DT the) (NNP Queen)) (NP (NP (DT the) (JJ national) (NN anthem)) (PP (IN of) (NP (NNP United) (NNP Kingdom))))) (. ?)))",
        "mask_entity": "Is God Save the Queen the national anthem of [ENT]?",
        "entity": [
            "United Kingdom"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1917",
        "question": "List few Swedish language movies ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:language dbr:Swedish_language))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List few Swedish language movies",
                    "start": 0,
                    "end": 32
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (JJ few) (JJ Swedish) (NN language) (NNS movies))) (. ?)))",
        "mask_entity": "List few [ENT] language movies ?",
        "entity": [
            "Swedish"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1828",
        "question": "Was christina crawford trained by Booker T?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (NNP christina) (NNP crawford)) (VP (VBN trained) (PP (IN by) (NP (NNP Booker) (NNP T))))) (. ?)))",
        "mask_entity": "Was christina crawford trained by [ENT]?",
        "entity": [
            "Booker T"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1573",
        "question": "What is the currency of Kerguelen Islands ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri } ",
        "SExpr": "(JOIN (R dbo:currency) dbr:Kerguelen_Islands)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN currency)) (PP (IN of) (NP (NNP Kerguelen) (NNPS Islands)))))) (. ?)))",
        "mask_entity": "What is the currency of [ENT] ?",
        "entity": [
            "Kerguelen Islands"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4394",
        "question": "What are the musicals whose musicians worked under Sony Music Entertainment?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "SExpr": "(AND dbo:Musical (JOIN dbp:music (JOIN dbp:label dbr:Sony_Music_Entertainment))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the musicals",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose musicians worked [IQ1]",
                    "start": 22,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "under Sony Music Entertainment",
                                "start": 45,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS musicals)) (SBAR (WHNP (WP$ whose) (NNS musicians)) (S (VP (VBD worked) (PP (IN under) (NP (NNP Sony) (NNP Music) (NNP Entertainment))))))))) (. ?)))",
        "mask_entity": "What are the musicals whose musicians worked under [ENT]?",
        "entity": [
            "Sony Music Entertainment"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4208",
        "question": "Whose shrines are in a place governed by Justin Trudeau?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Justin_Trudeau> . ?uri <http://dbpedia.org/ontology/majorShrine> ?x  . }",
        "SExpr": "(JOIN dbo:majorShrine (JOIN dbp:leaderName dbr:Justin_Trudeau)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose shrines are in [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a place",
                                "start": 21,
                                "end": 28
                            },
                            {
                                "description": "governed by Justin Trudeau",
                                "start": 29,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS shrines)) (VP (VBP are) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NNP Justin) (NNP Trudeau))))))) (. ?)))",
        "mask_entity": "Whose shrines are in a place governed by [ENT]?",
        "entity": [
            "Justin Trudeau"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "224",
        "question": "What are the academic interests of the past members of Senser?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?x . ?x <http://dbpedia.org/property/mainInterests> ?uri  . }",
        "SExpr": "(JOIN (R dbp:mainInterests) (JOIN (R dbp:pastMembers) dbr:Senser)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the academic interests of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the past members of Senser",
                                "start": 35,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ academic) (NNS interests)) (PP (IN of) (NP (NP (DT the) (JJ past) (NNS members)) (PP (IN of) (NP (NNP Senser)))))))) (. ?)))",
        "mask_entity": "What are the academic interests of the past members of [ENT]?",
        "entity": [
            "Senser"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "723",
        "question": "Who is the leader of Hackweiser ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/property/leaderName> ?uri } ",
        "SExpr": "(JOIN (R dbp:leaderName) dbr:Hackweiser)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Hackweiser)))))) (. ?)))",
        "mask_entity": "Who is the leader of [ENT] ?",
        "entity": [
            "Hackweiser"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4485",
        "question": "In which city is the sister station of KTXY located ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/city> ?uri  . }",
        "SExpr": "(JOIN (R dbo:city) (JOIN (R dbo:sisterStation) dbr:KTXY)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which city",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "is [IQ1] located",
                    "start": 14,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sister station of KTXY",
                                "start": 17,
                                "end": 43
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN city)) (VP (VBZ is) (NP (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NNP KTXY)))) (VP (VBN located))))) (. ?)))",
        "mask_entity": "In which city is the sister station of [ENT] located ?",
        "entity": [
            "KTXY"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1141",
        "question": "Where was the successor of Hank Brown born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:birthPlace) (JOIN (R dbp:successor) dbr:Hank_Brown)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was [IQ1] born",
                    "start": 0,
                    "end": 42,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the successor of Hank Brown",
                                "start": 10,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NP (NNP Hank) (NNP Brown)) (VP (VBN born)))))) (. ?)))",
        "mask_entity": "Where was the successor of [ENT] born?",
        "entity": [
            "Hank Brown"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2762",
        "question": "Name the constituency of Jonas Gahr where Sverre Krogh was born ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:constituency) dbr:Jonas_Gahr_St\u00f8re) (JOIN (R dbp:birthPlace) dbr:Sverre_Krogh_Sundb\u00f8))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the constituency of Jonas Gahr",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "where Sverre Krogh was born",
                    "start": 36,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN constituency)) (PP (IN of) (NP (NP (NNP Jonas) (NNP Gahr)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Sverre) (NNP Krogh)) (VP (VBD was) (VP (VBN born))))))))) (. ?)))",
        "mask_entity": "Name the constituency of [ENT] where [ENT] was born ?",
        "entity": [
            "Jonas Gahr",
            "Sverre Krogh"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "846",
        "question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_Urban> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:battle) dbr:Stephen_Urban) (JOIN (R dbp:battles) dbr:Ali_Habib_Mahmud))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud",
                    "start": 0,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN battle)) (VP (VBN fought) (PP (IN by) (NP (NP (NNP Stephen) (NNP Urban)) (CC and) (NP (NNP Ali) (NNP Habib) (NNP Mahmud)))))))) (. ?)))",
        "mask_entity": "What is the common battle fought by [ENT] and [ENT] ?",
        "entity": [
            "Stephen Urban",
            "Ali Habib Mahmud"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2551",
        "question": "What is the relegious affiliations of Katyayana ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri } ",
        "SExpr": "(JOIN (R dbp:religion) dbr:Katyayana_(Buddhist))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ relegious) (NNS affiliations)) (PP (IN of) (NP (NNP Katyayana)))))) (. ?)))",
        "mask_entity": "What is the relegious affiliations of [ENT] ?",
        "entity": [
            "Katyayana"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2928",
        "question": "Where was the engineer born who manufactured EP R.E.P. 1?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1> <http://dbpedia.org/property/manufacturer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:birthPlace) (JOIN (R dbp:manufacturer) dbr:Esnault-Pelterie_R.E.P._1)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was the engineer born [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who manufactured EP R.E.P. 1",
                                "start": 28,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN engineer)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD manufactured) (NP (NNP EP) (NNP R.E.P.) (CD 1))))))) (. ?)))",
        "mask_entity": "Where was the engineer born who manufactured [ENT]?",
        "entity": [
            "EP R.E.P. 1"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "117",
        "question": "who all have been a manager of english under twenty one football team?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> } ",
        "SExpr": "(JOIN dbp:managerclubs dbr:England_national_under-21_football_team)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP who)) (S (NP (DT all)) (VP (VBP have) (VP (VBN been) (NP (NP (DT a) (NN manager)) (PP (IN of) (NP (NN english)))) (PP (IN under) (NP (CD twenty) (CD one) (NN football) (NN team)))))) (. ?)))",
        "mask_entity": "who all have been a manager of english under [ENT] football team?",
        "entity": [
            "twenty one"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "645",
        "question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(AND dbo:MilitaryConflict (AND (JOIN dbo:commander dbr:John_McEwen) (JOIN dbo:commander dbr:Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the military conflict",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose commanders are John McEwen and Phm Vn ng",
                    "start": 30,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ military) (NN conflict)) (SBAR (WHNP (WP$ whose) (NNS commanders)) (S (VP (VBP are) (NP (NP (NNP John) (NNP McEwen)) (CC and) (NP (NNP Phm) (NNP Vn) (NNP ng))))))))) (. ?)))",
        "mask_entity": "What is the military conflict whose commanders are [ENT] and [ENT]?",
        "entity": [
            "John McEwen",
            "Phm Vn ng"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3",
        "question": "Which party has come in power in Mumbai North?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "SExpr": "(JOIN (R dbo:party) (JOIN dbp:constituency dbr:Mumbai_North_(Lok_Sabha_constituency))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VBZ has) (VP (VBN come) (PP (IN in) (NP (NN power))) (PP (IN in) (NP (NNP Mumbai) (NNP North))))) (. ?)))",
        "mask_entity": "Which party has come in power in [ENT]?",
        "entity": [
            "Mumbai North"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4170",
        "question": "Name the tv show with judges Randy Jackson and Jennifer Lopez?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Randy_Jackson) (JOIN dbp:judges dbr:Jennifer_Lopez)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the tv show",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with judges Randy Jackson and Jennifer Lopez",
                    "start": 17,
                    "end": 61
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN tv) (NN show)) (PP (IN with) (NP (NP (NNS judges)) (NP (NP (NNP Randy) (NNP Jackson)) (CC and) (NP (NNP Jennifer) (NNP Lopez))))))) (. ?)))",
        "mask_entity": "Name the tv show with judges [ENT] and [ENT]?",
        "entity": [
            "Randy Jackson",
            "Jennifer Lopez"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "467",
        "question": "What is the largest city of the country which hosted the 1951 Asian Games?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(JOIN (R dbo:largestCity) (AND dbo:Country (JOIN (R dbp:hostCity) dbr:1951_Asian_Games))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the largest city of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the country",
                                "start": 28,
                                "end": 39
                            },
                            {
                                "description": "which hosted the 1951 Asian Games",
                                "start": 40,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBD hosted) (NP (DT the) (CD 1951) (JJ Asian) (NNPS Games)))))))))) (. ?)))",
        "mask_entity": "What is the largest city of the country which hosted the [ENT] [ENT]?",
        "entity": [
            "1951",
            "Asian Games"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "5",
        "question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(AND dbo:Royalty (AND (JOIN dbp:mother dbr:Cleopatra_V_of_Egypt) (JOIN dbp:spouse dbr:Ptolemy_XIII_Theos_Philopator)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which royalty",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was married to ptolemy XIII Theos Philopator",
                    "start": 14,
                    "end": 58
                },
                {
                    "description": "and had mother named Cleopatra V",
                    "start": 59,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN royalty)) (S (VP (VP (VBD was) (VP (VBN married) (PP (IN to) (NP (NNP ptolemy) (CD XIII) (NNP Theos) (NNP Philopator))))) (CC and) (VP (VBD had) (NP (NP (NN mother)) (VP (VBN named) (S (NP (NNP Cleopatra) (NNP V)))))))) (. ?)))",
        "mask_entity": "Which royalty was married to ptolemy XIII [ENT] and had mother named [ENT] ?",
        "entity": [
            "Theos Philopator",
            "Cleopatra V"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "919",
        "question": "Whose theme music was composed by a band which collaborated with Phish?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
        "SExpr": "(JOIN dbp:themeMusicComposer (JOIN dbo:associatedBand dbr:Phish)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose theme music was composed by [IQ1]",
                    "start": 0,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a band",
                                "start": 34,
                                "end": 40
                            },
                            {
                                "description": "which collaborated with Phish",
                                "start": 41,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NN theme) (NN music)) (VP (VBD was) (VP (VBN composed) (PP (IN by) (NP (NP (DT a) (NN band)) (SBAR (WHNP (WDT which)) (S (VP (VBD collaborated) (PP (IN with) (NP (NNP Phish)))))))))) (. ?)))",
        "mask_entity": "Whose theme music was composed by a band which collaborated with [ENT]?",
        "entity": [
            "Phish"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2595",
        "question": "Is morrissey in the smiths?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (NN morrissey)) (PP (IN in) (NP (DT the) (NNS smiths)))) (. ?)))",
        "mask_entity": "Is morrissey in the smiths?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1063",
        "question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:capital) dbr:Pulau_Ubin) (JOIN (R dbo:restingPlace) dbr:Nicole_Lai))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which administrative headquarters of the Pulau Ubin",
                    "start": 0,
                    "end": 51
                },
                {
                    "description": "is also the resting place of the Nicole Lai",
                    "start": 52,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ administrative) (NNS headquarters)) (PP (IN of) (NP (DT the) (NNP Pulau) (NNP Ubin)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (DT the) (NNP Nicole) (NNP Lai))))))))",
        "mask_entity": "Which administrative headquarters of [ENT] is also the resting place of the [ENT]",
        "entity": [
            "the Pulau Ubin",
            "Nicole Lai"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2590",
        "question": "Where did the beverages sold by Refriango originate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
        "SExpr": "(JOIN (R dbp:origin) (AND dbo:Beverage (JOIN dbo:manufacturer dbr:Refriango))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] originate",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the beverages",
                                "start": 10,
                                "end": 23
                            },
                            {
                                "description": "sold by Refriango",
                                "start": 24,
                                "end": 41
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NNS beverages)) (VP (VBN sold) (PP (IN by) (NP (NNP Refriango))) (S (VP (VB originate))))) (. ?)))",
        "mask_entity": "Where did the beverages sold by [ENT] originate?",
        "entity": [
            "Refriango"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "242",
        "question": "Who built the stadium which was rented by Costa Rica national football team?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(JOIN (R dbo:builder) (AND dbo:Stadium (JOIN dbp:tenants dbr:Costa_Rica_national_football_team))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who built [IQ1]",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 10,
                                "end": 21
                            },
                            {
                                "description": "which was rented by Costa Rica national football team",
                                "start": 22,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD built) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN rented) (PP (IN by) (NP (NML (NNP Costa) (NNP Rica)) (JJ national) (NN football) (NN team)))))))))) (. ?)))",
        "mask_entity": "Who built the stadium which was rented by [ENT] national football team?",
        "entity": [
            "Costa Rica"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1160",
        "question": "In which country does the Auckland rugby union team play  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auckland_rugby_union_team> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
        "SExpr": "(JOIN (R dbo:country) (JOIN (R dbo:league) dbr:Auckland_rugby_union_team)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "does [IQ1] play",
                    "start": 17,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Auckland rugby union team",
                                "start": 22,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ does) (S (NP (DT the) (NNP Auckland) (NML (JJ rugby) (NN union)) (NN team)) (VP (VB play))))) (. ?)))",
        "mask_entity": "In which country does the [ENT] rugby union team play  ?",
        "entity": [
            "Auckland"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2870",
        "question": "What is the serving railway line of Warwick railway station, Perth ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
        "SExpr": "(JOIN (R dbo:servingRailwayLine) dbr:Warwick_railway_station,_Perth)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (VBG serving) (NN railway) (NN line)) (PP (IN of) (NP (NP (NNP Warwick) (NN railway) (NN station)) (, ,) (NP (NNP Perth))))))) (. ?)))",
        "mask_entity": "What is the serving railway line of [ENT] railway station, [ENT] ?",
        "entity": [
            "Warwick",
            "Perth"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3735",
        "question": "What is the radio show created by Timoteo Jeffries, about?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> . ?x <http://dbpedia.org/property/format> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioProgram>}",
        "SExpr": "(JOIN (R dbp:format) (AND dbo:RadioProgram (JOIN dbp:creator dbr:Timoteo_Jeffries))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is [IQ1] about",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the radio show",
                                "start": 8,
                                "end": 22
                            },
                            {
                                "description": "created by Timoteo Jeffries,",
                                "start": 23,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN radio) (NN show)) (VP (VBN created) (PP (IN by) (NP (NNP Timoteo) (NNP Jeffries))))) (, ,) (S (ADJP (IN about))))) (. ?)))",
        "mask_entity": "What is the radio show created by [ENT], about?",
        "entity": [
            "Timoteo Jeffries"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2397",
        "question": "Where are all the protected areas near Bend, Oregon?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
        "SExpr": "(JOIN (R dbo:location) (AND dbo:ProtectedArea (JOIN dbo:nearestCity dbr:Bend,_Oregon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where are all [IQ1]",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the protected areas",
                                "start": 14,
                                "end": 33
                            },
                            {
                                "description": "near Bend, Oregon",
                                "start": 34,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBP are)) (NP (NP (PDT all) (DT the) (VBN protected) (NNS areas)) (PP (IN near) (NP (NP (NNP Bend)) (, ,) (NP (NNP Oregon)))))) (. ?)))",
        "mask_entity": "Where are all the protected areas near [ENT], [ENT]?",
        "entity": [
            "Bend",
            "Oregon"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3517",
        "question": "Was True Grit a novel of the western genre?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (JJ True) (NNP Grit)) (NP (NP (DT a) (NN novel)) (PP (IN of) (NP (DT the) (JJ western) (NN genre)))) (. ?)))",
        "mask_entity": "Was True Grit a novel of the western genre?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3421",
        "question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:series) dbr:Short_Trips:_A_Day_in_the_Life) (JOIN (R dbo:notableWork) dbr:Russell_T_Davies))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which notable series of Russell T Davies",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is also the series of Short Trips: A day in the life",
                    "start": 41,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ notable) (NN series)) (PP (IN of) (NP (NNP Russell) (NNP T) (NNPS Davies)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (NP (DT the) (NN series)) (PP (IN of) (NP (JJ Short) (NNPS Trips)))) (: :) (NP (NP (DT A) (NN day)) (PP (IN in) (NP (DT the) (NN life))))))) (. ?)))",
        "mask_entity": "Which notable series of [ENT] is also the series of [ENT]: A day in the life ?",
        "entity": [
            "Russell T Davies",
            "Short Trips"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2563",
        "question": "Which battles were fought under the president when Chung Won Shik was the prime minister?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(JOIN (R dbp:battles) (AND dbo:President (JOIN dbp:primeminister dbr:Chung_Won-shik))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which battles",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "were fought under [IQ1]",
                    "start": 14,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the president",
                                "start": 32,
                                "end": 45
                            },
                            {
                                "description": "when Chung Won Shik was the prime minister",
                                "start": 46,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (SBAR (WHNP (WDT Which) (NNS battles)) (S (VP (VBD were) (VP (VBN fought) (PP (IN under) (NP (DT the) (NN president))) (SBAR (WHADVP (WRB when)) (S (NP (NNP Chung)) (VP (VBD Won) (NP (NNP Shik))))))))) (VP (VBD was)) (NP (DT the) (JJ prime) (NN minister)) (. ?)))",
        "mask_entity": "Which battles were fought under the president when [ENT] was the prime minister?",
        "entity": [
            "Chung Won Shik"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1605",
        "question": "Which office holder's resting place is in  Palo Alto, California and was succeeded by Adrian A. Basora ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbp:restingPlace dbr:Palo_Alto,_California) (JOIN dbp:successor dbr:Adrian_A._Basora)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which office holder's",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "resting place is in Palo Alto, California",
                    "start": 22,
                    "end": 63
                },
                {
                    "description": "and was succeeded by Adrian A. Basora",
                    "start": 64,
                    "end": 101
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN office) (NN holder) (POS 's)) (NN resting) (NN place)) (VP (VP (VBZ is) (PP (IN in) (NP (NP (NNP Palo) (NNP Alto)) (, ,) (NP (NNP California))))) (CC and) (VP (VBD was) (VP (VBN succeeded) (PP (IN by) (NP (NNP Adrian) (NNP A.) (NNP Basora)))))) (. ?)))",
        "mask_entity": "Which office holder's resting place is in  [ENT], [ENT] and was succeeded by [ENT] ?",
        "entity": [
            "Palo Alto",
            "California",
            "Adrian A. Basora"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4828",
        "question": "which movies have been published by Cinema International Corporation?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> } ",
        "SExpr": "(JOIN dbo:distributor dbr:Cinema_International_Corporation)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT which) (NNS movies)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN published) (PP (IN by) (NP (NNP Cinema) (NNP International) (NNP Corporation))))))) (. ?)))",
        "mask_entity": "which movies have been published by [ENT]?",
        "entity": [
            "Cinema International Corporation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2324",
        "question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri }",
        "SExpr": "(JOIN (R dbp:destinations) (JOIN dbp:destinations dbr:Mediterranean_Sea)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of other destinations of [IQ1]",
                    "start": 0,
                    "end": 113,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airlines",
                                "start": 50,
                                "end": 62
                            },
                            {
                                "description": "whose one of the destinations is Mediterranean Sea",
                                "start": 63,
                                "end": 113
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NNS destinations)) (PP (IN of) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS destinations))))) (S (VP (VBZ is) (NP (NNP Mediterranean) (NNP Sea)))))))))))) (. ?)))",
        "mask_entity": "What is the total number of other destinations of the airlines whose [ENT] of the destinations is [ENT]?",
        "entity": [
            "one",
            "Mediterranean Sea"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2709",
        "question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri }",
        "SExpr": "(JOIN (R dbo:academicDiscipline) (JOIN dbo:academicDiscipline dbr:Neuroimaging)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the total number of academic discipline of [IQ1]",
                    "start": 0,
                    "end": 114,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the journals",
                                "start": 49,
                                "end": 61
                            },
                            {
                                "description": "whose one of the academic discipline is Neuroimaging",
                                "start": 62,
                                "end": 114
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ academic) (NN discipline)) (PP (IN of) (NP (NP (DT the) (NNS journals)) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ academic) (NN discipline)))) (VP (VBZ is) (VP (VBG Neuroimaging))))))))))) (. ?)))",
        "mask_entity": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4398",
        "question": "List the award which have been won by both Charles LeMaire and Nick Park ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:award) dbr:Charles_LeMaire) (JOIN (R dbo:award) dbr:Nick_Park))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the award",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "which have been won by both Charles LeMaire and Nick Park",
                    "start": 15,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN award)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (CC both) (NP (NNP Charles) (NNP LeMaire)) (CC and) (NP (NNP Nick) (NNP Park))))))))))) (. ?)))",
        "mask_entity": "List the award which have been won by both [ENT] and [ENT] ?",
        "entity": [
            "Charles LeMaire",
            "Nick Park"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1312",
        "question": "What are some cities which have a Ferris wheel?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/buildingType> <http://dbpedia.org/resource/Ferris_wheel> . ?x <http://dbpedia.org/property/locationTown> ?uri  . }",
        "SExpr": "(JOIN (R dbp:locationTown) (JOIN dbp:buildingType dbr:Ferris_wheel)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some cities",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "which have [IQ1]",
                    "start": 21,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a Ferris wheel",
                                "start": 32,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS cities)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT a) (NNP Ferris) (NN wheel)))))))) (. ?)))",
        "mask_entity": "What are some cities which have a [ENT] wheel?",
        "entity": [
            "Ferris"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3448",
        "question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:screenplay dbr:Akiva_Goldsman) (JOIN dbp:editing dbr:Mark_Stevens_(film_editor))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "who has screenplay by Akiva Goldsman",
                    "start": 15,
                    "end": 51
                },
                {
                    "description": "and is edited by Mark Stevens",
                    "start": 52,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ has) (NP (NP (NN screenplay)) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))))) (CC and) (VP (VBZ is) (VP (VBN edited) (PP (IN by) (NP (NNP Mark) (NNP Stevens)))))))))) (. ?)))",
        "mask_entity": "Name the movie who has screenplay by [ENT] and is edited by [ENT] ?",
        "entity": [
            "Akiva Goldsman",
            "Mark Stevens"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3812",
        "question": "Count the movies in Swedish language?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:language dbr:Swedish_language))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the movies",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "in Swedish language",
                    "start": 17,
                    "end": 36
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (DT the) (NNS movies)) (PP (IN in) (NP (JJ Swedish) (NN language)))) (. ?)))",
        "mask_entity": "Count the movies in [ENT] language?",
        "entity": [
            "Swedish"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4655",
        "question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by  Simon Fuller?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> } ",
        "SExpr": "(AND (JOIN dbp:themeMusicComposer dbr:Julian_Gingell) (JOIN dbp:creator dbr:Simon_Fuller))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the total number of television shows",
                    "start": 0,
                    "end": 44
                },
                {
                    "description": "whose theme music composer is Julian Gingell",
                    "start": 45,
                    "end": 89
                },
                {
                    "description": "and created by Simon Fuller",
                    "start": 90,
                    "end": 117
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NML (NN theme) (NN music)) (NN composer)) (S (VP (VP (VBZ is) (NP (NNP Julian) (NNP Gingell))) (CC and) (VP (VBN created) (PP (IN by) (NP (NNP Simon) (NNP Fuller))))))))))) (. ?)))",
        "mask_entity": "Give me the total number of television shows whose theme music composer is [ENT] and created by  [ENT]?",
        "entity": [
            "Julian Gingell",
            "Simon Fuller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2362",
        "question": "Which cloud platform of Google cloud connect also provides services to 21Vianet ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:services) dbr:21Vianet) (JOIN (R dbo:computingPlatform) dbr:Google_Cloud_Connect))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which cloud platform of Google cloud connect",
                    "start": 0,
                    "end": 44
                },
                {
                    "description": "also provides services to 21Vianet",
                    "start": 45,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ cloud) (NN platform)) (PP (IN of) (NP (NNP Google) (NN cloud) (NN connect)))) (S (ADVP (RB also)) (VP (VBZ provides) (NP (NNS services)) (PP (IN to) (NP (CD 21) (NNP Vianet))))) (. ?)))",
        "mask_entity": "Which cloud platform of [ENT] cloud connect also provides services to [ENT][ENT] ?",
        "entity": [
            "Google",
            "21",
            "Vianet"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1975",
        "question": "Name the office holder whose constituency is Haight-Ashbury?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbp:constituency dbr:Haight-Ashbury))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose constituency is Haight-Ashbury",
                    "start": 23,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (NN constituency)) (S (VP (VBZ is) (NP (NNP Haight) (HYPH -) (NNP Ashbury))))))) (. ?)))",
        "mask_entity": "Name the office holder whose constituency is [ENT]?",
        "entity": [
            "Haight-Ashbury"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3514",
        "question": "Name the loocation of Lekh Castle which is also the location of SamurAbsheron channel ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lekh_Castle> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:location) dbr:Lekh_Castle) (JOIN (R dbo:sourceCountry) dbr:Samur\u2013Absheron_channel))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the location of Lekh Castle",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "which is also the location of SamurAbsheron channel",
                    "start": 33,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN loocation)) (PP (IN of) (NP (NNP Lekh) (NNP Castle)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (NNP SamurAbsheron) (NN channel))))))))) (. ?)))",
        "mask_entity": "Name the loocation of [ENT] which is also the location of [ENT] channel ?",
        "entity": [
            "Lekh Castle",
            "SamurAbsheron"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1761",
        "question": "Count the number of families of the Animal kingdom.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . }",
        "SExpr": "(JOIN (R dbo:family) (JOIN dbo:kingdom dbr:Animal)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of families of [IQ1]",
                    "start": 0,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Animal kingdom",
                                "start": 32,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS families)) (PP (IN of) (NP (DT the) (NNP Animal) (NN kingdom))))))) (. .)))",
        "mask_entity": "Count the number of families of the Animal kingdom.",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2739",
        "question": "What is the political party of the person succeeded by A.K. Singh?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/A._K._Singh> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:party) (AND dbo:Person (JOIN dbp:successor dbr:A._K._Singh))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the political party of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 31,
                                "end": 41
                            },
                            {
                                "description": "succeeded by A.K. Singh",
                                "start": 42,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (DT the) (NN person)) (VP (VBN succeeded) (PP (IN by) (NP (NNP A.K.) (NNP Singh))))))))) (. ?)))",
        "mask_entity": "What is the political party of the person succeeded by [ENT]?",
        "entity": [
            "A.K. Singh"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4844",
        "question": "Who is the head coach of the teams in Middlesbrough FC?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . }",
        "SExpr": "(JOIN (R dbo:manager) (JOIN dbp:club dbr:Middlesbrough_F.C.)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the head coach of [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the teams",
                                "start": 25,
                                "end": 34
                            },
                            {
                                "description": "in Middlesbrough FC",
                                "start": 35,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NP (DT the) (NNS teams)) (PP (IN in) (NP (NNP Middlesbrough) (NNP FC)))))))) (. ?)))",
        "mask_entity": "Who is the head coach of the teams in [ENT]?",
        "entity": [
            "Middlesbrough FC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2472",
        "question": "To which uni. did  sidney c patridge and cyril hume both once went?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:education) dbr:Sidney_Catlin_Partridge) (JOIN (R dbp:education) dbr:Cyril_Hume))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "To which uni.",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "did sidney c patridge and cyril hume both once went",
                    "start": 14,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN uni.)) (VP (VBD did) (NP (NP (NNP sidney) (NNP c) (NNP patridge)) (CC and) (NP (NNP cyril) (NNP hume))) (SBAR (S (NP (DT both)) (ADVP (RB once)) (VP (VBD went)))))) (. ?)))",
        "mask_entity": "To which uni. did  sidney c patridge and cyril hume both once went?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4007",
        "question": "People in the royal Thai army follow which religion?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:Person (JOIN dbp:branch dbr:Royal_Thai_Army))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] follow which religion",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "People",
                                "start": 0,
                                "end": 6
                            },
                            {
                                "description": "in the royal Thai army",
                                "start": 7,
                                "end": 29
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS People)) (PP (IN in) (NP (DT the) (JJ royal) (JJ Thai) (NN army)))) (VP (VBP follow) (SBAR (WHNP (WDT which) (NN religion)) (. ?)))))",
        "mask_entity": "People in the royal [ENT] army follow which religion?",
        "entity": [
            "Thai"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1493",
        "question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Lucrezia) (NNP Tornabuoni)) (NP (NP (DT the) (NN mother)) (PP (IN of) (NP (NP (NNP Lorenzo) (NNP de) (POS ')) (NNP Medici)))) (. ?)))",
        "mask_entity": "Was [ENT] the mother of [ENT]?",
        "entity": [
            "Lucrezia Tornabuoni",
            "Lorenzo de' Medici"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4206",
        "question": "Who are the producers of the movies  which has music by Gary Chang ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Gary_Chang> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(JOIN (R dbp:producer) (AND dbo:Film (JOIN dbp:music dbr:Gary_Chang))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the producers of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movies",
                                "start": 25,
                                "end": 35
                            },
                            {
                                "description": "which has music by Gary Chang",
                                "start": 36,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN music)) (PP (IN by) (NP (NNP Gary) (NNP Chang)))))))))))) (. ?)))",
        "mask_entity": "Who are the producers of the movies  which has music by [ENT] ?",
        "entity": [
            "Gary Chang"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2158",
        "question": "Where was Special 26 recorded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri } ",
        "SExpr": "(JOIN (R dbp:recorded) dbr:Special_26)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (JJ Special) (CD 26)) (VP (VBN recorded))) (. ?)))",
        "mask_entity": "Where was [ENT] recorded ?",
        "entity": [
            "Special 26"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1169",
        "question": "How many movies music composers are associated with Demis Roussos ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:musicComposer (JOIN dbp:associatedActs dbr:Demis_Roussos))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many movies music composers [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are associated with Demis Roussos",
                                "start": 32,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NML (NNS movies) (NN music)) (NNS composers)) (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NNP Demis) (NNP Roussos)))))) (. ?)))",
        "mask_entity": "How many movies music composers are associated with [ENT] ?",
        "entity": [
            "Demis Roussos"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4516",
        "question": "To which nation did David Animle Hanses owe his allegiance?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?uri } ",
        "SExpr": "(JOIN (R dbp:allegiance) dbr:David_Animle_Hansen)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN To) (WHNP (WDT which) (NN nation))) (SQ (VBD did) (NP (NNP David) (NNP Animle) (NNPS Hanses)) (VP (VB owe) (NP (PRP$ his) (NN allegiance)))) (. ?)))",
        "mask_entity": "To which nation did [ENT] owe his allegiance?",
        "entity": [
            "David Animle Hanses"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "232",
        "question": "What is the alma mater of the actors of The God Who Wasn't There ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
        "SExpr": "(JOIN (R dbp:almaMater) (JOIN (R dbp:starring) dbr:The_God_Who_Wasn't_There)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the actors of The God Who Wasn't There",
                                "start": 26,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (ADVP (RB There) (. ?)))",
        "mask_entity": "What is the alma mater of the actors of [ENT]n't There ?",
        "entity": [
            "The God Who Was"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "66",
        "question": "List some musicians associated with famous guitar players?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "SExpr": "(JOIN (R dbo:associatedMusicalArtist) (JOIN dbp:notableInstruments dbr:Guitar)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List some musicians",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "associated with [IQ1]",
                    "start": 20,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "famous guitar players",
                                "start": 36,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT some) (NNS musicians)) (VP (VBN associated) (PP (IN with) (NP (JJ famous) (NN guitar) (NNS players)))))) (. ?)))",
        "mask_entity": "List some musicians associated with famous guitar players?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1603",
        "question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(AND dbo:Airline (JOIN dbo:hubAirport (JOIN dbo:operator dbr:Los_Angeles_World_Airports))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the airlines",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose hub airport [IQ1]",
                    "start": 22,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is operated by the Los Angeles World Airports",
                                "start": 40,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NN hub) (NN airport)) (S (VP (VBZ is) (VP (VBN operated) (PP (IN by) (NP (DT the) (NML (NNP Los) (NNP Angeles)) (NNP World) (NNPS Airports)))))))))) (. ?)))",
        "mask_entity": "What are the airlines whose hub airport is operated by [ENT]?",
        "entity": [
            "the Los Angeles World Airports"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3283",
        "question": "Which company's cars are assembled in Colombia?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Colombia> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbp:parentCompany) (AND dbo:Automobile (JOIN dbp:assembly dbr:Colombia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company's [IQ1]",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "cars",
                                "start": 16,
                                "end": 20
                            },
                            {
                                "description": "are assembled in Colombia",
                                "start": 21,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN company) (POS 's)) (NNS cars)) (VP (VBP are) (VP (VBN assembled) (PP (IN in) (NP (NNP Colombia))))) (. ?)))",
        "mask_entity": "Which company's cars are assembled in [ENT]?",
        "entity": [
            "Colombia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3596",
        "question": "Who directed The Haunted House ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri } ",
        "SExpr": "(JOIN (R dbo:director) dbr:The_Haunted_House_(1929_film))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD directed) (NP (DT The) (NNP Haunted) (NNP House)))) (. ?)))",
        "mask_entity": "Who directed [ENT] ?",
        "entity": [
            "The Haunted House"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "125",
        "question": "Count all the different purposes followed by the different NGOs.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
        "SExpr": "(JOIN (R dbp:purpose) (JOIN dbp:type dbr:Non-governmental_organization)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count all the different purposes",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "followed by the different [IQ1]",
                    "start": 33,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "NGOs",
                                "start": 59,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ different) (NNS purposes)) (VP (VBN followed) (PP (IN by) (NP (DT the) (JJ different) (NNS NGOs)))))) (. .)))",
        "mask_entity": "Count all the different purposes followed by the different NGOs.",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1296",
        "question": "The players born in Bellaire, Ohio have played for which team?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "SExpr": "(JOIN (R dbo:team) (JOIN dbo:birthPlace dbr:Bellaire,_Ohio)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have played for",
                    "start": 0,
                    "end": 21,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "The players",
                                "start": 0,
                                "end": 11
                            },
                            {
                                "description": "born in Bellaire, Ohio",
                                "start": 12,
                                "end": 34
                            }
                        ]
                    }
                },
                {
                    "description": "which team",
                    "start": 22,
                    "end": 61
                }
            ]
        },
        "constituency": "(ROOT (S (S (NP (DT The) (NNS players)) (VP (VBN born) (PP (IN in) (NP (NNP Bellaire))))) (, ,) (NP (NNP Ohio)) (VP (VBP have) (VP (VBN played) (SBAR (WHPP (IN for) (WHNP (WDT which) (NN team))) (. ?))))))",
        "mask_entity": "The players born in [ENT], [ENT] have played for which team?",
        "entity": [
            "Bellaire",
            "Ohio"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1976",
        "question": "What is the common ideology followed by Katyayana and Palang Dharma Party ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:religion) dbr:Katyayana_(Buddhist)) (JOIN (R dbo:ideology) dbr:Palang_Dharma_Party))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common ideology",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "followed by Katyayana and Palang Dharma Party",
                    "start": 28,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN ideology)) (VP (VBN followed) (PP (IN by) (NP (NP (NNP Katyayana)) (CC and) (NP (NNP Palang) (NNP Dharma) (NNP Party)))))))) (. ?)))",
        "mask_entity": "What is the common ideology followed by [ENT] and [ENT] ?",
        "entity": [
            "Katyayana",
            "Palang Dharma Party"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4517",
        "question": "Count the tenants of MasterCard Centre?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri  . }",
        "SExpr": "(JOIN (R dbp:tenants) dbr:MasterCard_Centre)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MasterCard) (NNP Centre))))) (. ?)))",
        "mask_entity": "Count the tenants of [ENT]?",
        "entity": [
            "MasterCard Centre"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4481",
        "question": "who are starring in the movies written by Mark Sandrich ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(JOIN (R dbo:starring) (AND dbo:Film (JOIN dbo:writer dbr:Mark_Sandrich))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "who are starring in [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the movies",
                                "start": 20,
                                "end": 30
                            },
                            {
                                "description": "written by Mark Sandrich",
                                "start": 31,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBG starring) (PP (IN in) (NP (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Mark) (NNP Sandrich))))))))) (. ?)))",
        "mask_entity": "who are starring in the movies written by [ENT] ?",
        "entity": [
            "Mark Sandrich"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2075",
        "question": "Count the number of religions followed by BJP members.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbp:party dbr:Bharatiya_Janata_Party)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of religions",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "followed by [IQ1]",
                    "start": 30,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "BJP members",
                                "start": 42,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NNP BJP) (NNS members)))))))) (. .)))",
        "mask_entity": "Count the number of religions followed by [ENT] members.",
        "entity": [
            "BJP"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3086",
        "question": "What is the mascot of the rival school of Sullivan Central High?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/property/rival> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
        "SExpr": "(JOIN (R dbp:mascot) (JOIN (R dbp:rival) dbr:Sullivan_Central_High_School)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the mascot of [IQ1]",
                    "start": 0,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rival school of Sullivan Central High",
                                "start": 22,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NNP Sullivan) (NNP Central) (NNP High)))))))) (. ?)))",
        "mask_entity": "What is the mascot of the rival school of [ENT]?",
        "entity": [
            "Sullivan Central High"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4345",
        "question": "What award has been awarded to both Dion Beebe and Charles LeMaire?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:award) dbr:Dion_Beebe) (JOIN (R dbp:awards) dbr:Charles_LeMaire))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What award",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "has been awarded to both Dion Beebe and Charles LeMaire",
                    "start": 11,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (CC both) (NP (NNP Dion) (NNP Beebe)) (CC and) (NP (NNP Charles) (NNP LeMaire)))))))) (. ?)))",
        "mask_entity": "What award has been awarded to both [ENT] and [ENT]?",
        "entity": [
            "Dion Beebe",
            "Charles LeMaire"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3345",
        "question": "What is the birth name  of Putri Raemawasti ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/property/birthName> ?uri } ",
        "SExpr": "(JOIN (R dbp:birthName) dbr:Putri_Raemawasti)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birth) (NN name)) (PP (IN of) (NP (NNP Putri) (NNP Raemawasti)))))) (. ?)))",
        "mask_entity": "What is the birth name  of [ENT] ?",
        "entity": [
            "Putri Raemawasti"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4464",
        "question": "What is the party of the politicians whose children is Sanjay Gandhi ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(JOIN (R dbo:party) (AND dbo:OfficeHolder (JOIN dbp:children dbr:Sanjay_Gandhi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the party of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the politicians",
                                "start": 21,
                                "end": 36
                            },
                            {
                                "description": "whose children is Sanjay Gandhi",
                                "start": 37,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN party)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBZ is) (NP (NNP Sanjay) (NNP Gandhi)))))))))) (. ?)))",
        "mask_entity": "What is the party of the politicians whose children is [ENT] ?",
        "entity": [
            "Sanjay Gandhi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2797",
        "question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:tenants) dbr:MasterCard_Centre) (JOIN (R dbp:draftTeam) dbr:Antoine_Bibeau))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the tenants of MAsterCard center",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "which is also the draft team of Antoine Bibeau",
                    "start": 38,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NP (NNP MAsterCard) (NN center)) (SBAR (WHNP (WDT wich)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NNP Antoine) (NNP Bibeau))))))))))) (. ?)))",
        "mask_entity": "Name the tenants of [ENT] center wich is also the draft team of [ENT]?",
        "entity": [
            "MAsterCard",
            "Antoine Bibeau"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "918",
        "question": "What is the number of occupation of the people who died in tampa bay, florida?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:occupation) (JOIN dbo:deathPlace dbr:Tampa,_Florida)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the number of occupation of [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 36,
                                "end": 46
                            },
                            {
                                "description": "who died in tampa bay, florida",
                                "start": 47,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN occupation)) (PP (IN of) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NP (NNP tampa) (NNP bay)) (, ,) (NP (NNP florida)))))))))))))) (. ?)))",
        "mask_entity": "What is the number of occupation of the people who died in [ENT], [ENT]?",
        "entity": [
            "tampa bay",
            "florida"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1646",
        "question": "Who was the United States president who also served as a governor of Indiana Territory?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory> } ",
        "SExpr": "(JOIN dbp:branch dbr:Indiana_Territory)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (DT the) (NML (NNP United) (NNPS States)) (NN president)) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBD served) (PP (IN as) (NP (NP (DT a) (NN governor)) (PP (IN of) (NP (NNP Indiana) (NNP Territory))))))))))) (. ?)))",
        "mask_entity": "Who was the [ENT] president who also served as a governor of [ENT]?",
        "entity": [
            "United States",
            "Indiana Territory"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "364",
        "question": "List the people who were born in Gelnhausen and graduated from Pepperdine University?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> . ?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Pepperdine_University>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (AND (JOIN dbo:birthPlace dbr:Gelnhausen) (JOIN dbp:education dbr:Pepperdine_University)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "who were born in Gelnhausen",
                    "start": 16,
                    "end": 43
                },
                {
                    "description": "and graduated from Pepperdine University",
                    "start": 44,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD were) (VP (VP (VBN born) (PP (IN in) (NP (NNP Gelnhausen)))) (CC and) (VP (VBD graduated) (PP (IN from) (NP (NNP Pepperdine) (NNP University)))))))))) (. ?)))",
        "mask_entity": "List the people who were born in [ENT] and graduated from [ENT]?",
        "entity": [
            "Gelnhausen",
            "Pepperdine University"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3287",
        "question": "Musical artists who are associated with Ren & Angela were born where ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(JOIN (R dbp:birthPlace) (AND dbo:MusicalArtist (JOIN dbp:associatedActs dbr:Ren\u00e9_&_Angela))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] were born where",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Musical artists",
                                "start": 0,
                                "end": 15
                            },
                            {
                                "description": "who are associated with Ren & Angela",
                                "start": 16,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (JJ Musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NNP Ren) (CC &) (NNP Angela)))))))) (VP (VBD were) (VP (VBN born) (ADVP (WRB where)))) (. ?)))",
        "mask_entity": "Musical artists who are associated with [ENT] were born where ?",
        "entity": [
            "Ren & Angela"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2125",
        "question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:religiousAffiliation) dbr:Wickramabahu_Central_College_(National_School)) (JOIN (R dbp:religiousAffiliation) dbr:Neungin_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religion",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "do the Wickramabahu Centeral College and Neungin High School both follow",
                    "start": 14,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (NP (DT the) (NML (NNP Wickramabahu) (NNP Centeral)) (NNP College)) (CC and) (NP (NNP Neungin) (NNP High) (NNP School))) (DT both) (VP (VB follow))) (. ?)))",
        "mask_entity": "What religion do [ENT] and [ENT] both follow?",
        "entity": [
            "the Wickramabahu Centeral College",
            "Neungin High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4123",
        "question": "Who designed the language integrated query?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:designer) dbr:Language_Integrated_Query)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN language)) (NP (VBN integrated) (NN query)))) (. ?)))",
        "mask_entity": "Who designed the language integrated query?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "525",
        "question": "Name the debut team of Dan Otero ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
        "SExpr": "(JOIN (R dbo:debutTeam) dbr:Dan_Otero)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NNP Dan) (NNP Otero))))) (. ?)))",
        "mask_entity": "Name the debut team of [ENT] ?",
        "entity": [
            "Dan Otero"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "55",
        "question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:poleDriver) dbr:1997_Canadian_Grand_Prix) (JOIN (R dbp:poleDriver) dbr:1994_Spanish_Grand_Prix))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
                    "start": 0,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD started) (PP (IN at) (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (DT both) (NP (CD 1997) (JJ canadian) (JJ grand) (NN prix)) (CC and) (NP (DT the) (CD 94) (JJ spanish) (NN one)))))))) (. ?)))",
        "mask_entity": "Who started at the pole position in both [ENT] canadian grand prix and the [ENT] spanish one?",
        "entity": [
            "1997",
            "94"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "638",
        "question": "Who founded the Not on our Watch NGO?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Not_on_Our_Watch_(organization)> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
        "SExpr": "(JOIN (R dbo:foundedBy) dbr:Not_on_Our_Watch_(organization))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD founded) (NP (DT the) (RB Not)) (PP (IN on) (NP (PRP$ our) (NN Watch) (NNP NGO))))) (. ?)))",
        "mask_entity": "Who founded the Not on our Watch NGO?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "302",
        "question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
        "SExpr": "(JOIN (R dbp:artist) (JOIN (R dbo:subsequentWork) dbr:Ella_Loves_Cole)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the name of the artist",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "which worked on [IQ1]",
                    "start": 31,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the subsequent work of Ella Loves Cole",
                                "start": 47,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WDT which)) (S (VP (VBD worked) (PP (IN on) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Ella) (NNPS Loves) (NNP Cole))))))))))))) (. ?)))",
        "mask_entity": "What is the name of the artist which worked on the subsequent work of [ENT] ?",
        "entity": [
            "Ella Loves Cole"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2766",
        "question": "Which company owns Sony bank ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
        "SExpr": "(JOIN (R dbo:owningCompany) dbr:Sony_Bank)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ owns) (NP (NNP Sony) (NN bank)))) (. ?)))",
        "mask_entity": "Which company owns [ENT] bank ?",
        "entity": [
            "Sony"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1276",
        "question": "What state was Cyrus Mann born in, and has the famous Downriver ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:state) dbr:Downriver) (JOIN (R dbp:birthPlace) dbr:Cyrus_Mann))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What state",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "was Cyrus Mann born in,",
                    "start": 11,
                    "end": 34
                },
                {
                    "description": "and has the famous Downriver",
                    "start": 35,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN state)) (S (VP (VP (VBD was) (NP (NP (NNP Cyrus) (NNP Mann)) (VP (VBN born) (PP (IN in))))) (, ,) (CC and) (VP (VBZ has) (NP (DT the) (JJ famous) (NNP Downriver))))) (. ?)))",
        "mask_entity": "What state was [ENT] born in, and has the famous [ENT] ?",
        "entity": [
            "Cyrus Mann",
            "Downriver"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2055",
        "question": "Who is a religious figure titled superior general?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Superior_general>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Religious>}",
        "SExpr": "(AND dbo:Religious (JOIN dbp:title dbr:Superior_general))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is a religious figure",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "titled superior general",
                    "start": 26,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT a) (JJ religious) (NN figure)) (VP (VBN titled) (S (ADJP (JJ superior) (NN general))))))) (. ?)))",
        "mask_entity": "Who is a religious figure titled superior general?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3644",
        "question": "List the employments of people who died in Tampa, Florida.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:occupation) (JOIN dbo:deathPlace dbr:Tampa,_Florida)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the employments of [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 24,
                                "end": 30
                            },
                            {
                                "description": "who died in Tampa, Florida",
                                "start": 31,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS employments)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NP (NNP Tampa)) (, ,) (NP (NNP Florida))))))))))) (. .)))",
        "mask_entity": "List the employments of people who died in [ENT], [ENT].",
        "entity": [
            "Tampa",
            "Florida"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4143",
        "question": "What are some famous veterinary physicians known for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "SExpr": "(JOIN (R dbp:knownFor) (JOIN dbp:field dbr:Veterinary_physician)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are [IQ1] known for",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "some famous veterinary physicians",
                                "start": 9,
                                "end": 42
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ famous) (JJ veterinary) (NNS physicians)) (VP (VBN known) (PP (IN for)))))) (. ?)))",
        "mask_entity": "What are some famous veterinary physicians known for?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2878",
        "question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:music dbr:Geoffrey_Burgon) (JOIN dbp:editing dbr:Julian_Doyle_(filmmaker))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "edited by Julian Doyle",
                    "start": 16,
                    "end": 38
                },
                {
                    "description": "in which music was composed by Geoffrey Brugon",
                    "start": 39,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS movies)) (VP (VBN edited) (PP (IN by) (NP (NP (NNP Julian) (NNP Doyle)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VBN composed) (PP (IN by) (NP (NNP Geoffrey) (NNP Brugon)))))))))))) (. ?)))",
        "mask_entity": "List the movies edited by [ENT] in which music was composed by [ENT] ?",
        "entity": [
            "Julian Doyle",
            "Geoffrey Brugon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4202",
        "question": "Name the children of the person who is the star of The Weathered Underground ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Weathered_Underground> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/children> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:children) (AND dbo:Person (JOIN (R dbo:starring) dbr:The_Weathered_Underground))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the children of [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 21,
                                "end": 31
                            },
                            {
                                "description": "who is the star of The Weathered Underground",
                                "start": 32,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NN star)) (PP (IN of) (NP (DT The) (NNP Weathered) (NNP Underground))))))))))) (. ?)))",
        "mask_entity": "Name the children of the person who is the star of [ENT] ?",
        "entity": [
            "The Weathered Underground"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2286",
        "question": "Which owner of Chelsea F.C also owns Evraz ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri. <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:owningCompany) dbr:Evraz) (JOIN (R dbp:owner) dbr:Chelsea_F.C.))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which owner of Chelsea F.C",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "also owns Evraz",
                    "start": 27,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN owner)) (PP (IN of) (NP (NNP Chelsea) (NNP F.C)))) (S (ADVP (RB also)) (VP (VBZ owns) (NP (NNP Evraz)))) (. ?)))",
        "mask_entity": "Which owner of [ENT] also owns [ENT] ?",
        "entity": [
            "Chelsea F.C",
            "Evraz"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2261",
        "question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Umkhonto_we_Sizwe> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Nelson_Mandela> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VBD Did) (NP (NNP Umkhonto)) (SBAR (S (NP (PRP we) (NNP Sizwe)) (VP (VBD had) (NP (NNP Nelson) (NNP Mandela)) (PP (IN as) (NP (DT a) (NN commander))))))) (. ?)))",
        "mask_entity": "Did [ENT] we [ENT] had [ENT] as a commander?",
        "entity": [
            "Umkhonto",
            "Sizwe",
            "Nelson Mandela"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2296",
        "question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbo:associate dbr:Marcus_Calpurnius_Bibulus) (JOIN dbo:child dbr:Augustus)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "with associate as Marcus Calpurnius Bibulus",
                    "start": 23,
                    "end": 66
                },
                {
                    "description": "and has a kid named Augustus",
                    "start": 67,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NN associate)) (PP (IN as) (NP (NNP Marcus) (NNP Calpurnius) (NNP Bibulus)))))) (CC and) (VP (VBZ has) (NP (NP (DT a) (NN kid)) (VP (VBN named) (S (NP (NNP Augustus))))))) (. ?)))",
        "mask_entity": "Name the office holder with associate as [ENT] and has a kid named [ENT]?",
        "entity": [
            "Marcus Calpurnius Bibulus",
            "Augustus"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1753",
        "question": "What are the movies whose screenplay is done by Eric Roth?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:screenplay dbr:Eric_Roth))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose screenplay is done by Eric Roth",
                    "start": 20,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Eric) (NNP Roth)))))))))) (. ?)))",
        "mask_entity": "What are the movies whose screenplay is done by [ENT]?",
        "entity": [
            "Eric Roth"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1968",
        "question": "What is the total number of writers whose singles are recorded in Miami?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:writer) (JOIN dbo:recordedIn dbr:Miami)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of writers",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "whose singles [IQ1]",
                    "start": 36,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are recorded in Miami",
                                "start": 50,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS writers)) (SBAR (WHNP (WP$ whose) (NNS singles)) (S (VP (VBP are) (VP (VBN recorded) (PP (IN in) (NP (NNP Miami)))))))))))) (. ?)))",
        "mask_entity": "What is the total number of writers whose singles are recorded in [ENT]?",
        "entity": [
            "Miami"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4351",
        "question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbp:architecturalStyle) dbr:Sanggar_Agung)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religions",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "are followed by members of [IQ1]",
                    "start": 15,
                    "end": 119,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the societies",
                                "start": 42,
                                "end": 55
                            },
                            {
                                "description": "whose architectural influences can be seen on the Sanggar Agung",
                                "start": 56,
                                "end": 119
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VP (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS members)) (PP (IN of) (NP (NP (DT the) (NNS societies)) (SBAR (WHNP (WP$ whose) (JJ architectural) (NNS influences)) (S (VP (MD can) (VP (VB be) (VP (VBN seen) (PP (IN on) (NP (DT the) (NNP Sanggar) (NNP Agung))))))))))))))) (. ?)))",
        "mask_entity": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3117",
        "question": "Who is the producer of album which has the song Money?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:producer) (JOIN (R dbp:album) dbr:Money_(Pink_Floyd_song))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the producer of [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "album",
                                "start": 23,
                                "end": 28
                            },
                            {
                                "description": "which has the song Money",
                                "start": 29,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NN album)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN song) (NN Money)))))))) (. ?)))",
        "mask_entity": "Who is the producer of album which has the song Money?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2393",
        "question": "List the Sci-fi TV shows with theme music given by Ron Grainer?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:genre dbr:Science_fiction) (JOIN dbp:themeMusicComposer dbr:Ron_Grainer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the Sci-fi TV shows",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "with theme music given by Ron Grainer",
                    "start": 25,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (DT the) (NML (JJ Sci-fi) (NN TV)) (NNS shows)) (PP (IN with) (NP (NP (NN theme) (NN music)) (VP (VBN given) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))))) (. ?)))",
        "mask_entity": "List the Sci-fi TV shows with theme music given by [ENT]?",
        "entity": [
            "Ron Grainer"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "523",
        "question": "What is the company to which Fusajiro Yamauchi proprietor to ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (JOIN dbo:foundedBy dbr:Fusajiro_Yamauchi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the company",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "to which Fusajiro Yamauchi proprietor to",
                    "start": 20,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN company)) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NNP Fusajiro) (NNP Yamauchi)) (VP (NN proprietor) (S (VP (IN to))))))))) (. ?)))",
        "mask_entity": "What is the company to which [ENT] proprietor to ?",
        "entity": [
            "Fusajiro Yamauchi"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3900",
        "question": "Who is the writer of mark twain Tonight ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri } ",
        "SExpr": "(JOIN (R dbp:writer) dbr:Mark_Twain_Tonight)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NN mark)))) (NP (NNP twain) (NNP Tonight))))) (. ?)))",
        "mask_entity": "Who is the writer of mark twain [ENT] ?",
        "entity": [
            "Tonight"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3122",
        "question": "How many members are there in the European Go Federation?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . }",
        "SExpr": "(JOIN (R dbp:membership) dbr:European_Go_Federation)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS members)) (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (DT the) (JJ European) (NNP Go) (NNP Federation))))) (. ?)))",
        "mask_entity": "How many members are there in [ENT]?",
        "entity": [
            "the European Go Federation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4156",
        "question": "Was Kevin Rudd the PM of Julia Gillard?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Kevin_Rudd> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Kevin) (NNP Rudd)) (NP (NP (DT the) (NN PM)) (PP (IN of) (NP (NNP Julia) (NNP Gillard)))) (. ?)))",
        "mask_entity": "Was [ENT] the PM of [ENT]?",
        "entity": [
            "Kevin Rudd",
            "Julia Gillard"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1969",
        "question": "Daniel L D Granger and Job Durfee have based their political career in which US state?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:state) dbr:Daniel_L._D._Granger) (JOIN (R dbp:state) dbr:Job_Durfee))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Daniel L D Granger and Job Durfee have based their political career",
                    "start": 0,
                    "end": 67
                },
                {
                    "description": "in which US state",
                    "start": 68,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Daniel) (NNP L) (NNP D) (NNP Granger)) (CC and) (NP (NNP Job) (NNP Durfee))) (VP (VBP have) (VP (VBN based) (NP (NP (PRP$ their) (JJ political) (NN career)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP US) (NN state)) (. ?))))))))",
        "mask_entity": "[ENT] and [ENT] have based their political career in which [ENT] state?",
        "entity": [
            "Daniel L D Granger",
            "Job Durfee",
            "US"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "671",
        "question": "What is the mascot of the handball teams in the Turkish Handball Super League?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HandballTeam>}",
        "SExpr": "(JOIN (R dbp:mascot) (AND dbo:HandballTeam (JOIN dbo:league dbr:Turkish_Handball_Super_League))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the mascot of [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the handball teams",
                                "start": 22,
                                "end": 40
                            },
                            {
                                "description": "in the Turkish Handball Super League",
                                "start": 41,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (NN handball) (NNS teams)) (PP (IN in) (NP (DT the) (JJ Turkish) (NNP Handball) (NNP Super) (NNP League)))))))) (. ?)))",
        "mask_entity": "What is the mascot of the handball teams in the [ENT] Handball Super League?",
        "entity": [
            "Turkish"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4188",
        "question": "What city was recorded in Live in detroit which is also the official residence of ken Holland ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:recordedIn) dbr:Live_in_Detroit,_MI) (JOIN (R dbo:residence) dbr:Ken_Holland))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "was recorded in Live in detroit",
                    "start": 10,
                    "end": 41
                },
                {
                    "description": "which is also the official residence of ken Holland",
                    "start": 42,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VBD was) (VP (VBN recorded) (PP (IN in) (NP (NP (NP (NNP Live)) (PP (IN in) (NP (NNP detroit)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ official) (NN residence)) (PP (IN of) (NP (NNP ken) (NNP Holland)))))))))))) (. ?)))",
        "mask_entity": "What city was recorded in Live in [ENT] which is also the official residence of ken [ENT] ?",
        "entity": [
            "detroit",
            "Holland"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "666",
        "question": "Marika Gombitov makes songs in which languages?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "SExpr": "(JOIN (R dbp:language) (JOIN dbp:artist dbr:Marika_Gombitov\u00e1)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] in which languages",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Marika Gombitov makes songs",
                                "start": 0,
                                "end": 27
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Marika) (NNP Gombitov)) (VP (VBZ makes) (NP (NP (NNS songs)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNS languages)) (. ?)))))))",
        "mask_entity": "[ENT] makes songs in which languages?",
        "entity": [
            "Marika Gombitov"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4338",
        "question": "What are some musical artists associated with the ones signed up with EMI?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(JOIN (R dbo:associatedMusicalArtist) (AND dbo:MusicalArtist (JOIN dbo:recordLabel dbr:EMI))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some musical artists",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "associated with [IQ1]",
                    "start": 30,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 46,
                                "end": 54
                            },
                            {
                                "description": "signed up with EMI",
                                "start": 55,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ musical) (NNS artists)) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (NNS ones)) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI)))))))))) (. ?)))",
        "mask_entity": "What are some musical artists associated with the ones signed up with [ENT]?",
        "entity": [
            "EMI"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1887",
        "question": "Name the river which flows through the closest city of Mount Raimer ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?x . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "SExpr": "(JOIN (R dbo:river) (JOIN (R dbp:nearestCity) dbr:Mount_Raimer)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "which flows through [IQ1]",
                    "start": 15,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the closest city of Mount Raimer",
                                "start": 35,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN through) (NP (NP (DT the) (JJS closest) (NN city)) (PP (IN of) (NP (NNP Mount) (NNP Raimer)))))))))) (. ?)))",
        "mask_entity": "Name the river which flows through the closest city of [ENT] ?",
        "entity": [
            "Mount Raimer"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3266",
        "question": "Name the scientist whose supervisor also supervised Mary Ainsworth?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:doctoralAdvisor (JOIN dbp:doctoralStudents dbr:Mary_Ainsworth))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the scientist",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "whose supervisor [IQ1]",
                    "start": 19,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "also supervised Mary Ainsworth",
                                "start": 36,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN supervisor)) (S (ADVP (RB also)) (VP (VBD supervised) (NP (NNP Mary) (NNP Ainsworth))))))) (. ?)))",
        "mask_entity": "Name the scientist whose supervisor also supervised [ENT]?",
        "entity": [
            "Mary Ainsworth"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "280",
        "question": "What are some relatives of armymen who died in Germany?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "SExpr": "(JOIN (R dbo:relation) (AND dbo:MilitaryPerson (JOIN dbp:placeOfDeath dbr:Germany))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some relatives of [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "armymen",
                                "start": 27,
                                "end": 34
                            },
                            {
                                "description": "who died in Germany",
                                "start": 35,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NP (DT some) (NNS relatives)) (PP (IN of) (NP (NN armymen)))) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Germany))))))))) (. ?)))",
        "mask_entity": "What are some relatives of armymen who died in [ENT]?",
        "entity": [
            "Germany"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1719",
        "question": "Deion sanders and Hinkey haines debuted their career with which common team?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hinkey_Haines> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:debutteam) dbr:Hinkey_Haines) (JOIN (R dbp:debutteam) dbr:Deion_Sanders))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Deion sanders and Hinkey haines debuted their career with",
                    "start": 0,
                    "end": 57
                },
                {
                    "description": "which common team",
                    "start": 58,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNP Deion) (NNPS sanders)) (CC and) (NP (NNP Hinkey) (NNP haines))) (VP (VBD debuted) (NP (PRP$ their) (NN career)) (SBAR (WHPP (IN with) (WHNP (WDT which))) (NP (JJ common) (NN team)))) (. ?)))",
        "mask_entity": "[ENT] and [ENT] haines debuted their career with which common team?",
        "entity": [
            "Deion sanders",
            "Hinkey"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2947",
        "question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:routeEnd) dbr:Mumbai_Vadodara_Expressway) (JOIN (R dbo:garrison) dbr:East_Indies_Station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which garrison of East Indies Station",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "is also the route end of Mumbai Vadodara Express",
                    "start": 38,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN garrison)) (PP (IN of) (NP (NNP East) (NNP Indies) (NNP Station)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NNP Mumbai) (NNP Vadodara) (NNP Express))))) (. ?)))",
        "mask_entity": "Which garrison of [ENT] is also the route end of [ENT] ?",
        "entity": [
            "East Indies Station",
            "Mumbai Vadodara Express"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "899",
        "question": "To which political party does Virendra Kataria belongs ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/property/party> ?uri } ",
        "SExpr": "(JOIN (R dbp:party) dbr:Virendra_Kataria)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (JJ political) (NN party)) (VP (VBZ does) (S (NP (NNP Virendra) (NNP Kataria)) (VP (VBZ belongs))))) (. ?)))",
        "mask_entity": "To which political party does [ENT] belongs ?",
        "entity": [
            "Virendra Kataria"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4850",
        "question": "Copley Medal has been awarded to which scientists?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Copley_Medal>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:awards dbr:Copley_Medal))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Copley Medal has been awarded to",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "which scientists",
                    "start": 33,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Copley) (NNP Medal)) (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (SBAR (WHPP (IN to) (WHNP (WDT which))) (NP (NNS scientists)))))) (. ?)))",
        "mask_entity": "[ENT] has been awarded to which scientists?",
        "entity": [
            "Copley Medal"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "760",
        "question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "SExpr": "(AND dbo:Award (JOIN dbo:presenter (JOIN dbp:headquarters dbr:Beverly_Hills,_California))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of awards",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "whose presenter's [IQ1]",
                    "start": 35,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "headquarters is Beverly Hills, California",
                                "start": 53,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS awards)) (SBAR (WHNP (WP$ whose) (NP (NP (NN presenter) (POS 's)) (NN headquarters))) (S (VP (VBZ is) (NP (NP (NNP Beverly) (NNP Hills)) (, ,) (NP (NNP California))))))))))) (. ?)))",
        "mask_entity": "What is the total number of awards whose presenter's headquarters is [ENT], [ENT]?",
        "entity": [
            "Beverly Hills",
            "California"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1906",
        "question": "Who is the narrator of The Price of Beauty ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?uri } ",
        "SExpr": "(JOIN (R dbo:narrator) dbr:The_Price_of_Beauty)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (DT The) (NNP Price)) (PP (IN of) (NP (NNP Beauty)))))))) (. ?)))",
        "mask_entity": "Who is the narrator of [ENT] ?",
        "entity": [
            "The Price of Beauty"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4042",
        "question": "Does Dan River flow into the Jordan Valley?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Dan_River_(Middle_East)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Dan) (NNP River)) (VP (VB flow) (PP (IN into) (NP (DT the) (NNP Jordan) (NNP Valley)))) (. ?)))",
        "mask_entity": "Does [ENT] flow into [ENT]?",
        "entity": [
            "Dan River",
            "the Jordan Valley"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3823",
        "question": "Who is the producer of the device which is the operating system of Now TV  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Now_TV_(UK)> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:manufacturer) (JOIN (R dbo:operatingSystem) dbr:Now_TV_(UK))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the producer of [IQ1]",
                    "start": 0,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the device",
                                "start": 23,
                                "end": 33
                            },
                            {
                                "description": "which is the operating system of Now TV",
                                "start": 34,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN device)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN operating) (NN system)) (PP (IN of) (NP (RB Now) (NN TV)))))))))))) (. ?)))",
        "mask_entity": "Who is the producer of the device which is the operating system of [ENT]  ?",
        "entity": [
            "Now TV"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4138",
        "question": "How many artists have collaborated with famous guitar players?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(AND dbo:Artist (JOIN (R dbo:associatedMusicalArtist) (JOIN dbp:notableInstruments dbr:Guitar))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many artists",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "have collaborated with [IQ1]",
                    "start": 17,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "famous guitar players",
                                "start": 40,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS artists)) (VP (VBP have) (VP (VBN collaborated) (PP (IN with) (NP (JJ famous) (NN guitar) (NNS players)))))) (. ?)))",
        "mask_entity": "How many artists have collaborated with famous guitar players?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3818",
        "question": "How many politicians live in India?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbo:residence dbr:India))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many politicians",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "live in India",
                    "start": 21,
                    "end": 34
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS politicians)) (VP (VBP live) (PP (IN in) (NP (NNP India))))) (. ?)))",
        "mask_entity": "How many politicians live in [ENT]?",
        "entity": [
            "India"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4300",
        "question": "What is the base currency of the country which operates the Marion Dufresne?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marion_Dufresne_(1995)> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "SExpr": "(JOIN (R dbo:currency) (JOIN (R dbo:operator) dbr:Marion_Dufresne_(1995))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the base currency of [IQ1]",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the country",
                                "start": 29,
                                "end": 40
                            },
                            {
                                "description": "which operates the Marion Dufresne",
                                "start": 41,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBZ operates) (NP (DT the) (NNP Marion) (NNP Dufresne)))))))))) (. ?)))",
        "mask_entity": "What is the base currency of the country which operates [ENT]?",
        "entity": [
            "the Marion Dufresne"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2593",
        "question": "What is the region served by the governor of Stephen L.R. McNichols ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_L.R._McNichols> <http://dbpedia.org/property/governor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
        "SExpr": "(JOIN (R dbo:region) (JOIN (R dbp:governor) dbr:Stephen_L.R._McNichols)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the region",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "served by [IQ1]",
                    "start": 19,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the governor of Stephen L.R. McNichols",
                                "start": 29,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN region)) (VP (VBN served) (PP (IN by) (NP (NP (DT the) (NN governor)) (PP (IN of) (NP (NNP Stephen) (NNP L.R.) (NNP McNichols))))))))) (. ?)))",
        "mask_entity": "What is the region served by the governor of [ENT] ?",
        "entity": [
            "Stephen L.R. McNichols"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4164",
        "question": "Who operates Liverpool Playhouse ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "SExpr": "(JOIN (R dbo:operatedBy) dbr:Liverpool_Playhouse)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ operates) (NP (NNP Liverpool) (NNP Playhouse)))) (. ?)))",
        "mask_entity": "Who operates [ENT] ?",
        "entity": [
            "Liverpool Playhouse"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3031",
        "question": "Who has composed songs produced by Terry Melcher?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
        "SExpr": "(JOIN (R dbo:composer) (AND dbo:Song (JOIN dbp:producer dbr:Terry_Melcher))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has composed songs",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "[IQ1]",
                    "start": 23,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "produced by Terry Melcher",
                                "start": 23,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN composed) (NP (NP (NNS songs)) (VP (VBN produced) (PP (IN by) (NP (NNP Terry) (NNP Melcher)))))))) (. ?)))",
        "mask_entity": "Who has composed songs produced by [ENT]?",
        "entity": [
            "Terry Melcher"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3579",
        "question": "To which series does Lost special belong to ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri } ",
        "SExpr": "(JOIN (R dbp:series) dbr:The_Lost_Special)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN series)) (VP (VBZ does) (VP (VBN Lost) (S (ADJP (JJ special))))))) (VP (VB belong) (PP (IN to))) (. ?)))",
        "mask_entity": "To which series does [ENT] belong to ?",
        "entity": [
            "Lost special"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2832",
        "question": "How many albums did the maker of The Band produce?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/The_Band> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(AND dbo:Album (JOIN (R dbo:subsequentWork) (JOIN dbo:artist dbr:The_Band))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many albums",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "did [IQ1] produce",
                    "start": 16,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the maker of The Band",
                                "start": 20,
                                "end": 41
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS albums)) (VP (VBD did) (S (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (DT The) (NNP Band)))) (VP (VB produce))))) (. ?)))",
        "mask_entity": "How many albums did the maker of [ENT] produce?",
        "entity": [
            "The Band"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3472",
        "question": "List few musical artist whose notable instruments are Ludwig Drums and  Remo?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(AND dbo:MusicalArtist (AND (JOIN dbp:notableInstruments dbr:Ludwig_Drums) (JOIN dbo:instrument dbr:Remo)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List few musical artist",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "whose notable instruments are Ludwig Drums and Remo",
                    "start": 24,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (JJ few) (JJ musical) (NN artist)) (SBAR (WHNP (WP$ whose) (JJ notable) (NNS instruments)) (S (VP (VBP are) (NP (NP (NNP Ludwig) (NNPS Drums)) (CC and) (NP (NNP Remo)))))))) (. ?)))",
        "mask_entity": "List few musical artist whose notable instruments are [ENT] and  [ENT]?",
        "entity": [
            "Ludwig Drums",
            "Remo"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "137",
        "question": "How many rivers start in an English speaking country?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:sourceCountry (JOIN dbo:officialLanguage dbr:English_language))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many rivers",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "start in [IQ1]",
                    "start": 16,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "an English speaking country",
                                "start": 25,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS rivers)) (VP (VBP start) (PP (IN in) (NP (DT an) (JJ English) (VBG speaking) (NN country))))) (. ?)))",
        "mask_entity": "How many rivers start in an [ENT] speaking country?",
        "entity": [
            "English"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2180",
        "question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (AND (JOIN (R dbo:nominee) dbr:Jack_Ryan_(politician)) (JOIN (R dbo:nominee) dbr:Robert_Sarvis)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For a position in which institution",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "were both Jack Ryan and Robert sarvis both appointed",
                    "start": 36,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (PP (IN For) (NP (NP (DT a) (NN position)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN institution)) (VP (VBD were) (NP (CC both) (NP (NNP Jack) (NNP Ryan)) (CC and) (NP (NNP Robert) (NNP sarvis))) (ADVP (CC both)) (VP (VBN appointed)))))) (. ?)))",
        "mask_entity": "For a position in which institution were both [ENT] and [ENT] both appointed?",
        "entity": [
            "Jack Ryan",
            "Robert sarvis"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2128",
        "question": "Where Everybody knows you is the theme album of which show ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> <http://dbpedia.org/ontology/album> ?uri } ",
        "SExpr": "(JOIN (R dbo:album) dbr:Where_Everybody_Knows_Your_Name)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB Where)) (S (NP (NN Everybody)) (VP (VBZ knows) (SBAR (S (NP (PRP you)) (VP (VBZ is) (NP (NP (DT the) (NN theme) (NN album)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (S (VP (VBP show)))))))))) (. ?)))",
        "mask_entity": "Where Everybody knows you is the theme album of which show ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3177",
        "question": "Food in which countries has shallot in it?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "SExpr": "(JOIN (R dbo:country) (AND dbo:Food (JOIN dbo:ingredient dbr:Shallot))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Food",
                    "start": 0,
                    "end": 4
                },
                {
                    "description": "in which countries has [IQ1]",
                    "start": 5,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "shallot in it",
                                "start": 28,
                                "end": 41
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NN Food)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNS countries)) (VP (VBZ has) (NP (NN shallot)) (PP (IN in) (NP (PRP it)))))) (. ?)))",
        "mask_entity": "Food in which countries has shallot in it?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4367",
        "question": "Which rivers have source origins asnorth western, Zambia ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbp:sourceRegion dbr:North-Western_Province,_Zambia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which rivers",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "have source origins asnorth western, Zambia",
                    "start": 13,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP have) (NP (NP (NP (NN source) (NNS origins)) (PP (IN asnorth) (ADJP (JJ western)))) (, ,) (NP (NNP Zambia))))) (. ?)))",
        "mask_entity": "Which rivers have source origins asnorth western, [ENT] ?",
        "entity": [
            "Zambia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4261",
        "question": "Organization holding stocks of  Galician and German wikipedias?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:owner) dbr:Galician_Wikipedia) (JOIN (R dbo:owner) dbr:German_Wikipedia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Organization",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "holding stocks of Galician and German wikipedias",
                    "start": 13,
                    "end": 61
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NN Organization)) (VP (VBG holding) (NP (NP (NNS stocks)) (PP (IN of) (NP (ADJP (JJ Galician) (CC and) (JJ German)) (NNS wikipedias))))) (. ?)))",
        "mask_entity": "Organization holding stocks of  [ENT] and [ENT] wikipedias?",
        "entity": [
            "Galician",
            "German"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4344",
        "question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbp:city dbr:Reading,_Berkshire) (JOIN dbo:mouthPlace dbr:Southend-on-Sea)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "with Readin, Brekshire in its path",
                    "start": 15,
                    "end": 49
                },
                {
                    "description": "and mouth place is Sothend-on-sea",
                    "start": 50,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NNP Readin))))) (, ,) (NP (NNP Brekshire)) (PP (IN in) (NP (PRP$ its) (NML (NN path) (CC and) (NN mouth)) (NN place))) (VP (VBZ is) (NP (JJ Sothend-on-) (NN sea))) (. ?)))",
        "mask_entity": "Name the river with [ENT], [ENT] in its path and mouth place is [ENT] ?",
        "entity": [
            "Readin",
            "Brekshire",
            "Sothend-on-sea"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1331",
        "question": "Alexander Magleby, a rugby player is alma mater to which university?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/property/university> ?uri } ",
        "SExpr": "(JOIN (R dbp:university) dbr:Alexander_Magleby)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Alexander) (NNP Magleby)) (, ,) (NP (DT a) (JJ rugby) (NN player)) (VP (VBZ is) (NP (NP (NN alma) (NN mater)) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NN university)) (. ?)))))))",
        "mask_entity": "[ENT], a rugby player is alma mater to which university?",
        "entity": [
            "Alexander Magleby"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2017",
        "question": "Is Amharic the official language of Ethiopia?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (JJ Amharic)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NNP Ethiopia)))) (. ?)))",
        "mask_entity": "Is Amharic the official language of [ENT]?",
        "entity": [
            "Ethiopia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2482",
        "question": "What sport played at Islamic azad uni employes Craig Van Tilbury?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:occupation) dbr:Craig_Van_Tilbury) (JOIN (R dbo:sport) dbr:Islamic_Azad_University_Central_Tehran_Branch))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What sport",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "played at Islamic azad uni",
                    "start": 11,
                    "end": 37
                },
                {
                    "description": "employes Craig Van Tilbury",
                    "start": 38,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN sport)) (S (VP (VBD played) (PP (IN at) (NP (NP (NML (NNP Islamic) (NNP azad)) (NN uni) (NNS employes)) (NP (NNP Craig) (NNP Van) (NNP Tilbury)))))) (. ?)))",
        "mask_entity": "What sport played at [ENT] azad uni employes [ENT]?",
        "entity": [
            "Islamic",
            "Craig Van Tilbury"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1358",
        "question": "List the products of the company which published Tweenies: Game Time.",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tweenies:_Game_Time> <http://dbpedia.org/property/publisher> ?x . ?x <http://dbpedia.org/property/products> ?uri  . }",
        "SExpr": "(JOIN (R dbp:products) (JOIN (R dbp:publisher) dbr:Tweenies:_Game_Time)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the products of [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 21,
                                "end": 32
                            },
                            {
                                "description": "which published Tweenies: Game Time",
                                "start": 33,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS products)) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBD published) (NP (NP (NNPS Tweenies)) (: :) (NP (NN Game) (NN Time)))))))))) (. .)))",
        "mask_entity": "List the products of the company which published [ENT].",
        "entity": [
            "Tweenies: Game Time"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1329",
        "question": "List the agencies located someplace lead by Alex Chalk.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Alex_Chalk> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
        "SExpr": "(AND dbo:GovernmentAgency (JOIN dbo:location (JOIN dbo:leaderName dbr:Alex_Chalk))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the agencies",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "located [IQ1]",
                    "start": 18,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "someplace",
                                "start": 26,
                                "end": 35
                            },
                            {
                                "description": "lead by Alex Chalk",
                                "start": 36,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS agencies)) (VP (VBN located) (ADVP (RB someplace)) (S (VP (VBN lead) (PP (IN by) (NP (NNP Alex) (NNP Chalk)))))))) (. .)))",
        "mask_entity": "List the agencies located someplace lead by [ENT].",
        "entity": [
            "Alex Chalk"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2150",
        "question": "What religion are the characters of Absolutely Fabulous from?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Absolutely_Fabulous> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:FictionalCharacter (JOIN dbp:series dbr:Absolutely_Fabulous))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What religion are [IQ1] from",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the characters of Absolutely Fabulous",
                                "start": 18,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (RB Absolutely) (JJ Fabulous))) (PP (IN from))))) (. ?)))",
        "mask_entity": "What religion are the characters of Absolutely Fabulous from?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2122",
        "question": "What are the movies whose music composer uses a Hammond organ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:musicComposer (JOIN dbo:instrument dbr:Hammond_organ))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose music composer [IQ1]",
                    "start": 20,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "uses a Hammond organ",
                                "start": 41,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN music) (NN composer)) (S (VP (VBZ uses) (NP (DT a) (NNP Hammond) (NN organ)))))))) (. ?)))",
        "mask_entity": "What are the movies whose music composer uses a [ENT] organ?",
        "entity": [
            "Hammond"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3981",
        "question": "Was Love Hurts in Short Cut Draw Blood?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Love_Hurts> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Love)) (VP (VBZ Hurts) (PP (IN in) (NP (NML (NNP Short) (NN Cut)) (NNP Draw) (NNP Blood)))) (. ?)))",
        "mask_entity": "Was Love Hurts in Short Cut Draw Blood?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1252",
        "question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Ati\u015ba> <http://dbpedia.org/ontology/occupation> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:religion) dbr:Janaka_Thissakuttiarachchi) (JOIN (R dbo:occupation) dbr:Ati\u015ba))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Janaka Thissakuttiarachchi follows",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "what religion,",
                    "start": 35,
                    "end": 49
                },
                {
                    "description": "which once employed Atisa Srijnana too",
                    "start": 50,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Janaka) (NNP Thissakuttiarachchi)) (VP (VBZ follows) (SBAR (WHNP (WDT what) (NN religion)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB once)) (VP (VBD employed) (NP (NNP Atisa) (NNP Srijnana)) (ADVP (RB too))))))) (. ?)))",
        "mask_entity": "[ENT] follows what religion, which once employed [ENT] too?",
        "entity": [
            "Janaka Thissakuttiarachchi",
            "Atisa Srijnana"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3278",
        "question": "Whihc birthpalce of Svetlana Gounkina is also the largest city of Union State ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:largestCity) dbr:Union_State) (JOIN (R dbo:birthPlace) dbr:Svetlana_Gounkina))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which birthpalce of Svetlana Gounkina",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "is also the largest city of Union State",
                    "start": 38,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT Whihc) (NN birthpalce)) (PP (IN of) (NP (NNP Svetlana) (NNP Gounkina)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Union) (NNP State))))) (. ?)))",
        "mask_entity": "Whihc birthpalce of [ENT] is also the largest city of [ENT] ?",
        "entity": [
            "Svetlana Gounkina",
            "Union State"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3374",
        "question": "Name the TV show with artist Christopher Franke and cast member Jason Carter ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:artist dbr:Christopher_Franke) (JOIN dbo:starring dbr:Jason_Carter_(actor))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the TV show",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with artist Christopher Franke",
                    "start": 17,
                    "end": 47
                },
                {
                    "description": "and cast member Jason Carter",
                    "start": 48,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NN TV) (NN show)) (PP (IN with) (NP (NN artist) (NNP Christopher) (NNP Franke)))) (CC and) (NP (NML (VB cast) (NN member)) (NNP Jason) (NNP Carter)))) (. ?)))",
        "mask_entity": "Name the TV show with artist [ENT] and cast member [ENT] ?",
        "entity": [
            "Christopher Franke",
            "Jason Carter"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2814",
        "question": "Which artist married to Lee Krasner?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Lee_Krasner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "SExpr": "(AND dbo:Artist (JOIN dbp:spouse dbr:Lee_Krasner))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which artist",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "married to Lee Krasner",
                    "start": 13,
                    "end": 35
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN artist)) (S (VP (VBD married) (PP (IN to) (NP (NNP Lee) (NNP Krasner))))) (. ?)))",
        "mask_entity": "Which artist married to [ENT]?",
        "entity": [
            "Lee Krasner"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1848",
        "question": "What teams did the ex teamplayers of lighthouse boy club start their career with?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
        "SExpr": "(JOIN (R dbp:debutteam) (JOIN dbp:youthclubs dbr:Lighthouse_Boys_Club)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What teams",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "did [IQ1] start their career with",
                    "start": 11,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ex teamplayers of lighthouse boy club",
                                "start": 15,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS teams)) (SQ (VBD did) (NP (NP (DT the) (NN ex) (NNS teamplayers)) (PP (IN of) (NP (NN lighthouse) (NN boy) (NN club)))) (VP (VB start) (NP (PRP$ their) (NN career)) (PP (IN with)))) (. ?)))",
        "mask_entity": "What teams did the ex teamplayers of lighthouse boy club start their career with?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3037",
        "question": "Where was the deadbody discovered of one of the alumni of General Educational Development?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . }",
        "SExpr": "(JOIN (R dbp:bodyDiscovered) (JOIN dbp:education dbr:General_Educational_Development)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was the deadbody discovered of [IQ1]",
                    "start": 0,
                    "end": 89,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "one of the alumni of General Educational Development",
                                "start": 37,
                                "end": 89
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN deadbody)) (VP (VBN discovered) (PP (IN of) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS alumni)) (PP (IN of) (NP (NNP General) (NNP Educational) (NNP Development))))))))) (. ?)))",
        "mask_entity": "Where was the deadbody discovered of [ENT] of the alumni of [ENT]?",
        "entity": [
            "one",
            "General Educational Development"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "388",
        "question": "Who designed the bridge in Oddamavadi?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
        "SExpr": "(JOIN (R dbp:designer) (AND dbo:Bridge (JOIN dbo:locatedInArea dbr:Oddamavadi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who designed [IQ1]",
                    "start": 0,
                    "end": 37,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the bridge",
                                "start": 13,
                                "end": 23
                            },
                            {
                                "description": "in Oddamavadi",
                                "start": 24,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN bridge)) (PP (IN in) (NP (NNP Oddamavadi))))) (. ?)))",
        "mask_entity": "Who designed the bridge in [ENT]?",
        "entity": [
            "Oddamavadi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "235",
        "question": "What is the leader name of the settlements whose governing body is Municipal council?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/Municipal_council> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "SExpr": "(JOIN (R dbo:leaderName) (AND dbo:Settlement (JOIN dbo:governingBody dbr:Municipal_council))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the leader name of [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the settlements",
                                "start": 27,
                                "end": 42
                            },
                            {
                                "description": "whose governing body is Municipal council",
                                "start": 43,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN leader) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose) (NN governing) (NN body)) (S (VP (VBZ is) (NP (JJ Municipal) (NN council)))))))))) (. ?)))",
        "mask_entity": "What is the leader name of the settlements whose governing body is Municipal council?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1077",
        "question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
        "SExpr": "(JOIN (R dbp:founder) (AND dbo:RecordLabel (JOIN dbp:founder dbr:Chris_DuBois))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the co-founder of [IQ1]",
                    "start": 0,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the record labels",
                                "start": 23,
                                "end": 40
                            },
                            {
                                "description": "which have one of the founder as Chris DuBois",
                                "start": 41,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN co-founder)) (PP (IN of) (NP (NP (DT the) (NN record) (NNS labels)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN founder)) (PP (IN as) (NP (NNP Chris) (NNP DuBois))))))))))))) (. ?)))",
        "mask_entity": "Name the co-founder of the record labels which have [ENT] of the founder as [ENT] ?",
        "entity": [
            "one",
            "Chris DuBois"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1984",
        "question": "List the companies operating in Australia?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> } ",
        "SExpr": "(JOIN dbo:regionServed dbr:Australia)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS companies)) (VP (VBG operating) (PP (IN in) (NP (NNP Australia)))))) (. ?)))",
        "mask_entity": "List the companies operating in [ENT]?",
        "entity": [
            "Australia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4363",
        "question": "In which countries is coconut used as a food ingredient?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "SExpr": "(JOIN (R dbp:country) (AND dbo:Food (JOIN dbo:ingredient dbr:Coconut))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which countries",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "is [IQ1]",
                    "start": 19,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "coconut used as a food ingredient",
                                "start": 22,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS countries)) (VP (VBZ is) (NP (NP (NN coconut)) (VP (VBN used) (PP (IN as) (NP (DT a) (NN food) (NN ingredient))))))) (. ?)))",
        "mask_entity": "In which countries is coconut used as a food ingredient?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3962",
        "question": "How many people have worked for teams chaired by Patricia Amorim?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN (R dbp:name) (JOIN dbo:chairman dbr:Patr\u00edcia_Amorim))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have worked for [IQ1]",
                    "start": 16,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "teams",
                                "start": 32,
                                "end": 37
                            },
                            {
                                "description": "chaired by Patricia Amorim",
                                "start": 38,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN worked) (PP (IN for) (NP (NP (NNS teams)) (VP (VBN chaired) (PP (IN by) (NP (NNP Patricia) (NNP Amorim))))))))) (. ?)))",
        "mask_entity": "How many people have worked for teams chaired by [ENT]?",
        "entity": [
            "Patricia Amorim"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "770",
        "question": "How many kinds of games can be played on the Amiga?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
        "SExpr": "(JOIN (R dbp:genre) (JOIN dbo:computingPlatform dbr:Amiga)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many kinds of [IQ1]",
                    "start": 0,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 18,
                                "end": 23
                            },
                            {
                                "description": "can be played on the Amiga",
                                "start": 24,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (WHADVP (WRB How) (JJ many)) (NNS kinds)) (PP (IN of) (NP (NNS games)))) (VP (MD can) (VP (VB be) (VP (VBN played) (PP (IN on) (NP (DT the) (NNP Amiga)))))) (. ?)))",
        "mask_entity": "How many kinds of games can be played on the [ENT]?",
        "entity": [
            "Amiga"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2165",
        "question": "Is the book The Buddha and his Dhamma a book about Buddhism?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (NP (DT the) (NN book)) (NP (DT The) (NNP Buddha))) (CC and) (NP (NP (NP (PRP$ his) (NNP Dhamma)) (NP (DT a) (NN book))) (PP (IN about) (NP (NNP Buddhism))))) (. ?)))",
        "mask_entity": "Is the book The [ENT] and his [ENT] a book about Buddhism?",
        "entity": [
            "Buddha",
            "Dhamma"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "673",
        "question": "How many relatives are there of people fought in the Battle of the Bulge?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:relation) (JOIN dbp:battles dbr:Battle_of_the_Bulge)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many relatives are there of [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 32,
                                "end": 38
                            },
                            {
                                "description": "fought in the Battle of the Bulge",
                                "start": 39,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS relatives)) (VP (VBP are) (NP (NP (EX there)) (PP (IN of) (NP (NP (NNS people)) (VP (VBN fought) (PP (IN in) (NP (NP (DT the) (NNP Battle)) (PP (IN of) (NP (DT the) (NNP Bulge))))))))))) (. ?)))",
        "mask_entity": "How many relatives are there of people fought in [ENT]?",
        "entity": [
            "the Battle of the Bulge"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "249",
        "question": "How many genres of games can I find on the commodore CDTV?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_CDTV> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
        "SExpr": "(JOIN (R dbo:genre) (JOIN dbo:computingPlatform dbr:Commodore_CDTV)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many genres of [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 19,
                                "end": 24
                            },
                            {
                                "description": "can I find on the commodore CDTV",
                                "start": 25,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (NP (JJ many) (NNS genres)) (PP (IN of) (NP (NNS games)))) (VP (MD can) (NP (PRP I)) (VP (VB find) (PP (IN on) (NP (DT the) (NNP commodore) (NNP CDTV)))))) (. ?)))",
        "mask_entity": "How many genres of games can I find on the commodore CDTV?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1574",
        "question": "Does Jevan Snead play as Quarterback?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Jevan) (NNP Snead)) (VP (VB play) (PP (IN as) (NP (NNP Quarterback)))) (. ?)))",
        "mask_entity": "Does [ENT] play as Quarterback?",
        "entity": [
            "Jevan Snead"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3419",
        "question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:voices dbr:Eliza_Schneider) (JOIN dbp:voices dbr:Isaac_Hayes)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the sitcoms",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "where Eliza Schneider and Isaac Hayes gave voice",
                    "start": 20,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS sitcoms)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNP Eliza) (NNP Schneider)) (CC and) (NP (NNP Isaac) (NNP Hayes))) (VP (VBD gave) (NP (NN voice))))))) (. ?)))",
        "mask_entity": "Give me the sitcoms where [ENT] and [ENT] gave voice?",
        "entity": [
            "Eliza Schneider",
            "Isaac Hayes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2081",
        "question": "Directors of which movies are buried in Ronda?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Ronda> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "SExpr": "(JOIN dbp:director (JOIN dbo:restingPlace dbr:Ronda)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Directors of which movies are [IQ1]",
                    "start": 0,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "buried in Ronda",
                                "start": 30,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NNS Directors)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (S (NP (NNS movies)) (VP (VBP are) (VP (VBN buried) (PP (IN in) (NP (NNP Ronda))))))) (. ?)))",
        "mask_entity": "Directors of which movies are buried in [ENT]?",
        "entity": [
            "Ronda"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1823",
        "question": "List the debut team of the baseball player who born in Houston.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
        "SExpr": "(JOIN (R dbo:debutTeam) (AND dbo:BaseballPlayer (JOIN dbp:birthPlace dbr:Houston))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the debut team of [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the baseball player",
                                "start": 23,
                                "end": 42
                            },
                            {
                                "description": "who born in Houston",
                                "start": 43,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NP (DT the) (NN baseball) (NN player)) (SBAR (WHNP (WP who)) (S (VP (VBD born) (PP (IN in) (NP (NNP Houston)))))))))) (. .)))",
        "mask_entity": "List the debut team of the baseball player who born in [ENT].",
        "entity": [
            "Houston"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "716",
        "question": "Does Cascade Airways have a hub in Seattle?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Cascade) (NNPS Airways)) (VP (VB have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NNP Seattle))))) (. ?)))",
        "mask_entity": "Does [ENT] have a hub in [ENT]?",
        "entity": [
            "Cascade Airways",
            "Seattle"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4668",
        "question": "Who edited  British Gazette ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri } ",
        "SExpr": "(JOIN (R dbp:editor) dbr:British_Gazette)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD edited) (NP (NNP British) (NNP Gazette)))) (. ?)))",
        "mask_entity": "Who edited  [ENT] ?",
        "entity": [
            "British Gazette"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2048",
        "question": "List the things for which the relatives of Mrunalini Kunte are known?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "SExpr": "(JOIN (R dbp:knownFor) (JOIN (R dbo:relative) dbr:Mrunalini_Kunte)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the things",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "for which [IQ1] are known",
                    "start": 16,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of Mrunalini Kunte",
                                "start": 26,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS things)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mrunalini) (NNP Kunte)))) (VP (VBP are) (VP (VBN known))))))) (. ?)))",
        "mask_entity": "List the things for which the relatives of [ENT] are known?",
        "entity": [
            "Mrunalini Kunte"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4178",
        "question": "What acts and artists are associated with people who have worked with Divertis?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Divertis> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "SExpr": "(JOIN (R dbo:associatedMusicalArtist) (JOIN dbp:associatedActs dbr:Divertis)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What acts and artists",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "are associated with [IQ1]",
                    "start": 22,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 42,
                                "end": 48
                            },
                            {
                                "description": "who have worked with Divertis",
                                "start": 49,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS acts) (CC and) (NNS artists)) (SQ (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN worked) (PP (IN with) (NP (NNP Divertis)))))))))))) (. ?)))",
        "mask_entity": "What acts and artists are associated with people who have worked with [ENT]?",
        "entity": [
            "Divertis"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2724",
        "question": "What are the notableworks of Russell T Davies?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri } ",
        "SExpr": "(JOIN (R dbp:notableworks) dbr:Russell_T_Davies)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS notableworks)) (PP (IN of) (NP (NNP Russell) (NNP T) (NNPS Davies)))))) (. ?)))",
        "mask_entity": "What are the notableworks of [ENT]?",
        "entity": [
            "Russell T Davies"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4521",
        "question": "Which company has developed games whose music is done by Gerard Marino?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "SExpr": "(JOIN (R dbo:developer) (AND dbo:VideoGame (JOIN dbo:composer dbr:Gerard_Marino))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "has developed [IQ1]",
                    "start": 14,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 28,
                                "end": 33
                            },
                            {
                                "description": "whose music is done by Gerard Marino",
                                "start": 34,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ has) (VP (VBN developed) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NN music)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Gerard) (NNP Marino))))))))))) (. ?)))",
        "mask_entity": "Which company has developed games whose music is done by [ENT]?",
        "entity": [
            "Gerard Marino"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1460",
        "question": "Who all have developed softwares for Unix Like OSes?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(JOIN (R dbo:developer) (AND dbo:Software (JOIN dbp:operatingSystem dbr:Unix-like))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who all",
                    "start": 0,
                    "end": 7
                },
                {
                    "description": "have developed [IQ1]",
                    "start": 8,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "softwares for Unix Like OSes",
                                "start": 23,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (DT all) (VBP have) (VP (VBN developed) (NP (NP (NNS softwares)) (PP (IN for) (NP (NP (NNP Unix)) (PP (IN Like) (NP (NNPS OSes)))))))) (. ?)))",
        "mask_entity": "Who all have developed softwares for Unix Like OSes?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1668",
        "question": "What are some party leaders of the parties which have had a seat in Berlin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "SExpr": "(JOIN (R dbo:leader) (AND dbo:PoliticalParty (JOIN dbo:headquarter dbr:Berlin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some party leaders of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the parties",
                                "start": 31,
                                "end": 42
                            },
                            {
                                "description": "which have had a seat in Berlin",
                                "start": 43,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NN party) (NNS leaders)) (PP (IN of) (NP (NP (DT the) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN had) (NP (DT a) (NN seat)) (PP (IN in) (NP (NNP Berlin)))))))))))) (. ?)))",
        "mask_entity": "What are some party leaders of the parties which have had a seat in [ENT]?",
        "entity": [
            "Berlin"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2756",
        "question": "Was James maker in the band Noko?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Noko> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/James_Maker> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (NNP James) (NN maker)) (PP (IN in) (NP (NP (DT the) (NN band)) (NP (NNP Noko))))) (. ?)))",
        "mask_entity": "Was [ENT] maker in the band [ENT]?",
        "entity": [
            "James",
            "Noko"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2000",
        "question": "Was Nick Jonas a member of the Jonas Brothers?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Nick) (NNP Jonas)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNP Jonas) (NNPS Brothers)))) (. ?)))",
        "mask_entity": "Was [ENT] a member of [ENT]?",
        "entity": [
            "Nick Jonas",
            "the Jonas Brothers"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "404",
        "question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri. <http://dbpedia.org/resource/Gary_Holder-Winfield> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:tenant) dbr:New_Sanno_Hotel) (JOIN (R dbo:militaryBranch) dbr:Gary_Holder-Winfield))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which tenant of New Sanno Hotel",
                    "start": 0,
                    "end": 31
                },
                {
                    "description": "is the military branch of the Gary Holder-Winfield",
                    "start": 32,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN tenant)) (PP (IN of) (NP (NNP New) (NNP Sanno) (NNP Hotel)))) (S (VP (VBZ is) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (DT the) (NNP Gary) (NNP Holder-Winfield)))))) (. ?)))",
        "mask_entity": "Which tenant of [ENT] is the military branch of the [ENT] ?",
        "entity": [
            "New Sanno Hotel",
            "Gary Holder-Winfield"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "384",
        "question": "List the director of The Adventures of mimi ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)> <http://dbpedia.org/property/director> ?uri } ",
        "SExpr": "(JOIN (R dbp:director) dbr:The_Adventures_of_Mimi_(video))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN director)) (PP (IN of) (NP (NP (DT The) (NNPS Adventures)) (PP (IN of) (NP (NNP mimi))))))) (. ?)))",
        "mask_entity": "List the director of [ENT] ?",
        "entity": [
            "The Adventures of mimi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4535",
        "question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
        "SExpr": "(AND dbo:SportsManager (AND (JOIN dbo:managerClub dbr:Middlesbrough_F.C.) (JOIN dbp:managerclubs dbr:England_national_under-21_football_team)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List sports managers",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "who managed Middlesbrough F.C. and England national under-21 football team",
                    "start": 21,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NN List) (NNS sports) (NNS managers)) (SBAR (WHNP (WP who)) (S (VP (VBD managed) (NP (NP (NNP Middlesbrough) (NNP F.C.)) (CC and) (NP (NNP England) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 21)))) (NN football) (NN team)))))) (. ?)))",
        "mask_entity": "List sports managers who managed [ENT] and [ENT] national under-21 football team?",
        "entity": [
            "Middlesbrough F.C.",
            "England"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2152",
        "question": "Name all the soccer players who played in a under 18 club for La Liga?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "SExpr": "(AND dbo:SoccerPlayer (JOIN dbp:youthclubs (JOIN dbp:league dbr:La_Liga))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name all the soccer players",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "who played in [IQ1]",
                    "start": 28,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a under 18 club for La Liga",
                                "start": 42,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBD played) (PP (IN in) (NP (DT a) (PP (IN under) (NP (NP (CD 18) (NN club)) (PP (IN for) (NP (NNP La) (NNP Liga)))))))))))) (. ?)))",
        "mask_entity": "Name all the soccer players who played in a [ENT] club for [ENT]?",
        "entity": [
            "under 18",
            "La Liga"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1633",
        "question": "Which key perosn of the Elders is also the president of united World College ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:keyPeople) dbr:The_Elders_(organization)) (JOIN (R dbo:president) dbr:United_World_Colleges))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which key perosn of the Elders",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "is also the president of united World College",
                    "start": 31,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ key) (NN perosn)) (PP (IN of) (NP (DT the) (NNPS Elders)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP united) (NNP World) (NNP College))))) (. ?)))",
        "mask_entity": "Which key perosn of the Elders is also the president of united [ENT] ?",
        "entity": [
            "World College"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4586",
        "question": "Who are the players whose current clubs have Ferran Soriano as chairman?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbp:currentclub (JOIN dbp:chairman dbr:Ferran_Soriano))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the players",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose current clubs [IQ1]",
                    "start": 20,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "have Ferran Soriano as chairman",
                                "start": 40,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ current) (NNS clubs)) (S (VP (VBP have) (NP (NNP Ferran) (NNP Soriano)) (PP (IN as) (NP (NN chairman))))))))) (. ?)))",
        "mask_entity": "Who are the players whose current clubs have [ENT] as chairman?",
        "entity": [
            "Ferran Soriano"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3925",
        "question": "What are some parties which have people from Mangalore as a member?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Mangalore> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "SExpr": "(JOIN (R dbp:party) (JOIN dbp:placeOfBirth dbr:Mangalore)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some parties",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "which have [IQ1] as a member",
                    "start": 22,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 33,
                                "end": 39
                            },
                            {
                                "description": "from Mangalore",
                                "start": 40,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS people)) (PP (IN from) (NP (NP (NNP Mangalore)) (PP (IN as) (NP (DT a) (NN member)))))))))))) (. ?)))",
        "mask_entity": "What are some parties which have people from [ENT] as a member?",
        "entity": [
            "Mangalore"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4158",
        "question": "Which employer of Michael M. Sears is also the producer of Delta III ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:employer) dbr:Michael_M._Sears) (JOIN (R dbo:manufacturer) dbr:Delta_III))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which employer of Michael M. Sears",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is also the producer of Delta III",
                    "start": 35,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN employer)) (PP (IN of) (NP (NNP Michael) (NNP M.) (NNP Sears)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Delta) (CD III))))) (. ?)))",
        "mask_entity": "Which employer of [ENT] is also the producer of [ENT] ?",
        "entity": [
            "Michael M. Sears",
            "Delta III"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "223",
        "question": "Name the largest city in the county where there is a Cy-Fair High School.",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
        "SExpr": "(JOIN (R dbo:largestCity) (JOIN (R dbo:county) dbr:Cy-Fair_High_School)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the largest city in [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the county",
                                "start": 25,
                                "end": 35
                            },
                            {
                                "description": "where there is a Cy-Fair High School",
                                "start": 36,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (DT the) (NN county)) (SBAR (WHADVP (WRB where)) (S (NP (EX there)) (VP (VBZ is) (NP (DT a) (NML (NNP Cy-) (NNP Fair)) (NNP High) (NNP School))))))))) (. .)))",
        "mask_entity": "Name the largest city in the county where there is [ENT].",
        "entity": [
            "a Cy-Fair High School"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2193",
        "question": "How many bacterias are there whose division is Firmicutes?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "SExpr": "(AND dbo:Bacteria (JOIN dbo:division dbr:Firmicutes))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many bacterias are there",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "whose division is Firmicutes",
                    "start": 29,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS bacterias)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP$ whose) (NN division)) (S (VP (VBZ is) (NP (NNPS Firmicutes)))))))) (. ?)))",
        "mask_entity": "How many bacterias are there whose division is Firmicutes?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3136",
        "question": "To which country does Peter Blay owe his allegiance?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri } ",
        "SExpr": "(JOIN (R dbp:allegiance) dbr:Peter_Blay)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN country)) (VP (VBZ does) (S (NP (NNP Peter) (NNP Blay)) (VP (VB owe) (NP (PRP$ his) (NN allegiance)))))) (. ?)))",
        "mask_entity": "To which country does [ENT] owe his allegiance?",
        "entity": [
            "Peter Blay"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1824",
        "question": "Is jim harbaugh currently in the Michigan Wolverines?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jim_Harbaugh> <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP jim) (NNP harbaugh)) (ADVP (RB currently)) (PP (IN in) (NP (DT the) (NNP Michigan) (NNPS Wolverines))) (. ?)))",
        "mask_entity": "Is [ENT] currently in [ENT]?",
        "entity": [
            "jim harbaugh",
            "the Michigan Wolverines"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4600",
        "question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:subsequentWork dbr:Crusade_(TV_series)) (JOIN dbp:composer dbr:Stewart_Copeland)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose subsequent work is Crusade",
                    "start": 25,
                    "end": 57
                },
                {
                    "description": "and Composer is Stewart Copeland",
                    "start": 58,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (S (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (JJ subsequent) (NN work)) (S (VP (VBZ is) (NP (NNP Crusade) (CC and) (NNP Composer)))))) (VP (VBZ is) (NP (NNP Stewart) (NNP Copeland))))) (. ?)))",
        "mask_entity": "Name the television show whose subsequent work is [ENT] is [ENT]?",
        "entity": [
            "Crusade and Composer",
            "Stewart Copeland"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "797",
        "question": "What are the current music bands of Chester Bennington?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> } ",
        "SExpr": "(JOIN dbp:currentMembers dbr:Chester_Bennington)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ current) (NN music) (NNS bands)) (PP (IN of) (NP (NNP Chester) (NNP Bennington)))))) (. ?)))",
        "mask_entity": "What are the current music bands of [ENT]?",
        "entity": [
            "Chester Bennington"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2871",
        "question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "SExpr": "(JOIN (R dbp:primeminister) (JOIN dbp:successor dbr:Derick_Heathcoat-Amory,_1st_Viscount_Amory)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was the prime minister",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "under which [IQ1] served",
                    "start": 27,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the predecessor of Derick Heathcoat Amory",
                                "start": 39,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (DT the) (JJ prime) (NN minister)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Derick) (NNP Heathcoat) (NNP Amory)))) (VP (VBD served))))))) (. ?)))",
        "mask_entity": "Who was the prime minister under which the predecessor of [ENT] served?",
        "entity": [
            "Derick Heathcoat Amory"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "9",
        "question": "Which person designed the cars which has been designed by ASC Creative Services?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbp:designer) (AND dbo:Automobile (JOIN dbo:designCompany dbr:ASC_Creative_Services))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which person",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "designed [IQ1]",
                    "start": 13,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the cars",
                                "start": 22,
                                "end": 30
                            },
                            {
                                "description": "which has been designed by ASC Creative Services",
                                "start": 31,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN person)) (S (VP (VBD designed) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN designed) (PP (IN by) (NP (NNP ASC) (NNP Creative) (NNPS Services))))))))))) (. ?)))",
        "mask_entity": "Which person designed the cars which has been designed by [ENT]?",
        "entity": [
            "ASC Creative Services"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1944",
        "question": "What are some orthonychidae birds?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>}",
        "SExpr": "(AND dbo:Bird (JOIN dbo:family dbr:Orthonychidae))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some orthonychidae birds",
                    "start": 0,
                    "end": 33
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (DT some) (JJ orthonychidae) (NNS birds)))) (. ?)))",
        "mask_entity": "What are some orthonychidae birds?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1838",
        "question": "Which driver had the pole position in 1994 Spanish Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
        "SExpr": "(JOIN (R dbo:poleDriver) dbr:1994_Spanish_Grand_Prix)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN driver)) (SQ (VP (VBD had) (NP (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (CD 1994)))) (NP (NNP Spanish) (NNP Grand) (NNP Prix))))) (. ?)))",
        "mask_entity": "Which driver had the pole position in [ENT] [ENT] ?",
        "entity": [
            "1994",
            "Spanish Grand Prix"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "255",
        "question": "Does the US route 281 have a junction at San Antonio?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP US) (NN route) (CD 281)) (VP (VB have) (NP (NP (DT a) (NN junction)) (PP (IN at) (NP (NNP San) (NNP Antonio))))) (. ?)))",
        "mask_entity": "Does the [ENT] route [ENT] have a junction at [ENT]?",
        "entity": [
            "US",
            "281",
            "San Antonio"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4508",
        "question": "How many awards have been given to the founder of Grameen Bank?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbp:founder) dbr:Grameen_Bank)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many awards",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 16,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the founder of Grameen Bank",
                                "start": 35,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NNP Grameen) (NNP Bank))))))))) (. ?)))",
        "mask_entity": "How many awards have been given to the founder of [ENT]?",
        "entity": [
            "Grameen Bank"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1581",
        "question": "Was Queen Latifah in the U.N.I.T.Y. group?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Queen) (NNP Latifah)) (PP (IN in) (NP (DT the) (NNP U.N.I.T.Y.) (NN group))) (. ?)))",
        "mask_entity": "Was [ENT] in the [ENT] group?",
        "entity": [
            "Queen Latifah",
            "U.N.I.T.Y."
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2956",
        "question": "Count the number of important works done by the writers of The Second Coming?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "SExpr": "(JOIN (R dbo:notableWork) (JOIN (R dbo:author) dbr:The_Second_Coming_(TV_serial))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of important works",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "done by [IQ1]",
                    "start": 36,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the writers of The Second Coming",
                                "start": 44,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (JJ important) (NNS works)) (VP (VBN done) (PP (IN by) (NP (NP (DT the) (NNS writers)) (PP (IN of) (NP (DT The) (JJ Second) (NNP Coming)))))))))) (. ?)))",
        "mask_entity": "Count the number of important works done by the writers of The [ENT] Coming?",
        "entity": [
            "Second"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "924",
        "question": "Who all are known to play the Gibson Guitar Corporation?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> } ",
        "SExpr": "(JOIN dbp:notableInstruments dbr:Gibson_Guitar_Corporation)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (DT all) (VP (VBP are) (VP (VBN known) (S (VP (TO to) (VP (VB play) (NP (DT the) (NNP Gibson) (NNP Guitar) (NNP Corporation)))))))) (. ?)))",
        "mask_entity": "Who all are known to play [ENT]?",
        "entity": [
            "the Gibson Guitar Corporation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4429",
        "question": "Which child of Jack Ferguson became a Prime Minister?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "SExpr": "(JOIN (R dbp:primeminister) (JOIN (R dbo:child) dbr:Jack_Ferguson)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which [IQ1] became a Prime Minister",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "child of Jack Ferguson",
                                "start": 6,
                                "end": 28
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN child)) (PP (IN of) (NP (NNP Jack) (NNP Ferguson)))) (S (VP (VBD became) (NP (DT a) (NNP Prime) (NNP Minister)))) (. ?)))",
        "mask_entity": "Which child of [ENT] became a Prime Minister?",
        "entity": [
            "Jack Ferguson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2508",
        "question": "Did Annie Leibovitz do the cover of The Road Ahead?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Annie_Leibovitz> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Annie) (NNP Leibovitz)) (VP (VB do) (NP (NP (DT the) (NN cover)) (PP (IN of) (NP (DT The) (NNP Road) (NNP Ahead))))) (. ?)))",
        "mask_entity": "Did [ENT] do the cover of [ENT]?",
        "entity": [
            "Annie Leibovitz",
            "The Road Ahead"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3775",
        "question": "What are the things whose mascots are from the class Eutheria?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Eutheria> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
        "SExpr": "(JOIN dbp:mascot (JOIN dbo:class dbr:Eutheria)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the things",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose mascots [IQ1]",
                    "start": 20,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are from the class Eutheria",
                                "start": 34,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS things)) (SBAR (WHNP (WP$ whose) (NNS mascots)) (S (VP (VBP are) (PP (IN from) (NP (NP (DT the) (NN class)) (NP (NNP Eutheria)))))))))) (. ?)))",
        "mask_entity": "What are the things whose mascots are from the class [ENT]?",
        "entity": [
            "Eutheria"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4136",
        "question": "For whom did Michael Springer palyed for which is also had a former student named Donald Brooks ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Donald_Brooks> <http://dbpedia.org/property/education> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:team) dbr:Michael_Springer) (JOIN (R dbp:education) dbr:Donald_Brooks))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For whom did Michael Springer played for",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "which is also had a former student named Donald Brooks",
                    "start": 41,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN For) (WHNP (WP whom))) (SQ (VBD did) (NP (NNP Michael) (NNP Springer)) (VP (VBN palyed) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN had) (NP (NP (DT a) (JJ former) (NN student)) (VP (VBN named) (S (NP (NNP Donald) (NNP Brooks))))))))))) (. ?)))",
        "mask_entity": "For whom did [ENT] palyed for which is also had a former student named [ENT] ?",
        "entity": [
            "Michael Springer",
            "Donald Brooks"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2779",
        "question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:nationality) dbr:Georgina_Theodora_Wood) (JOIN (R dbo:nationality) dbr:Akwasi_Oppong_Fosu))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu",
                    "start": 0,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (NP (NP (NNP Georgina) (NNP Theodora) (NNP Wood)) (CC and) (NP (NNP akwasi) (NNP Oppong) (NNP Fosu)))))) (. ?)))",
        "mask_entity": "Name the common nationality of [ENT] and [ENT] ?",
        "entity": [
            "Georgina Theodora Wood",
            "akwasi Oppong Fosu"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "539",
        "question": "Name the movie written by Monty Python and distributed by Cinema International Corporation ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbo:distributor dbr:Cinema_International_Corporation) (JOIN dbp:writer dbr:Monty_Python)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "written by Monty Python",
                    "start": 15,
                    "end": 38
                },
                {
                    "description": "and distributed by Cinema International Corporation",
                    "start": 39,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (VP (VP (VBN written) (PP (IN by) (NP (NNP Monty) (NNP Python)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (NNP Cinema) (NNP International) (NNP Corporation))))))) (. ?)))",
        "mask_entity": "Name the movie written by [ENT] and distributed by [ENT] ?",
        "entity": [
            "Monty Python",
            "Cinema International Corporation"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2745",
        "question": "Is Pittsburgh Steelers the former team of Marv McFadden?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Pittsburgh) (NNP Steelers)) (NP (NP (DT the) (JJ former) (NN team)) (PP (IN of) (NP (NNP Marv) (NNP McFadden)))) (. ?)))",
        "mask_entity": "Is [ENT] the former team of [ENT]?",
        "entity": [
            "Pittsburgh Steelers",
            "Marv McFadden"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4498",
        "question": "Which series was written by Eric Jendresen and John Orloff?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:writer dbr:Erik_Jendresen) (JOIN dbp:writer dbr:John_Orloff)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which series",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "was written by Eric Jendresen and John Orloff",
                    "start": 13,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VP (VBD was) (VP (VBN written) (PP (IN by) (NP (NP (NNP Eric) (NNP Jendresen)) (CC and) (NP (NNP John) (NNP Orloff))))))) (. ?)))",
        "mask_entity": "Which series was written by [ENT] and [ENT]?",
        "entity": [
            "Eric Jendresen",
            "John Orloff"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4571",
        "question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Elasticsearch> <http://dbpedia.org/property/location> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:location) dbr:Yellow_Claw_(DJs)) (JOIN (R dbp:location) dbr:Elasticsearch))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which city",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "can I find both the office of Elasticsearch and the Yellow Claw DJ",
                    "start": 14,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN city)) (VP (MD can) (NP (PRP I)) (VP (VB find) (NP (CC both) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NP (NNP Elasticsearch)) (CC and) (NP (DT the) (NML (NNP Yellow) (NNP Claw)) (NNP DJ))))))))) (. ?)))",
        "mask_entity": "In which city can I find both the office of [ENT] and [ENT]?",
        "entity": [
            "Elasticsearch",
            "the Yellow Claw DJ"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1145",
        "question": "Name the partners of Kelly Brook?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri } ",
        "SExpr": "(JOIN (R dbo:partner) dbr:Kelly_Brook)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS partners)) (PP (IN of) (NP (NNP Kelly) (NNP Brook))))) (. ?)))",
        "mask_entity": "Name the partners of [ENT]?",
        "entity": [
            "Kelly Brook"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "667",
        "question": "What is the area of the broadcast network which has the affiliation with 9TV?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9TV> <http://dbpedia.org/property/affiliation> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
        "SExpr": "(JOIN (R dbp:area) (AND dbo:BroadcastNetwork (JOIN (R dbp:affiliation) dbr:9TV))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the area of [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the broadcast network",
                                "start": 20,
                                "end": 41
                            },
                            {
                                "description": "which has the affiliation with 9TV",
                                "start": 42,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN broadcast) (NN network)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT the) (NN affiliation)) (PP (IN with) (NP (NNP 9TV)))))))))))) (. ?)))",
        "mask_entity": "What is the area of the broadcast network which has the affiliation with [ENT]?",
        "entity": [
            "9TV"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3019",
        "question": "Who is married to Gerard Piqu?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9>  . }",
        "SExpr": "(JOIN dbp:partner dbr:Gerard_Piqu\u00e9)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN married) (PP (IN to) (NP (NNP Gerard) (NNP Piqu)))))) (. ?)))",
        "mask_entity": "Who is married to [ENT]?",
        "entity": [
            "Gerard Piqu"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "357",
        "question": "Which sports are played in schools affiliated with the Harvest Christian Center?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:sport) (AND dbo:School (JOIN dbp:religiousAffiliation dbr:Harvest_Christian_Center))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sports",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are played in [IQ1]",
                    "start": 13,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "schools",
                                "start": 27,
                                "end": 34
                            },
                            {
                                "description": "affiliated with the Harvest Christian Center",
                                "start": 35,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS sports)) (SQ (VP (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (VP (VBN affiliated) (PP (IN with) (NP (DT the) (NNP Harvest) (NNP Christian) (NNP Center))))))))) (. ?)))",
        "mask_entity": "Which sports are played in schools affiliated with [ENT]?",
        "entity": [
            "the Harvest Christian Center"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2831",
        "question": "Who debuted their career in a team coached by Chip Kelly?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
        "SExpr": "(JOIN dbo:debutTeam (JOIN dbp:coach dbr:Chip_Kelly)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who debuted their career in [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a team",
                                "start": 28,
                                "end": 34
                            },
                            {
                                "description": "coached by Chip Kelly",
                                "start": 35,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD debuted) (NP (PRP$ their) (NN career)) (PP (IN in) (NP (NP (DT a) (NN team)) (VP (VBN coached) (PP (IN by) (NP (NNP Chip) (NNP Kelly)))))))) (. ?)))",
        "mask_entity": "Who debuted their career in a team coached by [ENT]?",
        "entity": [
            "Chip Kelly"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2783",
        "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters> <http://dbpedia.org/property/nickname> ?uri } ",
        "SExpr": "(JOIN (R dbp:nickname) dbr:List_of_The_Wolves_of_Mercy_Falls_characters)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS nicknames)) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NP (DT The) (NNPS Wolves)) (PP (IN of) (NP (DT the) (NNP Mercy) (NNPS Falls))))))))))) (. ?)))",
        "mask_entity": "What are the nicknames given to the characters of [ENT]?",
        "entity": [
            "The Wolves of the Mercy Falls"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1353",
        "question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:sourceCountry dbr:Zambia) (JOIN dbo:sourceRegion dbr:North-Western_Province,_Zambia)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "with source country in Zambia",
                    "start": 15,
                    "end": 44
                },
                {
                    "description": "and source region as North-Western Province, Zambia",
                    "start": 45,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NP (NP (NN source) (NN country)) (PP (IN in) (NP (NNP Zambia)))) (CC and) (NP (NP (NN source) (NN region)) (PP (IN as) (NP (NP (NNP North) (NNP -Western) (NNP Province)) (, ,) (NP (NNP Zambia)))))))) (. ?)))",
        "mask_entity": "Name the river with source country in [ENT] and source region as [ENT], [ENT]?",
        "entity": [
            "Zambia",
            "North-Western Province",
            "Zambia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "470",
        "question": "Members of how many political parties have died in Delhi?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "SExpr": "(JOIN (R dbp:party) (JOIN dbp:placeOfDeath dbr:Delhi)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have died in Delhi",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Members of how many political parties",
                                "start": 0,
                                "end": 37
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NNS Members)) (PP (IN of) (SBAR (WHADVP (WRB how)) (S (NP (JJ many) (JJ political) (NNS parties)) (VP (VBP have) (VP (VBN died) (PP (IN in) (NP (NNP Delhi)))))))) (. ?)))",
        "mask_entity": "Members of how many political parties have died in [ENT]?",
        "entity": [
            "Delhi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2703",
        "question": "What is the birthplace of Adugna Deyas and the place where Fiq is located?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fiq,_Ethiopia> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:country) dbr:Fiq,_Ethiopia) (JOIN (R dbp:birthPlace) dbr:Adugna_Deyas))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birthplace of Adugna Deyas",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "and the place where Fiq is located",
                    "start": 39,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NP (NNP Adugna) (NNPS Deyas)) (CC and) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Fiq)) (VP (VBZ is) (VP (VBN located))))))))))) (. ?)))",
        "mask_entity": "What is the birthplace of [ENT] and the place where [ENT] is located?",
        "entity": [
            "Adugna Deyas",
            "Fiq"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3330",
        "question": "what is the headquarters of Juan Dalmau Ramerez?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez> <http://dbpedia.org/property/headquarters> ?uri } ",
        "SExpr": "(JOIN (R dbp:headquarters) dbr:Juan_Dalmau_Ram\u00edrez)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP what)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Juan) (NNP Dalmau) (NNP Ramerez)))))) (. ?)))",
        "mask_entity": "what is the headquarters of [ENT]?",
        "entity": [
            "Juan Dalmau Ramerez"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3637",
        "question": "The president who was in office when Lee Hyun Jae was the PM followed which religion?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Lee_Hyun-jae> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:President (JOIN dbp:primeminister dbr:Lee_Hyun-jae))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] followed which religion",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "The president",
                                "start": 0,
                                "end": 13
                            },
                            {
                                "description": "who was in office when Lee Hyun Jae was the PM",
                                "start": 14,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (DT The) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (PP (IN in) (NP (NN office))) (SBAR (WHADVP (WRB when)) (S (NP (NNP Lee) (NNP Hyun) (NNP Jae)) (VP (VBD was) (NP (NP (DT the) (NN PM)) (VP (VBN followed) (SBAR (WHNP (WDT which) (NN religion)) (. ?))))))))))))",
        "mask_entity": "The president who was in office when [ENT] was the [ENT] followed which religion?",
        "entity": [
            "Lee Hyun Jae",
            "PM"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1396",
        "question": "Who is the maker of the engine of Ford F-Series first generation ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_F-Series_first_generation> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:manufacturer) (JOIN (R dbp:engine) dbr:Ford_F-Series_first_generation)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the maker of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the engine of Ford F-Series first generation",
                                "start": 20,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (NP (DT the) (NN engine)) (PP (IN of) (NP (NML (NNP Ford) (NNP F-Series)) (JJ first) (NN generation)))))))) (. ?)))",
        "mask_entity": "Who is the maker of the engine of [ENT] [ENT] [ENT] generation ?",
        "entity": [
            "Ford",
            "F-Series",
            "first"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3584",
        "question": "What is the religious affiliation of Neungin High School?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
        "SExpr": "(JOIN (R dbp:religiousAffiliation) dbr:Neungin_High_School)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ religious) (NN affiliation)) (PP (IN of) (NP (NNP Neungin) (NNP High) (NNP School)))))) (. ?)))",
        "mask_entity": "What is the religious affiliation of [ENT]?",
        "entity": [
            "Neungin High School"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4486",
        "question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Maria) (NNP Sharapova)) (NP (NP (DT the) (JJ silver) (NN medalist)) (PP (IN of) (NP (NNP Tennis))) (PP (IN at) (NP (NP (DT the) (CD 2012) (NNP Summer) (NNPS Olympics) (NNPS Women) (POS 's)) (NNS singles)))) (. ?)))",
        "mask_entity": "Is [ENT] the silver medalist of Tennis at the [ENT] [ENT]?",
        "entity": [
            "Maria Sharapova",
            "2012",
            "Summer Olympics  Women's singles"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3376",
        "question": "Name the office holder with successor as Adrian A Basora and child as Lori Black ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbo:child dbr:Lori_Black) (JOIN dbp:successor dbr:Adrian_A._Basora)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "with successor as Adrian A Basora",
                    "start": 23,
                    "end": 56
                },
                {
                    "description": "and child as Lori Black",
                    "start": 57,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NN successor)) (PP (IN as) (NP (NP (NNP Adrian) (DT A) (NNP Basora)) (CC and) (NP (NP (NN child)) (PP (IN as) (NP (NNP Lori) (NNP Black))))))))) (. ?)))",
        "mask_entity": "Name the office holder with successor as [ENT] and child as [ENT] ?",
        "entity": [
            "Adrian A Basora",
            "Lori Black"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1256",
        "question": "Who is the owner of the South end ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_South_End> <http://dbpedia.org/property/owners> ?uri } ",
        "SExpr": "(JOIN (R dbp:owners) dbr:The_South_End)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (DT the) (NNP South) (NN end)))))) (. ?)))",
        "mask_entity": "Who is the owner of the [ENT] end ?",
        "entity": [
            "South"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3512",
        "question": "What is the colour of Xocolatlite ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?uri } ",
        "SExpr": "(JOIN (R dbo:colour) dbr:Xocolatlite)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN colour)) (PP (IN of) (NP (NNP Xocolatlite)))))) (. ?)))",
        "mask_entity": "What is the colour of Xocolatlite ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1250",
        "question": "For how many other teams have the members of Atlant Moscow Oblast played?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
        "SExpr": "(JOIN (R dbo:formerTeam) (JOIN dbp:playedFor dbr:Atlant_Moscow_Oblast)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For how many other teams",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "have [IQ1] played",
                    "start": 25,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the members of Atlant Moscow Oblast",
                                "start": 30,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN For) (NP (WHADJP (WRB how) (JJ many)) (JJ other) (NNS teams))) (VBP have) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NNP Atlant) (NNP Moscow) (NNP Oblast)))) (VP (VBN played)) (. ?)))",
        "mask_entity": "For how many other teams have the members of [ENT] played?",
        "entity": [
            "Atlant Moscow Oblast"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4807",
        "question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Hellenic_Naval_Academy> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "SExpr": "(JOIN (R dbo:stateOfOrigin) (AND dbo:President (JOIN dbp:almaMater dbr:Hellenic_Naval_Academy))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the state of origin of [IQ1]",
                    "start": 0,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the president",
                                "start": 31,
                                "end": 44
                            },
                            {
                                "description": "whose alma mater is Hellenic Naval Academy",
                                "start": 45,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NN alma) (NN mater)) (S (VP (VBZ is) (NP (NNP Hellenic) (NNP Naval) (NNP Academy)))))))))))) (. ?)))",
        "mask_entity": "What is the state of origin of the president whose alma mater is [ENT] ?",
        "entity": [
            "Hellenic Naval Academy"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4298",
        "question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:ethnicity) dbr:Maike_Evers) (JOIN (R dbo:ethnicity) dbr:Francisco_Lachowski))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
                    "start": 0,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (NN ethnicity)) (PP (IN of) (NP (DT the) (NML (NML (NNP Maike) (NNP Evers)) (CC and) (NML (NNP Francisco) (NNP Lachowski)))))))) (. ?)))",
        "mask_entity": "What is the common ethnicity of [ENT] and [ENT] ?",
        "entity": [
            "the Maike Evers",
            "Francisco Lachowski"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3284",
        "question": "In which places do companies founded in Newcastle operate?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:regionServed) (AND dbo:Company (JOIN dbo:foundationPlace dbr:City_of_Newcastle))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which places",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "do [IQ1] operate",
                    "start": 16,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 19,
                                "end": 28
                            },
                            {
                                "description": "founded in Newcastle",
                                "start": 29,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS places)) (VP (VBP do) (NP (NP (NNS companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Newcastle))))) (VP (VB operate)))) (. ?)))",
        "mask_entity": "In which places do companies founded in [ENT] operate?",
        "entity": [
            "Newcastle"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2933",
        "question": "Which senator served in military units VMF-155 and VMF-218?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
        "SExpr": "(AND dbo:Senator (AND (JOIN dbo:militaryUnit dbr:VMF-155) (JOIN dbo:militaryUnit dbr:VMF-218)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which senator",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "served in military units VMF-155 and VMF-218",
                    "start": 14,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN senator)) (S (VP (VBD served) (PP (IN in) (NP (NP (NP (JJ military) (NNS units)) (NP (NNP VMF) (SYM -) (CD 155))) (CC and) (NP (NNP VMF) (SYM -) (CD 218)))))) (. ?)))",
        "mask_entity": "Which senator served in military units [ENT] and [ENT]?",
        "entity": [
            "VMF-155",
            "VMF-218"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4175",
        "question": "What kind of games are made by Interplay Entertainment?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "SExpr": "(JOIN (R dbp:genre) (AND dbo:VideoGame (JOIN dbo:publisher dbr:Interplay_Entertainment))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What kind of [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 13,
                                "end": 18
                            },
                            {
                                "description": "are made by Interplay Entertainment",
                                "start": 19,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NNS games)))) (SQ (VP (VBP are) (VP (VBN made) (PP (IN by) (NP (NNP Interplay) (NNP Entertainment)))))) (. ?)))",
        "mask_entity": "What kind of games are made by [ENT]?",
        "entity": [
            "Interplay Entertainment"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1852",
        "question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:engine) dbr:Purvis_Eureka) (JOIN (R dbp:company) dbr:Ford_Theatre))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which producer of Purvis Eureka engine",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "is also the owner of Ford Theatre",
                    "start": 39,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN producer)) (PP (IN of) (NP (NML (NNP Purvis) (NNP Eureka)) (NN engine)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Ford) (NNP Theatre))))) (. ?)))",
        "mask_entity": "Which producer of [ENT] engine is also the owner of [ENT] ?",
        "entity": [
            "Purvis Eureka",
            "Ford Theatre"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4869",
        "question": "What developed EMMS?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EMMS> <http://dbpedia.org/ontology/developer> ?uri } ",
        "SExpr": "(JOIN (R dbo:developer) dbr:EMMS)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBD developed) (NP (NNP EMMS)))) (. ?)))",
        "mask_entity": "What developed EMMS?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2105",
        "question": "Which music band made Take Me There, and to which Tedd Riley was associated?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Teddy_Riley) (JOIN (R dbo:musicalBand) dbr:Take_Me_There_(Blackstreet_&_M\u00fda_song)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which music band",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "made Take Me There,",
                    "start": 17,
                    "end": 36
                },
                {
                    "description": "and to which Tedd Riley was associated",
                    "start": 37,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBAR (SBAR (WHNP (WDT Which) (NN music) (NN band)) (S (VP (VBD made) (NP (VB Take) (PRP Me)) (ADVP (RB There))))) (, ,) (CC and) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NNP Tedd) (NNP Riley)) (VP (VBD was) (VP (VBN associated))))) (. ?)))",
        "mask_entity": "Which music band made [ENT], and to which [ENT] was associated?",
        "entity": [
            "Take Me There",
            "Tedd Riley"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "133",
        "question": "In which time zone is Pong Pha?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri } ",
        "SExpr": "(JOIN (R dbo:timeZone) dbr:Pong_Pha)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN time) (NN zone)) (VP (VBZ is) (NP (NNP Pong) (NNP Pha)))) (. ?)))",
        "mask_entity": "In which time zone is [ENT]?",
        "entity": [
            "Pong Pha"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "928",
        "question": "How many fictional characters are there in a series in which Craig Robinson acted?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Craig_Robinson_(actor)> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:series (JOIN dbo:starring dbr:Craig_Robinson_(actor)))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many fictional characters",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "are there in [IQ1]",
                    "start": 30,
                    "end": 81,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a series",
                                "start": 43,
                                "end": 51
                            },
                            {
                                "description": "in which Craig Robinson acted",
                                "start": 52,
                                "end": 81
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ fictional) (NNS characters)) (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NP (DT a) (NN series)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Craig) (NNP Robinson)) (VP (VBD acted)))))))) (. ?)))",
        "mask_entity": "How many fictional characters are there in a series in which [ENT] acted?",
        "entity": [
            "Craig Robinson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "823",
        "question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:otherParty) dbr:Chandra_Shekhar) (JOIN (R dbo:party) dbr:Datla_Satyanarayana_Raju))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which political party of Chandra Shekhar",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is also the political party of Datl Satyanarayana Raju",
                    "start": 41,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NNP Chandra) (NNP Shekhar)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NNP Datl) (NNP Satyanarayana) (NNP Raju))))) (. ?)))",
        "mask_entity": "Which political party of [ENT] is also the political party of [ENT] ?",
        "entity": [
            "Chandra Shekhar",
            "Datl Satyanarayana Raju"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4543",
        "question": "Who owns the airport in Paphos?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:Airport (JOIN dbo:city dbr:Paphos_District))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 30,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airport in Paphos",
                                "start": 9,
                                "end": 30
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN airport)) (PP (IN in) (NP (NNP Paphos)))))) (. ?)))",
        "mask_entity": "Who owns the airport in [ENT]?",
        "entity": [
            "Paphos"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1531",
        "question": "What is the baseball team whose club manager is Chip Hale?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Chip_Hale>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "SExpr": "(AND dbo:BaseballTeam (JOIN dbp:manager dbr:Chip_Hale))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the baseball team",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose club manager is Chip Hale",
                    "start": 26,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NN club) (NN manager)) (S (VP (VBZ is) (NP (NNP Chip) (NNP Hale)))))))) (. ?)))",
        "mask_entity": "What is the baseball team whose club manager is [ENT]?",
        "entity": [
            "Chip Hale"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1214",
        "question": "Which bacteria's taxonomic class is Bacilli?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "SExpr": "(AND dbo:Bacteria (JOIN dbo:class dbr:Bacilli))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which bacteria's",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "taxonomic class is Bacilli",
                    "start": 17,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT Which) (NN bacteria) (POS 's)) (JJ taxonomic) (NN class)) (VP (VBZ is) (NP (NNP Bacilli))) (. ?)))",
        "mask_entity": "Which bacteria's taxonomic class is [ENT]?",
        "entity": [
            "Bacilli"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "504",
        "question": "What honours did Reigh Count receive?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/honours> ?uri } ",
        "SExpr": "(JOIN (R dbo:honours) dbr:Reigh_Count)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS honours)) (SQ (VBD did) (NP (NNP Reigh) (NNP Count)) (VP (VB receive))) (. ?)))",
        "mask_entity": "What honours did [ENT] receive?",
        "entity": [
            "Reigh Count"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4285",
        "question": "What are some products of the the company whose subsidiary is Sony Corp shareholders and subsidies?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "SExpr": "(JOIN dbo:manufacturer (JOIN dbo:subsidiary dbr:Sony_Corporation_shareholders_and_subsidiaries)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some products of [IQ1]",
                    "start": 0,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 26,
                                "end": 37
                            },
                            {
                                "description": "whose subsidiary is Sony Corp shareholders and subsidies",
                                "start": 38,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS products)) (PP (IN of) (NP (NP (DT the) (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (NN subsidiary)) (S (VP (VBZ is) (NP (NNP Sony) (NNP Corp) (NNS shareholders) (CC and) (NNS subsidies)))))))))) (. ?)))",
        "mask_entity": "What are some products of the the company whose subsidiary is [ENT] shareholders and subsidies?",
        "entity": [
            "Sony Corp"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1996",
        "question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
        "SExpr": "(JOIN (R dbo:builder) (JOIN dbo:tenant dbr:2014_FIFA_U-17_Women's_World_Cup)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who built [IQ1]",
                    "start": 0,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadiums",
                                "start": 10,
                                "end": 22
                            },
                            {
                                "description": "where 2014 FIFA under 17 woman's world cup took place",
                                "start": 23,
                                "end": 76
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD built) (NP (NP (DT the) (NNS stadiums)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD 2014) (NNP FIFA)) (PP (IN under) (NP (NP (CD 17) (NN woman) (POS 's)) (NN world) (NN cup)))) (VP (VBD took) (NP (NN place)))))))) (. ?)))",
        "mask_entity": "Who built the stadiums where [ENT] [ENT] under [ENT] woman's world cup took place?",
        "entity": [
            "2014",
            "FIFA",
            "17"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3072",
        "question": "Which area operataed by the South Side Elevated Railroad is also the palce of death of the Sakari Suzuki ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:operatedBy) dbr:South_Side_Elevated_Railroad) (JOIN (R dbp:deathPlace) dbr:Sakari_Suzuki))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which area",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "operated by the South Side Elevated Railroad",
                    "start": 11,
                    "end": 55
                },
                {
                    "description": "is also the place of death of the Sakari Suzuki",
                    "start": 56,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN area)) (SQ (VP (VBN operataed) (PP (IN by) (NP (DT the) (NML (NNP South) (NNP Side)) (NNP Elevated) (NNP Railroad)))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN palce)) (PP (IN of) (NP (NP (NN death)) (PP (IN of) (NP (DT the) (NNP Sakari) (NNP Suzuki))))))) (. ?)))",
        "mask_entity": "Which area operataed by [ENT] is also the palce of death of the [ENT] ?",
        "entity": [
            "the South Side Elevated Railroad",
            "Sakari Suzuki"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1958",
        "question": "What is the television show whose related with  Doctor Who Confidential?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:related dbr:Doctor_Who_Confidential))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose related with Doctor Who Confidential",
                    "start": 28,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose)) (S (VP (JJ related) (PP (IN with) (NP (NNP Doctor) (WP Who) (JJ Confidential))))))))) (. ?)))",
        "mask_entity": "What is the television show whose related with  Doctor Who Confidential?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1384",
        "question": "In which city wasThe Triple Door (The Courage album)  performed live?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?uri } ",
        "SExpr": "(JOIN (R dbp:recorded) dbr:Live_at_The_Triple_Door_(The_Courage_album))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN city)) (VP (VBD was) (NP (NP (NP (DT The) (NNP Triple) (NNP Door)) (VP (-LRB- () (NP (DT The) (NNP Courage) (NN album) (-RRB- ))))) (VP (VBD performed) (S (ADJP (JJ live))))))) (. ?)))",
        "mask_entity": "In which city was[ENT] ([ENT]  performed live?",
        "entity": [
            "The Triple Door",
            "The Courage album)"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "894",
        "question": "Which nearest city of Jurgens Site is the death plce of Jimmie Heuga ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:nearestCity) dbr:Jurgens_Site) (JOIN (R dbp:deathPlace) dbr:Jimmie_Heuga))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which nearest city of Jurgens Site",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is the death place of Jimmie Heuga",
                    "start": 35,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJS nearest) (NN city)) (PP (IN of) (NP (NNP Jurgens) (NNP Site)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN death) (NN plce)) (PP (IN of) (NP (NNP Jimmie) (NNP Heuga)))))) (. ?)))",
        "mask_entity": "Which nearest city of [ENT] is the death plce of [ENT] ?",
        "entity": [
            "Jurgens Site",
            "Jimmie Heuga"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "455",
        "question": "List the battles fought by  Ali Habib Mahmud ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri } ",
        "SExpr": "(JOIN (R dbp:battles) dbr:Ali_Habib_Mahmud)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NNP Ali) (NNP Habib) (NNP Mahmud)))))) (. ?)))",
        "mask_entity": "List the battles fought by  [ENT] ?",
        "entity": [
            "Ali Habib Mahmud"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4879",
        "question": "How many companies were started in the states?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (JOIN dbo:foundationPlace dbr:United_States))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many companies",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "were started in the states",
                    "start": 19,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS companies)) (VP (VBD were) (VP (VBN started) (PP (IN in) (NP (DT the) (NNS states)))))) (. ?)))",
        "mask_entity": "How many companies were started in the states?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3709",
        "question": "Is Charles Drummond Ellis a doctoral student of James Chadwick?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Charles) (NNP Drummond) (NNP Ellis)) (NP (NP (DT a) (JJ doctoral) (NN student)) (PP (IN of) (NP (NNP James) (NNP Chadwick)))) (. ?)))",
        "mask_entity": "Is [ENT] a doctoral student of [ENT]?",
        "entity": [
            "Charles Drummond Ellis",
            "James Chadwick"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4618",
        "question": "How many movies are distributed by Cinema International Corporation?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:distributor dbr:Cinema_International_Corporation))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are distributed by Cinema International Corporation",
                    "start": 16,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS movies)) (VP (VBP are) (VP (VBN distributed) (PP (IN by) (NP (NNP Cinema) (NNP International) (NNP Corporation)))))) (. ?)))",
        "mask_entity": "How many movies are distributed by [ENT]?",
        "entity": [
            "Cinema International Corporation"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4268",
        "question": "Name the local authority of Trinity School, Brentwood ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
        "SExpr": "(JOIN (R dbo:localAuthority) dbr:Trinity_School,_Brentwood)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)))))) (. ?)))",
        "mask_entity": "Name the local authority of [ENT], [ENT] ?",
        "entity": [
            "Trinity School",
            "Brentwood"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3522",
        "question": "Name the president of Wyche Fowler ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri } ",
        "SExpr": "(JOIN (R dbo:president) dbr:Wyche_Fowler)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Wyche) (NNP Fowler))))) (. ?)))",
        "mask_entity": "Name the president of [ENT] ?",
        "entity": [
            "Wyche Fowler"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4134",
        "question": "In which fields have people born in Lausanne worked?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Lausanne> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "SExpr": "(JOIN (R dbp:fields) (JOIN dbp:placeOfBirth dbr:Lausanne)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which fields",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have [IQ1] worked",
                    "start": 16,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 21,
                                "end": 27
                            },
                            {
                                "description": "born in Lausanne",
                                "start": 28,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS fields)) (VP (VBP have) (NP (NP (NNS people)) (VP (VBN born) (PP (IN in) (NP (NNP Lausanne))))) (VP (VBD worked)))) (. ?)))",
        "mask_entity": "In which fields have people born in [ENT] worked?",
        "entity": [
            "Lausanne"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3602",
        "question": "Which Texas based company  was founded by Jim Harris ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:locationCity dbr:Texas) (JOIN dbp:founder dbr:Jim_Harris_(entrepreneur))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which Texas based company",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "was founded by Jim Harris",
                    "start": 26,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNP Texas) (VBN based) (NN company)) (SQ (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. ?)))",
        "mask_entity": "Which [ENT] based company  was founded by [ENT] ?",
        "entity": [
            "Texas",
            "Jim Harris"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "713",
        "question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr.?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:presenter dbr:Brian_Dunkleman) (JOIN dbp:judges dbr:Harry_Connick,_Jr.)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a show",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "hosted by Brian Dunkleman",
                    "start": 12,
                    "end": 37
                },
                {
                    "description": "and judged by Harry Connick, Jr",
                    "start": 38,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN show)) (VP (VP (VBN hosted) (PP (IN by) (NP (NNP Brian) (NNP Dunkleman)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NP (NNP Harry) (NNP Connick)) (, ,) (NP (NNP Jr.?))))))))))",
        "mask_entity": "Name a show hosted by [ENT] and judged by [ENT], Jr.?",
        "entity": [
            "Brian Dunkleman",
            "Harry Connick"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4186",
        "question": "To which educational institute does Cornell University Press belong to?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "SExpr": "(JOIN (R dbo:parentCompany) dbr:Cornell_University_Press)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (JJ educational) (NN institute)) (VP (VBZ does) (S (NP (NNP Cornell) (NNP University) (NNP Press)) (VP (VB belong) (PP (IN to)))))) (. ?)))",
        "mask_entity": "To which educational institute does [ENT] belong to?",
        "entity": [
            "Cornell University Press"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2214",
        "question": "In which country's cuisine, ham is an important part?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Ham> . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "SExpr": "(JOIN (R dbp:country) (JOIN dbp:mainIngredient dbr:Ham)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which country's cuisine, [IQ1]",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "ham is an important part",
                                "start": 28,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NP (NN country) (POS 's)) (NN cuisine)) (, ,) (NP (NNP ham)) (VP (VBZ is) (NP (DT an) (JJ important) (NN part)))) (. ?)))",
        "mask_entity": "In which country's cuisine, ham is an important part?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2923",
        "question": "List the softwares which runs on Microsoft Windows and has license as Software as a service?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(AND dbo:Software (AND (JOIN dbo:operatingSystem dbr:Microsoft_Windows) (JOIN dbo:license dbr:Software_as_a_service)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the softwares",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "which runs on Microsoft Windows",
                    "start": 19,
                    "end": 50
                },
                {
                    "description": "and has license as Software as a service",
                    "start": 51,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS softwares)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ runs) (PP (IN on) (NP (NNP Microsoft) (NNP Windows)))) (CC and) (VP (VBZ has) (NP (NP (NN license)) (PP (IN as) (NP (NP (NN Software)) (PP (IN as) (NP (DT a) (NN service)))))))))))) (. ?)))",
        "mask_entity": "List the softwares which runs on [ENT] and has license as Software as a service?",
        "entity": [
            "Microsoft Windows"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1810",
        "question": "Which ppolitical party of Yashpal Kapur is also the owner of National Herald ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:owner) dbr:The_National_Herald_(India)) (JOIN (R dbo:party) dbr:Yashpal_Kapur))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which political party of Yashpal Kapur",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "is also the owner of National Herald",
                    "start": 39,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ ppolitical) (NN party)) (PP (IN of) (NP (NNP Yashpal) (NNP Kapur)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP National) (NNP Herald))))) (. ?)))",
        "mask_entity": "Which ppolitical party of [ENT] is also the owner of [ENT] ?",
        "entity": [
            "Yashpal Kapur",
            "National Herald"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3486",
        "question": "Who all have been presenters on shows by the NBC?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(JOIN (R dbp:presenter) (AND dbo:TelevisionShow (JOIN dbo:channel dbr:NBC))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who all",
                    "start": 0,
                    "end": 7
                },
                {
                    "description": "have been presenters on [IQ1]",
                    "start": 8,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "shows",
                                "start": 32,
                                "end": 37
                            },
                            {
                                "description": "by the NBC",
                                "start": 38,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (DT all) (VP (VBP have) (VP (VBN been) (NP (NP (NNS presenters)) (PP (IN on) (NP (NP (NNS shows)) (PP (IN by) (NP (DT the) (NNP NBC))))))))) (. ?)))",
        "mask_entity": "Who all have been presenters on shows by the [ENT]?",
        "entity": [
            "NBC"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3141",
        "question": "Give me the list of cars which are the predecessor of Full Sized Cars?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Full-size_car> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbo:predecessor) (AND dbo:Automobile (JOIN dbp:class dbr:Full-size_car))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the list of cars",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "which are [IQ1]",
                    "start": 25,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the predecessor of Full Sized Cars",
                                "start": 35,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN list)) (PP (IN of) (NP (NP (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (JJ Full) (NNP Sized) (NNPS Cars))))))))))) (. ?)))",
        "mask_entity": "Give me the list of cars which are the predecessor of Full Sized Cars?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1827",
        "question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (AND (JOIN dbo:restingPlace dbr:Plymouth,_Vermont) (JOIN dbp:predecessor dbr:Samuel_W._McCall)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "with final resting place as Plymouth, Vermont",
                    "start": 16,
                    "end": 61
                },
                {
                    "description": "and has Samuel W. McCall as predecessor",
                    "start": 62,
                    "end": 101
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NP (JJ final) (NN resting) (NN place)) (PP (IN as) (NP (NP (NNP Plymouth)) (, ,) (NP (NNP Vermont))))))) (CC and) (VP (VBZ has) (NP (NP (NNP Samuel) (NNP W.) (NNP McCall)) (PP (IN as) (NP (NN predecessor)))))) (. ?)))",
        "mask_entity": "List the people with final resting place as [ENT], [ENT] and has [ENT] as predecessor?",
        "entity": [
            "Plymouth",
            "Vermont",
            "Samuel W. McCall"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1155",
        "question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>}",
        "SExpr": "(AND dbo:Disease (AND (JOIN (R dbo:deathCause) dbr:Letitia_MacTavish_Hargrave) (JOIN (R dbo:deathCause) dbr:Martino_Martini)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What disease",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "led to the demise of Letitia MacTavish Hargrave and Martino Martini",
                    "start": 13,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN disease)) (S (VP (VBD led) (PP (IN to) (NP (NP (DT the) (NN demise)) (PP (IN of) (NP (NP (NNP Letitia) (NNP MacTavish) (NNP Hargrave)) (CC and) (NP (NNP Martino) (NNP Martini)))))))) (. ?)))",
        "mask_entity": "What disease led to the demise of [ENT] and [ENT] ?",
        "entity": [
            "Letitia MacTavish Hargrave",
            "Martino Martini"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1324",
        "question": "What are some software which are written in languages that are run on Unix like OS?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(AND dbo:Software (JOIN dbp:programmingLanguage (JOIN dbp:operatingSystem dbr:Unix-like))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some software",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "which are written in [IQ1]",
                    "start": 23,
                    "end": 82,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "languages",
                                "start": 44,
                                "end": 53
                            },
                            {
                                "description": "that are run on Unix like OS",
                                "start": 54,
                                "end": 82
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN written) (PP (IN in) (NP (NP (NNS languages)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (VP (VBN run) (PP (IN on) (NP (NNP Unix))) (PP (IN like) (NP (NNP OS)))))))))))))))) (. ?)))",
        "mask_entity": "What are some software which are written in languages that are run on Unix like OS?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4312",
        "question": "List all the movies whose directors were born in Kenosha, Wisconsin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "SExpr": "(JOIN dbp:director (JOIN dbo:birthPlace dbr:Kenosha,_Wisconsin)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose directors [IQ1]",
                    "start": 20,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "were born in Kenosha, Wisconsin",
                                "start": 36,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NNS directors)) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NP (NNP Kenosha)) (, ,) (NP (NNP Wisconsin)))))))))) (. ?)))",
        "mask_entity": "List all the movies whose directors were born in [ENT], [ENT]?",
        "entity": [
            "Kenosha",
            "Wisconsin"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "510",
        "question": "Does the St lawrence river start in Kingston, Ontario?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Saint_Lawrence_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Kingston,_Ontario> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (DT the) (NNP St) (NN lawrence) (NN river)) (VP (VB start) (PP (IN in) (NP (NP (NNP Kingston)) (, ,) (NP (NNP Ontario))))) (. ?)))",
        "mask_entity": "Does the [ENT] river start in [ENT], [ENT]?",
        "entity": [
            "St lawrence",
            "Kingston",
            "Ontario"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1680",
        "question": "What stadium's operator is Stan Kroenke",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(AND dbo:Stadium (JOIN dbo:operator dbr:Stan_Kroenke))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What stadium's",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "operator is Stan Kroenke",
                    "start": 15,
                    "end": 39
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NN stadium) (POS 's)) (NN operator)) (VP (VBZ is) (NP (NNP Stan) (NNP Kroenke)))))",
        "mask_entity": "What stadium's operator is [ENT]",
        "entity": [
            "Stan Kroenke"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "499",
        "question": "Is Mike Babcock the head coach of Toronto Maple Leafs?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Mike) (NNP Babcock)) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NNP Toronto) (NNP Maple) (NNP Leafs)))) (. ?)))",
        "mask_entity": "Is [ENT] the head coach of [ENT]?",
        "entity": [
            "Mike Babcock",
            "Toronto Maple Leafs"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4536",
        "question": "Whose commanders are John Mc Ewen and Park Chunghee?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> . }",
        "SExpr": "(AND (JOIN dbo:commander dbr:John_McEwen) (JOIN dbo:commander dbr:Park_Chung-hee))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose commanders are John Mc Ewen and Park Chunghee",
                    "start": 0,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS commanders)) (VP (VBP are) (NP (NP (NNP John) (NNP Mc) (NNP Ewen)) (CC and) (NP (NNP Park) (NNP Chunghee)))) (. ?)))",
        "mask_entity": "Whose commanders are [ENT] and [ENT]?",
        "entity": [
            "John Mc Ewen",
            "Park Chunghee"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1856",
        "question": "Who gave guest appearances on the show which is the next episode after the Bombshell one?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Bombshell_(Smash)> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "SExpr": "(JOIN (R dbp:guests) (AND dbo:TelevisionEpisode (JOIN dbo:previousWork dbr:Bombshell_(Smash)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who",
                    "start": 0,
                    "end": 3
                },
                {
                    "description": "gave guest appearances on [IQ1]",
                    "start": 4,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the show",
                                "start": 30,
                                "end": 38
                            },
                            {
                                "description": "which is the next episode after the Bombshell one",
                                "start": 39,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD gave) (NP (NP (NN guest) (NNS appearances)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (JJ next) (NN episode)) (PP (IN after) (NP (DT the) (NNP Bombshell) (NN one)))))))))))) (. ?)))",
        "mask_entity": "Who gave guest appearances on the show which is the next episode after the [ENT] one?",
        "entity": [
            "Bombshell"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1388",
        "question": "What is manufactured by a company headed by Kazuo Hirai?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "SExpr": "(JOIN dbo:manufacturer (JOIN dbp:keyPeople dbr:Kazuo_Hirai)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is manufactured by [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a company",
                                "start": 24,
                                "end": 33
                            },
                            {
                                "description": "headed by Kazuo Hirai",
                                "start": 34,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (VP (VBN manufactured) (PP (IN by) (NP (NP (DT a) (NN company)) (VP (VBN headed) (PP (IN by) (NP (NNP Kazuo) (NNP Hirai))))))))) (. ?)))",
        "mask_entity": "What is manufactured by a company headed by [ENT]?",
        "entity": [
            "Kazuo Hirai"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3719",
        "question": "Under which presidents have politicians from the Continental army served?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
        "SExpr": "(JOIN (R dbp:president) (JOIN dbp:branch dbr:Continental_Army)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Under which presidents",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "have [IQ1] served",
                    "start": 23,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "politicians",
                                "start": 28,
                                "end": 39
                            },
                            {
                                "description": "from the Continental army",
                                "start": 40,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Under) (WHNP (WDT which))) (S (NP (NNS presidents)) (VP (VBP have) (S (NP (NP (NNS politicians)) (PP (IN from) (NP (DT the) (JJ Continental) (NN army)))) (VP (VBN served))))) (. ?)))",
        "mask_entity": "Under which presidents have politicians from the [ENT] army served?",
        "entity": [
            "Continental"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2386",
        "question": "Philadelphia City Council is the governing body of which city?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> } ",
        "SExpr": "(JOIN dbp:governingBody dbr:Philadelphia_City_Council)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Philadelphia) (NNP City) (NNP Council)) (VP (VBZ is) (NP (NP (DT the) (VBG governing) (NN body)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (NP (NN city))))) (. ?)))",
        "mask_entity": "[ENT] is the governing body of which city?",
        "entity": [
            "Philadelphia City Council"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3236",
        "question": "What are the binomial authority of Menetries's warbler?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
        "SExpr": "(JOIN (R dbo:binomialAuthority) dbr:Menetries's_warbler)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ binomial) (NN authority)) (PP (IN of) (NP (NP (NNP Menetries) (POS 's)) (NN warbler)))))) (. ?)))",
        "mask_entity": "What are the binomial authority of [ENT]'s warbler?",
        "entity": [
            "Menetries"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1540",
        "question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Elliot_Goldenthal> . ?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:music dbr:Elliot_Goldenthal) (JOIN dbp:screenplay dbr:Akiva_Goldsman)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "which has music composed by Elliot Goldenthal",
                    "start": 15,
                    "end": 60
                },
                {
                    "description": "and screenplay by Akiva Goldsman",
                    "start": 61,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN music)) (VP (VBN composed) (PP (IN by) (NP (NP (NNP Elliot) (NNP Goldenthal)) (CC and) (NP (NP (NN screenplay)) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))))))))))))) (. ?)))",
        "mask_entity": "Name the movie which has music composed by [ENT] and screenplay by [ENT] ?",
        "entity": [
            "Elliot Goldenthal",
            "Akiva Goldsman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1217",
        "question": "Name the fictional character whose relative are Duck family and Clan McDuck?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbo:relative dbr:Duck_family_(Disney)) (JOIN dbp:relatives dbr:Clan_McDuck)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the fictional character",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "whose relative are Duck family and Clan McDuck",
                    "start": 29,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN relative)) (S (VP (VBP are) (NP (NP (NNP Duck) (NN family)) (CC and) (NP (NNP Clan) (NNP McDuck)))))))) (. ?)))",
        "mask_entity": "Name the fictional character whose relative are [ENT] family and Clan Mc[ENT]?",
        "entity": [
            "Duck",
            "Clan McDuck"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2681",
        "question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/St._Louis> . ?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Madison_River>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbo:mouthMountain dbr:St._Louis) (JOIN dbo:rightTributary dbr:Madison_River)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which university",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with athletics department in NCAA Division I Football Bowl Subdivision",
                    "start": 17,
                    "end": 87
                },
                {
                    "description": "has nickname Tulane Green Wave",
                    "start": 88,
                    "end": 118
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN university)) (PP (IN with) (NP (NP (NNS athletics) (NN department)) (PP (IN in) (NP (NNP NCAA) (NNP Division)))))) (S (NP (PRP I) (NNP Football) (NNP Bowl) (NNP Subdivision)) (VP (VBZ has) (NP (NN nickname) (NNP Tulane) (NNP Green) (NNP Wave)))) (. ?)))",
        "mask_entity": "Which university with athletics department in [ENT] [ENT] has nickname [ENT] ?",
        "entity": [
            "NCAA Division",
            "I Football Bowl Subdivision",
            "Tulane Green Wave"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2993",
        "question": "Which state does Jerome B. Chaffee belong ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?uri } ",
        "SExpr": "(JOIN (R dbp:state) dbr:Jerome_B._Chaffee)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ does) (NP (NNP Jerome) (NNP B.) (NNP Chaffee)) (VP (VB belong))) (. ?)))",
        "mask_entity": "Which state does [ENT] belong ?",
        "entity": [
            "Jerome B. Chaffee"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1191",
        "question": "In which of the parties that have governed over Rishikesh, does Govinda belong too?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:party) dbr:Govinda_(actor)) (JOIN (R dbo:leaderName) dbr:Rishikesh))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which of the parties",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "that have governed over Rishikesh,",
                    "start": 24,
                    "end": 58
                },
                {
                    "description": "does Govinda belong too",
                    "start": 59,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (SQ (PP (IN of) (NP (NP (DT the) (NNS parties)) (SBAR (WHNP (WDT that)) (S (VP (VBP have) (VP (VBN governed) (PP (IN over) (NP (NNP Rishikesh))))))))) (, ,) (VBZ does) (NP (NNP Govinda)) (VP (VB belong) (ADVP (RB too)))) (. ?)))",
        "mask_entity": "In which of the parties that have governed over [ENT], does [ENT] belong too?",
        "entity": [
            "Rishikesh",
            "Govinda"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1542",
        "question": "What awards are won by the screenwriter of Lucky You?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbp:screenplay) dbr:Lucky_You_(film))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What awards",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are won by [IQ1]",
                    "start": 12,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the screenwriter of Lucky You",
                                "start": 23,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS awards)) (SQ (VP (VBP are) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN screenwriter)) (PP (IN of) (NP (NNP Lucky) (PRP You)))))))) (. ?)))",
        "mask_entity": "What awards are won by the screenwriter of [ENT]?",
        "entity": [
            "Lucky You"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3301",
        "question": "Name  the Pole driver of 1994 Spanish Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
        "SExpr": "(JOIN (R dbp:poleDriver) dbr:1994_Spanish_Grand_Prix)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (CD 1994) (JJ Spanish) (NNP Grand) (NNP Prix))))) (. ?)))",
        "mask_entity": "Name  the Pole driver of [ENT] [ENT] ?",
        "entity": [
            "1994",
            "Spanish Grand Prix"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3324",
        "question": "Where did Georges Wolinski and Judson Huss die/",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georges_Wolinski> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:placeOfDeath) dbr:Georges_Wolinski) (JOIN (R dbp:deathPlace) dbr:Judson_Huss))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did Georges Wolinski and Judson Huss die",
                    "start": 0,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB Where)) (SINV (VBD did) (NP (NP (NNP Georges) (NNP Wolinski)) (CC and) (NP (NNP Judson) (NNP Huss))) (VP (VB die) (, /)))))",
        "mask_entity": "Where did [ENT] and [ENT] die/",
        "entity": [
            "Georges Wolinski",
            "Judson Huss"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2539",
        "question": "What is the parent company of the airline whose hub is in Detroit?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(JOIN (R dbo:parentCompany) (AND dbo:Airline (JOIN dbp:hubs dbr:Detroit))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the parent company of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the airline",
                                "start": 30,
                                "end": 41
                            },
                            {
                                "description": "whose hub is in Detroit",
                                "start": 42,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (NP (DT the) (NN airline)) (SBAR (WHNP (WP$ whose) (NN hub)) (S (VP (VBZ is) (PP (IN in) (NP (NNP Detroit))))))))))) (. ?)))",
        "mask_entity": "What is the parent company of the airline whose hub is in [ENT]?",
        "entity": [
            "Detroit"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "953",
        "question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "SExpr": "(AND dbo:InformationAppliance (JOIN dbo:cpu dbr:Marvell_Technology_Group))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the appliance",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "which uses the central processing unit manufactured by Marvell Technology Group",
                    "start": 22,
                    "end": 101
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN appliance)) (SBAR (WHNP (WDT which)) (S (VP (VBZ uses) (NP (NP (DT the) (JJ central) (NN processing) (NN unit)) (VP (VBN manufactured) (PP (IN by) (NP (NNP Marvell) (NNP Technology) (NNP Group))))))))))) (. ?)))",
        "mask_entity": "What is the appliance which uses the central processing unit manufactured by [ENT]?",
        "entity": [
            "Marvell Technology Group"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4330",
        "question": "Give me all magazines whose founder died in Berkeley, California?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbo:founder (JOIN dbo:deathPlace dbr:Berkeley,_California))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me all magazines",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose founder [IQ1]",
                    "start": 22,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "died in Berkeley, California",
                                "start": 36,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS magazines)) (SBAR (WHNP (WP$ whose) (NN founder)) (S (VP (VBD died) (PP (IN in) (NP (NP (NNP Berkeley)) (, ,) (NP (NNP California))))))))) (. ?)))",
        "mask_entity": "Give me all magazines whose founder died in [ENT], [ENT]?",
        "entity": [
            "Berkeley",
            "California"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "732",
        "question": "Which technological products were manufactured by Foxconn?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "SExpr": "(AND dbo:InformationAppliance (JOIN dbo:manufacturer dbr:Foxconn))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which technological products",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "were manufactured by Foxconn",
                    "start": 29,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ technological) (NNS products)) (SQ (VP (VBD were) (VP (VBN manufactured) (PP (IN by) (NP (NNP Foxconn)))))) (. ?)))",
        "mask_entity": "Which technological products were manufactured by [ENT]?",
        "entity": [
            "Foxconn"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1156",
        "question": "Is George Lucas the cinematographer of 6-18-67?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP George) (NNP Lucas)) (NP (NP (DT the) (NN cinematographer)) (PP (IN of) (NP (CD 6-18-67)))) (. ?)))",
        "mask_entity": "Is [ENT] the cinematographer of [ENT]?",
        "entity": [
            "George Lucas",
            "6-18-67"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3294",
        "question": "Whose predecessor had Jenny Macklin as a deputy ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . }",
        "SExpr": "(JOIN dbp:predecessor (JOIN dbp:deputy dbr:Jenny_Macklin)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose predecessor [IQ1]",
                    "start": 0,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "had Jenny Macklin as a deputy",
                                "start": 18,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NN predecessor)) (VP (VBD had) (NP (NNP Jenny) (NNP Macklin)) (PP (IN as) (NP (DT a) (NN deputy)))) (. ?)))",
        "mask_entity": "Whose predecessor had [ENT] as a deputy ?",
        "entity": [
            "Jenny Macklin"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2982",
        "question": "How many cars are similar to the ones assembled in the Jefferson North Assembly?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . }",
        "SExpr": "(JOIN (R dbp:related) (JOIN dbp:assembly dbr:Jefferson_North_Assembly)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cars",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "are similar to [IQ1]",
                    "start": 14,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 29,
                                "end": 37
                            },
                            {
                                "description": "assembled in the Jefferson North Assembly",
                                "start": 38,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cars)) (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBN assembled) (PP (IN in) (NP (DT the) (NNP Jefferson) (NNP North) (NNP Assembly))))))))) (. ?)))",
        "mask_entity": "How many cars are similar to the ones assembled in [ENT]?",
        "entity": [
            "the Jefferson North Assembly"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2156",
        "question": "Count the number of region of AN/FSQ-7 Combat Direction Central?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?uri  . }",
        "SExpr": "(JOIN (R dbo:region) dbr:FSQ-7_Combat_Direction_Central)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN region)) (PP (IN of) (NP (NP (DT AN) (, /) (NNP FSQ) (CD -7)) (NP (NNP Combat) (NNP Direction) (NNP Central)))))))) (. ?)))",
        "mask_entity": "Count the number of region of AN/FSQ-7 Combat Direction Central?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1062",
        "question": "What are the common houses of US Congress and the Kansas Legislature?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:houses) dbr:United_States_Congress) (JOIN (R dbo:house) dbr:Kansas_Legislature))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the common houses of US Congress and the Kansas Legislature",
                    "start": 0,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ common) (NNS houses)) (PP (IN of) (NP (NP (NNP US) (NNP Congress)) (CC and) (NP (DT the) (NNP Kansas) (NNP Legislature))))))) (. ?)))",
        "mask_entity": "What are the common houses of [ENT] and [ENT]?",
        "entity": [
            "US Congress",
            "the Kansas Legislature"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2616",
        "question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (NNP John)))))",
        "mask_entity": "Was [ENT] [ENT] the [ENT] [ENT] to ascend [ENT] of the peaks in the cathedral peak?",
        "entity": [
            "John",
            "Muir",
            "first",
            "one"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1167",
        "question": "From how many different places have people gone to the Harward Medical School?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:birthPlace) (JOIN dbo:institution dbr:Harvard_Medical_School)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From how many different places have [IQ1]",
                    "start": 0,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 36,
                                "end": 42
                            },
                            {
                                "description": "gone to the Harward Medical School",
                                "start": 43,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN From) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS places))) (VBP have) (NP (NNS people)) (VP (VBN gone) (PP (IN to) (NP (DT the) (NNP Harward) (NNP Medical) (NNP School)))) (. ?)))",
        "mask_entity": "From how many different places have people gone to [ENT]?",
        "entity": [
            "the Harward Medical School"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3222",
        "question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:voices dbr:Mona_Marshall) (JOIN dbp:distributor dbr:Comedy_Central)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "where Mona Marshall has given voice",
                    "start": 25,
                    "end": 60
                },
                {
                    "description": "and is distributed by Comedy Central",
                    "start": 61,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Mona) (NNP Marshall)) (VP (VP (VBZ has) (VP (VBN given) (NP (NN voice)))) (CC and) (VP (VBZ is) (VP (VBN distributed) (PP (IN by) (NP (NNP Comedy) (NNP Central)))))))))) (. ?)))",
        "mask_entity": "Name the television show where [ENT] has given voice and is distributed by [ENT]?",
        "entity": [
            "Mona Marshall",
            "Comedy Central"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3636",
        "question": "What are Jerry Bock's musicals based upon?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "SExpr": "(JOIN (R dbo:basedOn) (AND dbo:Musical (JOIN dbp:music dbr:Jerry_Bock))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are [IQ1] based upon",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Jerry Bock's musicals",
                                "start": 9,
                                "end": 30
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NNP Jerry) (NNP Bock) (POS 's)) (NNS musicals)) (S (VP (VBN based) (PP (IN upon)))))) (. ?)))",
        "mask_entity": "What are [ENT] musicals based upon?",
        "entity": [
            "Jerry Bock's"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2938",
        "question": "Give me list of people who were the first to climb a peak in the Yosemite park?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
        "SExpr": "(JOIN (R dbo:firstAscentPerson) (JOIN dbo:locatedInArea dbr:Yosemite_National_Park)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me list of people",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "who were the first to climb [IQ1]",
                    "start": 23,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a peak",
                                "start": 51,
                                "end": 57
                            },
                            {
                                "description": "in the Yosemite park",
                                "start": 58,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN list)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD were) (NP (NP (DT the) (JJ first)) (SBAR (S (VP (TO to) (VP (VB climb) (NP (NP (DT a) (NN peak)) (PP (IN in) (NP (DT the) (NNP Yosemite) (NN park)))))))))))))))) (. ?)))",
        "mask_entity": "Give me list of people who were the [ENT] to climb a peak in the [ENT] park?",
        "entity": [
            "first",
            "Yosemite"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4491",
        "question": "What is Naval Support Activity Naples a part of?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri } ",
        "SExpr": "(JOIN (R dbo:type) dbr:Naval_Support_Activity_Naples)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NNP Naval) (NNP Support) (NN Activity) (NNP Naples)) (NP (NP (DT a) (NN part)) (PP (IN of))))) (. ?)))",
        "mask_entity": "What is [ENT] a part of?",
        "entity": [
            "Naval Support Activity Naples"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3140",
        "question": "Who has allegiance is Colony of Virginia and buried in Montpelier?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
        "SExpr": "(AND (JOIN dbp:allegiance dbr:Colony_of_Virginia) (JOIN dbp:restingplace dbr:Montpelier_(Orange,_Virginia)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has allegiance is Colony of Virginia",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and buried in Montpelier",
                    "start": 41,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ has) (NP (NN allegiance)) (VP (VP (VBZ is) (NP (NP (NNP Colony)) (PP (IN of) (NP (NNP Virginia))))) (CC and) (VP (VBN buried) (PP (IN in) (NP (NNP Montpelier)))))) (. ?)))",
        "mask_entity": "Who has allegiance is [ENT] and buried in [ENT]?",
        "entity": [
            "Colony of Virginia",
            "Montpelier"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "143",
        "question": "Was Tim Gunn a guest on The Broken Code?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Broken_Code> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Tim) (NNP Gunn)) (NP (NP (DT a) (NN guest)) (PP (IN on) (NP (DT The) (NNP Broken) (NNP Code)))) (. ?)))",
        "mask_entity": "Was [ENT] a guest on [ENT]?",
        "entity": [
            "Tim Gunn",
            "The Broken Code"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3577",
        "question": "What is the successor of PlayStation 4",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . }",
        "SExpr": "(JOIN dbp:successor dbr:PlayStation_4)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP PlayStation) (CD 4))))))))",
        "mask_entity": "What is the successor of [ENT]",
        "entity": [
            "PlayStation 4"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2782",
        "question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:country) dbr:Dafydd_Benfras) (JOIN (R dbo:citizenship) dbr:Jasmine_Lowson))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the sovereign state of the Dafydd Benfras",
                    "start": 0,
                    "end": 49
                },
                {
                    "description": "where Jasmine Lowson is also citizen of",
                    "start": 50,
                    "end": 89
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN sovereign) (NN state)) (PP (IN of) (NP (NP (DT the) (NNP Dafydd) (NNP Benfras)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jasmine) (NNP Lowson)) (VP (VBZ is) (ADVP (RB also)) (NP (NP (NN citizen)) (PP (IN of))))))))))) (. ?)))",
        "mask_entity": "What is the sovereign state of [ENT] where [ENT] is also citizen of ?",
        "entity": [
            "the Dafydd Benfras",
            "Jasmine Lowson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "717",
        "question": "Who did their highschool from a school whose mascot was a fighting tiger?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Fighting_Tiger> . ?uri <http://dbpedia.org/ontology/highschool> ?x  . }",
        "SExpr": "(JOIN dbo:highschool (JOIN dbp:mascot dbr:Fighting_Tiger)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who did their highschool from [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a school",
                                "start": 30,
                                "end": 38
                            },
                            {
                                "description": "whose mascot was a fighting tiger",
                                "start": 39,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (PRP$ their) (NN highschool)) (PP (IN from) (NP (NP (DT a) (NN school)) (SBAR (WHNP (WP$ whose) (NN mascot)) (S (VP (VBD was) (NP (DT a) (NN fighting) (NN tiger)))))))) (. ?)))",
        "mask_entity": "Who did their highschool from a school whose mascot was a fighting tiger?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1819",
        "question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/property/cityServed> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:destination) dbr:Emerald_Air_(United_States)) (JOIN (R dbp:cityServed) dbr:Houston_Fort_Bend_Airport))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which destination of Emerald Air",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is also the city served by houston Fort Bend Airport",
                    "start": 33,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN destination)) (PP (IN of) (NP (NNP Emerald) (NNP Air)))) (SQ (VBZ is) (ADVP (RB also)) (NP (DT the) (NN city)) (VP (VBN served) (PP (IN by) (NP (NNP houston) (NNP Fort) (NNP Bend) (NNP Airport))))) (. ?)))",
        "mask_entity": "Which destination of [ENT] is also the city served by [ENT] ?",
        "entity": [
            "Emerald Air",
            "houston Fort Bend Airport"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2502",
        "question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:service) dbr:Jerusalem_Institute_of_Justice) (JOIN (R dbp:result) dbr:Gaza\u2013Israel_conflict))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "name the region",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "served by Jerusalem Institue of Justice",
                    "start": 16,
                    "end": 55
                },
                {
                    "description": "which was also the conflict region in GazaIsrael",
                    "start": 56,
                    "end": 104
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NN name)) (NP (DT the) (NN region))) (VP (VBN served) (PP (IN by) (NP (NP (NP (NNP Jerusalem) (NNP Institue)) (PP (IN of) (NP (NNP Justice)))) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN conflict) (NN region)) (PP (IN in) (NP (NNP GazaIsrael)))))))))) (. ?)))",
        "mask_entity": "name the region served by [ENT] which was also the conflict region in [ENT] ?",
        "entity": [
            "Jerusalem Institue of Justice",
            "GazaIsrael"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4360",
        "question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbp:keyPeople dbr:Raymond_Conner) (JOIN dbp:products dbr:Boeing_CH-47_Chinook)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose key person is Raymond Conner",
                    "start": 17,
                    "end": 51
                },
                {
                    "description": "and produces Boeing CH-47 Chinook",
                    "start": 52,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (JJ key) (NN person)) (S (VP (VP (VBZ is) (NP (NNP Raymond) (NNP Conner))) (CC and) (VP (VBZ produces) (NP (NP (NNP Boeing) (NNP CH) (CD -47)) (NP (NNP Chinook))))))))) (. ?)))",
        "mask_entity": "Name the company whose key person is [ENT] and produces [ENT] CH-47 [ENT]?",
        "entity": [
            "Raymond Conner",
            "Boeing",
            "Chinook"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4171",
        "question": "What is the total number of professions in which someone who has suicided worked?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:occupation) (JOIN dbp:deathCause dbr:Suicide)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of professions",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "in which [IQ1] worked",
                    "start": 40,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "someone",
                                "start": 49,
                                "end": 56
                            },
                            {
                                "description": "who has suicided",
                                "start": 57,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS professions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN suicided) (VP (VBN worked))))))) (. ?))))))))))",
        "mask_entity": "What is the total number of professions in which someone who has suicided worked?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "395",
        "question": "How many golf players are there in Arizona State Sun Devils ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
        "SExpr": "(AND dbo:GolfPlayer (JOIN dbo:college dbr:Arizona_State_Sun_Devils))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many golf players are there",
                    "start": 0,
                    "end": 31
                },
                {
                    "description": "in Arizona State Sun Devils",
                    "start": 32,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN golf) (NNS players)) (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NML (NNP Arizona) (NNP State)) (NNP Sun) (NNPS Devils))))) (. ?)))",
        "mask_entity": "How many golf players are there in [ENT] State [ENT] ?",
        "entity": [
            "Arizona",
            "Sun Devils"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4836",
        "question": "Count the number of characters in Batman Live?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "SExpr": "(AND dbo:ComicsCharacter (JOIN (R dbp:characters) dbr:Batman_Live))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of characters",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "in Batman Live",
                    "start": 31,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NNS characters))) (PP (IN in) (NP (NNP Batman) (NNP Live))))) (. ?)))",
        "mask_entity": "Count the number of characters in [ENT]?",
        "entity": [
            "Batman Live"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4492",
        "question": "List the services provided by the company which provides Microsoft azure as one of the service ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbp:services) (AND dbo:Company (JOIN dbp:services dbr:Microsoft_Azure))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the services",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "provided by [IQ1]",
                    "start": 18,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 30,
                                "end": 41
                            },
                            {
                                "description": "which provides Microsoft azure as one of the service",
                                "start": 42,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS services)) (VP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ provides) (NP (NNP Microsoft) (NN azure)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN service))))))))))))) (. ?)))",
        "mask_entity": "List the services provided by the company which provides [ENT] azure as one of the service ?",
        "entity": [
            "Microsoft"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1365",
        "question": "What are some team members of the team based in Camp Nou?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Camp_Nou> . ?x <http://dbpedia.org/property/name> ?uri  . }",
        "SExpr": "(JOIN (R dbp:name) (JOIN dbo:homeStadium dbr:Camp_Nou)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some team members of [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the team",
                                "start": 30,
                                "end": 38
                            },
                            {
                                "description": "based in Camp Nou",
                                "start": 39,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NP (DT some) (NN team) (NNS members)) (PP (IN of) (NP (DT the) (NN team)))) (VP (VBN based) (PP (IN in) (NP (NNP Camp) (NNP Nou))))))) (. ?)))",
        "mask_entity": "What are some team members of the team based in [ENT]?",
        "entity": [
            "Camp Nou"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4558",
        "question": "Which universities are also known as the Tulane Green wave?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (JOIN dbp:nickname dbr:Tulane_Green_Wave))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which universities",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are also known as the Tulane Green wave",
                    "start": 19,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS universities)) (SQ (VP (VBP are) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (DT the) (NML (NNP Tulane) (NNP Green)) (NNP wave)))))) (. ?)))",
        "mask_entity": "Which universities are also known as [ENT] wave?",
        "entity": [
            "the Tulane Green"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "595",
        "question": "What is the branch of the politicians whose governor is Bill Clements?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Bill_Clements> . ?x <http://dbpedia.org/property/branch> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "SExpr": "(JOIN (R dbp:branch) (AND dbo:Politician (JOIN dbo:governor dbr:Bill_Clements))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the branch of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the politicians",
                                "start": 22,
                                "end": 37
                            },
                            {
                                "description": "whose governor is Bill Clements",
                                "start": 38,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NN governor)) (S (VP (VBZ is) (NP (NNP Bill) (NNP Clements)))))))))) (. ?)))",
        "mask_entity": "What is the branch of the politicians whose governor is [ENT]?",
        "entity": [
            "Bill Clements"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3952",
        "question": "Who composed the episode after which came Butter's Very own Episode?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> . ?x <http://dbpedia.org/ontology/musicComposer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "SExpr": "(JOIN (R dbo:musicComposer) (AND dbo:TelevisionEpisode (JOIN dbo:subsequentWork dbr:Butters'_Very_Own_Episode))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who composed [IQ1]",
                    "start": 0,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the episode",
                                "start": 13,
                                "end": 24
                            },
                            {
                                "description": "after which came Butter's Very own Episode",
                                "start": 25,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD composed) (NP (NP (DT the) (NN episode)) (SBAR (WHPP (IN after) (WHNP (WDT which))) (S (VP (VBD came) (NP (NP (NNP Butter) (POS 's)) (ADJP (RB Very) (JJ own)) (NNP Episode)))))))) (. ?)))",
        "mask_entity": "Who composed the episode after which came [ENT]?",
        "entity": [
            "Butter's Very own Episode"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2914",
        "question": "What is the location country of Teperberg 1870 ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri } ",
        "SExpr": "(JOIN (R dbp:locationCountry) dbr:Teperberg_1870)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN location) (NN country)) (PP (IN of) (NP (NNP Teperberg) (CD 1870)))))) (. ?)))",
        "mask_entity": "What is the location country of [ENT] [ENT] ?",
        "entity": [
            "Teperberg",
            "1870"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2326",
        "question": "List the software developed by Shawn Fanning ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(AND dbo:Software (JOIN dbo:developer dbr:Shawn_Fanning))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the software",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "developed by Shawn Fanning",
                    "start": 18,
                    "end": 44
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN software)) (VP (VBN developed) (PP (IN by) (NP (NNP Shawn) (NNP Fanning)))))) (. ?)))",
        "mask_entity": "List the software developed by [ENT] ?",
        "entity": [
            "Shawn Fanning"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3766",
        "question": "What is the stylistic origin of the music genres where the Bass guitar is important?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
        "SExpr": "(JOIN (R dbo:stylisticOrigin) (AND dbo:MusicGenre (JOIN dbp:instruments dbr:Bass_guitar))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the stylistic origin of [IQ1]",
                    "start": 0,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the music genres",
                                "start": 32,
                                "end": 48
                            },
                            {
                                "description": "where the Bass guitar is important",
                                "start": 49,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ stylistic) (NN origin)) (PP (IN of) (NP (NP (DT the) (NN music) (NNS genres)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NNP Bass) (NN guitar)) (VP (VBZ is) (ADJP (JJ important)))))))))) (. ?)))",
        "mask_entity": "What is the stylistic origin of the music genres where the [ENT] guitar is important?",
        "entity": [
            "Bass"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3440",
        "question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
        "SExpr": "(JOIN (R dbp:notableworks) (JOIN (R dbo:executiveProducer) dbr:The_Runaway_Bride_(Doctor_Who))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the other notable work of [IQ1]",
                    "start": 0,
                    "end": 100,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the executive producer of The Runaway Bride episode of Doctor Who",
                                "start": 35,
                                "end": 100
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ other) (JJ notable) (NN work)) (PP (IN of) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NP (DT The) (NML (NNP Runaway) (NNP Bride)) (NN episode)) (PP (IN of) (NP (NNP Doctor) (WP Who)))))))))) (. ?)))",
        "mask_entity": "What are the other notable work of the executive producer of [ENT] episode of Doctor Who?",
        "entity": [
            "The Runaway Bride"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3851",
        "question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri. <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/ontology/voice> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:voice) dbr:Allen_Walker) (JOIN (R dbo:voice) dbr:Kimihiro_Watanuki))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was the voice actor of allen walker",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "also gave voice to kimihiro watanuki",
                    "start": 40,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (S (NP (NP (DT the) (NN voice) (NN actor)) (PP (IN of) (NP (NNP allen) (NN walker)))) (ADVP (RB also)) (VP (VBD gave) (NP (NN voice)) (PP (IN to) (NP (NNP kimihiro) (NNP watanuki))))))) (. ?)))",
        "mask_entity": "Who was the voice actor of [ENT] also gave voice to kimihiro watanuki?",
        "entity": [
            "allen walker"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4132",
        "question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbo:battle dbr:Siege_of_Fort_Recovery) (JOIN dbp:restingplace dbr:North_Bend,_Ohio)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the office holder",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose final resting place is North Bend",
                    "start": 23,
                    "end": 62
                },
                {
                    "description": "and was part of Siege of fort recovery conflict",
                    "start": 63,
                    "end": 110
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (JJ final) (NN resting) (NN place)) (S (VP (VP (VBZ is) (NP (NNP North) (NNP Bend))) (CC and) (VP (VBD was) (NP (NP (NN part)) (PP (IN of) (NP (NML (NML (NNP Siege)) (PP (IN of) (NP (NNP fort)))) (NN recovery) (NN conflict)))))))))) (. ?)))",
        "mask_entity": "Name the office holder whose final resting place is [ENT] and was part of Siege of fort recovery conflict ?",
        "entity": [
            "North Bend"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4591",
        "question": "What type of engines are utilised by Purvis Eureka?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri } ",
        "SExpr": "(JOIN (R dbp:engine) dbr:Purvis_Eureka)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NNS engines)))) (SQ (VP (VBP are) (VP (VBN utilised) (PP (IN by) (NP (NNP Purvis) (NNP Eureka)))))) (. ?)))",
        "mask_entity": "What type of engines are utilised by [ENT]?",
        "entity": [
            "Purvis Eureka"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2143",
        "question": "Who edited Easy street ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri } ",
        "SExpr": "(JOIN (R dbo:editing) dbr:Easy_Street_(film))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD edited) (NP (JJ Easy) (NN street)))) (. ?)))",
        "mask_entity": "Who edited Easy street ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1571",
        "question": "Who were involved in the wars where Jonathan Haskell battled?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "SExpr": "(JOIN (R dbp:combatant) (JOIN (R dbp:battles) dbr:Jonathan_Haskell)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who were involved in [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the wars",
                                "start": 21,
                                "end": 29
                            },
                            {
                                "description": "where Jonathan Haskell battled",
                                "start": 30,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD were) (VP (VBN involved) (PP (IN in) (NP (NP (DT the) (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jonathan) (NNP Haskell)) (VP (VBD battled))))))))) (. ?)))",
        "mask_entity": "Who were involved in the wars where [ENT] battled?",
        "entity": [
            "Jonathan Haskell"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4079",
        "question": "In which city was the film star of Singhasan Battisi born ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbp:birthPlace) (JOIN (R dbo:starring) dbr:Singhasan_Battisi_(TV_series))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which city",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was [IQ1] born",
                    "start": 14,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the film star of Singhasan Battisi",
                                "start": 18,
                                "end": 52
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN city)) (VP (VBD was) (NP (NP (DT the) (NN film) (NN star)) (PP (IN of) (NP (NP (NNP Singhasan) (NNP Battisi)) (VP (VBN born))))))) (. ?)))",
        "mask_entity": "In which city was the film star of [ENT] born ?",
        "entity": [
            "Singhasan Battisi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1122",
        "question": "What are the reason served by Toll Global Express which is also the country of LPGA ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:regionServed) dbr:Toll_Global_Express) (JOIN (R dbo:country) dbr:LPGA))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the region served by Toll Global Express",
                    "start": 0,
                    "end": 49
                },
                {
                    "description": "which is also the country of LPGA",
                    "start": 50,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN reason)) (VP (VBN served) (PP (IN by) (NP (NP (NNP Toll) (NNP Global) (NNP Express)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN country)) (PP (IN of) (NP (NNP LPGA))))))))))))) (. ?)))",
        "mask_entity": "What are the reason served by [ENT] which is also the country of [ENT] ?",
        "entity": [
            "Toll Global Express",
            "LPGA"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2786",
        "question": "List the territory of Tonkin Campaign ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri } ",
        "SExpr": "(JOIN (R dbo:territory) dbr:Tonkin_Campaign)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN territory)) (PP (IN of) (NP (NNP Tonkin) (NNP Campaign))))) (. ?)))",
        "mask_entity": "List the territory of [ENT] ?",
        "entity": [
            "Tonkin Campaign"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2967",
        "question": "For which teams did Ryan Powell play for?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri } ",
        "SExpr": "(JOIN (R dbo:team) dbr:Ryan_Powell_(lacrosse))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN For) (WHNP (WDT which))) (S (NP (NNS teams)) (VP (VBD did) (NP (NNP Ryan) (NNP Powell)) (VP (VB play) (PP (IN for))))) (. ?)))",
        "mask_entity": "For which teams did [ENT] play for?",
        "entity": [
            "Ryan Powell"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2504",
        "question": "What are the awards won by the person who wrote the screen play for Lost in Rio ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/OSS_117:_Lost_in_Rio> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN (R dbp:screenplay) dbr:OSS_117:_Lost_in_Rio)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the awards",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "won by [IQ1]",
                    "start": 20,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the person",
                                "start": 27,
                                "end": 37
                            },
                            {
                                "description": "who wrote the screen play for Lost in Rio",
                                "start": 38,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD wrote) (NP (NP (DT the) (NN screen) (NN play)) (PP (IN for) (NP (VBN Lost))) (PP (IN in) (NP (NNP Rio))))))))))) (. ?)))",
        "mask_entity": "What are the awards won by the person who wrote the screen play for [ENT] ?",
        "entity": [
            "Lost in Rio"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3465",
        "question": "Total number of places where people drafted in the detroit pistons have died?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "SExpr": "(AND dbo:Location (JOIN (R dbp:placeOfDeath) (JOIN dbo:draftTeam dbr:Detroit_Pistons))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Total number of places",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "where [IQ1] have died",
                    "start": 23,
                    "end": 76,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 29,
                                "end": 35
                            },
                            {
                                "description": "drafted in the detroit pistons",
                                "start": 36,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (JJ Total) (NN number)) (PP (IN of) (NP (NP (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNS people)) (VP (VBD drafted) (PP (IN in) (NP (DT the) (NNP detroit) (NNS pistons))))) (VP (VBP have) (VP (VBN died))))))) (. ?)))",
        "mask_entity": "Total number of places where people drafted in the detroit pistons have died?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "675",
        "question": "What band made The trial and One of these days song?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:The_Trial_(song)) (JOIN (R dbo:musicalArtist) dbr:One_of_These_Days_(instrumental)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What band",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "made The trial",
                    "start": 10,
                    "end": 24
                },
                {
                    "description": "and One of these days song",
                    "start": 25,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN band)) (S (VP (VBD made)))))",
        "mask_entity": "What band made The trial and One of these days song?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2808",
        "question": "Name the club of Julie Hastings ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?uri } ",
        "SExpr": "(JOIN (R dbo:club) dbr:Julie_Hastings)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN club)) (PP (IN of) (NP (NNP Julie) (NNP Hastings))))) (. ?)))",
        "mask_entity": "Name the club of [ENT] ?",
        "entity": [
            "Julie Hastings"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3348",
        "question": "From where does the river Upper Neretva start flowing?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
        "SExpr": "(JOIN (R dbo:riverMouth) dbr:Upper_Neretva)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (WHPP (IN From) (WHADVP (WRB where)) (SQ (VBZ does) (NP (DT the) (NN river)) (NP (NNP Upper) (NNP Neretva)) (VP (NN start) (S (VP (VBG flowing))))) (. ?)))",
        "mask_entity": "From where does the river [ENT] start flowing?",
        "entity": [
            "Upper Neretva"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "728",
        "question": "Name the university located in Indiana and has affiliations with Kaplan, Inc.?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbo:campus dbr:Indiana) (JOIN dbp:affiliations dbr:Kaplan,_Inc.)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the university",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "located in Indiana",
                    "start": 20,
                    "end": 38
                },
                {
                    "description": "and has affiliations with Kaplan, Inc",
                    "start": 39,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NN university)) (VP (VBN located) (PP (IN in) (NP (NNP Indiana)))))) (CC and) (VP (VBZ has) (NP (NP (NNS affiliations)) (PP (IN with) (NP (NP (NNP Kaplan)) (, ,) (NP (NNP Inc))))))) (. .) (. ?)))",
        "mask_entity": "Name the university located in [ENT] and has affiliations with [ENT].?",
        "entity": [
            "Indiana",
            "Kaplan, Inc"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "412",
        "question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "SExpr": "(AND dbo:Newspaper (JOIN dbo:headquarter dbr:1211_Avenue_of_the_Americas))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the newspapers",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "whose offices are situated in 1211 Avenue of the Americas",
                    "start": 20,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS newspapers)) (SBAR (WHNP (WP$ whose) (NNS offices)) (S (VP (VBP are) (VP (VBN situated) (PP (IN in) (NP (NP (CD 1211) (NNP Avenue)) (PP (IN of) (NP (DT the) (NNPS Americas))))))))))) (. ?)))",
        "mask_entity": "List the newspapers whose offices are situated in [ENT] of the [ENT]?",
        "entity": [
            "1211 Avenue",
            "Americas"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3146",
        "question": "Was Morrissey a member of the Smiths?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Morrissey)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNPS Smiths)))) (. ?)))",
        "mask_entity": "Was [ENT] a member of the [ENT]?",
        "entity": [
            "Morrissey",
            "Smiths"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1516",
        "question": "Did Phillippe Cabot go to Columbia for studying?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Phillippe) (NNP Cabot)) (VP (VB go) (PP (IN to) (NP (NNP Columbia))) (PP (IN for) (S (VP (VBG studying))))) (. ?)))",
        "mask_entity": "Did [ENT] go to [ENT] for studying?",
        "entity": [
            "Phillippe Cabot",
            "Columbia"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "825",
        "question": "What river originates in Kingston Ontario?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbp:sourceLocation dbr:Kingston,_Ontario))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What river",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "originates in Kingston Ontario",
                    "start": 11,
                    "end": 41
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VP (VBZ originates) (PP (IN in) (NP (NNP Kingston) (NNP Ontario))))) (. ?)))",
        "mask_entity": "What river originates in [ENT]?",
        "entity": [
            "Kingston Ontario"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3267",
        "question": "By what style was Providence Chapel, Charlwood made?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri } ",
        "SExpr": "(JOIN (R dbp:style) dbr:Providence_Chapel,_Charlwood)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (PP (IN By) (SBAR (WHNP (WDT what) (NN style)) (S (VP (VBD was) (NP (NNP Providence) (NNP Chapel)))))) (, ,) (NP (NNP Charlwood)) (VP (VBD made)) (. ?)))",
        "mask_entity": "By what style was [ENT], [ENT] made?",
        "entity": [
            "Providence Chapel",
            "Charlwood"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3974",
        "question": "For how many PMs did the politician work, whose successor was Kingsley Wood?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(JOIN (R dbp:primeminister) (AND dbo:OfficeHolder (JOIN (R dbo:successor) dbr:Kingsley_Wood))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For how many PMs",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "did the politician work,",
                    "start": 17,
                    "end": 41
                },
                {
                    "description": "[IQ1]",
                    "start": 42,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose successor was Kingsley Wood",
                                "start": 42,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (PP (IN For) (SBAR (WHADJP (WRB how) (JJ many)) (S (NP (NNP PMs)) (VP (VBD did) (NP (DT the) (NN politician)) (VP (VB work)))))) (, ,) (SBARQ (WHNP (WP$ whose) (NN successor)) (SQ (VP (VBD was)) (NP (NNP Kingsley) (NNP Wood))) (. ?))))",
        "mask_entity": "For how many PMs did the politician work, whose successor was [ENT]?",
        "entity": [
            "Kingsley Wood"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "616",
        "question": "list some companies founded by Jim Harris.",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
        "SExpr": "(JOIN dbo:foundedBy dbr:Jim_Harris_(entrepreneur))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB list) (NP (NP (DT some) (NNS companies)) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. .)))",
        "mask_entity": "list some companies founded by [ENT].",
        "entity": [
            "Jim Harris"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "114",
        "question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> . ?x <http://dbpedia.org/ontology/employer> ?uri }",
        "SExpr": "(JOIN (R dbo:employer) (JOIN dbo:employer dbr:McDonnell_Aircraft)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the total number of employer of [IQ1]",
                    "start": 0,
                    "end": 101,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the engineers",
                                "start": 40,
                                "end": 53
                            },
                            {
                                "description": "whose one of the employer is McDonnell Aircraft",
                                "start": 54,
                                "end": 101
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NN employer))) (PP (IN of) (NP (NP (DT the) (NNS engineers)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN employer))))) (S (VP (VBZ is) (NP (NNP McDonnell) (NNP Aircraft))))))))) (. ?)))",
        "mask_entity": "Give me the total number of employer of the engineers whose [ENT] of the employer is [ENT] ?",
        "entity": [
            "one",
            "McDonnell Aircraft"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "417",
        "question": "How many developers have games where I can hear Lightning McQueen?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:developer) (JOIN (R dbo:voice) dbr:Lightning_McQueen)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many developers have [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "games",
                                "start": 25,
                                "end": 30
                            },
                            {
                                "description": "where I can hear Lightning McQueen",
                                "start": 31,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS developers)) (VP (VBP have) (NP (NP (NNS games)) (SBAR (WHADVP (WRB where)) (S (NP (PRP I)) (VP (MD can) (VP (VB hear) (NP (NNP Lightning) (NNP McQueen))))))))) (. ?)))",
        "mask_entity": "How many developers have games where I can hear [ENT]?",
        "entity": [
            "Lightning McQueen"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3069",
        "question": "Which universit's affiliation is with Kalpan, Inc. and has campus at Iowa ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (AND (JOIN dbp:affiliations dbr:Kaplan,_Inc.) (JOIN dbo:campus dbr:Iowa)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which university's",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "affiliation is with Kalpan, Inc.",
                    "start": 19,
                    "end": 51
                },
                {
                    "description": "and has campus at Iowa",
                    "start": 52,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS universit's) (NN affiliation)) (S (VP (VP (VBZ is) (PP (IN with) (NP (NNP Kalpan) (, ,) (NNP Inc.)))) (CC and) (VP (VBZ has) (NP (NP (NN campus)) (PP (IN at) (NP (NNP Iowa))))))) (. ?)))",
        "mask_entity": "Which universit's affiliation is with [ENT] and has campus at [ENT] ?",
        "entity": [
            "Kalpan, Inc.",
            "Iowa"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1625",
        "question": "How many record labels publish works of Jazz fusion?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
        "SExpr": "(JOIN (R dbo:recordLabel) (JOIN dbo:genre dbr:Jazz_fusion)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many record labels",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "publish [IQ1]",
                    "start": 23,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "works of Jazz fusion",
                                "start": 31,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN record) (NNS labels)) (VP (VBP publish) (NP (NP (NNS works)) (PP (IN of) (NP (NNP Jazz) (NN fusion)))))) (. ?)))",
        "mask_entity": "How many record labels publish works of [ENT] fusion?",
        "entity": [
            "Jazz"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4950",
        "question": "What are the regions in which the distributor of Secrets and Lies serves ? ",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)> <http://dbpedia.org/ontology/distributor> ?x . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . }",
        "SExpr": "(JOIN (R dbo:regionServed) (JOIN (R dbo:distributor) dbr:Secrets_and_Lies_(U.S._TV_series))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the regions",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "in which [IQ1] serves",
                    "start": 21,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the distributor of Secrets and Lies",
                                "start": 30,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS regions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NNPS Secrets) (CC and) (NNS Lies)))) (VP (VBZ serves))))))) (. ?)))",
        "mask_entity": "What are the regions in which the distributor of [ENT] serves ? ",
        "entity": [
            "Secrets and Lies"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4185",
        "question": "List all the writers of the comics which has Robert Bernstein as one of the writer ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
        "SExpr": "(JOIN (R dbp:writers) (AND dbo:Comic (JOIN dbp:writers dbr:Robert_Bernstein_(comics)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the writers of [IQ1]",
                    "start": 0,
                    "end": 82,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the comics",
                                "start": 24,
                                "end": 34
                            },
                            {
                                "description": "which has Robert Bernstein as one of the writer",
                                "start": 35,
                                "end": 82
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS writers)) (PP (IN of) (NP (NP (DT the) (NNS comics)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NNP Robert) (NNP Bernstein)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN writer)))))))))))) (. ?)))",
        "mask_entity": "List all the writers of the comics which has [ENT] as one of the writer ?",
        "entity": [
            "Robert Bernstein"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2896",
        "question": "What are the settlements whose neighboring municipalities is Lancy?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "SExpr": "(AND dbo:Settlement (JOIN dbp:neighboringMunicipalities dbr:Lancy))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the settlements",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "whose neighboring municipalities is Lancy",
                    "start": 25,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose) (VBG neighboring) (NNS municipalities)) (S (VP (VBZ is) (NP (NNP Lancy)))))))) (. ?)))",
        "mask_entity": "What are the settlements whose neighboring municipalities is [ENT]?",
        "entity": [
            "Lancy"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4671",
        "question": "Count the total number  of hometown of the gymnasts whose one of the hometown in Russia ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hometown> <http://dbpedia.org/resource/Russia> . ?x <http://dbpedia.org/property/hometown> ?uri }",
        "SExpr": "(JOIN (R dbp:hometown) (JOIN dbp:hometown dbr:Russia)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the total number of hometown of [IQ1]",
                    "start": 0,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the gymnasts",
                                "start": 38,
                                "end": 50
                            },
                            {
                                "description": "whose one of the hometown in Russia",
                                "start": 51,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NN hometown))) (PP (IN of) (NP (NP (DT the) (NNS gymnasts)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (NP (DT the) (NN hometown)) (PP (IN in) (NP (NNP Russia)))))) (. ?))))))))",
        "mask_entity": "Count the total number  of hometown of the gymnasts whose [ENT] of the hometown in [ENT] ?",
        "entity": [
            "one",
            "Russia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2082",
        "question": "In which states does the river flow whose left tributary is Toms Creek?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "SExpr": "(JOIN (R dbo:state) (JOIN (R dbo:leftTributary) dbr:Toms_Creek_(Monocacy_River))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which states",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "does the river flow [IQ1]",
                    "start": 16,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose left tributary is Toms Creek",
                                "start": 36,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS states)) (VP (VBZ does) (NP (NP (DT the) (NN river)) (VP (VB flow) (SBAR (WHNP (WP$ whose) (JJ left) (NN tributary)) (S (VP (VBZ is) (NP (NNP Toms) (NNP Creek))))))))) (. ?)))",
        "mask_entity": "In which states does the river flow whose left tributary is [ENT]?",
        "entity": [
            "Toms Creek"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "753",
        "question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:sourceMountain dbr:Baikal_Mountains) (JOIN dbp:mouthLocation dbr:Arctic_Ocean)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose source mountain is Baikal Mountains",
                    "start": 15,
                    "end": 56
                },
                {
                    "description": "and mouth location is Arctic Ocean",
                    "start": 57,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (S (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source) (NN mountain)) (S (VP (VBZ is) (NP (NP (NNP Baikal) (NNPS Mountains)) (CC and) (NP (NN mouth) (NN location))))))) (VP (VBZ is) (NP (NNP Arctic) (NNP Ocean))))) (. ?)))",
        "mask_entity": "Name the river whose source mountain is [ENT] and mouth location is [ENT]?",
        "entity": [
            "Baikal Mountains",
            "Arctic Ocean"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2546",
        "question": "Count the PhD students whose thesis are supervised by National Medal of Science winners?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . }",
        "SExpr": "(JOIN (R dbp:doctoralStudents) (JOIN dbp:prizes dbr:National_Medal_of_Science)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the PhD students",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "whose thesis are supervised by [IQ1]",
                    "start": 23,
                    "end": 87,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "National Medal of Science winners",
                                "start": 54,
                                "end": 87
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN PhD) (NNS students)) (SBAR (WHNP (WP$ whose) (NN thesis)) (S (VP (VBP are) (VP (VBN supervised) (PP (IN by) (NP (NML (NML (NNP National) (NNP Medal)) (PP (IN of) (NP (NNP Science)))) (NNS winners))))))))) (. ?)))",
        "mask_entity": "Count the [ENT] students whose thesis are supervised by [ENT] winners?",
        "entity": [
            "PhD",
            "National Medal of Science"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3969",
        "question": "Which broadcast area of CFRX is also the palce of birth of Anthony Raymond ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/Anthony_Raymond_Ceresko> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:broadcastArea) dbr:CFRX) (JOIN (R dbp:placeOfBirth) dbr:Anthony_Raymond_Ceresko))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which broadcast area of CFRX",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "is also the place of birth of Anthony Raymond",
                    "start": 29,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN broadcast) (NN area)) (PP (IN of) (NP (NNP CFRX)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN palce)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Anthony) (NNP Raymond))))))) (. ?)))",
        "mask_entity": "Which broadcast area of [ENT] is also the palce of birth of [ENT] ?",
        "entity": [
            "CFRX",
            "Anthony Raymond"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3373",
        "question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Joey_McIntyre> . ?x <http://dbpedia.org/property/starring> ?uri }",
        "SExpr": "(JOIN (R dbp:starring) (JOIN dbp:starring dbr:Joey_McIntyre)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the total number of cast member of [IQ1]",
                    "start": 0,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the television shows",
                                "start": 41,
                                "end": 61
                            },
                            {
                                "description": "whose actress is Joey McIntyre",
                                "start": 62,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN cast) (NN member)) (PP (IN of) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN actress)) (S (VP (VBZ is) (NP (NNP Joey) (NNP McIntyre))))))))))) (. ?)))",
        "mask_entity": "Count the total number of cast member of the television shows whose actress is [ENT]?",
        "entity": [
            "Joey McIntyre"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4107",
        "question": "List all the awards won by the artist who has won SIGGRAPH ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN dbo:award dbr:SIGGRAPH)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the awards",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "won by [IQ1]",
                    "start": 20,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the artist",
                                "start": 27,
                                "end": 37
                            },
                            {
                                "description": "who has won SIGGRAPH",
                                "start": 38,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN won) (NP (NNP SIGGRAPH))))))))))) (. ?)))",
        "mask_entity": "List all the awards won by the artist who has won SIGGRAPH ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2444",
        "question": "Where was david Scherman trained ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/property/training> ?uri } ",
        "SExpr": "(JOIN (R dbp:training) dbr:David_Scherman)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP david) (NNP Scherman)) (VP (VBN trained))) (. ?)))",
        "mask_entity": "Where was [ENT] trained ?",
        "entity": [
            "david Scherman"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4380",
        "question": "Count the battles fought by Raoul Magrin-Vernerey?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(AND dbo:MilitaryConflict (JOIN (R dbp:battles) dbr:Raoul_Magrin-Vernerey))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the battles",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "fought by Raoul Magrin-Vernerey",
                    "start": 18,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NNP Raoul) (NNP Magrin-Vernerey)))))) (. ?)))",
        "mask_entity": "Count the battles fought by [ENT]?",
        "entity": [
            "Raoul Magrin-Vernerey"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1066",
        "question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:flagbearer) dbr:Switzerland_at_the_2004_Summer_Olympics) (JOIN (R dbp:flagbearer) dbr:Switzerland_at_the_2008_Summer_Olympics))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which athlete",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
                    "start": 14,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN athlete)) (SQ (VP (VBD was) (NP (NP (DT the) (NN flag) (NN bearer)) (PP (IN for) (NP (NNP Switzerland)))) (PP (IN in) (NP (NP (CD 2004)) (CC and) (NP (CD 2008) (NN summer) (NNPS Olympics)))))) (. ?)))",
        "mask_entity": "Which athlete was the flag bearer for [ENT] in [ENT] and [ENT] summer [ENT] ?",
        "entity": [
            "Switzerland",
            "2004",
            "2008",
            "Olympics"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3913",
        "question": "Which nationalist group was responsible for foundation of Young Lords?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Lords> <http://dbpedia.org/property/international> ?uri } ",
        "SExpr": "(JOIN (R dbp:international) dbr:Young_Lords)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ nationalist) (NN group)) (SQ (VP (VBD was) (ADJP (JJ responsible) (PP (IN for) (NP (NP (NN foundation)) (PP (IN of) (NP (NNP Young) (NNPS Lords)))))))) (. ?)))",
        "mask_entity": "Which nationalist group was responsible for foundation of [ENT]?",
        "entity": [
            "Young Lords"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3498",
        "question": "What award was won by the father of Angelina Jolie?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN dbp:children dbr:Angelina_Jolie)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What award",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "was won by [IQ1]",
                    "start": 11,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the father of Angelina Jolie",
                                "start": 22,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VP (VBD was) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN father)) (PP (IN of) (NP (NNP Angelina) (NNP Jolie)))))))) (. ?)))",
        "mask_entity": "What award was won by the father of [ENT]?",
        "entity": [
            "Angelina Jolie"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2738",
        "question": "What are the software whose programming language are Multilingual?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Multilingualism> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(AND dbo:Software (JOIN dbp:programmingLanguage (JOIN dbo:language dbr:Multilingualism))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the software",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "whose programming language [IQ1]",
                    "start": 22,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are Multilingual",
                                "start": 49,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WP$ whose) (NN programming) (NN language)) (S (VP (VBP are) (ADJP (JJ Multilingual)))))))) (. ?)))",
        "mask_entity": "What are the software whose programming language are Multilingual?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4000",
        "question": "Was Marshall Arisman the cover artist in american psycho?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Marshall) (NNP Arisman)) (NP (NP (DT the) (NN cover) (NN artist)) (PP (IN in) (NP (JJ american) (NN psycho)))) (. ?)))",
        "mask_entity": "Was [ENT] the cover artist in american psycho?",
        "entity": [
            "Marshall Arisman"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1568",
        "question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:birthplace) dbr:Liliya_Lobanova) (JOIN (R dbp:locationCountry) dbr:Snake_Island_(Black_Sea)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which birthplace of Liliya Lobanova",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "is also the location of the Snake Island",
                    "start": 36,
                    "end": 76
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN birthplace)) (PP (IN of) (NP (NNP Liliya) (NNP Lobanova)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (DT the) (NNP Snake) (NNP Island))))) (. ?)))",
        "mask_entity": "Which birthplace of [ENT] is also the location of [ENT] ?",
        "entity": [
            "Liliya Lobanova",
            "the Snake Island"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2427",
        "question": "Count all the stateless people",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . }",
        "SExpr": "(JOIN dbo:citizenship dbr:Statelessness)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (PDT all) (DT the) (JJ stateless) (NNS people)))))",
        "mask_entity": "Count all the stateless people",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "3746",
        "question": "Josef Bhler belongs to which political party?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_B\u00fchler> <http://dbpedia.org/ontology/occupation> ?uri } ",
        "SExpr": "(JOIN (R dbo:occupation) dbr:Josef_B\u00fchler)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (NP (NNP Josef)))",
        "mask_entity": "[ENT] [ENT] belongs to which political party?",
        "entity": [
            "Josef",
            "Bhler"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4639",
        "question": "Where did the war take place where one of the commander was Zuo Zongtang?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(JOIN (R dbo:territory) (AND dbo:MilitaryConflict (JOIN dbo:commander dbr:Zuo_Zongtang))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the war take place",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "[IQ1]",
                    "start": 29,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "where",
                                "start": 29,
                                "end": 34
                            },
                            {
                                "description": "one of the commander was Zuo Zongtang",
                                "start": 35,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN war)) (VP (VB take) (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN commander)))) (VP (VBD was) (NP (NNP Zuo) (NNP Zongtang))))))) (. ?)))",
        "mask_entity": "Where did the war take place where [ENT] of the commander was [ENT]?",
        "entity": [
            "one",
            "Zuo Zongtang"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1687",
        "question": "In which place is the company which is known for Barbara bestor located ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/property/knownFor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:location) (AND dbo:Company (JOIN (R dbp:knownFor) dbr:Barbara_Bestor))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which place",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "is [IQ1] located",
                    "start": 15,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 18,
                                "end": 29
                            },
                            {
                                "description": "which is known for Barbara bestor",
                                "start": 30,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHPP (IN In) (WHNP (WDT which) (NN place))) (SQ (VBZ is) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (NNP Barbara) (NNP bestor)) (VP (VBN located)))))))))) (. ?)))",
        "mask_entity": "In which place is the company which is known for [ENT] bestor located ?",
        "entity": [
            "Barbara"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "851",
        "question": "What novels are belong to the genre of Utopian and dystopian fiction?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> } ",
        "SExpr": "(JOIN dbo:literaryGenre dbr:Utopian_and_dystopian_fiction)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NNS novels)) (S (VP (VBP are) (VP (VB belong) (PP (IN to) (NP (NP (DT the) (NN genre)) (PP (IN of) (NP (ADJP (JJ Utopian) (CC and) (JJ dystopian)) (NN fiction)))))))) (. ?)))",
        "mask_entity": "What novels are belong to the genre of [ENT] and dystopian fiction?",
        "entity": [
            "Utopian"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3546",
        "question": "What are the movies written by Nick Castle?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:writer dbr:Nick_Castle))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the movies",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "written by Nick Castle",
                    "start": 20,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Nick) (NNP Castle))))))) (. ?)))",
        "mask_entity": "What are the movies written by [ENT]?",
        "entity": [
            "Nick Castle"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "895",
        "question": "On which river are there things belonging to zambezi river authority?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Zambezi_River_Authority> . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "SExpr": "(JOIN (R dbo:river) (JOIN dbp:owner dbr:Zambezi_River_Authority)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "On which river are there [IQ1]",
                    "start": 0,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "things",
                                "start": 25,
                                "end": 31
                            },
                            {
                                "description": "belonging to zambezi river authority",
                                "start": 32,
                                "end": 68
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN On) (WHNP (WDT which))) (SINV (VP (NN river)) (VP (VBP are)) (NP (NP (PRP$ there) (NNS things)) (VP (VBG belonging) (PP (IN to) (NP (NN zambezi) (NN river) (NN authority)))))) (. ?)))",
        "mask_entity": "On which river are there things belonging to zambezi river authority?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4592",
        "question": "Is Egyptian Arabic belong to the Central Semitic Languages family?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (JJ Egyptian) (NNP Arabic)) (VP (VB belong) (PP (IN to) (NP (DT the) (NML (NML (NNP Central) (NNP Semitic)) (NNPS Languages)) (NN family)))) (. ?)))",
        "mask_entity": "Is [ENT] belong to the [ENT] Languages family?",
        "entity": [
            "Egyptian Arabic",
            "Central Semitic"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "335",
        "question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues atleast once?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:Sings_Kristofferson) (JOIN (R dbo:artist) dbr:Milk_Cow_Blues))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the artist of Sings Kristofferson",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and also performed Milk Cow Blues at least once",
                    "start": 41,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN artist)) (PP (IN of) (NP (NNPS Sings) (NNP Kristofferson))))) (CC and) (ADVP (RB also)) (VP (VBD performed) (NP (NNP Milk) (NNP Cow) (NNP Blues)) (ADVP (RB atleast) (RB once))))) (. ?)))",
        "mask_entity": "Who is the artist of [ENT] and also performed [ENT] atleast once?",
        "entity": [
            "Sings Kristofferson",
            "Milk Cow Blues"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2839",
        "question": "Who has fought in wars under commander Arthur St Clair?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "SExpr": "(JOIN (R dbp:combatant) (JOIN dbo:commander dbr:Arthur_St._Clair)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has fought in [IQ1]",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "wars under commander Arthur St Clair",
                                "start": 18,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN fought) (PP (IN in) (NP (NNS wars))) (PP (IN under) (NP (NN commander) (NNP Arthur) (NNP St) (NNP Clair)))))) (. ?)))",
        "mask_entity": "Who has fought in wars under commander [ENT]?",
        "entity": [
            "Arthur St Clair"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3087",
        "question": "Which Paramount TV show was produced by Glen and Les Charles ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:executiveProducer dbr:Glen_and_Les_Charles) (JOIN dbp:company dbr:Paramount_Television)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which Paramount TV show",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "was produced by Glen and Les Charles",
                    "start": 24,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NML (JJ Paramount) (NNP TV)) (NN show)) (SQ (VP (VBD was) (VP (VBN produced) (PP (IN by) (NP (NNP Glen) (CC and) (NNP Les) (NNP Charles)))))) (. ?)))",
        "mask_entity": "Which [ENT] show was produced by [ENT] and [ENT] ?",
        "entity": [
            "Paramount TV",
            "Glen",
            "Les Charles"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1348",
        "question": "Name some basketball players who  have played for chicago bulls?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
        "SExpr": "(AND dbo:BasketballPlayer (JOIN dbp:team dbr:Chicago_Bulls))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name some basketball players",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "who have played for chicago bulls",
                    "start": 29,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NN basketball) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN played) (PP (IN for) (NP (NNP chicago) (NNS bulls))))))))) (. ?)))",
        "mask_entity": "Name some basketball players who  have played for chicago bulls?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1015",
        "question": "Which owner of the national Herald india is the leader of Kumta ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:owner) dbr:The_National_Herald_(India)) (JOIN (R dbp:governmentType) dbr:Kumta))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which owner of the national Herald india",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "is the leader of Kumta",
                    "start": 41,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN owner)) (PP (IN of) (NP (DT the) (JJ national) (NNP Herald) (NNP india)))) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Kumta))))) (. ?)))",
        "mask_entity": "Which owner of the national [ENT] india is the leader of [ENT] ?",
        "entity": [
            "Herald",
            "Kumta"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2816",
        "question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NP (NNP Francisco) (NNP Pizarro)) (PP (IN of) (NP (NP (DT the) (NN monarch)) (PP (IN of) (NP (NNP Charles) (CD 5)))))) (, ,) (PP (IN of) (NP (DT the) (JJ roman) (NN empire))) (. ?)))",
        "mask_entity": "Was [ENT] of the monarch of [ENT], of the roman empire?",
        "entity": [
            "Francisco Pizarro",
            "Charles 5"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1631",
        "question": "What is the largest city of Pulau Ubin ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri } ",
        "SExpr": "(JOIN (R dbo:largestCity) dbr:Pulau_Ubin)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Pulau) (NNP Ubin)))))) (. ?)))",
        "mask_entity": "What is the largest city of [ENT] ?",
        "entity": [
            "Pulau Ubin"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2489",
        "question": "What is the origin of the musical artist of A Todo Romantic Style ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Todo_Romantic_Style> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/property/origin> ?uri  . }",
        "SExpr": "(JOIN (R dbp:origin) (JOIN (R dbp:artist) dbr:A_Todo_Romantic_Style)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the origin of [IQ1]",
                    "start": 0,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the musical artist of A Todo Romantic Style",
                                "start": 22,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NP (DT the) (JJ musical) (NN artist)) (PP (IN of) (NP (DT A) (NNP Todo) (NNP Romantic) (NNP Style)))))))) (. ?)))",
        "mask_entity": "What is the origin of the musical artist of [ENT] ?",
        "entity": [
            "A Todo Romantic Style"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3730",
        "question": "Horses sired by Karinga Bay have participated in which races?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Karinga_Bay> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "SExpr": "(JOIN (R dbp:race) (AND dbo:Horse (JOIN dbo:sire dbr:Karinga_Bay))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have participated in which races",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Horses",
                                "start": 0,
                                "end": 6
                            },
                            {
                                "description": "sired by Karinga Bay",
                                "start": 7,
                                "end": 27
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN sired) (PP (IN by) (NP (NNP Karinga) (NNP Bay))))) (VP (VBP have) (VP (VBN participated) (SBAR (WHPP (IN in) (WHNP (WDT which) (NNS races))) (. ?))))))",
        "mask_entity": "Horses sired by [ENT] have participated in which races?",
        "entity": [
            "Karinga Bay"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3251",
        "question": "What is the alma mater of the scientists  known for  String theory?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbp:almaMater) (AND dbo:Scientist (JOIN dbo:knownFor dbr:String_theory))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the scientists",
                                "start": 26,
                                "end": 40
                            },
                            {
                                "description": "known for String theory",
                                "start": 41,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NNS scientists)) (VP (VBN known) (PP (IN for) (NP (NNP String) (NN theory))))))))) (. ?)))",
        "mask_entity": "What is the alma mater of the scientists  known for  String theory?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4634",
        "question": "How many apes are there?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "SExpr": "(JOIN dbo:family dbr:Ape)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS apes)) (VP (VBP are) (ADVP (RB there)))) (. ?)))",
        "mask_entity": "How many apes are there?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2070",
        "question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:nickname) dbr:Lyons_Township_High_School) (JOIN (R dbp:nickname) dbr:Wheaton_College_(Massachusetts)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is a common nickname",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "given to both Lyons Township high school and the wheaton college in massachusetts",
                    "start": 26,
                    "end": 107
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT a) (JJ common) (NN nickname)) (VP (VBN given) (PP (IN to) (NP (NP (CC both) (NML (NNP Lyons) (NNP Township)) (JJ high) (NN school)) (CC and) (NP (NP (DT the) (NNP wheaton) (NN college)) (PP (IN in) (NP (NNP massachusetts)))))))))) (. ?)))",
        "mask_entity": "What is a common nickname given to both [ENT] high school and the wheaton college in massachusetts?",
        "entity": [
            "Lyons Township"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4452",
        "question": "Where do beauty queens with brown hair reside?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
        "SExpr": "(JOIN (R dbo:residence) (JOIN dbp:hairColor dbr:Brown_hair)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do [IQ1] reside",
                    "start": 0,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "beauty queens",
                                "start": 9,
                                "end": 22
                            },
                            {
                                "description": "with brown hair",
                                "start": 23,
                                "end": 38
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NN beauty) (NNS queens)) (PP (IN with) (NP (JJ brown) (NN hair))) (VP (VB reside))) (. ?)))",
        "mask_entity": "Where do beauty queens with brown hair reside?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4882",
        "question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._Animation> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:distributor (JOIN dbp:divisions dbr:Warner_Bros._Animation))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the television shows",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "one of whose distributor's [IQ1]",
                    "start": 26,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "divisions is Warner Bros. Animation",
                                "start": 53,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NN Animation) (. .)))",
        "mask_entity": "List the television shows one of whose distributor's divisions is [ENT]. Animation.",
        "entity": [
            "Warner Bros"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1635",
        "question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:creator dbr:Simon_Fuller) (JOIN dbp:judges dbr:Jennifer_Lopez)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the television show",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "directed by Simon Fuller",
                    "start": 25,
                    "end": 49
                },
                {
                    "description": "and judged by Jennifier Lopez",
                    "start": 50,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN television) (NN show)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Simon) (NNP Fuller)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NNP Jennifier) (NNP Lopez))))))) (. ?)))",
        "mask_entity": "Name the television show directed by [ENT] and judged by [ENT] ?",
        "entity": [
            "Simon Fuller",
            "Jennifier Lopez"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2479",
        "question": "Name the appointer of William Clark ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri } ",
        "SExpr": "(JOIN (R dbp:appointer) dbr:William_Clark)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN appointer)) (PP (IN of) (NP (NNP William) (NNP Clark))))) (. ?)))",
        "mask_entity": "Name the appointer of [ENT] ?",
        "entity": [
            "William Clark"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2265",
        "question": "in which movies have momoki kochi acted",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> } ",
        "SExpr": "(JOIN dbp:starring dbr:Momoko_K\u014dchi)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN momoki) (NP (NNP kochi)))))) (VP (VBN acted))))",
        "mask_entity": "in which movies have momoki kochi acted",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2959",
        "question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:currency) dbr:Benelux) (JOIN (R dbo:currency) dbr:Kerguelen_Islands))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the base currency of the Benelux",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and is also used as money in Kerguelen Islands",
                    "start": 41,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (DT the) (NNP Benelux))))) (CC and) (VP (VBZ is) (ADVP (RB also)) (VP (VBN used) (PP (IN as) (NP (NP (NN money)) (PP (IN in) (NP (NNP Kerguelen) (NNPS Islands))))))))) (. ?)))",
        "mask_entity": "What is the base currency of the [ENT] and is also used as money in [ENT]?",
        "entity": [
            "Benelux",
            "Kerguelen Islands"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4731",
        "question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> . ?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
        "SExpr": "(AND dbo:Mammal (AND (JOIN dbo:order dbr:Diprotodontia) (JOIN dbo:phylum dbr:Chordate)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the mammals",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose taxonomy is Diprotodontia",
                    "start": 17,
                    "end": 48
                },
                {
                    "description": "and phylum is Chordate",
                    "start": 49,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (S (NP (NP (DT the) (NNS mammals)) (SBAR (WHNP (WP$ whose) (NN taxonomy)) (S (VP (VBZ is) (NP (NNP Diprotodontia) (CC and) (NN phylum)))))) (VP (VBZ is) (NP (NNP Chordate))))) (. ?)))",
        "mask_entity": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3059",
        "question": "Count the key people of the Clinton Foundation?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "SExpr": "(JOIN (R dbp:keyPeople) dbr:Clinton_Foundation)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ key) (NNS people)) (PP (IN of) (NP (DT the) (NNP Clinton) (NNP Foundation))))) (. ?)))",
        "mask_entity": "Count the key people of [ENT]?",
        "entity": [
            "the Clinton Foundation"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2141",
        "question": "Name the company founded in New Mexico and provides Outlook.com as services ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbp:foundation dbr:New_Mexico) (JOIN dbp:services dbr:Outlook.com)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "founded in New Mexico",
                    "start": 17,
                    "end": 38
                },
                {
                    "description": "and provides Outlook.com as services",
                    "start": 39,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (VP (VP (VBN founded) (PP (IN in) (NP (NNP New) (NNP Mexico)))) (CC and) (VP (VBZ provides) (NP (ADD Outlook.com)) (PP (IN as) (NP (NNS services))))))) (. ?)))",
        "mask_entity": "Name the company founded in [ENT] and provides [ENT] as services ?",
        "entity": [
            "New Mexico",
            "Outlook.com"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3118",
        "question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:previousWork dbr:The_Spirit_of_Christmas_(short_film)) (JOIN dbp:voices dbr:Mona_Marshall)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which tv show",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was preceded by The spirit of Christmas",
                    "start": 14,
                    "end": 53
                },
                {
                    "description": "and voice to the character was given by Mona Marshall",
                    "start": 54,
                    "end": 107
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which) (NN tv) (NN show)) (S (VP (VBD was) (VP (VBN preceded) (PP (IN by) (NP (NP (NP (DT The) (NN spirit)) (PP (IN of) (NP (NNP Christmas)))) (CC and) (NP (NP (NN voice)) (PP (IN to) (NP (DT the) (NN character)))))))))) (VP (VBD was) (VP (VBN given) (PP (IN by) (NP (NNP Mona) (NNP Marshall))))) (. ?)))",
        "mask_entity": "Which tv show was preceded by The spirit of [ENT] and voice to the character was given by [ENT] ?",
        "entity": [
            "Christmas",
            "Mona Marshall"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4725",
        "question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:localAuthority) dbr:Trinity_School,_Brentwood) (JOIN (R dbo:localAuthority) dbr:Buckhurst_Hill_County_High_School))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall",
                    "start": 0,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Under) (WHNP (WDT which))) (S (NP (JJ common) (NN jurisdiction)) (VP (VBP do) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)) (CC and) (NP (NML (NML (NNP Buckhurst) (NNP Hill)) (NNP County)) (NNP High) (NNP School))) (NP (NN fall)))) (. ?)))",
        "mask_entity": "Under which common jurisdiction do [ENT], [ENT] and [ENT] fall?",
        "entity": [
            "Trinity School",
            "Brentwood",
            "Buckhurst Hill County High School"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4045",
        "question": "Music of how many things has been given by Akira Ifukube?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . }",
        "SExpr": "(JOIN dbp:music dbr:Akira_Ifukube)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (NP (NP (NN Music)) (PP (IN of) (SBAR (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN given) (PP (IN by) (NP (NNP Akira) (NNP Ifukube))))))))) (. ?)))",
        "mask_entity": "Music of how many things has been given by [ENT]?",
        "entity": [
            "Akira Ifukube"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3356",
        "question": "What made jo garcia and merritt cabal both famous?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:knownFor) dbr:Jo_Garcia) (JOIN (R dbo:knownFor) dbr:Merritt_Cabal))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What made jo garcia and merritt cabal both famous",
                    "start": 0,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBD made) (NP (NNP jo)) (NP (NP (NNP garcia)) (CC and) (NP (NP (NNP merritt) (NN cabal)) (ADJP (CC both) (JJ famous)))))) (. ?)))",
        "mask_entity": "What made jo garcia and merritt cabal both famous?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2744",
        "question": "What was the career of some people who have committed suicide?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "SExpr": "(JOIN (R dbo:occupation) (JOIN dbp:deathCause dbr:Suicide)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What was the career of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "some people",
                                "start": 23,
                                "end": 34
                            },
                            {
                                "description": "who have committed suicide",
                                "start": 35,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN career)) (PP (IN of) (NP (NP (DT some) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN committed) (NP (NN suicide)))))))))) (. ?)))",
        "mask_entity": "What was the career of some people who have committed suicide?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3506",
        "question": "In how many places are the tombs of people who died in Connecticut Colony?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Connecticut_Colony> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbo:restingPlace) (JOIN dbp:placeOfDeath dbr:Connecticut_Colony))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many places",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are the tombs of [IQ1]",
                    "start": 19,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 36,
                                "end": 42
                            },
                            {
                                "description": "who died in Connecticut Colony",
                                "start": 43,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN In) (SBARQ (WHNP (WHADJP (WRB how) (JJ many)) (NNS places)) (SQ (VP (VBP are)) (NP (NP (DT the) (NNS tombs)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Connecticut) (NNP Colony)))))))))) (. ?))))",
        "mask_entity": "In how many places are the tombs of people who died in [ENT]?",
        "entity": [
            "Connecticut Colony"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1679",
        "question": "List the producer of the television shows distributed by FremantleMedia.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(JOIN (R dbo:producer) (AND dbo:TelevisionShow (JOIN dbp:distributor dbr:FremantleMedia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the producer of [IQ1]",
                    "start": 0,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the television shows",
                                "start": 21,
                                "end": 41
                            },
                            {
                                "description": "distributed by FremantleMedia",
                                "start": 42,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN television) (NNS shows)) (VP (VBN distributed) (PP (IN by) (NP (NNP FremantleMedia)))))))) (. .)))",
        "mask_entity": "List the producer of the television shows distributed by [ENT].",
        "entity": [
            "FremantleMedia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4249",
        "question": "Name the awards won by Elie Wiesel ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?uri } ",
        "SExpr": "(JOIN (R dbp:awards) dbr:Elie_Wiesel)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NNP Elie) (NNP Wiesel)))))) (. ?)))",
        "mask_entity": "Name the awards won by [ENT] ?",
        "entity": [
            "Elie Wiesel"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3147",
        "question": "Who are the producers of Marie Sisters?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?uri } ",
        "SExpr": "(JOIN (R dbp:producer) dbr:Marie_Sisters)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NNP Marie) (NNPS Sisters)))))) (. ?)))",
        "mask_entity": "Who are the producers of [ENT]?",
        "entity": [
            "Marie Sisters"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2294",
        "question": "Who won the silver medal when the bronze was won by Yang Yilin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> . ?x <http://dbpedia.org/ontology/silverMedalist> ?uri  . }",
        "SExpr": "(JOIN (R dbo:silverMedalist) (JOIN dbo:bronzeMedalist dbr:Yang_Yilin)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who won the silver medal [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "when the bronze was won by Yang Yilin",
                                "start": 25,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD won) (NP (DT the) (JJ silver) (NN medal)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN bronze)) (VP (VBD was) (VP (VBN won) (PP (IN by) (NP (NNP Yang) (NNP Yilin))))))))) (. ?)))",
        "mask_entity": "Who won the silver medal when the bronze was won by [ENT]?",
        "entity": [
            "Yang Yilin"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "580",
        "question": "List the successor of successor of Hayden, Stone & Co.",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/successor> ?uri  . }",
        "SExpr": "(JOIN (R dbo:successor) (JOIN (R dbo:successor) dbr:Hayden,_Stone_&_Co.)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the successor of [IQ1]",
                    "start": 0,
                    "end": 53,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "successor of Hayden, Stone & Co",
                                "start": 22,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NP (NN successor)) (PP (IN of) (NP (NNP Hayden) (, ,) (NNP Stone) (CC &) (NNP Co))))))) (. .)))",
        "mask_entity": "List the successor of successor of [ENT].",
        "entity": [
            "Hayden, Stone & Co"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1470",
        "question": "Count the number of battles fought by the military person involved in Morocco ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Morocco> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "SExpr": "(JOIN (R dbp:battles) (JOIN dbp:battles dbr:Morocco)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of battles",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "fought by [IQ1]",
                    "start": 28,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the military person",
                                "start": 38,
                                "end": 57
                            },
                            {
                                "description": "involved in Morocco",
                                "start": 58,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NP (DT the) (JJ military) (NN person)) (VP (VBN involved) (PP (IN in) (NP (NNP Morocco))))))))))) (. ?)))",
        "mask_entity": "Count the number of battles fought by the military person involved in [ENT] ?",
        "entity": [
            "Morocco"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4070",
        "question": "What is the origin of Xynisteri?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri } ",
        "SExpr": "(JOIN (R dbo:origin) dbr:Xynisteri)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NNP Xynisteri)))))) (. ?)))",
        "mask_entity": "What is the origin of [ENT]?",
        "entity": [
            "Xynisteri"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3343",
        "question": "How many important works have been done by Russel Davies?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "SExpr": "(JOIN (R dbo:notableWork) dbr:Russell_T_Davies)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ important) (NNS works)) (VP (VBP have) (VP (VBN been) (VP (VBN done) (PP (IN by) (NP (NNP Russel) (NNPS Davies))))))) (. ?)))",
        "mask_entity": "How many important works have been done by [ENT]?",
        "entity": [
            "Russel Davies"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4583",
        "question": "Who are currently playing for Barcelona FC?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> } ",
        "SExpr": "(JOIN dbp:currentclub dbr:FC_Barcelona)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (ADVP (RB currently)) (VP (VBG playing) (PP (IN for) (NP (NNP Barcelona) (NNP FC))))) (. ?)))",
        "mask_entity": "Who are currently playing for [ENT]?",
        "entity": [
            "Barcelona FC"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3672",
        "question": "Is Andrew Lincoln the narrator of Million Dollar Traders?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Andrew) (NNP Lincoln)) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (CD Million) (NNP Dollar) (NNPS Traders)))) (. ?)))",
        "mask_entity": "Is [ENT] the narrator of [ENT]?",
        "entity": [
            "Andrew Lincoln",
            "Million Dollar Traders"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "559",
        "question": "Who is the owner of Saumarez ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saumarez_(horse)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "SExpr": "(JOIN (R dbo:owner) dbr:Saumarez_(horse))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Saumarez)))))) (. ?)))",
        "mask_entity": "Who is the owner of [ENT] ?",
        "entity": [
            "Saumarez"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2849",
        "question": "What is telecasted on the network where Deborah Turness holds important position?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "SExpr": "(JOIN dbo:network (JOIN dbo:keyPerson dbr:Deborah_Turness)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is telecasted on [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the network",
                                "start": 22,
                                "end": 33
                            },
                            {
                                "description": "where Deborah Turness holds important position",
                                "start": 34,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (VP (VBN telecasted) (PP (IN on) (NP (NP (DT the) (NN network)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Deborah) (NNP Turness)) (VP (VBZ holds) (NP (JJ important) (NN position)))))))))) (. ?)))",
        "mask_entity": "What is telecasted on the network where [ENT] holds important position?",
        "entity": [
            "Deborah Turness"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "512",
        "question": "Who is the fictional character whose relative is Vestigial Peter?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:relative dbr:Vestigial_Peter))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the fictional character",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "whose relative is Vestigial Peter",
                    "start": 31,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN relative)) (S (VP (VBZ is) (NP (JJ Vestigial) (NNP Peter)))))))) (. ?)))",
        "mask_entity": "Who is the fictional character whose relative is [ENT]?",
        "entity": [
            "Vestigial Peter"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1081",
        "question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
        "SExpr": "(JOIN (R dbo:homeStadium) (JOIN dbp:chairman dbr:Merritt_Paulson)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many home stadium are there, of [IQ1]",
                    "start": 0,
                    "end": 93,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the soccer club seasons",
                                "start": 36,
                                "end": 59
                            },
                            {
                                "description": "whose chairman is Merritt Paulson",
                                "start": 60,
                                "end": 93
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (FRAG (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NN home) (NN stadium)) (VP (VBP are) (ADVP (RB there))))) (, ,) (PP (IN of) (NP (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)) (SBAR (WHNP (WP$ whose) (NN chairman)) (S (VP (VBZ is) (NP (NNP Merritt) (NNP Paulson))))))) (. ?)))",
        "mask_entity": "How many home stadium are there, of the soccer club seasons whose chairman is [ENT]?",
        "entity": [
            "Merritt Paulson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1664",
        "question": "Name the alma mater of Ernest de Saisset ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?uri } ",
        "SExpr": "(JOIN (R dbo:almaMater) dbr:Ernest_de_Saisset)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Ernest) (NNP de) (NNP Saisset))))) (. ?)))",
        "mask_entity": "Name the alma mater of [ENT] ?",
        "entity": [
            "Ernest de Saisset"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1012",
        "question": "What magazine companies are of form Limited liability company?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Limited_liability_company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "SExpr": "(AND dbo:Magazine (JOIN dbp:company dbr:Limited_liability_company))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What magazine companies",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "are of form Limited liability company",
                    "start": 24,
                    "end": 61
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN magazine) (NNS companies)) (SQ (VP (VBP are) (PP (IN of) (NP (NP (NN form)) (NP (JJ Limited) (NN liability) (NN company)))))) (. ?)))",
        "mask_entity": "What magazine companies are of form Limited liability company?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1931",
        "question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:firstDriver) dbr:1999_San_Marino_Grand_Prix) (JOIN (R dbp:poleDriver) dbr:1997_Canadian_Grand_Prix))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the driver of SA MArino Grand Prix",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "is also the Pole driver of Canadian Grand Proix",
                    "start": 40,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NN List)) (NP (NP (DT the) (NN driver)) (PP (IN of) (NP (NNP SA) (NNP MArino) (NNP Grand) (NNP Prix))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (NNP Canadian) (NNP Grand) (NNP Proix))))) (. ?)))",
        "mask_entity": "List the driver of [ENT] is also the [ENT] driver of [ENT] Grand Proix ?",
        "entity": [
            "SA MArino Grand Prix",
            "Pole",
            "Canadian"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1150",
        "question": "Where does John A Danaher III work?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri } ",
        "SExpr": "(JOIN (R dbp:office) dbr:John_A._Danaher_III)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (NML (NNP John) (DT A)) (NML (NNP Danaher) (CD III)) (NN work))) (. ?)))",
        "mask_entity": "Where does [ENT] work?",
        "entity": [
            "John A Danaher III"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2838",
        "question": "Name few movies directed by Tim Burton ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:director dbr:Tim_Burton))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name few movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "directed by Tim Burton",
                    "start": 16,
                    "end": 38
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NN Name)) (VP (JJ few) (NP (NP (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NNP Tim) (NNP Burton)))))) (. ?)))",
        "mask_entity": "Name few movies directed by [ENT] ?",
        "entity": [
            "Tim Burton"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "116",
        "question": "Where was Live in Detroit, MI recorded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
        "SExpr": "(JOIN (R dbo:recordedIn) dbr:Live_in_Detroit,_MI)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD was) (ADJP (JJ Live)) (PP (IN in) (NP (NP (NNP Detroit)) (, ,) (NP (NNP MI)) (VP (VBN recorded)))))) (. ?)))",
        "mask_entity": "Where was Live in [ENT], [ENT] recorded ?",
        "entity": [
            "Detroit",
            "MI"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "740",
        "question": "Name all the bands which have members of QDT in them.",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "SExpr": "(JOIN (R dbo:associatedBand) (JOIN (R dbo:bandMember) dbr:QDT)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name all the bands",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "which have [IQ1] in them",
                    "start": 19,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "members of QDT",
                                "start": 30,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS members)) (PP (IN of) (NP (NNP QDT)))) (PP (IN in) (NP (PRP them)))))))) (. .)))",
        "mask_entity": "Name all the bands which have members of [ENT] in them.",
        "entity": [
            "QDT"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4806",
        "question": "Which footballers did their high school in west Sacramento california? ",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/West_Sacramento,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "SExpr": "(AND dbo:AmericanFootballPlayer (JOIN dbp:highSchool dbr:West_Sacramento,_California))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which footballers",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "did their high school in west Sacramento california",
                    "start": 18,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS footballers)) (SQ (VBD did) (NP (NP (PRP$ their) (JJ high) (NN school)) (PP (IN in) (NP (JJ west) (NNP Sacramento) (NNP california))))) (. ?)))",
        "mask_entity": "Which footballers did their high school in west [ENT] california? ",
        "entity": [
            "Sacramento"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3675",
        "question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "SExpr": "(JOIN (R dbp:name) (AND dbo:SoccerClubSeason (JOIN dbp:league dbr:2012_Campeonato_Brasileiro_S\u00e9rie_A))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the names of [IQ1]",
                    "start": 0,
                    "end": 93,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the soccer club seasons",
                                "start": 18,
                                "end": 41
                            },
                            {
                                "description": "whose division is 2012 Campeonato Brasileiro Srie A",
                                "start": 42,
                                "end": 93
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS names)) (PP (IN of) (NP (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)) (SBAR (WHNP (WP$ whose) (NN division)) (S (VP (VBZ is) (NP (CD 2012) (NNP Campeonato) (NNP Brasileiro) (NNP Srie) (NNP A))))))))) (. .)))",
        "mask_entity": "List the names of the soccer club seasons whose division is [ENT] [ENT].",
        "entity": [
            "2012",
            "Campeonato Brasileiro Srie A"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "830",
        "question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?uri. <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:successor) dbr:Philippine_Ports_Authority) (JOIN (R dbo:stateOfOrigin) dbr:Ruben_J._Villote))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which successor of Philippine Ports Authority",
                    "start": 0,
                    "end": 45
                },
                {
                    "description": "is the state of origin of Ruben J. Villote",
                    "start": 46,
                    "end": 88
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN successor)) (PP (IN of) (NP (NNP Philippine) (NNPS Ports) (NNP Authority)))) (S (VP (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (NNP Ruben) (NNP J.) (NNP Villote)))))))) (. ?)))",
        "mask_entity": "Which successor of [ENT] is the state of origin of [ENT] ?",
        "entity": [
            "Philippine Ports Authority",
            "Ruben J. Villote"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "119",
        "question": "What awards have been won by the executive producer of Timmy Time ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbo:executiveProducer) dbr:Timmy_Time)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What awards",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have been won by [IQ1]",
                    "start": 12,
                    "end": 65,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the executive producer of Timmy Time",
                                "start": 29,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NNP Timmy) (NNP Time))))))))) (. ?)))",
        "mask_entity": "What awards have been won by the executive producer of [ENT] ?",
        "entity": [
            "Timmy Time"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4853",
        "question": "Which american football team is owned by Mark davis and is located in O.co Colliseum ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Mark_Davis_(American_football)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "SExpr": "(AND dbo:AmericanFootballTeam (AND (JOIN dbo:owner dbr:Mark_Davis_(American_football)) (JOIN dbo:locationCity dbr:O.co_Coliseum)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which american football team",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "is owned by Mark davis",
                    "start": 29,
                    "end": 51
                },
                {
                    "description": "and is located in O.co Colliseum",
                    "start": 52,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NML (JJ american) (NN football)) (NN team)) (S (VP (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (NNP Mark) (NNP davis))))) (CC and) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP O.co) (NNP Colliseum))))))) (. ?)))",
        "mask_entity": "Which american football team is owned by [ENT] and is located in [ENT] ?",
        "entity": [
            "Mark davis",
            "O.co Colliseum"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4738",
        "question": "The successor of Ulrich II, Count of East Frisia was born in what place?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "SExpr": "(JOIN (R dbp:placeOfBirth) (JOIN (R dbp:successor) dbr:Ulrich_II,_Count_of_East_Frisia)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] was born in",
                    "start": 0,
                    "end": 17,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "The successor of Ulrich II, Count of East Frisia",
                                "start": 0,
                                "end": 48
                            }
                        ]
                    }
                },
                {
                    "description": "what place",
                    "start": 18,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (DT The) (NN successor)) (PP (IN of) (NP (NP (NNP Ulrich) (CD II)) (, ,) (NP (NP (NNP Count)) (PP (IN of) (NP (NNP East) (NNP Frisia))))))) (VP (VBD was) (VP (VBN born) (PP (IN in) (SBAR (WHNP (WDT what) (NN place)) (. ?)))))))",
        "mask_entity": "The successor of [ENT], Count of [ENT] was born in what place?",
        "entity": [
            "Ulrich II",
            "East Frisia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "635",
        "question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:primeminister) dbr:Michael_Jeffery) (JOIN (R dbo:primeMinister) dbr:William_Deane))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the prime minister of Michael Jeffery",
                    "start": 0,
                    "end": 44
                },
                {
                    "description": "who is also the minister of Williuam Deane",
                    "start": 45,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (JJ prime) (NN minister)) (PP (IN of) (NP (NNP Michael) (NNP Jeffery)))) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN minister)) (PP (IN of) (NP (NNP Williuam) (NNP Deane)))))))))) (. ?)))",
        "mask_entity": "Who is the prime minister of [ENT] who is also the minister of [ENT] ?",
        "entity": [
            "Michael Jeffery",
            "Williuam Deane"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4465",
        "question": "Who is the owner of the FC which owns the Cobham Training Centre?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "SExpr": "(JOIN (R dbp:owner) (AND dbo:SoccerClub (JOIN (R dbp:owner) dbr:Cobham_Training_Centre))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the owner of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the FC",
                                "start": 20,
                                "end": 26
                            },
                            {
                                "description": "which owns the Cobham Training Centre",
                                "start": 27,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (DT the) (NNP FC)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (DT the) (NNP Cobham) (NNP Training) (NNP Centre)))))))) (. ?)))",
        "mask_entity": "Who is the owner of the [ENT] which owns [ENT]?",
        "entity": [
            "FC",
            "the Cobham Training Centre"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4364",
        "question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>}",
        "SExpr": "(JOIN (R dbo:binomialAuthority) (AND dbo:Crustacean (JOIN dbo:family dbr:Balanidae))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is considered to be the deciding person",
                    "start": 0,
                    "end": 43
                },
                {
                    "description": "[IQ1]",
                    "start": 44,
                    "end": 98,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "when it comes to crustaceans from the Balanidae family",
                                "start": 44,
                                "end": 98
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN considered) (S (VP (TO to) (VP (VB be) (NP (DT the) (NN deciding) (NN person)) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ comes) (PP (IN to) (NP (NP (NNS crustaceans)) (PP (IN from) (NP (DT the) (NNP Balanidae) (NN family)))))))))))))) (. ?)))",
        "mask_entity": "Who is considered to be the deciding person when it comes to crustaceans from the [ENT] family?",
        "entity": [
            "Balanidae"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4142",
        "question": "What have some US citizens died of?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathCause) (JOIN dbp:citizenship dbr:United_States)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What have [IQ1] died of",
                    "start": 0,
                    "end": 34,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "some US citizens",
                                "start": 10,
                                "end": 26
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP have) (S (NP (DT some) (NNP US) (NNS citizens)) (VP (VBN died) (PP (IN of)))))) (. ?)))",
        "mask_entity": "What have some [ENT] citizens died of?",
        "entity": [
            "US"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "991",
        "question": "What are some apes?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "SExpr": "(JOIN dbo:family dbr:Ape)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (DT some) (NNS apes)))) (. ?)))",
        "mask_entity": "What are some apes?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "876",
        "question": "Who is buried at the place governed by National Park Service?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> . ?uri <http://dbpedia.org/property/restingplace> ?x  . }",
        "SExpr": "(JOIN dbp:restingplace (JOIN dbp:governingBody dbr:National_Park_Service)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is buried at [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the place",
                                "start": 17,
                                "end": 26
                            },
                            {
                                "description": "governed by National Park Service",
                                "start": 27,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN buried) (PP (IN at) (NP (NP (DT the) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NNP National) (NNP Park) (NNP Service)))))))) (. ?)))",
        "mask_entity": "Who is buried at the place governed by [ENT]?",
        "entity": [
            "National Park Service"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4",
        "question": "Name the municipality of Roberto Clemente Bridge ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "SExpr": "(JOIN (R dbo:municipality) dbr:Roberto_Clemente_Bridge)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (NNP Roberto) (NNP Clemente) (NNP Bridge))))) (. ?)))",
        "mask_entity": "Name the municipality of [ENT] ?",
        "entity": [
            "Roberto Clemente Bridge"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3051",
        "question": "Which past members of the The Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:pastMembers) dbr:The_Conglomerate_(American_group)) (JOIN (R dbo:musicalBand) dbr:Take_Me_There_(Blackstreet_&_M\u00fda_song)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which past members of The Conglomerate (American group)",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "also sang Take Me There (Blackstreet & Ma song)",
                    "start": 56,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WHNP (WDT Which) (JJ past) (NNS members)) (PP (IN of) (NP (DT the) (DT The) (NNP Conglomerate) (-LRB- () (JJ American) (NN group) (-RRB- ))))) (S (ADVP (RB also)) (VP (VBD sang) (NP (NP (VB Take) (PRP Me)) (ADVP (RB There)))))) (VP (-LRB- () (NP (NNP Blackstreet) (CC &) (NNP Ma) (NN song) (-RRB- )))) (. ?)))",
        "mask_entity": "Which past members of [ENT] ([ENT] group) also sang [ENT] song)?",
        "entity": [
            "the The Conglomerate",
            "American",
            "Take Me There (Blackstreet & Ma"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3124",
        "question": "List all the notable works of  Russell T Davies?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri } ",
        "SExpr": "(JOIN (R dbo:notableWork) dbr:Russell_T_Davies)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (JJ notable) (NNS works)) (PP (IN of) (NP (NNP Russell) (NNP T) (NNPS Davies))))) (. ?)))",
        "mask_entity": "List all the notable works of  [ENT]?",
        "entity": [
            "Russell T Davies"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2660",
        "question": "Which military unit garrison is Arlington County, Virginia and The Pentagon?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (AND (JOIN dbo:garrison dbr:Arlington_County,_Virginia) (JOIN dbp:garrison dbr:The_Pentagon)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which military unit",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "garrison is Arlington County, Virginia and The Pentagon",
                    "start": 20,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NML (JJ military) (NN unit)) (NN garrison)) (SQ (VP (VBZ is)) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia)) (CC and) (NP (DT The) (NNP Pentagon)))) (. ?)))",
        "mask_entity": "Which military unit garrison is [ENT], [ENT] and The [ENT]?",
        "entity": [
            "Arlington County",
            "Virginia",
            "Pentagon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2491",
        "question": "Name all the products produced by the producer of United States dollar ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/United_States_dollar> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "SExpr": "(JOIN (R dbo:product) (JOIN dbo:product dbr:United_States_dollar)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name all the products",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "produced by [IQ1]",
                    "start": 22,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the producer of United States dollar",
                                "start": 34,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS products)) (VP (VBN produced) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NML (NNP United) (NNPS States)) (NN dollar)))))))) (. ?)))",
        "mask_entity": "Name all the products produced by the producer of [ENT] dollar ?",
        "entity": [
            "United States"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3854",
        "question": "What is the launch site of Aquarius (rocket) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?uri } ",
        "SExpr": "(JOIN (R dbo:launchSite) dbr:Aquarius_(rocket))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (NNP Aquarius) (-LRB- () (NN rocket) (-RRB- ))))))) (. ?)))",
        "mask_entity": "What is the launch site of [ENT] (rocket) ?",
        "entity": [
            "Aquarius"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1715",
        "question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . }",
        "SExpr": "(AND (JOIN dbo:formerTeam dbr:Carolina_Panthers) (JOIN dbo:formerTeam dbr:Indianapolis_Colts))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the players",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "whose former teams are Carolina Panthers and Indianapolis Colts",
                    "start": 21,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ former) (NNS teams)) (S (VP (VBP are) (NP (NP (NNP Carolina) (NNPS Panthers)) (CC and) (NP (NNP Indianapolis) (NNPS Colts))))))))) (. ?)))",
        "mask_entity": "What are the players whose former teams are [ENT] and [ENT]?",
        "entity": [
            "Carolina Panthers",
            "Indianapolis Colts"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1148",
        "question": "Count the  total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> } ",
        "SExpr": "(AND (JOIN dbo:phylum dbr:Chordate) (JOIN dbo:order dbr:Diprotodontia))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the total number of mammals",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "whose phylum is Chordate",
                    "start": 34,
                    "end": 58
                },
                {
                    "description": "and order (taxonomy) is Diprotodontia",
                    "start": 59,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS mammals)) (SBAR (WHNP (WP$ whose) (NN phylum)) (S (VP (VBZ is) (NP (NN Chordate)))))))))) (CC and) (S (NP (NN order) (-LRB- () (NN taxonomy) (-RRB- ))) (VP (VBZ is) (NP (NNP Diprotodontia)))) (. ?)))",
        "mask_entity": "Count the  total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3261",
        "question": "Who is the music composer of Kenny Dies ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri } ",
        "SExpr": "(JOIN (R dbo:musicComposer) dbr:Kenny_Dies)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN music) (NN composer)) (PP (IN of) (NP (NNP Kenny) (VBZ Dies)))))) (. ?)))",
        "mask_entity": "Who is the music composer of [ENT] ?",
        "entity": [
            "Kenny Dies"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "574",
        "question": "How many cities are around the sea into which the aegean sea flows?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(JOIN (R dbp:cities) (AND dbo:Sea (JOIN (R dbo:outflow) dbr:Aegean_Sea))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many cities",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are around [IQ1]",
                    "start": 16,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sea",
                                "start": 27,
                                "end": 34
                            },
                            {
                                "description": "into which the aegean sea flows",
                                "start": 35,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cities)) (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (DT the) (JJ aegean) (NN sea)) (VP (VBZ flows)))))))) (. ?)))",
        "mask_entity": "How many cities are around the sea into which the aegean sea flows?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3769",
        "question": "Where did the office holder  who is predecessor to Marco Aurelio Robles died ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(JOIN (R dbp:placeOfDeath) (AND dbo:OfficeHolder (JOIN dbp:predecessor dbr:Marco_Aurelio_Robles))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] died",
                    "start": 0,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the office holder",
                                "start": 10,
                                "end": 27
                            },
                            {
                                "description": "who is predecessor to Marco Aurelio Robles",
                                "start": 28,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (S (NP (NP (NN predecessor)) (PP (IN to) (NP (NNP Marco) (NNP Aurelio) (NNP Robles)))) (VP (VBD died)))))))) (. ?)))",
        "mask_entity": "Where did the office holder  who is predecessor to [ENT] died ?",
        "entity": [
            "Marco Aurelio Robles"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3736",
        "question": "Who is associated  with the musical artists from Africa '70 (band) and Tony Allen ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(AND dbo:MusicalArtist (AND (JOIN dbo:associatedMusicalArtist dbr:Africa_'70_(band)) (JOIN dbo:associatedMusicalArtist dbr:Tony_Allen_(musician))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is associated with the musical artists from Africa '70 (band) and Tony Allen",
                    "start": 0,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (JJ musical) (NNS artists)) (PP (IN from) (NP (NP (NP (NNP Africa) (POS ')) (CD 70) (-LRB- () (NN band) (-RRB- ))) (CC and) (NP (NNP Tony) (NNP Allen))))))))) (. ?)))",
        "mask_entity": "Who is associated  with the musical artists from [ENT] '[ENT] (band) and [ENT] ?",
        "entity": [
            "Africa",
            "70",
            "Tony Allen"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4146",
        "question": "Is the Hyundai Lavita assembled in Kulim?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai) (NNP Lavita)) (VP (VBN assembled) (PP (IN in) (NP (NNP Kulim)))) (. ?)))",
        "mask_entity": "Is [ENT] assembled in [ENT]?",
        "entity": [
            "the Hyundai Lavita",
            "Kulim"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "853",
        "question": "What is the programme format of WWTR ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WWTR> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "SExpr": "(JOIN (R dbo:programmeFormat) dbr:WWTR)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN programme) (NN format)) (PP (IN of) (NP (NNP WWTR)))))) (. ?)))",
        "mask_entity": "What is the programme format of [ENT] ?",
        "entity": [
            "WWTR"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1982",
        "question": "list the founders of Bream Bay ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/property/founder> ?uri } ",
        "SExpr": "(JOIN (R dbp:founder) dbr:Bream_Bay)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB list) (NP (NP (DT the) (NNS founders)) (PP (IN of) (NP (NNP Bream) (NNP Bay))))) (. ?)))",
        "mask_entity": "list the founders of [ENT] ?",
        "entity": [
            "Bream Bay"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2774",
        "question": "Is Essex the Ceremonial County of West Tilbury?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Essex)) (NP (NP (DT the) (NNP Ceremonial) (NNP County)) (PP (IN of) (NP (NNP West) (NNP Tilbury)))) (. ?)))",
        "mask_entity": "Is [ENT] of [ENT]?",
        "entity": [
            "Essex the Ceremonial County",
            "West Tilbury"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1166",
        "question": "What is the total number of participant in conflict of SFOR?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
        "SExpr": "(JOIN (R dbo:battle) (JOIN dbp:battles dbr:SFOR)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of participant in [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "conflict of SFOR",
                                "start": 43,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NN participant))) (PP (IN in) (NP (NP (NN conflict)) (PP (IN of) (NP (NNP SFOR)))))))) (. ?)))",
        "mask_entity": "What is the total number of participant in conflict of SFOR?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "971",
        "question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Alexius_Meinong> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:academicAdvisor (JOIN dbp:doctoralStudents dbr:Alexius_Meinong))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose academic advisor [IQ1]",
                    "start": 16,
                    "end": 86,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has also mentored the thesis of Alexius Meinong",
                                "start": 39,
                                "end": 86
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ has) (ADVP (RB also)) (VP (VBN mentored) (NP (NP (DT the) (NN thesis)) (PP (IN of) (NP (NNP Alexius) (NNP Meinong)))))))))) (. ?)))",
        "mask_entity": "Name the people whose academic advisor has also mentored the thesis of [ENT]?",
        "entity": [
            "Alexius Meinong"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2701",
        "question": "Where is Denver Broncos located ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri } ",
        "SExpr": "(JOIN (R dbo:locationCity) dbr:Denver_Broncos)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Denver) (NNP Broncos)) (VP (VBN located))) (. ?)))",
        "mask_entity": "Where is [ENT] [ENT] located ?",
        "entity": [
            "Denver",
            "Broncos"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4495",
        "question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:homeport) dbr:INS_Viraat_(R22)) (JOIN (R dbo:servingRailwayLine) dbr:Daund_Junction_railway_station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which serving railway line of the Daund Junction railway station",
                    "start": 0,
                    "end": 64
                },
                {
                    "description": "is the home port of INS Viraat",
                    "start": 65,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (VBG serving) (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NML (NNP Daund) (NNP Junction)) (NN railway) (NN station)))) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN home) (NN port)) (PP (IN of) (NP (NNP INS) (NNP Viraat))))) (. ?)))",
        "mask_entity": "Which serving railway line of the [ENT] railway station is the home port of [ENT] ?",
        "entity": [
            "Daund Junction",
            "INS Viraat"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3847",
        "question": "Which river flows through Hudson Highlands State park and also through Troy, New york ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri. <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/ontology/river> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:river) dbr:Hudson_Highlands_State_Park) (JOIN (R dbo:river) dbr:Troy,_New_York))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which river",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "flows through Hudson Highlands State park",
                    "start": 12,
                    "end": 53
                },
                {
                    "description": "and also through Troy, New York",
                    "start": 54,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ flows) (PP (PP (IN through) (NP (NML (NML (NNP Hudson) (NNPS Highlands)) (NNP State)) (NN park))) (CC and) (ADVP (RB also)) (PP (IN through) (NP (NP (NNP Troy)) (, ,) (NP (NNP New) (NNP york))))))) (. ?)))",
        "mask_entity": "Which river flows through [ENT] park and also through [ENT], [ENT] ?",
        "entity": [
            "Hudson Highlands State",
            "Troy",
            "New york"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2368",
        "question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:institution) dbr:Erica_Frank) (JOIN (R dbo:managerClub) dbr:Ivan_Toplak))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the university",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "to which Erica Frank went,",
                    "start": 23,
                    "end": 49
                },
                {
                    "description": "and where Ivan Toplak was a club manager",
                    "start": 50,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (WHPP (IN to) (WHNP (WDT which))) (S (NP (NNP Erica) (NNP Frank)) (VP (VBD went)))))))) (, ,) (CC and) (SBAR (WHADVP (WRB where)) (S (NP (NNP Ivan) (NNP Toplak)) (VP (VBD was) (NP (DT a) (NN club) (NN manager))))) (. ?)))",
        "mask_entity": "What is the university to which [ENT] went, and where [ENT] was a club manager?",
        "entity": [
            "Erica Frank",
            "Ivan Toplak"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4115",
        "question": "How many movies have been directed by Orson Welles ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:director dbr:Orson_Welles))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been directed by Orson Welles",
                    "start": 16,
                    "end": 50
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN directed) (PP (IN by) (NP (NNP Orson) (NNP Welles))))))) (. ?)))",
        "mask_entity": "How many movies have been directed by [ENT] ?",
        "entity": [
            "Orson Welles"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4131",
        "question": "Which borough is common for Duddeston and Bordesley railway station ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:borough) dbr:Duddeston_railway_station) (JOIN (R dbp:borough) dbr:Bordesley_railway_station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which borough is common for Duddeston and Bordesley railway station",
                    "start": 0,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN borough)) (SQ (VP (VBZ is) (ADJP (JJ common)) (PP (IN for) (NP (NML (NNP Duddeston) (CC and) (NNP Bordesley)) (NN railway) (NN station))))) (. ?)))",
        "mask_entity": "Which borough is common for [ENT] and [ENT] railway station ?",
        "entity": [
            "Duddeston",
            "Bordesley"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2950",
        "question": "Does Mauritius follow a parliamentary republic?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Mauritius)) (VP (VB follow) (NP (DT a) (JJ parliamentary) (NN republic))) (. ?)))",
        "mask_entity": "Does [ENT] follow a parliamentary republic?",
        "entity": [
            "Mauritius"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "524",
        "question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
        "SExpr": "(JOIN (R dbo:artist) (JOIN dbo:subsequentWork dbr:Willie_Nelson_and_Family)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the performer of [IQ1]",
                    "start": 0,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the album",
                                "start": 24,
                                "end": 33
                            },
                            {
                                "description": "whose subsequent work is Willie Nelson and Family",
                                "start": 34,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN performer)) (PP (IN of) (NP (DT the) (NN album)))) (SBAR (WHNP (WP$ whose) (JJ subsequent) (NN work)) (S (VP (VBZ is) (NP (NP (NNP Willie) (NNP Nelson)) (CC and) (NP (NNP Family))))))))) (. ?)))",
        "mask_entity": "Who is the performer of the album whose subsequent work is [ENT] and Family ?",
        "entity": [
            "Willie Nelson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2455",
        "question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Fernando_Augustin> <http://dbpedia.org/property/residence> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:birthPlace) dbr:Ludovic_Boi) (JOIN (R dbp:residence) dbr:Fernando_Augustin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the birthplace of Ludovic Boi",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "which is also the residence of Fernando Augustin",
                    "start": 38,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NNP Ludovic) (NNP Boi)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN residence)) (PP (IN of) (NP (NNP Fernando) (NNP Augustin)))))))))) (. ?)))",
        "mask_entity": "What is the birthplace of [ENT] which is also the residence of [ENT]?",
        "entity": [
            "Ludovic Boi",
            "Fernando Augustin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1841",
        "question": "Who is the producer of album, which has the song Eclipse ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eclipse_(song)> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(JOIN (R dbp:producer) (AND dbo:Album (JOIN (R dbo:album) dbr:Eclipse_(song)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the producer of [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "album,",
                                "start": 23,
                                "end": 29
                            },
                            {
                                "description": "which has the song Eclipse",
                                "start": 30,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NN album)))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT the) (NN song)) (NP (NNP Eclipse))))))))) (. ?)))",
        "mask_entity": "Who is the producer of album, which has the song [ENT] ?",
        "entity": [
            "Eclipse"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "537",
        "question": "Which parties have their members live in the PM House, Colombo?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "SExpr": "(AND dbo:PoliticalParty (JOIN dbo:leader (JOIN dbp:residence dbr:Prime_Minister's_House_(Colombo)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which parties",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "have their members [IQ1]",
                    "start": 14,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "live in the PM House, Colombo",
                                "start": 33,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS parties)) (SQ (VBP have) (NP (PRP$ their) (NNS members)) (VP (VB live) (PP (IN in) (NP (NP (DT the) (NN PM) (NNP House)) (, ,) (NP (NNP Colombo)))))) (. ?)))",
        "mask_entity": "Which parties have their members live in [ENT], [ENT]?",
        "entity": [
            "the PM House",
            "Colombo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2806",
        "question": "Which awards have been given to scientists that graduated from NKU athens?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbo:award) (AND dbo:Scientist (JOIN dbo:almaMater dbr:National_and_Kapodistrian_University_of_Athens))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which awards",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 13,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "scientists",
                                "start": 32,
                                "end": 42
                            },
                            {
                                "description": "that graduated from NKU athens",
                                "start": 43,
                                "end": 73
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (NNS scientists)) (SBAR (WHNP (WDT that)) (S (VP (VBD graduated) (PP (IN from) (NP (NNP NKU) (NNP athens)))))))))))) (. ?)))",
        "mask_entity": "Which awards have been given to scientists that graduated from [ENT] athens?",
        "entity": [
            "NKU"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4341",
        "question": "Ricky Gervais is the executive producer of the series having how many fictional characters?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:series (JOIN dbo:executiveProducer dbr:Ricky_Gervais))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] having how many fictional characters",
                    "start": 0,
                    "end": 90,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Ricky Gervais is the executive producer of the series",
                                "start": 0,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Ricky) (NNP Gervais)) (VP (VBZ is) (NP (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (DT the) (NN series)))) (VP (VBG having) (NP (WHADJP (WRB how) (JJ many)) (JJ fictional) (NNS characters))))) (. ?)))",
        "mask_entity": "[ENT] is the executive producer of the series having how many fictional characters?",
        "entity": [
            "Ricky Gervais"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3175",
        "question": "Did Jerry Rice study in Oktoc Mississippi?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Did)) (NP (NNP Jerry) (NNP Rice)) (VP (VB study) (PP (IN in) (NP (NNP Oktoc) (NNP Mississippi)))) (. ?)))",
        "mask_entity": "Did [ENT] study in [ENT] [ENT]?",
        "entity": [
            "Jerry Rice",
            "Oktoc",
            "Mississippi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "784",
        "question": "Cable stayed bridges have been used to cross over how many things?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "SExpr": "(JOIN (R dbp:crosses) (JOIN dbp:design dbr:Cable-stayed_bridge)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have been used to cross over",
                    "start": 0,
                    "end": 34,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Cable stayed bridges",
                                "start": 0,
                                "end": 20
                            }
                        ]
                    }
                },
                {
                    "description": "how many things",
                    "start": 35,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Cable) (VBD stayed) (NNS bridges)) (VP (VBP have) (VP (VBN been) (VP (VBN used) (S (VP (TO to) (VP (VB cross) (PP (IN over) (SBAR (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)) (. ?)))))))))))",
        "mask_entity": "Cable stayed bridges have been used to cross over how many things?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4057",
        "question": "Is north caucasian emirate have an islamic government?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Islam> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (JJ north) (JJ caucasian) (NN emirate)) (VP (VB have) (NP (DT an) (JJ islamic) (NN government))) (. ?)))",
        "mask_entity": "Is north caucasian emirate have an islamic government?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1409",
        "question": "What are the television shows whose starting music is composed by Ron Grainer?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:themeMusicComposer dbr:Ron_Grainer))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the television shows",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose starting music is composed by Ron Grainer",
                    "start": 30,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN starting) (NN music)) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer)))))))))) (. ?)))",
        "mask_entity": "What are the television shows whose starting music is composed by [ENT]?",
        "entity": [
            "Ron Grainer"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2537",
        "question": "Who influenced the author of The Shooting of Dan McGrew ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/influences> ?uri  . }",
        "SExpr": "(JOIN (R dbp:influences) (JOIN (R dbo:writer) dbr:The_Shooting_of_Dan_McGrew_(1924_film))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who influenced [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the author of The Shooting of Dan McGrew",
                                "start": 15,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD influenced) (NP (NP (DT the) (NN author)) (PP (IN of) (NP (NP (DT The) (NN Shooting)) (PP (IN of) (NP (NNP Dan) (NNP McGrew)))))))) (. ?)))",
        "mask_entity": "Who influenced the author of [ENT] ?",
        "entity": [
            "The Shooting of Dan McGrew"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "154",
        "question": "Raymond Johansen is the mayor of what city?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen>  . }",
        "SExpr": "(JOIN dbo:leaderName dbr:Raymond_Johansen)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Raymond) (NNP Johansen)) (VP (VBZ is) (NP (NP (DT the) (NN mayor)) (PP (IN of) (SBAR (WHNP (WDT what) (NN city)) (. ?)))))))",
        "mask_entity": "[ENT] is the mayor of what city?",
        "entity": [
            "Raymond Johansen"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3009",
        "question": "What region was Gloria Schaffer born in, which also contains Newington?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Newington,_Connecticut> <http://dbpedia.org/ontology/isPartOf> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:birthPlace) dbr:Gloria_Schaffer) (JOIN (R dbo:isPartOf) dbr:Newington,_Connecticut))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What region",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "was Gloria Schaffer born in,",
                    "start": 12,
                    "end": 40
                },
                {
                    "description": "which also contains Newington",
                    "start": 41,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBAR (SBARQ (WHNP (WDT What) (NN region)) (SQ (VBD was) (NP (NNP Gloria) (NNP Schaffer)) (VP (VBN born) (PRT (IN in))))) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBZ contains) (NP (NNP Newington))))) (. ?)))",
        "mask_entity": "What region was [ENT] born in, which also contains [ENT]?",
        "entity": [
            "Gloria Schaffer",
            "Newington"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1686",
        "question": "List some teams for which someone who has played as a defender, now plays?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "SExpr": "(JOIN (R dbo:team) (JOIN dbp:position dbr:Defenceman)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List some teams",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "for which [IQ1] now plays",
                    "start": 16,
                    "end": 73,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "someone",
                                "start": 26,
                                "end": 33
                            },
                            {
                                "description": "who has played as a defender,",
                                "start": 34,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT some) (NNS teams)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN played) (PP (IN as) (NP (DT a) (NN defender)))))))) (, ,) (ADVP (RB now)) (VP (VBZ plays)))))) (. ?)))",
        "mask_entity": "List some teams for which someone who has played as a defender, now plays?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2901",
        "question": "Which rivers start from the Provinces of Zambia?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:sourceRegion (JOIN dbp:settlementType dbr:Provinces_of_Zambia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which rivers",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "start from [IQ1]",
                    "start": 13,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the Provinces of Zambia",
                                "start": 24,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP start) (PP (IN from) (NP (NP (DT the) (NNPS Provinces)) (PP (IN of) (NP (NNP Zambia))))))) (. ?)))",
        "mask_entity": "Which rivers start from [ENT]?",
        "entity": [
            "the Provinces of Zambia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4949",
        "question": "Who are the scientists known for the Manhattan Project?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:knownFor dbr:Manhattan_Project))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who are the scientists",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "known for the Manhattan Project",
                    "start": 23,
                    "end": 54
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS scientists)) (VP (VBN known) (PP (IN for) (NP (DT the) (NNP Manhattan) (NNP Project))))))) (. ?)))",
        "mask_entity": "Who are the scientists known for [ENT]?",
        "entity": [
            "the Manhattan Project"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3863",
        "question": "What are some dishes from the family of dishes which primarily use flour?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> . ?uri <http://dbpedia.org/ontology/type> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "SExpr": "(AND dbo:Food (JOIN dbo:type (JOIN dbp:mainIngredient dbr:Flour))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some dishes",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "from the family of [IQ1]",
                    "start": 21,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "dishes",
                                "start": 40,
                                "end": 46
                            },
                            {
                                "description": "which primarily use flour",
                                "start": 47,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS dishes)) (PP (IN from) (NP (NP (DT the) (NN family)) (PP (IN of) (NP (NP (NNS dishes)) (SBAR (WHNP (WDT which)) (S (ADVP (RB primarily)) (VP (VBP use) (NP (NN flour)))))))))))) (. ?)))",
        "mask_entity": "What are some dishes from the family of dishes which primarily use flour?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2733",
        "question": "Which religion do the people follow, whose constituency is Jadavpur?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:religion) (AND dbo:Person (JOIN dbp:constituency dbr:Jadavpur_(Lok_Sabha_constituency)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which religion do the people follow,",
                    "start": 0,
                    "end": 36
                },
                {
                    "description": "[IQ1]",
                    "start": 37,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose constituency is Jadavpur",
                                "start": 37,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT Which) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS people)) (VP (VB follow)))) (, ,) (WHNP (WP$ whose) (NN constituency)) (SQ (VP (VBZ is) (NP (NNP Jadavpur)))) (. ?)))",
        "mask_entity": "Which religion do the people follow, whose constituency is [ENT]?",
        "entity": [
            "Jadavpur"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1895",
        "question": "In which region is the rival school of Somerset, Massachusetts located?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:region) (AND dbo:School (JOIN dbp:rival dbr:Somerset,_Massachusetts))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which region",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "is [IQ1] located",
                    "start": 16,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rival school of Somerset, Massachusetts",
                                "start": 19,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN region)) (VP (VBZ is) (NP (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NP (NNP Somerset)) (, ,) (NP (NNP Massachusetts))))) (VP (VBN located))))) (. ?)))",
        "mask_entity": "In which region is the rival school of [ENT], [ENT] located?",
        "entity": [
            "Somerset",
            "Massachusetts"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "569",
        "question": "Which key person of Clinton Foundation is also the president of Jim Sasser ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:keyPeople) dbr:Clinton_Foundation) (JOIN (R dbo:president) dbr:Jim_Sasser))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which key person of Clinton Foundation",
                    "start": 0,
                    "end": 38
                },
                {
                    "description": "is also the president of Jim Sasser",
                    "start": 39,
                    "end": 74
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ key) (NN person)) (PP (IN of) (NP (NNP Clinton) (NNP Foundation)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Jim) (NNP Sasser))))) (. ?)))",
        "mask_entity": "Which key person of [ENT] is also the president of [ENT] ?",
        "entity": [
            "Clinton Foundation",
            "Jim Sasser"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1816",
        "question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "SExpr": "(JOIN (R dbp:debutteam) (AND dbo:Athlete (JOIN dbo:highschool dbr:Red_Lion_Area_School_District))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the athlete start his career,",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "[IQ1]",
                    "start": 40,
                    "end": 95,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who did his highschool in Red Lion Area School District",
                                "start": 40,
                                "end": 95
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN athlete)) (VP (VB start) (NP (NP (PRP$ his) (NN career)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD did) (NP (NP (PRP$ his) (NN highschool)) (PP (IN in) (NP (NML (NNP Red) (NNP Lion)) (NNP Area) (NNP School) (NNP District)))))))))) (. ?)))",
        "mask_entity": "Where did the athlete start his career, who did his highschool in [ENT]?",
        "entity": [
            "Red Lion Area School District"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2065",
        "question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (AND (JOIN dbp:employer dbr:Open_Society_Foundations) (JOIN dbp:spouse dbr:Susan_Weber_Soros)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a person",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "who works in Open Society Foundation",
                    "start": 14,
                    "end": 50
                },
                {
                    "description": "and has wife named Susan Weber Soros",
                    "start": 51,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ works) (PP (IN in) (NP (NNP Open) (NNP Society) (NNP Foundation)))) (CC and) (VP (VBZ has) (NP (NP (NN wife)) (VP (VBN named) (S (NP (NNP Susan) (NNP Weber) (NNP Soros))))))))))) (. ?)))",
        "mask_entity": "Name a person who works in [ENT] and has wife named [ENT] ?",
        "entity": [
            "Open Society Foundation",
            "Susan Weber Soros"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "127",
        "question": "How many things are crossed over by bridges which can carry cars?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "SExpr": "(JOIN (R dbp:crosses) (JOIN dbp:carries dbr:Motor_vehicle)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many things",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are crossed over by [IQ1]",
                    "start": 16,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "bridges",
                                "start": 36,
                                "end": 43
                            },
                            {
                                "description": "which can carry cars",
                                "start": 44,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP are) (VP (VBN crossed) (PRT (RP over)) (PP (IN by) (NP (NP (NNS bridges)) (SBAR (WHNP (WDT which)) (S (VP (MD can) (VP (VB carry) (NP (NNS cars))))))))))) (. ?)))",
        "mask_entity": "How many things are crossed over by bridges which can carry cars?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3394",
        "question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3 ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbp:creator dbr:Josh_Friedman) (JOIN dbo:portrayer dbr:Terminator_3:_Rise_of_the_Machines)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which fictional character",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "sculpted by Josh Friedmann",
                    "start": 26,
                    "end": 52
                },
                {
                    "description": "was portrayed in Terminator 3",
                    "start": 53,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ fictional) (NN character)) (SQ (VP (VBN sculpted) (PP (IN by) (NP (NNP Josh) (NNP Friedmann)))))) (S (VP (VBD was) (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 3)))))) (. ?)))",
        "mask_entity": "Which fictional character sculpted by [ENT] was portrayed in Terminator [ENT] ?",
        "entity": [
            "Josh Friedmann",
            "3"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3327",
        "question": "Which team won the American Football League?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?uri } ",
        "SExpr": "(JOIN (R dbp:champion) dbr:American_Football_League)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN team)) (S (VP (VBD won) (NP (DT the) (NNP American) (NNP Football) (NNP League)))) (. ?)))",
        "mask_entity": "Which team won [ENT]?",
        "entity": [
            "the American Football League"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4986",
        "question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:currency) dbr:French_Southern_and_Antarctic_Lands) (JOIN (R dbo:currency) dbr:Kerguelen_Islands))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which currency",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "can I use both in Kerguelen islands and French southern and antarctic lands",
                    "start": 15,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN currency)) (SQ (MD can) (NP (PRP I)) (VP (VB use) (DT both) (PP (IN in) (NP (NP (NNP Kerguelen) (NNS islands)) (CC and) (NP (JJ French) (ADJP (JJ southern) (CC and) (JJ antarctic)) (NNS lands)))))) (. ?)))",
        "mask_entity": "Which currency can I use both in [ENT] islands and [ENT] southern and antarctic lands?",
        "entity": [
            "Kerguelen",
            "French"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2975",
        "question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TradeUnion>}",
        "SExpr": "(JOIN (R dbp:founded) (AND dbo:TradeUnion (JOIN (R dbo:affiliation) dbr:Amalgamated_Association_of_Iron_and_Steel_Workers))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the founder of [IQ1]",
                    "start": 0,
                    "end": 104,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the trade union",
                                "start": 22,
                                "end": 37
                            },
                            {
                                "description": "which affiliates Amalgamated Association of Iron and Steel Workers",
                                "start": 38,
                                "end": 104
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NP (DT the) (NN trade) (NN union)) (SBAR (WHNP (WDT which)) (S (VP (VBZ affiliates) (NP (NP (VBN Amalgamated) (NNP Association)) (PP (IN of) (NP (NP (NNP Iron)) (CC and) (NP (NNP Steel) (NNPS Workers))))))))))))) (. ?)))",
        "mask_entity": "Who is the founder of the trade union which affiliates [ENT]?",
        "entity": [
            "Amalgamated Association of Iron and Steel Workers"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "980",
        "question": "Which leader of United States House of Representatives was the appinter of ohn Drayton ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:leader) dbr:United_States_House_of_Representatives_elections,_1788_and_1789) (JOIN (R dbp:appointer) dbr:John_Drayton))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which leader of United States House of Representatives",
                    "start": 0,
                    "end": 54
                },
                {
                    "description": "was the appointer of ohn Drayton",
                    "start": 55,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN leader)) (PP (IN of) (NP (NP (NML (NNP United) (NNPS States)) (NNP House)) (PP (IN of) (NP (NNPS Representatives)))))) (SQ (VP (VBD was) (NP (NP (DT the) (NN appinter)) (PP (IN of) (NP (NNP ohn) (NNP Drayton)))))) (. ?)))",
        "mask_entity": "Which leader of [ENT] [ENT] was the appinter of ohn [ENT] ?",
        "entity": [
            "United States",
            "House of Representatives",
            "Drayton"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2300",
        "question": "Is fox belong to the phylum of Chordate?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP fox)) (VP (VB belong) (PP (IN to) (NP (NP (DT the) (NN phylum)) (PP (IN of) (NP (NNP Chordate)))))) (. ?)))",
        "mask_entity": "Is fox belong to the phylum of Chordate?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "190",
        "question": "Which researchers received fellowship from Royal Society?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbo:award dbr:Royal_Society))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which researchers",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "received fellowship from Royal Society",
                    "start": 18,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS researchers)) (S (VP (VBD received) (NP (NN fellowship)) (PP (IN from) (NP (NNP Royal) (NNP Society))))) (. ?)))",
        "mask_entity": "Which researchers received fellowship from [ENT]?",
        "entity": [
            "Royal Society"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1139",
        "question": "Which president of United States had vice president as John Adams?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbo:vicePresident dbr:John_Adams))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which president of United States",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "had vice president as John Adams",
                    "start": 33,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN president)) (PP (IN of) (NP (NNP United) (NNPS States)))) (SQ (VP (VBD had) (NP (NP (JJ vice) (NN president)) (PP (IN as) (NP (NNP John) (NNP Adams)))))) (. ?)))",
        "mask_entity": "Which president of [ENT] had vice president as [ENT]?",
        "entity": [
            "United States",
            "John Adams"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "699",
        "question": "Where was James H. Fields buried ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?uri } ",
        "SExpr": "(JOIN (R dbp:placeofburial) dbr:James_H._Fields)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP James) (NNP H.) (NNPS Fields)) (VP (VBN buried))) (. ?)))",
        "mask_entity": "Where was [ENT] buried ?",
        "entity": [
            "James H. Fields"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4780",
        "question": "Is Henry Knox a commander of Continental Artillery Regiment?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Henry) (NNP Knox)) (NP (NP (DT a) (NN commander)) (PP (IN of) (NP (NNP Continental) (NNP Artillery) (NNP Regiment)))) (. ?)))",
        "mask_entity": "Is [ENT] a commander of [ENT]?",
        "entity": [
            "Henry Knox",
            "Continental Artillery Regiment"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "606",
        "question": "What is the commander of Battle of Brownstown ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri } ",
        "SExpr": "(JOIN (R dbo:commander) dbr:Battle_of_Brownstown)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN commander)) (PP (IN of) (NP (NP (NNP Battle)) (PP (IN of) (NP (NNP Brownstown)))))))) (. ?)))",
        "mask_entity": "What is the commander of [ENT] ?",
        "entity": [
            "Battle of Brownstown"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4276",
        "question": "Is Baker's Dozen Donuts in the coffee industry?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (NNP Baker) (POS 's)) (NNP Dozen) (NNPS Donuts)) (PP (IN in) (NP (DT the) (NN coffee) (NN industry))) (. ?)))",
        "mask_entity": "Is [ENT] in the coffee industry?",
        "entity": [
            "Baker's Dozen Donuts"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "301",
        "question": "What is Jon Speelman famous for?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri } ",
        "SExpr": "(JOIN (R dbo:field) dbr:Jon_Speelman)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NNP Jon) (NNP Speelman)) (ADJP (JJ famous) (PP (IN for)))))) (. ?)))",
        "mask_entity": "What is [ENT] famous for?",
        "entity": [
            "Jon Speelman"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3420",
        "question": "Who is the fictional character whose family member is Padme Amidala?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbp:family dbr:Padm\u00e9_Amidala))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the fictional character",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "whose family member is Padme Amidala",
                    "start": 31,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN family) (NN member)) (S (VP (VBZ is) (NP (NNP Padme) (NNP Amidala)))))))) (. ?)))",
        "mask_entity": "Who is the fictional character whose family member is [ENT]?",
        "entity": [
            "Padme Amidala"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4820",
        "question": "What company is the one which wrote the google web toolkit and PlayN?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:author) dbr:Google_Web_Toolkit) (JOIN (R dbo:author) dbr:PlayN))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What company",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "is the one which wrote the google web toolkit and PlayN",
                    "start": 13,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN company)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN one)) (SBAR (WHNP (WDT which)) (S (VP (VBD wrote) (NP (NP (DT the) (NML (NNP google) (NN web)) (NN toolkit)) (CC and) (NP (NNP PlayN))))))))) (. ?)))",
        "mask_entity": "What company is the one which wrote the google web toolkit and [ENT]?",
        "entity": [
            "PlayN"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1060",
        "question": "How many different songwriters have had their songs recorded in London?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:writer) (JOIN dbo:recordedIn dbr:London)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many different songwriters",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "have had their songs [IQ1]",
                    "start": 31,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "recorded in London",
                                "start": 52,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ different) (NNS songwriters)) (VP (VBP have) (VP (VBN had) (S (NP (PRP$ their) (NNS songs)) (VP (VBN recorded) (PP (IN in) (NP (NNP London)))))))) (. ?)))",
        "mask_entity": "How many different songwriters have had their songs recorded in [ENT]?",
        "entity": [
            "London"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2565",
        "question": "Which are the  automobile platform whose one of the automobile platform is Dodge ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbo:automobilePlatform) (AND dbo:Automobile (JOIN dbo:automobilePlatform dbr:Dodge))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which are the automobile platform",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "[IQ1]",
                    "start": 34,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose one of the automobile platform is Dodge",
                                "start": 34,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBP are) (NP (NP (DT the) (NN automobile) (NN platform)) (SBAR (WHNP (WHNP (WP$ whose) (CD one)) (PP (IN of) (NP (DT the) (NN automobile) (NN platform)))) (S (VP (VBZ is) (NP (NNP Dodge)))))))) (. ?)))",
        "mask_entity": "Which are the  automobile platform whose one of the automobile platform is [ENT] ?",
        "entity": [
            "Dodge"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4994",
        "question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> . ?x <http://dbpedia.org/property/combatant> ?uri }",
        "SExpr": "(JOIN (R dbp:combatant) (JOIN dbp:combatant dbr:Choctaw)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of other combatant of [IQ1]",
                    "start": 0,
                    "end": 96,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the military conflicts",
                                "start": 47,
                                "end": 69
                            },
                            {
                                "description": "whose combatant is Choctaw",
                                "start": 70,
                                "end": 96
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN combatant)) (PP (IN of) (NP (NP (DT the) (JJ military) (NNS conflicts)) (SBAR (WHNP (WP$ whose) (NN combatant)) (S (VP (VBZ is) (NP (NNP Choctaw)))))))))))) (. ?)))",
        "mask_entity": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1069",
        "question": "List some pupils of National Science Medal winning scientists?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbp:doctoralStudents) (AND dbo:Scientist (JOIN dbp:prizes dbr:National_Medal_of_Science))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List some pupils of [IQ1]",
                    "start": 0,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "National Science Medal winning scientists",
                                "start": 20,
                                "end": 61
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT some) (NNS pupils)) (PP (IN of) (NP (NNP National) (NNP Science) (NNP Medal)))) (S (VP (VBG winning) (NP (NNS scientists))))) (. ?)))",
        "mask_entity": "List some pupils of National Science Medal winning scientists?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2524",
        "question": "Relatives of Moses used to follow which religions?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/veneratedIn> ?uri  . }",
        "SExpr": "(JOIN (R dbo:veneratedIn) (JOIN (R dbo:relative) dbr:Moses)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] used to follow",
                    "start": 0,
                    "end": 20,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Relatives of Moses",
                                "start": 0,
                                "end": 18
                            }
                        ]
                    }
                },
                {
                    "description": "which religions",
                    "start": 21,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS Relatives)) (PP (IN of) (NP (NNPS Moses)))) (VP (VBD used) (S (VP (TO to) (VP (VB follow) (SBAR (WHNP (WDT which) (NNS religions)) (. ?))))))))",
        "mask_entity": "Relatives of [ENT] used to follow which religions?",
        "entity": [
            "Moses"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2205",
        "question": "Where was Ne daj se, Nina first aired ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri } ",
        "SExpr": "(JOIN (R dbp:firstAired) dbr:Ne_daj_se,_Nina)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (SBAR (WHADVP (WRB Where)) (S (VP (VBD was) (NP (NNP Ne) (NN daj) (NN se))))) (, ,) (NP (NNP Nina)) (ADVP (RB first)) (VP (VBD aired)) (. ?)))",
        "mask_entity": "Where was [ENT], [ENT] [ENT] aired ?",
        "entity": [
            "Ne daj se",
            "Nina",
            "first"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1243",
        "question": "Where did the 2015 MLS All-Star Game take place?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri } ",
        "SExpr": "(JOIN (R dbp:city) dbr:2015_MLS_All-Star_Game)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (CD 2015) (NML (NNP MLS) (DT All) (HYPH -) (NNP Star)) (NN Game)) (VP (VB take) (NP (NN place)))) (. ?)))",
        "mask_entity": "Where did the [ENT] [ENT] take place?",
        "entity": [
            "2015",
            "MLS All-Star Game"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "16",
        "question": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Nikolai) (NNP Morozov)) (NP (NP (DT the) (JJ former) (NN coach)) (PP (IN of) (NP (NNP Stanislav) (NNP Morozov)))) (. ?)))",
        "mask_entity": "Is [ENT] the former coach of [ENT]?",
        "entity": [
            "Nikolai Morozov",
            "Stanislav Morozov"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3120",
        "question": "Did Alexandre Tichonov study at the Moscow university?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Moscow> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Did)) (NP (NNP Alexandre) (NNP Tichonov)) (VP (VB study) (PP (IN at) (NP (DT the) (NNP Moscow) (NN university)))) (. ?)))",
        "mask_entity": "Did [ENT] study at the [ENT] university?",
        "entity": [
            "Alexandre Tichonov",
            "Moscow"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4642",
        "question": "What is the name of the homeground of football team Panionios G.S.S.?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri } ",
        "SExpr": "(JOIN (R dbo:ground) dbr:2013\u201314_Panionios_G.S.S._season)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN homeground)) (PP (IN of) (NP (NML (NN football) (NN team)) (NNP Panionios) (NNP G.S.S)))))))) (. .?)))",
        "mask_entity": "What is the name of the homeground of football team [ENT].?",
        "entity": [
            "Panionios G.S.S"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "815",
        "question": "List presidents of the school whose one of the president is Charles. Prince of Wales ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbp:president) (AND dbo:School (JOIN dbo:president dbr:Charles,_Prince_of_Wales))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List presidents of [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the school",
                                "start": 19,
                                "end": 29
                            },
                            {
                                "description": "whose one of the president is Charles. Prince of Wales",
                                "start": 30,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NNP Prince)) (PP (IN of) (NP (NNP Wales))) (. ?)))",
        "mask_entity": "List presidents of the school whose [ENT] of the president is [ENT]. [ENT] ?",
        "entity": [
            "one",
            "Charles",
            "Prince of Wales"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3067",
        "question": "Does Timothy Morton study Buddhism?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Timothy) (NNP Morton)) (VP (VB study) (NP (NNP Buddhism))) (. ?)))",
        "mask_entity": "Does [ENT] study Buddhism?",
        "entity": [
            "Timothy Morton"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4784",
        "question": "Brian Moriarty designed video games written by whom?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "SExpr": "(JOIN (R dbp:writer) (AND dbo:VideoGame (JOIN dbo:designer dbr:Brian_Moriarty))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] written by whom",
                    "start": 0,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Brian Moriarty designed video games",
                                "start": 0,
                                "end": 35
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Brian) (NNP Moriarty)) (VP (VBD designed) (NP (NP (NN video) (NNS games)) (VP (VBN written) (WHPP (IN by) (WHNP (WP whom)))))) (. ?)))",
        "mask_entity": "[ENT] designed video games written by whom?",
        "entity": [
            "Brian Moriarty"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "959",
        "question": "What are some movies whose distributors are led by Kevin Tsujihara?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:distributor (JOIN dbo:keyPerson dbr:Kevin_Tsujihara))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some movies",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "whose distributors [IQ1]",
                    "start": 21,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are led by Kevin Tsujihara",
                                "start": 40,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS movies)) (SBAR (WHNP (WP$ whose) (NNS distributors)) (S (VP (VBP are) (VP (VBN led) (PP (IN by) (NP (NNP Kevin) (NNP Tsujihara)))))))))) (. ?)))",
        "mask_entity": "What are some movies whose distributors are led by [ENT]?",
        "entity": [
            "Kevin Tsujihara"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "225",
        "question": "Name the common associate band of Blayse and Teddy Riley ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Blayse) (JOIN (R dbo:associatedBand) dbr:Teddy_Riley))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common associate band of Blayse and Teddy Riley",
                    "start": 0,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN associate) (NN band)) (PP (IN of) (NP (NNP Blayse) (CC and) (NNP Teddy) (NNP Riley))))) (. ?)))",
        "mask_entity": "Name the common associate band of [ENT] and [ENT] ?",
        "entity": [
            "Blayse",
            "Teddy Riley"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3354",
        "question": "What did Steven T Mason's father die from?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathCause) (JOIN dbo:child dbr:Stevens_T._Mason)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What did [IQ1] die from",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Steven T Mason's father",
                                "start": 9,
                                "end": 32
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NNP Steven) (NNP T) (NNP Mason) (POS 's)) (NN father)) (VP (VB die) (PP (IN from)))) (. ?)))",
        "mask_entity": "What did [ENT] father die from?",
        "entity": [
            "Steven T Mason's"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2485",
        "question": "Whose military units are VMF-218 and VMF-155?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . }",
        "SExpr": "(AND (JOIN dbo:militaryUnit dbr:VMF-218) (JOIN dbo:militaryUnit dbr:VMF-155))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose military units are VMF-218 and VMF-155",
                    "start": 0,
                    "end": 44
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (JJ military) (NNS units)) (VP (VBP are) (NP (NP (NNP VMF) (SYM -) (CD 218)) (CC and) (NP (NNP VMF) (SYM -) (CD 155)))) (. ?)))",
        "mask_entity": "Whose military units are [ENT] and [ENT]?",
        "entity": [
            "VMF-218",
            "VMF-155"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "562",
        "question": "What automobile engine's successor is BMW M40",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/BMW_M40>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AutomobileEngine>}",
        "SExpr": "(AND dbo:AutomobileEngine (JOIN dbp:successor dbr:BMW_M40))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What automobile engine's",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "successor is BMW M40",
                    "start": 25,
                    "end": 45
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NN automobile) (NN engine) (POS 's)) (NN successor)) (VP (VBZ is) (NP (NNP BMW) (NNP M40)))))",
        "mask_entity": "What automobile engine's successor is [ENT]",
        "entity": [
            "BMW M40"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3436",
        "question": "Name the company which produces both  Boeing F/A-18 E/F Hornet nad CH-46 Chinook ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:product dbr:F_Super_Hornet) (JOIN dbp:products dbr:Boeing_CH-47_Chinook)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the company",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
                    "start": 17,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ produces) (NP (CC both) (NML (NML (NNP Boeing) (NNP F/A-18) (NNP E/F)) (NNP Hornet)) (NN nad)) (NP (NNP CH) (CD -46) (NNP Chinook))))))) (. ?)))",
        "mask_entity": "Name the company which produces both  [ENT] [ENT] [ENT] nad CH-46 [ENT] ?",
        "entity": [
            "Boeing",
            "F/A-18",
            "E/F Hornet",
            "Chinook"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1693",
        "question": "What is the district of Methodist Central Hall Westminster ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Methodist_Central_Hall_Westminster> <http://dbpedia.org/ontology/district> ?uri } ",
        "SExpr": "(JOIN (R dbo:district) dbr:Methodist_Central_Hall_Westminster)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN district)) (PP (IN of) (NP (NNP Methodist) (NNP Central) (NNP Hall) (NNP Westminster)))))) (. ?)))",
        "mask_entity": "What is the district of [ENT] [ENT] ?",
        "entity": [
            "Methodist Central Hall",
            "Westminster"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1045",
        "question": "Who develops the computation platform of Microsoft Expression Encoder ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "SExpr": "(JOIN (R dbo:developer) (JOIN (R dbo:computingPlatform) dbr:Microsoft_Expression_Encoder)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who develops [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the computation platform of Microsoft Expression Encoder",
                                "start": 13,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ develops) (NP (NP (DT the) (NN computation) (NN platform)) (PP (IN of) (NP (NNP Microsoft) (NNP Expression) (NNP Encoder)))))) (. ?)))",
        "mask_entity": "Who develops the computation platform of [ENT] ?",
        "entity": [
            "Microsoft Expression Encoder"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3446",
        "question": "What is the official language of Ladonia, which is the target area of Probus Journal?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:officialLanguage) dbr:Ladonia_(micronation)) (JOIN (R dbo:academicDiscipline) dbr:Probus_(journal)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the official language of Ladonia,",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "which is the target area of Probus Journal",
                    "start": 42,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NP (NNP Ladonia)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN target) (NN area)) (PP (IN of) (NP (NNP Probus) (NNP Journal)))))))))))) (. ?)))",
        "mask_entity": "What is the official language of [ENT], which is the target area of [ENT]?",
        "entity": [
            "Ladonia",
            "Probus Journal"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4565",
        "question": "Where did the conflict take place where Louis Briere de I'Isle was a commander?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(JOIN (R dbo:territory) (AND dbo:MilitaryConflict (JOIN dbo:commander dbr:Louis_Bri\u00e8re_de_l'Isle))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the conflict take place",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "[IQ1]",
                    "start": 34,
                    "end": 78,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "where Louis Briere de I'Isle was a commander",
                                "start": 34,
                                "end": 78
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN conflict)) (VP (VB take) (NP (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Louis) (NNP Briere) (NNP de) (NNP I'Isle)) (VP (VBD was) (NP (DT a) (NN commander)))))))) (. ?)))",
        "mask_entity": "Where did the conflict take place where [ENT] was a commander?",
        "entity": [
            "Louis Briere de I'Isle"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "954",
        "question": "In which team was the person drafted who has studied at the Worcester college, Oxford?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbp:draftTeam) (AND dbo:Person (JOIN dbo:almaMater dbr:Worcester_College,_Oxford))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which team",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "was the person drafted [IQ1]",
                    "start": 14,
                    "end": 85,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who has studied at the Worcester college, Oxford",
                                "start": 37,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBD was) (NP (NP (DT the) (NN person)) (VP (VBN drafted) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN studied) (PP (IN at) (NP (NP (DT the) (NNP Worcester) (NN college)) (, ,) (NP (NNP Oxford)))))))))))) (. ?)))",
        "mask_entity": "In which team was the person drafted who has studied at [ENT], [ENT]?",
        "entity": [
            "the Worcester college",
            "Oxford"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4985",
        "question": "How many people hold important positions alongwith Donna Shalala?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "SExpr": "(JOIN (R dbp:keyPeople) (JOIN dbo:keyPerson dbr:Donna_Shalala)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP hold) (NP (NP (JJ important) (NNS positions)) (PP (IN alongwith) (NP (NNP Donna) (NNP Shalala)))))) (. ?)))",
        "mask_entity": "How many people hold important positions alongwith [ENT]?",
        "entity": [
            "Donna Shalala"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2735",
        "question": "What other things are provided by the producer of Office 365?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Office_365> . ?x <http://dbpedia.org/property/services> ?uri  . }",
        "SExpr": "(JOIN (R dbp:services) (JOIN dbo:service dbr:Office_365)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What other things",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "are provided by [IQ1]",
                    "start": 18,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the producer of Office 365",
                                "start": 34,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NNS things)) (SQ (VP (VBP are) (VP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Office) (CD 365)))))))) (. ?)))",
        "mask_entity": "What other things are provided by the producer of [ENT]?",
        "entity": [
            "Office 365"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4903",
        "question": "Who owns the company that made the Edsel Villager?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
        "SExpr": "(JOIN (R dbp:parent) (JOIN dbp:products dbr:Edsel_Villager)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company that made the Edsel Villager",
                                "start": 9,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD made) (NP (DT the) (NNP Edsel) (NNP Villager)))))))) (. ?)))",
        "mask_entity": "Who owns the company that made [ENT]?",
        "entity": [
            "the Edsel Villager"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4735",
        "question": "Which collaborator of Nice and Smooth wrote Same Song ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nice_&_Smooth> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:associatedBand) dbr:Nice_&_Smooth) (JOIN (R dbp:writer) dbr:Same_Song_(Digital_Underground_song)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which collaborator of Nice and Smooth",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "wrote Same Song",
                    "start": 38,
                    "end": 53
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN collaborator)) (PP (IN of) (NP (JJ Nice) (CC and) (NNP Smooth)))) (S (VP (VBD wrote) (NP (JJ Same) (NNP Song)))) (. ?)))",
        "mask_entity": "Which collaborator of [ENT] and [ENT] wrote [ENT] ?",
        "entity": [
            "Nice",
            "Smooth",
            "Same Song"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4823",
        "question": "Who fought in the battle at Tupelo Mississippi?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Tupelo,_Mississippi> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(JOIN (R dbp:combatant) (AND dbo:MilitaryConflict (JOIN dbo:place dbr:Tupelo,_Mississippi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who fought in [IQ1]",
                    "start": 0,
                    "end": 46,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the battle at Tupelo Mississippi",
                                "start": 14,
                                "end": 46
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD fought) (PP (IN in) (NP (NP (DT the) (NN battle)) (PP (IN at) (NP (NNP Tupelo) (NNP Mississippi))))))) (. ?)))",
        "mask_entity": "Who fought in the battle at [ENT] [ENT]?",
        "entity": [
            "Tupelo",
            "Mississippi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1218",
        "question": "List the movies whose cast member were born in Scotland.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> . ?uri <http://dbpedia.org/ontology/starring> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:starring (JOIN dbo:birthPlace dbr:Scotland))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose cast member [IQ1]",
                    "start": 16,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "were born in Scotland",
                                "start": 34,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN cast) (NN member)) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Scotland))))))))) (. .)))",
        "mask_entity": "List the movies whose cast member were born in [ENT].",
        "entity": [
            "Scotland"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1527",
        "question": "List the other nicknames of city which has one of the nickname as City of Angels ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/City_of_Angels> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "SExpr": "(JOIN (R dbp:nickname) (JOIN dbp:nickname dbr:City_of_Angels)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the other nicknames of [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "city",
                                "start": 28,
                                "end": 32
                            },
                            {
                                "description": "which has one of the nickname as City of Angels",
                                "start": 33,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (NP (DT the) (JJ other) (NNS nicknames)) (PP (IN of) (NP (NN city)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN nickname)) (PP (IN as) (NP (NP (NNP City)) (PP (IN of) (NP (NNPS Angels))))))))))))) (. ?)))",
        "mask_entity": "List the other nicknames of city which has [ENT] of the nickname as City of Angels ?",
        "entity": [
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3987",
        "question": "Count the writers whose work has been played in NY?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "SExpr": "(JOIN (R dbp:writer) (JOIN dbp:place dbr:New_York)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the writers",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose work [IQ1]",
                    "start": 18,
                    "end": 50,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "has been played in NY",
                                "start": 29,
                                "end": 50
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS writers)) (SBAR (WHNP (WP$ whose) (NN work)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN played) (PP (IN in) (NP (NNP NY)))))))))) (. ?)))",
        "mask_entity": "Count the writers whose work has been played in [ENT]?",
        "entity": [
            "NY"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1300",
        "question": "Where did the graduates of Memphis, Tenessee continue their education?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Memphis,_Tennessee> . ?x <http://dbpedia.org/ontology/school> ?uri  . }",
        "SExpr": "(JOIN (R dbo:school) (JOIN dbp:highschool dbr:Memphis,_Tennessee)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] continue their education",
                    "start": 0,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the graduates of Memphis, Tennessee",
                                "start": 10,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NNP Memphis)))) (, ,) (NP (NNP Tenessee)) (VP (VB continue) (NP (PRP$ their) (NN education)))) (. ?)))",
        "mask_entity": "Where did the graduates of [ENT], [ENT] continue their education?",
        "entity": [
            "Memphis",
            "Tenessee"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4891",
        "question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:composer) dbr:Motorpsycho_Nitemare) (JOIN (R dbo:subsequentWork) dbr:Moondog_Matinee))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What subsequent work of Moondog Matinee",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "has the composer of Motorpsycho Nitemare",
                    "start": 40,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Moondog) (NNP Matinee)))) (SQ (VP (VBZ has) (NP (NP (DT the) (NN composer)) (PP (IN of) (NP (NNP Motorpsycho) (NNP Nitemare)))))) (. ?)))",
        "mask_entity": "What subsequent work of [ENT] has the composer of [ENT] ?",
        "entity": [
            "Moondog Matinee",
            "Motorpsycho Nitemare"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "160",
        "question": "What was the language of the single which came before To Know Him Is to Love Him?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "SExpr": "(JOIN (R dbp:language) (JOIN (R dbo:previousWork) dbr:To_Know_Him_Is_to_Love_Him)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What was the language of [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the single",
                                "start": 25,
                                "end": 35
                            },
                            {
                                "description": "which came before To Know Him Is to Love Him",
                                "start": 36,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (NP (NP (DT the) (NN language)) (PP (IN of) (NP (NP (DT the) (NN single)) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (ADVP (RB before)) (S (VP (TO To) (VP (VB Know) (SBAR (S (NP (PRP Him)) (VP (VBZ Is) (S (VP (TO to) (VP (VB Love) (NP (PRP Him))))))))))))))))))) (. ?)))",
        "mask_entity": "What was the language of the single which came before To Know Him Is to Love Him?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4067",
        "question": "What are the television shows whose company is owned by Viacom?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:company (JOIN dbo:owningCompany dbr:Viacom_(original)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the television shows",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose company [IQ1]",
                    "start": 30,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "is owned by Viacom",
                                "start": 44,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN company)) (S (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (NNP Viacom)))))))))) (. ?)))",
        "mask_entity": "What are the television shows whose company is owned by [ENT]?",
        "entity": [
            "Viacom"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "956",
        "question": "How many people used to play in the youthclub of FC Barcelona?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
        "SExpr": "(JOIN dbp:youthclubs dbr:FC_Barcelona)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBD used) (S (VP (TO to) (VP (VB play) (PP (IN in) (NP (NP (DT the) (NN youthclub)) (PP (IN of) (NP (NNP FC) (NNP Barcelona)))))))))) (. ?)))",
        "mask_entity": "How many people used to play in the youthclub of [ENT]?",
        "entity": [
            "FC Barcelona"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3791",
        "question": "Quebec born ice hockey players have stopped playing for which teams?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
        "SExpr": "(JOIN (R dbo:formerTeam) (AND dbo:IceHockeyPlayer (JOIN dbo:birthPlace dbr:Quebec))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1]",
                    "start": 0,
                    "end": 5,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Quebec born",
                                "start": 0,
                                "end": 11
                            },
                            {
                                "description": "ice hockey players",
                                "start": 12,
                                "end": 30
                            }
                        ]
                    }
                },
                {
                    "description": "have stopped playing for which teams",
                    "start": 6,
                    "end": 67
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Quebec) (VBN born) (NML (NN ice) (NN hockey)) (NNS players)) (VP (VBP have) (VP (VBN stopped) (S (VP (VBG playing) (SBAR (WHPP (IN for) (WHNP (WDT which))) (NP (NNS teams))))))) (. ?)))",
        "mask_entity": "[ENT] born ice hockey players have stopped playing for which teams?",
        "entity": [
            "Quebec"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3234",
        "question": "Who is the chancellor of Falmouth University ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/property/chancellor> ?uri } ",
        "SExpr": "(JOIN (R dbp:chancellor) dbr:Falmouth_University)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NNP Falmouth) (NNP University)))))) (. ?)))",
        "mask_entity": "Who is the chancellor of [ENT] ?",
        "entity": [
            "Falmouth University"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2869",
        "question": "what kind of things play on WBIG FM?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "SExpr": "(JOIN (R dbo:programmeFormat) dbr:WBIG-FM)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT what) (NN kind)) (PP (IN of) (NP (NNS things)))) (S (VP (VBP play) (PP (IN on) (NP (NNP WBIG) (NNP FM))))) (. ?)))",
        "mask_entity": "what kind of things play on [ENT]?",
        "entity": [
            "WBIG FM"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3777",
        "question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:operatedBy) dbr:South_Side_Elevated_Railroad) (JOIN (R dbp:placeOfBirth) dbr:Arthur_A._Ross))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the area",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "where South side Elevated Railroad operate",
                    "start": 14,
                    "end": 56
                },
                {
                    "description": "and has place of birth as Arthur A. Ross",
                    "start": 57,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (SBAR (S (NP (DT the)) (VP (VBP are) (SBAR (WHADVP (WRB where)) (S (NP (NML (NNP South) (NN side)) (NNP Elevated) (NNP Railroad)) (VP (VBP operate) (CC and) (VBZ has) (NP (NP (NN place)) (PP (IN of) (NP (NN birth)))) (PP (IN as) (NP (NNP Arthur) (NNP A.) (NNP Ross)))))))))) (. ?)))",
        "mask_entity": "Name the are where [ENT] operate and has place of birth as [ENT] ?",
        "entity": [
            "South side Elevated Railroad",
            "Arthur A. Ross"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4433",
        "question": "In which fields are the graduates of Worcester College, Oxford working?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
        "SExpr": "(JOIN (R dbo:field) (JOIN dbp:almaMater dbr:Worcester_College,_Oxford)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which fields",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are [IQ1] working",
                    "start": 16,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the graduates of Worcester College, Oxford",
                                "start": 20,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS fields)) (VP (VBP are) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NP (NNP Worcester) (NNP College)) (, ,) (NP (NNP Oxford)) (VP (VBG working))))))) (. ?)))",
        "mask_entity": "In which fields are the graduates of [ENT], [ENT] working?",
        "entity": [
            "Worcester College",
            "Oxford"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2961",
        "question": "List the places where the relatives of Mark Donaldson died ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbo:deathPlace) (JOIN (R dbp:relatives) dbr:Mark_Donaldson_(rugby_player))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the places",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "where [IQ1] died",
                    "start": 16,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of Mark Donaldson",
                                "start": 22,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mark) (NNP Donaldson)))) (VP (VBD died)))))) (. ?)))",
        "mask_entity": "List the places where the relatives of [ENT] died ?",
        "entity": [
            "Mark Donaldson"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2200",
        "question": "What famous politician died in the Petersen House?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Petersen_House>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbp:deathPlace dbr:Petersen_House))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What famous politician",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "died in the Petersen House",
                    "start": 23,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (JJ famous) (NN politician)) (S (VP (VBD died) (PP (IN in) (NP (DT the) (NNP Petersen) (NNP House))))) (. ?)))",
        "mask_entity": "What famous politician died in [ENT]?",
        "entity": [
            "the Petersen House"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "98",
        "question": "What are some artists on the show whose opening theme is Send It On?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(JOIN (R dbp:artist) (AND dbo:TelevisionShow (JOIN dbo:openingTheme dbr:Send_It_On_(Disney's_Friends_for_Change_song)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some artists",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "on [IQ1]",
                    "start": 22,
                    "end": 67,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the show",
                                "start": 25,
                                "end": 33
                            },
                            {
                                "description": "whose opening theme is Send It On",
                                "start": 34,
                                "end": 67
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (NNS artists)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WP$ whose) (NN opening) (NN theme)) (S (VP (VBZ is) (VP (VB Send) (NP (PRP It)) (ADVP (RP On))))))))))) (. ?)))",
        "mask_entity": "What are some artists on the show whose opening theme is [ENT]?",
        "entity": [
            "Send It On"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2557",
        "question": "What is the citizenship of Saima Chowdhury?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri } ",
        "SExpr": "(JOIN (R dbo:citizenship) dbr:Saima_Chowdhury)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN citizenship)) (PP (IN of) (NP (NNP Saima) (NNP Chowdhury)))))) (. ?)))",
        "mask_entity": "What is the citizenship of [ENT]?",
        "entity": [
            "Saima Chowdhury"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3183",
        "question": "What are the musical performances whose label is Celluloid Records?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
        "SExpr": "(JOIN dbp:label dbr:Celluloid_Records)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (JJ musical) (NNS performances)) (SBAR (WHNP (WP$ whose) (NN label)) (S (VP (VBZ is) (NP (JJ Celluloid) (NNPS Records)))))))) (. ?)))",
        "mask_entity": "What are the musical performances whose label is [ENT]?",
        "entity": [
            "Celluloid Records"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "253",
        "question": "What is the craft of the Ralph Flanders which is also the profession of  Claiborne Pell ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:occupation) dbr:Ralph_Flanders) (JOIN (R dbo:profession) dbr:Claiborne_Pell))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the craft of the Ralph Flanders",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "which is also the profession of Claiborne Pell",
                    "start": 40,
                    "end": 86
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN craft)) (PP (IN of) (NP (DT the) (NNP Ralph) (NNP Flanders)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN profession)) (PP (IN of) (NP (NNP Claiborne) (NNP Pell)))))))))) (. ?)))",
        "mask_entity": "What is the craft of [ENT] which is also the profession of  [ENT] ?",
        "entity": [
            "the Ralph Flanders",
            "Claiborne Pell"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3923",
        "question": "How many people have fought wars where Arthur St. Clair was a commander?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "SExpr": "(JOIN (R dbp:combatant) (JOIN dbo:commander dbr:Arthur_St._Clair)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have fought [IQ1]",
                    "start": 16,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "wars",
                                "start": 28,
                                "end": 32
                            },
                            {
                                "description": "where Arthur St. Clair was a commander",
                                "start": 33,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN fought) (NP (NP (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Arthur) (NNP St.) (NNP Clair)) (VP (VBD was) (NP (DT a) (NN commander))))))))) (. ?)))",
        "mask_entity": "How many people have fought wars where [ENT] was a commander?",
        "entity": [
            "Arthur St. Clair"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4199",
        "question": "Does Chicago own the Monroe Station?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Chicago)) (VP (VB own) (NP (DT the) (NNP Monroe) (NNP Station))) (. ?)))",
        "mask_entity": "Does [ENT] own [ENT]?",
        "entity": [
            "Chicago",
            "the Monroe Station"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1445",
        "question": "Which team has had both Martin prochzka and garry unger as its players ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:formerTeam) dbr:Martin_Proch\u00e1zka) (JOIN (R dbo:formerTeam) dbr:Garry_Unger))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which team",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "has had both Martin prochzka and garry unger as its players",
                    "start": 11,
                    "end": 70
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBZ has) (VP (VBN had) (NP (CC both) (NP (NNP Martin) (NNP prochzka)) (CC and) (NP (NNP garry) (NNP unger))) (PP (IN as) (NP (PRP$ its) (NNS players))))) (. ?)))",
        "mask_entity": "Which team has had both [ENT] prochzka and garry unger as its players ?",
        "entity": [
            "Martin"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1648",
        "question": "What are the awards received by spouse of Ellen Lundstrom?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ellen_Lundstr\u00f6m> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN dbo:spouse dbr:Ellen_Lundstr\u00f6m)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the awards",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "received by [IQ1]",
                    "start": 20,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "spouse of Ellen Lundstrom",
                                "start": 32,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS awards)) (VP (VBN received) (PP (IN by) (NP (NP (NN spouse)) (PP (IN of) (NP (NNP Ellen) (NNP Lundstrom))))))))) (. ?)))",
        "mask_entity": "What are the awards received by spouse of [ENT]?",
        "entity": [
            "Ellen Lundstrom"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4682",
        "question": "Who all have succeeded the kings buried in Rome?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "SExpr": "(JOIN (R dbo:successor) (AND dbo:Royalty (JOIN dbp:placeOfBurial dbr:Rome))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who all have succeeded [IQ1]",
                    "start": 0,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the kings",
                                "start": 23,
                                "end": 32
                            },
                            {
                                "description": "buried in Rome",
                                "start": 33,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (NP (DT all)) (VP (VBP have) (VP (VBN succeeded) (NP (NP (DT the) (NNS kings)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. ?)))",
        "mask_entity": "Who all have succeeded the kings buried in [ENT]?",
        "entity": [
            "Rome"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4723",
        "question": "Through which states do the rivers flow which join in the republican river from the left?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republican_River> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "SExpr": "(JOIN (R dbo:state) (JOIN (R dbo:leftTributary) dbr:Republican_River)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Through which states",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "do the rivers flow [IQ1]",
                    "start": 21,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which join in the republican river from the left",
                                "start": 40,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Through) (WHNP (WDT which))) (S (NP (NNS states)) (VP (VBP do) (NP (DT the) (NNS rivers)) (S (VP (VB flow) (SBAR (WHNP (WDT which)) (S (VP (VBP join) (PP (IN in) (NP (NP (DT the) (JJ republican) (NN river)) (PP (IN from) (NP (DT the) (NN left)))))))))))) (. ?)))",
        "mask_entity": "Through which states do the rivers flow which join in the republican river from the left?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3991",
        "question": "Give me the home town of all musical artists who uses Guitar as instrument ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "SExpr": "(JOIN (R dbo:hometown) (AND dbo:MusicalArtist (JOIN dbo:instrument dbr:Guitar))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the home town of [IQ1]",
                    "start": 0,
                    "end": 74,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "all musical artists",
                                "start": 25,
                                "end": 44
                            },
                            {
                                "description": "who uses Guitar as instrument",
                                "start": 45,
                                "end": 74
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (NP (NP (DT all) (JJ musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBZ uses) (NP (NNP Guitar)) (PP (IN as) (NP (NN instrument)))))))))) (. ?)))",
        "mask_entity": "Give me the home town of all musical artists who uses [ENT] as instrument ?",
        "entity": [
            "Guitar"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1696",
        "question": "How many religions are followed amongst the people who've worked in the Korean army?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Republic_of_Korea_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:militaryBranch dbr:Republic_of_Korea_Army)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religions",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are followed amongst [IQ1]",
                    "start": 19,
                    "end": 83,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the people",
                                "start": 40,
                                "end": 50
                            },
                            {
                                "description": "who've worked in the Korean army",
                                "start": 51,
                                "end": 83
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS religions)) (VP (VBP are) (VP (VBN followed) (PP (IN amongst) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP 've) (VP (VBN worked) (PP (IN in) (NP (DT the) (JJ Korean) (NN army)))))))))))) (. ?)))",
        "mask_entity": "How many religions are followed amongst the people who've worked in the [ENT] army?",
        "entity": [
            "Korean"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3191",
        "question": "Was andy warhol a part of Pop Art movement?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP andy) (NNP warhol)) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (NML (NNP Pop) (NNP Art)) (NN movement)))) (. ?)))",
        "mask_entity": "Was [ENT] warhol a part of [ENT] movement?",
        "entity": [
            "andy",
            "Pop Art"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4499",
        "question": "Count the number of musical work which were sold by Sony Music?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
        "SExpr": "(AND dbo:MusicalWork (JOIN dbp:music (JOIN dbp:label dbr:Sony_Music_Entertainment))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "musical work [IQ1]",
                    "start": 20,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which were sold by Sony Music",
                                "start": 33,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (NP (DT the) (NN number)) (PP (IN of) (NP (JJ musical) (NN work)))) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (VP (VBN sold) (PP (IN by) (NP (NNP Sony) (NNP Music))))))))) (. ?)))",
        "mask_entity": "Count the number of musical work which were sold by [ENT]?",
        "entity": [
            "Sony Music"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1154",
        "question": "Who is the person whose home town is Fairmount, Indiana?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:hometown dbr:Fairmount,_Indiana))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the person",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose home town is Fairmount, Indiana",
                    "start": 18,
                    "end": 55
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP$ whose) (NN home) (NN town)) (S (VP (VBZ is) (NP (NP (NNP Fairmount)) (, ,) (NP (NNP Indiana))))))))) (. ?)))",
        "mask_entity": "Who is the person whose home town is [ENT], [ENT]?",
        "entity": [
            "Fairmount",
            "Indiana"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2255",
        "question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbo:director dbr:Stanley_Kubrick) (JOIN dbp:editing dbr:Anthony_Harvey)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "directed by Stanley Kubrick",
                    "start": 16,
                    "end": 43
                },
                {
                    "description": "and edited by Anthony Harvey",
                    "start": 44,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Stanley) (NNP Kubrick)))) (CC and) (VP (VBN edited) (PP (IN by) (NP (NNP Anthony) (NNP Harvey))))))) (. ?)))",
        "mask_entity": "Name the movies directed by [ENT] and edited by [ENT]?",
        "entity": [
            "Stanley Kubrick",
            "Anthony Harvey"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1682",
        "question": "List all binomial authority of the insects whose one of the  binomial authority is douard Mntries?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
        "SExpr": "(JOIN (R dbo:binomialAuthority) (JOIN dbo:binomialAuthority dbr:\u00c9douard_M\u00e9n\u00e9tries)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all binomial authority of [IQ1]",
                    "start": 0,
                    "end": 96,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the insects",
                                "start": 31,
                                "end": 42
                            },
                            {
                                "description": "whose one of the binomial authority is douard Mntries",
                                "start": 43,
                                "end": 96
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT all) (JJ binomial) (NN authority)) (PP (IN of) (NP (NP (DT the) (NNS insects)) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ binomial) (NN authority)))) (VP (VBZ is) (NP (JJ douard) (NNP Mntries))))))))) (. ?)))",
        "mask_entity": "List all binomial authority of the insects whose [ENT] of the  binomial authority is douard Mntries?",
        "entity": [
            "one"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3170",
        "question": "Who is the military general buried in St Mary's Church, Battersea?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "SExpr": "(AND dbo:MilitaryPerson (JOIN dbp:placeofburial dbr:St_Mary's_Church,_Battersea))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the military general",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "buried in St Mary's Church, Battersea",
                    "start": 28,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ military) (NN general)) (VP (VBN buried) (PP (IN in) (NP (NP (NP (NNP St) (NNP Mary) (POS 's)) (NNP Church)) (, ,) (NP (NNP Battersea)))))))) (. ?)))",
        "mask_entity": "Who is the military general buried in [ENT], [ENT]?",
        "entity": [
            "St Mary's Church",
            "Battersea"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2056",
        "question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "SExpr": "(AND dbo:MilitaryUnit (AND (JOIN dbo:commandStructure dbr:United_States_Department_of_the_Navy) (JOIN dbo:commandStructure dbr:United_States_Department_of_Defense)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the military unit",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose command structures are United States Department of the Navy and United States Department of Defense",
                    "start": 26,
                    "end": 131
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ military) (NN unit)) (SBAR (WHNP (WP$ whose) (NN command) (NNS structures)) (S (VP (VBP are) (NP (NP (NNP United) (NNPS States) (NNP Department)) (PP (IN of) (NP (NP (DT the) (NML (NML (NNP Navy)) (CC and) (NML (NNP United) (NNPS States))) (NNP Department)) (PP (IN of) (NP (NNP Defense)))))))))))) (. ?)))",
        "mask_entity": "What is the military unit whose command structures are [ENT] and [ENT]?",
        "entity": [
            "United States Department of the Navy",
            "United States Department of Defense"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4090",
        "question": "What are some other things developed by the company who made the remote desktop protocol?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Remote_Desktop_Protocol> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(JOIN (R dbo:product) (AND dbo:Company (JOIN dbp:products dbr:Remote_Desktop_Protocol))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are some other things",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "developed by [IQ1]",
                    "start": 27,
                    "end": 88,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the company",
                                "start": 40,
                                "end": 51
                            },
                            {
                                "description": "who made the remote desktop protocol",
                                "start": 52,
                                "end": 88
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT some) (JJ other) (NNS things)) (VP (VBN developed) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP who)) (S (VP (VBD made) (NP (DT the) (JJ remote) (NN desktop) (NN protocol))))))))))) (. ?)))",
        "mask_entity": "What are some other things developed by the company who made the remote desktop protocol?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3108",
        "question": "Where was Al-Muzaffar Umar buried ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Muzaffar_Umar> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
        "SExpr": "(JOIN (R dbp:placeOfBurial) dbr:Al-Muzaffar_Umar)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Al) (HYPH -) (NNP Muzaffar) (NNP Umar)) (VP (VBN buried))) (. ?)))",
        "mask_entity": "Where was [ENT] buried ?",
        "entity": [
            "Al-Muzaffar Umar"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4548",
        "question": "List the guests of On Broadway ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri } ",
        "SExpr": "(JOIN (R dbp:guests) dbr:On_Broadway_(Smash))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS guests)) (PP (IN of) (PP (IN On) (NP (NNP Broadway)))))) (. ?)))",
        "mask_entity": "List the guests of On [ENT] ?",
        "entity": [
            "Broadway"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3723",
        "question": "How many universities are there whose country's capital is Oslo?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (JOIN dbo:country (JOIN dbp:capital dbr:Oslo))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many universities",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "are there whose country's [IQ1]",
                    "start": 22,
                    "end": 63,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "capital is Oslo",
                                "start": 48,
                                "end": 63
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS universities)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP$ whose) (NN country) (POS 's)) (S (NP (NN capital)) (VP (VBZ is) (NP (NNP Oslo)))))))) (. ?)))",
        "mask_entity": "How many universities are there whose country's capital is [ENT]?",
        "entity": [
            "Oslo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2049",
        "question": "Did Bob Dylan write the lyrics of the times they are a changin'?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VBD Did) (S (NP (NNP Bob) (NNP Dylan)) (VP (VB write) (NP (NP (DT the) (NNS lyrics)) (PP (IN of) (NP (NP (DT the) (NNS times)) (SBAR (S (NP (PRP they)) (VP (VBP are) (NP (DT a) (NN changin)))))))))) ('' ')) (. ?)))",
        "mask_entity": "Did [ENT] write the lyrics of the times they are a changin'?",
        "entity": [
            "Bob Dylan"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3643",
        "question": "What is the religion of the ones in the Kampuchean Union of Salvation?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:militaryBranch dbr:Kampuchean_United_Front_for_National_Salvation)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the religion of [IQ1]",
                    "start": 0,
                    "end": 69,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ones",
                                "start": 24,
                                "end": 32
                            },
                            {
                                "description": "in the Kampuchean Union of Salvation",
                                "start": 33,
                                "end": 69
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (DT the) (NNS ones)))) (PP (IN in) (NP (NP (DT the) (NNP Kampuchean) (NNP Union)) (PP (IN of) (NP (NNP Salvation))))))) (. ?)))",
        "mask_entity": "What is the religion of the ones in [ENT]?",
        "entity": [
            "the Kampuchean Union of Salvation"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4927",
        "question": "Where did the members of judge advocate general corps study?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "SExpr": "(JOIN (R dbo:almaMater) (JOIN dbo:militaryRank dbr:Judge_Advocate_General's_Corps,_United_States_Army)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] study",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the members of judge advocate general corps",
                                "start": 10,
                                "end": 53
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NML (NN judge) (NN advocate)) (NML (JJ general) (NN corps)) (NN study))))) (. ?)))",
        "mask_entity": "Where did the members of judge advocate general corps study?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "623",
        "question": "Name the airlines which have a hub in airport in SF?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/San_Francisco> . ?uri <http://dbpedia.org/property/hubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "SExpr": "(AND dbo:Airline (JOIN dbp:hubs (JOIN dbp:cityServed dbr:San_Francisco))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the airlines",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "which have a hub in [IQ1]",
                    "start": 18,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "airport in SF",
                                "start": 38,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NP (NN airport)) (PP (IN in) (NP (NNP SF))))))))))) (. ?)))",
        "mask_entity": "Name the airlines which have a hub in airport in [ENT]?",
        "entity": [
            "SF"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "262",
        "question": "Which executive producer of the ultimate merger is also an important person at Trump Productions?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:executiveProducer) dbr:The_Ultimate_Merger) (JOIN (R dbo:keyPerson) dbr:Trump_Productions))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which executive producer of the ultimate merger",
                    "start": 0,
                    "end": 47
                },
                {
                    "description": "is also an important person at Trump Productions",
                    "start": 48,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ executive) (NN producer)) (PP (IN of) (NP (DT the) (JJ ultimate) (NN merger)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT an) (JJ important) (NN person)) (PP (IN at) (NP (NNP Trump) (NNPS Productions)))))) (. ?)))",
        "mask_entity": "Which executive producer of the ultimate merger is also an important person at [ENT]?",
        "entity": [
            "Trump Productions"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3369",
        "question": "What is the official name of Colorado wine ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?uri } ",
        "SExpr": "(JOIN (R dbp:officialName) dbr:Colorado_wine)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ official) (NN name)) (PP (IN of) (NP (NNP Colorado) (NN wine)))))) (. ?)))",
        "mask_entity": "What is the official name of [ENT] wine ?",
        "entity": [
            "Colorado"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4061",
        "question": "In how many states can one find Burr Tuss kind of bridges?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
        "SExpr": "(AND dbo:Region (JOIN (R dbo:state) (JOIN dbp:style dbr:Burr_Truss))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many states",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "can one find [IQ1]",
                    "start": 19,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Burr Tuss kind of bridges",
                                "start": 32,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN In) (NP (WHADJP (WRB how) (JJ many)) (NNS states))) (MD can) (NP (CD one)) (VP (VB find) (NP (NP (NNP Burr) (NNP Tuss) (NN kind)) (PP (IN of) (NP (NNS bridges))))) (. ?)))",
        "mask_entity": "In how many states can one find [ENT] kind of bridges?",
        "entity": [
            "Burr Tuss"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1802",
        "question": "who developed google videos?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri } ",
        "SExpr": "(JOIN (R dbp:developer) dbr:Google_Videos)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP who)) (S (VP (VBD developed) (NP (NN google) (NNS videos)))) (. ?)))",
        "mask_entity": "who developed google videos?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "4736",
        "question": "Who is the child of John Tyler, Sr.?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri } ",
        "SExpr": "(JOIN (R dbo:child) dbr:John_Tyler,_Sr.)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBZ is) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (NP (NNP John) (NNP Tyler)) (, ,) (NP (NNP Sr.?)))))))))",
        "mask_entity": "Who is the child of [ENT], Sr.?",
        "entity": [
            "John Tyler"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4992",
        "question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (JJ Brazilian) (NN jiu-jitsu)) (NP (NP (DT the) (NN trainer)) (PP (IN of) (NP (NNP Nick) (NNP Diaz)))) (. ?)))",
        "mask_entity": "Is [ENT] jiu-jitsu the trainer of [ENT]?",
        "entity": [
            "Brazilian",
            "Nick Diaz"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2385",
        "question": "Who is the owner of  Latvian Wikipedia and Wiktionary ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:owner) dbr:Latvian_Wikipedia) (JOIN (R dbo:owner) dbr:Wiktionary))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the owner of Latvian Wikipedia and Wiktionary",
                    "start": 0,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (JJ Latvian) (NNP Wikipedia)) (CC and) (NP (NNP Wiktionary))))))) (. ?)))",
        "mask_entity": "Who is the owner of  [ENT] and [ENT] ?",
        "entity": [
            "Latvian Wikipedia",
            "Wiktionary"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1959",
        "question": "Name all those buried in a place governed by a city council.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/City_council> . ?uri <http://dbpedia.org/property/restingPlace> ?x  . }",
        "SExpr": "(JOIN dbp:restingPlace (JOIN dbp:governingBody dbr:City_council)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name all those buried in [IQ1]",
                    "start": 0,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a place",
                                "start": 25,
                                "end": 32
                            },
                            {
                                "description": "governed by a city council",
                                "start": 33,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT those)) (VP (VBN buried) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (DT a) (NN city) (NN council))))))))) (. .)))",
        "mask_entity": "Name all those buried in a place governed by a city council.",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2976",
        "question": "What royalties's sepulchre is Mausoleum of Augustus?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> } ",
        "SExpr": "(JOIN dbp:placeOfBurial dbr:Mausoleum_of_Augustus)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NNS royalties) (POS 's)) (NN sepulchre)) (VP (VBZ is) (NP (NP (NNP Mausoleum)) (PP (IN of) (NP (NNP Augustus))))) (. ?)))",
        "mask_entity": "What royalties's sepulchre is [ENT]?",
        "entity": [
            "Mausoleum of Augustus"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "488",
        "question": "Name the common university of the Cardinal and Jim Wylie?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:university) dbr:Stanford_Cardinal) (JOIN (R dbo:university) dbr:Jim_Wylie))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common university of the Cardinal and Jim Wylie",
                    "start": 0,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN university)) (PP (IN of) (NP (NP (DT the) (NNP Cardinal)) (CC and) (NP (NNP Jim) (NNP Wylie)))))) (. ?)))",
        "mask_entity": "Name the common university of the [ENT] and [ENT]?",
        "entity": [
            "Cardinal",
            "Jim Wylie"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1843",
        "question": "What is the automobile platform of Chiva bus ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri } ",
        "SExpr": "(JOIN (R dbo:automobilePlatform) dbr:Chiva_bus)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN automobile) (NN platform)) (PP (IN of) (NP (NNP Chiva) (NN bus)))))) (. ?)))",
        "mask_entity": "What is the automobile platform of [ENT] bus ?",
        "entity": [
            "Chiva"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1734",
        "question": "Who are the animator of The Skeleton Dance?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri } ",
        "SExpr": "(JOIN (R dbo:animator) dbr:The_Skeleton_Dance)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (NP (NP (DT the) (NN animator)) (PP (IN of) (NP (DT The) (NNP Skeleton) (NNP Dance)))))) (. ?)))",
        "mask_entity": "Who are the animator of [ENT]?",
        "entity": [
            "The Skeleton Dance"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2911",
        "question": "How many movies have a screenplay located in the States?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbp:screenplay (JOIN dbo:birthPlace dbr:United_States))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many movies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have a screenplay [IQ1]",
                    "start": 16,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "located in the States",
                                "start": 34,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS movies)) (VP (VBP have) (NP (NP (DT a) (NN screenplay)) (VP (VBN located) (PP (IN in) (NP (DT the) (NNPS States))))))) (. ?)))",
        "mask_entity": "How many movies have a screenplay located in the [ENT]?",
        "entity": [
            "States"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3219",
        "question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:ceremonialCounty) dbr:East_Tilbury) (JOIN (R dbo:localAuthority) dbr:Trinity_School,_Brentwood))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which ceremonial County of the East Tilbury",
                    "start": 0,
                    "end": 43
                },
                {
                    "description": "is also the local authority of the Trinity School, Brentwood",
                    "start": 44,
                    "end": 104
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ ceremonial) (NNP County)) (PP (IN of) (NP (DT the) (NNP East) (NNP Tilbury)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (NP (DT the) (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)))))) (. ?)))",
        "mask_entity": "Which ceremonial County of [ENT] is also the local authority of [ENT], [ENT]?",
        "entity": [
            "the East Tilbury",
            "the Trinity School",
            "Brentwood"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "146",
        "question": "What system is both a platform where Nord runs and also distributed The beauty inside?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:computingPlatform) dbr:Nord_(video_game)) (JOIN (R dbo:distributor) dbr:The_Beauty_Inside))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What system",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "is both a platform",
                    "start": 12,
                    "end": 30
                },
                {
                    "description": "where Nord runs",
                    "start": 31,
                    "end": 46
                },
                {
                    "description": "and also distributed The beauty inside",
                    "start": 47,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (NP (DT The) (NN beauty) (RB inside) (. ?)))",
        "mask_entity": "What system is both a platform where Nord runs and also distributed The beauty inside?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1986",
        "question": "Name the country whose leader's deputy is Piotr Glinski?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> . ?uri <http://dbpedia.org/property/leaderName> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbp:leaderName (JOIN dbp:deputy dbr:Piotr_Gli\u0144ski))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the country",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "whose leader's [IQ1]",
                    "start": 17,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "deputy is Piotr Glinski",
                                "start": 32,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN country)) (SBAR (S (NP (WHNP (WP$ whose) (NN leader) (POS 's)) (NN deputy)) (VP (VBZ is) (NP (NNP Piotr) (NNP Glinski))))))) (. ?)))",
        "mask_entity": "Name the country whose leader's deputy is [ENT]?",
        "entity": [
            "Piotr Glinski"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1369",
        "question": "Is Cologny a neighbouring city of Geneva?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Cologny)) (NP (NP (DT a) (VBG neighbouring) (NN city)) (PP (IN of) (NP (NNP Geneva)))) (. ?)))",
        "mask_entity": "Is [ENT] a neighbouring city of [ENT]?",
        "entity": [
            "Cologny",
            "Geneva"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2811",
        "question": "Whose creators are Jerry Seinfeld and Larry David?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . }",
        "SExpr": "(AND (JOIN dbo:creator dbr:Jerry_Seinfeld) (JOIN dbo:creator dbr:Larry_David))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose creators are Jerry Seinfeld and Larry David",
                    "start": 0,
                    "end": 49
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS creators)) (VP (VBP are) (NP (NP (NNP Jerry) (NNP Seinfeld)) (CC and) (NP (NNP Larry) (NNP David)))) (. ?)))",
        "mask_entity": "Whose creators are [ENT] and [ENT]?",
        "entity": [
            "Jerry Seinfeld",
            "Larry David"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "659",
        "question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by  Ron Grainer?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:related dbr:The_Sarah_Jane_Adventures) (JOIN dbp:themeMusicComposer dbr:Ron_Grainer)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which TV show",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "is related to The Sarah Jane Adventures",
                    "start": 14,
                    "end": 53
                },
                {
                    "description": "and theme music is composed by Ron Grainer",
                    "start": 54,
                    "end": 96
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which) (NN TV) (NN show)) (S (VP (VBZ is) (VP (JJ related) (PP (IN to) (NP (NP (DT The) (NNP Sarah) (NNP Jane) (NNPS Adventures)) (CC and) (NP (NN theme) (NN music)))))))) (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))) (. ?)))",
        "mask_entity": "Which TV show is related to [ENT] and theme music is composed by  [ENT]?",
        "entity": [
            "The Sarah Jane Adventures",
            "Ron Grainer"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1794",
        "question": "Name the parent company of  Ford Air Transport Service ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "SExpr": "(JOIN (R dbo:parentCompany) dbr:Ford_Air_Transport_Service)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (NNP Ford) (NNP Air) (NNP Transport) (NNP Service))))) (. ?)))",
        "mask_entity": "Name the parent company of  [ENT] ?",
        "entity": [
            "Ford Air Transport Service"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2511",
        "question": "Who  has these major shrines  : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Emmitsburg,_Maryland> . ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton> . }",
        "SExpr": "(AND (JOIN dbo:majorShrine dbr:Emmitsburg,_Maryland) (JOIN dbo:majorShrine dbr:Shrine_of_St._Elizabeth_Ann_Bayley_Seton))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has these major shrines : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton",
                    "start": 0,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (NP (NP (DT these) (JJ major) (NNS shrines)) (: :) (NP (NP (NNP Emmitsburg) (, ,) (NNP Maryland) (CC and) (NNP Shrine)) (PP (IN of) (NP (NML (NNP St.) (NNP Elizabeth)) (NNP Ann) (NNP Bayley) (NNP Seton))))))) (. ?)))",
        "mask_entity": "Who  has these major shrines  : [ENT], [ENT] and [ENT] [ENT]?",
        "entity": [
            "Emmitsburg",
            "Maryland",
            "Shrine of St. Elizabeth",
            "Ann Bayley Seton"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3397",
        "question": "Which region of Bannock is the origin od Spaghetti squash ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:origin) dbr:Spaghetti_squash) (JOIN (R dbo:region) dbr:Bannock_(food)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which region of Bannock",
                    "start": 0,
                    "end": 23
                },
                {
                    "description": "is the origin of Spaghetti squash",
                    "start": 24,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN region)) (PP (IN of) (NP (NNP Bannock)))) (SQ (VP (VBZ is) (NP (DT the) (NML (NN origin) (NN od) (NN Spaghetti)) (NN squash)))) (. ?)))",
        "mask_entity": "Which region of [ENT] is the origin od Spaghetti squash ?",
        "entity": [
            "Bannock"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4282",
        "question": "Where in the us military did pierre r graham and edwin f hunter work?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:branch) dbr:Pierre_R._Graham) (JOIN (R dbp:branch) dbr:Edwin_F._Hunter))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where in the us military",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "did pierre r graham and edwin f hunter work",
                    "start": 25,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB Where)) (S (PP (IN in) (NP (DT the) (PRP us) (NN military))) (VP (VBD did) (NP (NNP pierre)) (S (VP (VB r) (NP (NP (NNP graham)) (CC and) (NP (NNP edwin) (NNP f) (NN hunter) (NN work))))))) (. ?)))",
        "mask_entity": "Where in the us military did pierre r graham and edwin f hunter work?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1147",
        "question": "Count everyone who lives in a place where Indian English is an official language ?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
        "SExpr": "(JOIN dbo:residence (JOIN dbo:officialLanguage dbr:Indian_English)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count everyone",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "who lives in [IQ1]",
                    "start": 15,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a place",
                                "start": 28,
                                "end": 35
                            },
                            {
                                "description": "where Indian English is an official language",
                                "start": 36,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBZ lives) (PP (IN in) (NP (NP (DT a) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (JJ Indian) (NNP English)) (VP (VBZ is) (NP (DT an) (JJ official) (NN language)))))))))))) (. ?)))",
        "mask_entity": "Count everyone who lives in a place where [ENT] [ENT] is an official language ?",
        "entity": [
            "Indian",
            "English"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3272",
        "question": "Did Raymond Picard take birth in Paris?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Raymond) (NNP Picard)) (VP (VB take) (NP (NN birth)) (PP (IN in) (NP (NNP Paris)))) (. ?)))",
        "mask_entity": "Did [ENT] take birth in [ENT]?",
        "entity": [
            "Raymond Picard",
            "Paris"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "608",
        "question": "How many religions are practiced by diplomats?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbp:religion) (JOIN dbo:profession dbr:Diplomacy)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religions",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are practiced by [IQ1]",
                    "start": 19,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "diplomats",
                                "start": 36,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS religions)) (VP (VBP are) (VP (VBN practiced) (PP (IN by) (NP (NNS diplomats)))))) (. ?)))",
        "mask_entity": "How many religions are practiced by diplomats?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3582",
        "question": "Was Elton John a chairman of a Watford FC Season?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Elton) (NNP John)) (NP (NP (DT a) (NN chairman)) (PP (IN of) (NP (DT a) (NNP Watford) (NNP FC) (NNP Season)))) (. ?)))",
        "mask_entity": "Was [ENT] a chairman of [ENT]?",
        "entity": [
            "Elton John",
            "a Watford FC Season"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1930",
        "question": "Which publisher of Lucifer's hammer is also known for Jo Garcia ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:publisher) dbr:Lucifer's_Hammer) (JOIN (R dbo:knownFor) dbr:Jo_Garcia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which publisher of Lucifer's hammer",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "is also known for Jo Garcia",
                    "start": 36,
                    "end": 63
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN publisher)) (PP (IN of) (NP (NP (NNP Lucifer) (POS 's)) (NN hammer)))) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN for) (NP (NNP Jo) (NNP Garcia)))))) (. ?)))",
        "mask_entity": "Which publisher of [ENT]'s hammer is also known for [ENT] ?",
        "entity": [
            "Lucifer",
            "Jo Garcia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "197",
        "question": "To whom was Tessa Dahl born to?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tessa_Dahl> <http://dbpedia.org/ontology/parent> ?uri } ",
        "SExpr": "(JOIN (R dbo:parent) dbr:Tessa_Dahl)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN To) (WHNP (WP whom))) (SQ (VBD was) (NP (NNP Tessa) (NNP Dahl)) (VP (VBN born) (PP (IN to)))) (. ?)))",
        "mask_entity": "To whom was [ENT] born to?",
        "entity": [
            "Tessa Dahl"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2931",
        "question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:field) dbr:Jon_Speelman) (JOIN (R dbo:sport) dbr:Polytechnic_University_of_the_Philippines_Taguig))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which sport at Polytechnic University of the Philippines Taguig",
                    "start": 0,
                    "end": 63
                },
                {
                    "description": "is the field of Jon speelman",
                    "start": 64,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN sport)) (PP (IN at) (NP (NP (NNP Polytechnic) (NNP University)) (PP (IN of) (NP (DT the) (NNPS Philippines) (NNP Taguig)))))) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NNP Jon) (NNP speelman))))) (. ?)))",
        "mask_entity": "Which sport at [ENT] is the field of [ENT] speelman ?",
        "entity": [
            "Polytechnic University of the Philippines Taguig",
            "Jon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2327",
        "question": "Count the number of things people who know linguistics are known for ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Linguistics> . ?x <http://dbpedia.org/ontology/knownFor> ?uri }",
        "SExpr": "(JOIN (R dbo:knownFor) (JOIN dbo:knownFor dbr:Linguistics)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of things",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "[IQ1] are known for",
                    "start": 27,
                    "end": 68,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 27,
                                "end": 33
                            },
                            {
                                "description": "who know linguistics",
                                "start": 34,
                                "end": 54
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NNS things)))) (SBAR (S (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP know) (NP (NN linguistics)))))) (VP (VBP are) (VP (VBN known) (PP (IN for)))))))) (. ?)))",
        "mask_entity": "Count the number of things people who know linguistics are known for ?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4389",
        "question": "Where were sverre krogh sundbo and havard vad petersson born?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:birthPlace) dbr:Sverre_Krogh_Sundb\u00f8) (JOIN (R dbp:placeOfBirth) dbr:H\u00e5vard_Vad_Petersson))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where were sverre krogh sundbo and havard vad petersson born",
                    "start": 0,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD were)) (NP (NP (NNP sverre) (NNP krogh) (NNP sundbo)) (CC and) (NP (NP (NNP havard) (NN vad) (NNP petersson)) (VP (VBN born))))) (. ?)))",
        "mask_entity": "Where were sverre krogh sundbo and havard vad petersson born?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "766",
        "question": "Was Cliff Burton in Metallica?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBD Was)) (NP (NNP Cliff) (NNP Burton)) (PP (IN in) (NP (NNP Metallica))) (. ?)))",
        "mask_entity": "Was [ENT] in [ENT]?",
        "entity": [
            "Cliff Burton",
            "Metallica"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4496",
        "question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbp:international dbr:Muslim_Brotherhood)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many religions",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are followed by [IQ1]",
                    "start": 19,
                    "end": 106,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "organizations",
                                "start": 35,
                                "end": 48
                            },
                            {
                                "description": "which are internationally known as the muslim brotherhood",
                                "start": 49,
                                "end": 106
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS religions)) (VP (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS organizations)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADVP (RB internationally)) (VP (VBN known) (PP (IN as) (NP (DT the) (JJ muslim) (NN brotherhood)))))))))))) (. ?)))",
        "mask_entity": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4218",
        "question": "What are some people born in NY known for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
        "SExpr": "(JOIN (R dbo:knownFor) (JOIN dbo:birthPlace dbr:New_York_City)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are [IQ1] known for",
                    "start": 0,
                    "end": 41,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "some people",
                                "start": 9,
                                "end": 20
                            },
                            {
                                "description": "born in NY",
                                "start": 21,
                                "end": 31
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (NP (DT some) (NNS people)) (VP (VBN born) (PP (IN in) (NP (NNP NY))))) (VP (VBN known) (PP (IN for)))))) (. ?)))",
        "mask_entity": "What are some people born in [ENT] known for?",
        "entity": [
            "NY"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3255",
        "question": "Who is the developer of the software which is produced by Claris ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "SExpr": "(JOIN (R dbo:developer) (AND dbo:Software (JOIN (R dbp:products) dbr:Claris))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is the developer of [IQ1]",
                    "start": 0,
                    "end": 64,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the software",
                                "start": 24,
                                "end": 36
                            },
                            {
                                "description": "which is produced by Claris",
                                "start": 37,
                                "end": 64
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN developer)) (PP (IN of) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN produced) (PP (IN by) (NP (NNP Claris)))))))))))) (. ?)))",
        "mask_entity": "Who is the developer of the software which is produced by [ENT] ?",
        "entity": [
            "Claris"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "202",
        "question": "What is the river whose source is Cowombat  Flat and has it's mouth located in Murray Mouth?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Cowombat_Flat> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:source dbr:Cowombat_Flat) (JOIN dbo:riverMouth dbr:Murray_Mouth)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the river",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose source is Cowombat Flat",
                    "start": 18,
                    "end": 47
                },
                {
                    "description": "and has it's mouth located in Murray Mouth",
                    "start": 48,
                    "end": 90
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source)) (S (VP (VP (VBZ is) (NP (NNP Cowombat) (NNP Flat))) (CC and) (VP (VBZ has) (NP (NP (NP (PRP it) (POS 's)) (NN mouth)) (VP (VBN located) (PP (IN in) (NP (NNP Murray) (NNP Mouth)))))))))))) (. ?)))",
        "mask_entity": "What is the river whose source is [ENT] and has it's mouth located in [ENT]?",
        "entity": [
            "Cowombat  Flat",
            "Murray Mouth"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3510",
        "question": "Where does the river flow into which begins in Lebrsnik?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
        "SExpr": "(JOIN (R dbo:riverMouth) (JOIN dbo:sourcePlace dbr:Lebr\u0161nik)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where does the river flow into [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "which begins in Lebrsnik",
                                "start": 31,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB flow) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (VP (VBZ begins) (PP (IN in) (NP (NNP Lebrsnik)))))))) (. ?)))",
        "mask_entity": "Where does the river flow into which begins in [ENT]?",
        "entity": [
            "Lebrsnik"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1733",
        "question": "What is the government type of Ancient Rome ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?uri } ",
        "SExpr": "(JOIN (R dbo:governmentType) dbr:Ancient_Rome)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN government) (NN type)) (PP (IN of) (NP (NNP Ancient) (NNP Rome)))))) (. ?)))",
        "mask_entity": "What is the government type of [ENT] ?",
        "entity": [
            "Ancient Rome"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2777",
        "question": "Which director of On deadly Ground also released Mojo Priest ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/property/director> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:artist) dbr:Mojo_Priest) (JOIN (R dbp:director) dbr:On_Deadly_Ground))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which director of On deadly Ground",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "also released Mojo Priest",
                    "start": 35,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN director)) (PP (IN of) (PP (IN On) (NP (JJ deadly))))) (S (NP (NNP Ground)) (ADVP (RB also)) (VP (VBD released) (NP (NNP Mojo) (NNP Priest)))) (. ?)))",
        "mask_entity": "Which director of [ENT] also released [ENT] ?",
        "entity": [
            "On deadly Ground",
            "Mojo Priest"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1707",
        "question": "What is the television show whose channel's parent organisation is Fox Sports?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports_(United_States)> . ?uri <http://dbpedia.org/ontology/channel> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:channel (JOIN dbo:parentOrganisation dbr:Fox_Sports_(United_States)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the television show",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "whose channel's [IQ1]",
                    "start": 28,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "parent organisation is Fox Sports",
                                "start": 44,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN television) (NN show)) (SBAR (WHNP (WP$ whose) (NN channel) (POS 's)) (S (NP (NN parent) (NN organisation)) (VP (VBZ is) (NP (NNP Fox) (NNP Sports)))))))) (. ?)))",
        "mask_entity": "What is the television show whose channel's parent organisation is [ENT]?",
        "entity": [
            "Fox Sports"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3474",
        "question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Invasion_of_Buwat> <http://dbpedia.org/property/commander> ?uri. <http://dbpedia.org/resource/Fatimah_bint_Sa'd> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:commander) dbr:Invasion_of_Buwat) (JOIN (R dbo:knownFor) dbr:Fatimah_bint_Sa'd))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who commanded the invasion of Buwat",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "and made Fatima bint Sa'd famous",
                    "start": 36,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VP (VBD commanded) (NP (NP (DT the) (NN invasion)) (PP (IN of) (NP (NNP Buwat))))) (CC and) (VP (VBD made) (S (NP (NNP Fatima) (NNP bint) (NNP Sa'd)) (ADJP (JJ famous)))))) (. ?)))",
        "mask_entity": "Who commanded the invasion of [ENT] and made [ENT] bint [ENT] famous?",
        "entity": [
            "Buwat",
            "Fatima",
            "Sa'd"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "854",
        "question": "What is the home ground of the clubs managed by Ciao Zanardi?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "SExpr": "(JOIN (R dbo:ground) (AND dbo:SoccerClubSeason (JOIN dbo:manager dbr:Caio_Zanardi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the home ground of [IQ1]",
                    "start": 0,
                    "end": 60,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the clubs",
                                "start": 27,
                                "end": 36
                            },
                            {
                                "description": "managed by Ciao Zanardi",
                                "start": 37,
                                "end": 60
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN home) (NN ground)) (PP (IN of) (NP (NP (DT the) (NNS clubs)) (VP (VBN managed) (PP (IN by) (NP (NNP Ciao) (NNP Zanardi))))))))) (. ?)))",
        "mask_entity": "What is the home ground of the clubs managed by [ENT]?",
        "entity": [
            "Ciao Zanardi"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4737",
        "question": "What is the country with native language as Languages of Ethiopia?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbo:language dbr:Languages_of_Ethiopia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the country",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "with native language as Languages of Ethiopia",
                    "start": 20,
                    "end": 65
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN country)) (PP (IN with) (NP (NP (JJ native) (NN language)) (PP (IN as) (NP (NP (NNPS Languages)) (PP (IN of) (NP (NNP Ethiopia)))))))))) (. ?)))",
        "mask_entity": "What is the country with native language as [ENT] of [ENT]?",
        "entity": [
            "Languages",
            "Ethiopia"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4097",
        "question": "What is the band with previous members  Kevin Jonas and Joe Jonas?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "SExpr": "(AND dbo:Band (AND (JOIN dbp:pastMembers dbr:Kevin_Jonas) (JOIN dbp:pastMembers dbr:Joe_Jonas)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the band",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "with previous members Kevin Jonas and Joe Jonas",
                    "start": 17,
                    "end": 64
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN band)) (PP (IN with) (NP (NP (JJ previous) (NNS members)) (NP (NP (NNP Kevin) (NNP Jonas)) (CC and) (NP (NNP Joe) (NNP Jonas)))))))) (. ?)))",
        "mask_entity": "What is the band with previous members  [ENT] and [ENT]?",
        "entity": [
            "Kevin Jonas",
            "Joe Jonas"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2160",
        "question": "List the people with Scientology as their religious belief?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(AND dbo:Person (JOIN dbo:religion dbr:Scientology))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "with Scientology as their religious belief",
                    "start": 16,
                    "end": 58
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NNP Scientology))) (PP (IN as) (NP (PRP$ their) (JJ religious) (NN belief)))) (. ?)))",
        "mask_entity": "List the people with [ENT] as their religious belief?",
        "entity": [
            "Scientology"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "698",
        "question": "How many fictional characters were humans?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (JOIN dbo:species dbr:Human))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many fictional characters",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "were humans",
                    "start": 30,
                    "end": 41
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (JJ fictional) (NNS characters)) (VP (VBD were) (NP (NNS humans)))) (. ?)))",
        "mask_entity": "How many fictional characters were humans?",
        "entity": [],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4947",
        "question": "Where was Girls (The Prodigy song)  recorded ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/property/recorded> ?uri } ",
        "SExpr": "(JOIN (R dbp:recorded) dbr:Girls_(The_Prodigy_song))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Girls)) (VP (-LRB- () (NP (NP (DT The) (NNP Prodigy) (NN song)) (ADVP (-RRB- )))) (S (VP (VBN recorded))))) (. ?)))",
        "mask_entity": "Where was Girls (The Prodigy song)  recorded ?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2999",
        "question": "How many TV shows' networks are headquarterd in NY?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:network (JOIN dbp:headquarters dbr:New_York))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many TV shows' networks",
                    "start": 0,
                    "end": 27
                },
                {
                    "description": "[IQ1]",
                    "start": 28,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "are headquartered in NY",
                                "start": 28,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (NP (JJ many) (NN TV) (NNS shows) (POS ')) (NNS networks)) (VP (VBP are) (VP (VBN headquarterd) (PP (IN in) (NP (NNP NY)))))) (. ?)))",
        "mask_entity": "How many TV shows' networks are headquarterd in [ENT]?",
        "entity": [
            "NY"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3696",
        "question": "Does StandBy records distribute via Sony?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP StandBy) (NNS records)) (VP (VB distribute) (PP (IN via) (NP (NNP Sony)))) (. ?)))",
        "mask_entity": "Does [ENT] records distribute via [ENT]?",
        "entity": [
            "StandBy",
            "Sony"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1636",
        "question": "Give me some shows owned by BBC one and BBC hd?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbo:network dbr:BBC_One) (JOIN dbo:network dbr:BBC_HD)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me some shows",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "owned by BBC one and BBC hd",
                    "start": 19,
                    "end": 46
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT some) (NNS shows)) (VP (VBN owned) (PP (IN by) (NP (NP (NNP BBC) (CD one)) (CC and) (NP (NNP BBC) (NN hd))))))) (. ?)))",
        "mask_entity": "Give me some shows owned by [ENT] one and [ENT] hd?",
        "entity": [
            "BBC",
            "BBC"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3457",
        "question": "How many teams have rented stadiums in Canada?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
        "SExpr": "(JOIN (R dbp:tenants) (JOIN dbp:location dbr:Canada)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many teams",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "have rented [IQ1]",
                    "start": 15,
                    "end": 45,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "stadiums",
                                "start": 27,
                                "end": 35
                            },
                            {
                                "description": "in Canada",
                                "start": 36,
                                "end": 45
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS teams)) (VP (VBP have) (VP (VBN rented) (NP (NNS stadiums)) (PP (IN in) (NP (NNP Canada)))))) (. ?)))",
        "mask_entity": "How many teams have rented stadiums in [ENT]?",
        "entity": [
            "Canada"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3581",
        "question": "List the awards won by the film director of Chicken Run?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "SExpr": "(JOIN (R dbo:award) (JOIN (R dbp:director) dbr:Chicken_Run)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the awards",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "won by [IQ1]",
                    "start": 16,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the film director of Chicken Run",
                                "start": 23,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Chicken) (NNP Run)))))))) (. ?)))",
        "mask_entity": "List the awards won by the film director of [ENT]?",
        "entity": [
            "Chicken Run"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1291",
        "question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:territory) dbr:Sino-French_War) (JOIN (R dbp:battles) dbr:Raoul_Magrin-Vernerey))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What territory of Sino French War",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "was the battle of Raoul Magrin-Vernerey fought",
                    "start": 34,
                    "end": 80
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN territory)) (PP (IN of) (NP (NNP Sino) (JJ French) (NNP War)))) (SQ (VP (VBD was)) (NP (NP (DT the) (NN battle)) (PP (IN of) (NP (NNP Raoul) (NNP Magrin-Vernerey)))) (VP (VBD fought))) (. ?)))",
        "mask_entity": "What territory of [ENT] was the battle of [ENT] fought ?",
        "entity": [
            "Sino French War",
            "Raoul Magrin-Vernerey"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4659",
        "question": "List the  outflow of Lake Uniamsi?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?uri } ",
        "SExpr": "(JOIN (R dbo:outflow) dbr:Lake_Uniam\u00e9si)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN outflow)) (PP (IN of) (NP (NNP Lake) (NNP Uniamsi))))) (. ?)))",
        "mask_entity": "List the  outflow of [ENT]?",
        "entity": [
            "Lake Uniamsi"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1853",
        "question": "Did John Byrne create Emma Frost?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP John) (NNP Byrne)) (VP (VB create) (NP (NNP Emma) (NNP Frost))) (. ?)))",
        "mask_entity": "Did [ENT] create [ENT]?",
        "entity": [
            "John Byrne",
            "Emma Frost"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3763",
        "question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Was) (NP (NNP Heinrich) (NNP Himmler)) (ADVP (RB ever)) (NP (NP (DT a) (NNS commanders)) (PP (IN of) (NP (NNP Army) (NNP Group) (NNP Oberrhein)))) (. ?)))",
        "mask_entity": "Was [ENT] ever a commanders of [ENT]?",
        "entity": [
            "Heinrich Himmler",
            "Army Group Oberrhein"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3304",
        "question": "List the universities from a country where Norwegian language is officially accepted.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "SExpr": "(AND dbo:University (JOIN dbo:country (JOIN dbo:officialLanguage dbr:Norwegian_language))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the universities",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "from [IQ1]",
                    "start": 22,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a country",
                                "start": 27,
                                "end": 36
                            },
                            {
                                "description": "where Norwegian language is officially accepted",
                                "start": 37,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (DT the) (NNS universities)) (PP (IN from) (NP (NP (DT a) (NN country)) (SBAR (WHADVP (WRB where)) (S (NP (JJ Norwegian) (NN language)) (VP (VBZ is) (ADVP (RB officially)) (VP (VBN accepted)))))))) (. .)))",
        "mask_entity": "List the universities from a country where [ENT] language is officially accepted.",
        "entity": [
            "Norwegian"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4912",
        "question": "Name the incumbent of Linda Jenness ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?uri } ",
        "SExpr": "(JOIN (R dbo:incumbent) dbr:Linda_Jenness)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN incumbent)) (PP (IN of) (NP (NNP Linda) (NNP Jenness))))) (. ?)))",
        "mask_entity": "Name the incumbent of [ENT] ?",
        "entity": [
            "Linda Jenness"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3743",
        "question": "Which companies makes cars assembled in Karachi, Pakistan?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Karachi> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbp:parentCompany) (AND dbo:Automobile (JOIN dbp:assembly dbr:Karachi))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which companies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "makes [IQ1]",
                    "start": 16,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "cars",
                                "start": 22,
                                "end": 26
                            },
                            {
                                "description": "assembled in Karachi, Pakistan",
                                "start": 27,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS companies)) (S (VP (VBZ makes) (NP (NP (NNS cars)) (VP (VBN assembled) (PP (IN in) (NP (NP (NNP Karachi)) (, ,) (NP (NNP Pakistan)))))))) (. ?)))",
        "mask_entity": "Which companies makes cars assembled in [ENT], [ENT]?",
        "entity": [
            "Karachi",
            "Pakistan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3445",
        "question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "SExpr": "(AND dbo:Company (AND (JOIN dbo:foundedBy dbr:Fusajiro_Yamauchi) (JOIN dbp:services dbr:Nintendo_eShop)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which company",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "founded by Fusajiro Yamauchi",
                    "start": 14,
                    "end": 42
                },
                {
                    "description": "also provides services of Nintendo eShop",
                    "start": 43,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which) (NN company)) (S (VP (VBN founded) (PP (IN by) (NP (NNP Fusajiro) (NNP Yamauchi)))))) (ADVP (RB also)) (VP (VBZ provides) (NP (NP (NNS services)) (PP (IN of) (NP (NNP Nintendo) (NNP eShop))))) (. ?)))",
        "mask_entity": "Which company founded by [ENT] also provides services of [ENT] ?",
        "entity": [
            "Fusajiro Yamauchi",
            "Nintendo eShop"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1998",
        "question": "In which countries does the sea lie on whose shore is the city of Cumana?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Cuman\u00e1> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(JOIN (R dbo:country) (AND dbo:Sea (JOIN dbp:cities dbr:Cuman\u00e1))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which countries",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "does the sea lie on",
                    "start": 19,
                    "end": 38
                },
                {
                    "description": "[IQ1]",
                    "start": 39,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose shore is the city of Cumana",
                                "start": 39,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS countries)) (VP (VBZ does) (NP (DT the) (NN sea)) (VP (VB lie) (PP (IN on) (SBAR (WHNP (WP$ whose) (NN shore)) (S (VP (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Cumana))))))))))) (. ?)))",
        "mask_entity": "In which countries does the sea lie on whose shore is the city of [ENT]?",
        "entity": [
            "Cumana"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "663",
        "question": "Tirana is the largest city of which country?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "SExpr": "(AND dbo:Country (JOIN dbo:largestCity dbr:Tirana))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Tirana is the largest city of",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "which country",
                    "start": 30,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Tirana)) (VP (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (NP (NN country))))) (. ?)))",
        "mask_entity": "[ENT] is the largest city of which country?",
        "entity": [
            "Tirana"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4779",
        "question": "From which countries are the people from who are an academic authority of the Western pygmy blue species?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "SExpr": "(JOIN (R dbo:citizenship) (AND dbo:Person (JOIN (R dbo:binomialAuthority) dbr:Western_pygmy_blue))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From which countries",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "are the people from",
                    "start": 21,
                    "end": 40
                },
                {
                    "description": "[IQ1]",
                    "start": 41,
                    "end": 104,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "who are an academic authority of the Western pygmy blue species",
                                "start": 41,
                                "end": 104
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN From) (WHNP (WDT which))) (S (NP (NNS countries)) (VP (VBP are) (NP (NP (DT the) (NNS people)) (PP (IN from) (SBAR (WHNP (WP who)) (S (VP (VBP are) (NP (NP (DT an) (JJ academic) (NN authority)) (PP (IN of) (NP (DT the) (JJ Western) (NN pygmy) (JJ blue) (NNS species))))))))))) (. ?)))",
        "mask_entity": "From which countries are the people from who are an academic authority of the [ENT] pygmy blue species?",
        "entity": [
            "Western"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3748",
        "question": "Where is the headquarters of Sigma TV",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sigma_TV> <http://dbpedia.org/property/headquarters> ?uri } ",
        "SExpr": "(JOIN (R dbp:headquarters) dbr:Sigma_TV)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB Where)) (SINV (VP (VBZ is)) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Sigma) (NNP TV)))))))",
        "mask_entity": "Where is the headquarters of [ENT]",
        "entity": [
            "Sigma TV"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4413",
        "question": "Which scientist was advised by John Robert Woodyard?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:doctoralAdvisor dbr:John_Robert_Woodyard))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which scientist",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "was advised by John Robert Woodyard",
                    "start": 16,
                    "end": 51
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN scientist)) (S (VP (VBD was) (VP (VBN advised) (PP (IN by) (NP (NNP John) (NNP Robert) (NNP Woodyard)))))) (. ?)))",
        "mask_entity": "Which scientist was advised by [ENT]?",
        "entity": [
            "John Robert Woodyard"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4744",
        "question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:launchSite) dbr:Juno_I) (JOIN (R dbo:ground) dbr:2016_Fort_Lauderdale_Strikers_season))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the launch site of the Juno I",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "which was also the ground of 2016 Fort Lauderdale Strikers season",
                    "start": 38,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (NP (DT the) (NNP Juno) (CD I)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN ground)) (PP (IN of) (NP (CD 2016) (NML (NML (NNP Fort) (NNP Lauderdale)) (NNP Strikers)) (NN season)))))))))))) (. ?)))",
        "mask_entity": "What is the launch site of the [ENT] I which was also the ground of [ENT] [ENT] season ?",
        "entity": [
            "Juno",
            "2016",
            "Fort Lauderdale Strikers"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "709",
        "question": "Who has been married to both Penny Lancaster and Alana Stewart?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:spouse) dbr:Penny_Lancaster) (JOIN (R dbo:spouse) dbr:Alana_Stewart))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has been married to both Penny Lancaster and Alana Stewart",
                    "start": 0,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN married) (PP (IN to) (NP (CC both) (NP (NNP Penny) (NNP Lancaster)) (CC and) (NP (NNP Alana) (NNP Stewart)))))))) (. ?)))",
        "mask_entity": "Who has been married to both [ENT] and [ENT]?",
        "entity": [
            "Penny Lancaster",
            "Alana Stewart"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1282",
        "question": "Count the affiliations of International Union of Anarchists?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?uri  . }",
        "SExpr": "(JOIN (R dbp:affiliation) dbr:International_Union_of_Anarchists)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS affiliations)) (PP (IN of) (NP (NP (NNP International) (NNP Union)) (PP (IN of) (NP (NNPS Anarchists))))))) (. ?)))",
        "mask_entity": "Count the affiliations of [ENT]?",
        "entity": [
            "International Union of Anarchists"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2675",
        "question": "What is the alma mater of the scientist  whose PhD advisor is Jean-Claude Latombe ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbp:almaMater) (AND dbo:Scientist (JOIN dbo:doctoralAdvisor dbr:Jean-Claude_Latombe))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the alma mater of [IQ1]",
                    "start": 0,
                    "end": 80,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the scientist",
                                "start": 26,
                                "end": 39
                            },
                            {
                                "description": "whose PhD advisor is Jean-Claude Latombe",
                                "start": 40,
                                "end": 80
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN PhD) (NN advisor)) (S (VP (VBZ is) (NP (NNP Jean-) (NNP Claude) (NNP Latombe)))))))))) (. ?)))",
        "mask_entity": "What is the alma mater of the scientist  whose [ENT] advisor is [ENT] ?",
        "entity": [
            "PhD",
            "Jean-Claude Latombe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4029",
        "question": "List the people residing in Wilton, Connecticut?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> } ",
        "SExpr": "(JOIN dbp:residence dbr:Wilton,_Connecticut)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS people)) (VP (VBG residing) (PP (IN in) (NP (NP (NNP Wilton)) (, ,) (NP (NNP Connecticut))))))) (. ?)))",
        "mask_entity": "List the people residing in [ENT], [ENT]?",
        "entity": [
            "Wilton",
            "Connecticut"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1306",
        "question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:location) dbr:Peetz_Table_Wind_Energy_Center) (JOIN (R dbp:state) dbr:Ben_Nighthorse_Campbell))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the Location of the Peetz Table Wind Energy Center",
                    "start": 0,
                    "end": 58
                },
                {
                    "description": "which is also the state of Ben Nighthorse Campbell",
                    "start": 59,
                    "end": 109
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (NP (DT the) (NN Location)) (PP (IN of) (NP (DT the) (NML (NNP Peetz) (NNP Table)) (NNP Wind) (NNP Energy) (NNP Center)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Ben) (NNP Nighthorse) (NNP Campbell)))))))))) (. ?)))",
        "mask_entity": "What is [ENT] which is also the state of [ENT] ?",
        "entity": [
            "the Location of the Peetz Table Wind Energy Center",
            "Ben Nighthorse Campbell"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2237",
        "question": "Count the water bodies that flow into the North Sea?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . }",
        "SExpr": "(JOIN (R dbp:inflow) dbr:North_Sea)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN water) (NNS bodies)) (SBAR (WHNP (WDT that)) (S (VP (VBP flow) (PP (IN into) (NP (DT the) (NNP North) (NNP Sea)))))))) (. ?)))",
        "mask_entity": "Count the water bodies that flow into [ENT]?",
        "entity": [
            "the North Sea"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3302",
        "question": "Who was the First Driver of 1999 San Marino Grand Prix ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
        "SExpr": "(JOIN (R dbp:firstDriver) dbr:1999_San_Marino_Grand_Prix)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (DT the) (JJ First) (NNP Driver)) (PP (IN of) (NP (CD 1999) (NML (NNP San) (NNP Marino)) (NNP Grand) (NNP Prix)))))) (. ?)))",
        "mask_entity": "Who was the [ENT] Driver of [ENT] [ENT] ?",
        "entity": [
            "First",
            "1999",
            "San Marino Grand Prix"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2038",
        "question": "Bantam Spectra is the publisher of which series?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Bantam_Spectra> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "SExpr": "(JOIN (R dbo:series) (JOIN dbp:publisher dbr:Bantam_Spectra)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] which series",
                    "start": 0,
                    "end": 47,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Bantam Spectra is the publisher of",
                                "start": 0,
                                "end": 34
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Bantam) (NNP Spectra)) (VP (VBZ is) (NP (NP (DT the) (NN publisher)) (WHPP (IN of) (WHNP (WDT which) (NN series))))) (. ?)))",
        "mask_entity": "[ENT] is the publisher of which series?",
        "entity": [
            "Bantam Spectra"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1529",
        "question": "Where is the sister station of Al Arabiya 99 located?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Arabiya_99> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
        "SExpr": "(JOIN (R dbp:location) (AND dbo:RadioStation (JOIN dbp:sisterStations dbr:Al_Arabiya_99))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is [IQ1] located",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the sister station of Al Arabiya 99",
                                "start": 9,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NP (NNP Al) (NNP Arabiya)) (NP (CD 99))))) (VP (VBN located))) (. ?)))",
        "mask_entity": "Where is the sister station of [ENT] located?",
        "entity": [
            "Al Arabiya 99"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1663",
        "question": "Which common prime minister did Graham Richardson and Bon McMullan serve ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:primeMinister) dbr:Graham_Richardson) (JOIN (R dbo:primeMinister) dbr:Bob_McMullan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which common prime minister did Graham Richardson and Bon McMullan serve",
                    "start": 0,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ common) (JJ prime) (NN minister)) (SQ (VBD did) (NP (NP (NNP Graham) (NNP Richardson)) (CC and) (NP (NNP Bon) (NNP McMullan))) (VP (VB serve))) (. ?)))",
        "mask_entity": "Which common prime minister did [ENT] and [ENT] serve ?",
        "entity": [
            "Graham Richardson",
            "Bon McMullan"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4934",
        "question": "How many things are produced by companies located in Tehran?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "SExpr": "(JOIN (R dbo:product) (JOIN dbp:location dbr:Tehran)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many things",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "are produced by [IQ1]",
                    "start": 16,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "companies",
                                "start": 32,
                                "end": 41
                            },
                            {
                                "description": "located in Tehran",
                                "start": 42,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS things)) (VP (VBP are) (VP (VBN produced) (PP (IN by) (NP (NP (NNS companies)) (VP (VBN located) (PP (IN in) (NP (NNP Tehran))))))))) (. ?)))",
        "mask_entity": "How many things are produced by companies located in [ENT]?",
        "entity": [
            "Tehran"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4953",
        "question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charlie_Justice_(American_football_player)> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:pastteams) dbr:Charlie_Justice_(American_football_player)) (JOIN (R dbp:pastteams) dbr:Bobby_Hoppe))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
                    "start": 0,
                    "end": 95
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBZ is) (NP (NP (DT the) (JJ common) (JJ past) (NN team)) (PP (IN of) (NP (NP (NP (DT the) (NNP Charlie) (NNP Justice)) (NP (NP (ADJP (-LRB- () (JJ American)) (NN football) (NN player)) (ADVP (-RRB- ))))) (CC and) (NP (NNP Bobby) (NNP Hoppe))))))) (. ?)))",
        "mask_entity": "Which is the common past team of the [ENT] ([ENT] football player) and [ENT] ?",
        "entity": [
            "Charlie Justice",
            "American",
            "Bobby Hoppe"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3627",
        "question": "Name the officeholder who hasa child named Augustus and has an associate named Marcus Bibulus ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (AND (JOIN dbo:associate dbr:Marcus_Calpurnius_Bibulus) (JOIN dbp:children dbr:Augustus)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the officeholder",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "who has child named Augustus",
                    "start": 22,
                    "end": 50
                },
                {
                    "description": "and has an associate named Marcus Bibulus",
                    "start": 51,
                    "end": 92
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN officeholder)) (SBAR (WHNP (WP who) (JJ hasa) (NN child)) (S (VP (VP (VBN named) (NP (NNP Augustus))) (CC and) (VP (VBZ has) (NP (NP (DT an) (NN associate)) (VP (VBN named) (S (NP (NNP Marcus) (NNP Bibulus))))))))))) (. ?)))",
        "mask_entity": "Name the officeholder who hasa child named [ENT] and has an associate named [ENT] ?",
        "entity": [
            "Augustus",
            "Marcus Bibulus"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2693",
        "question": "Which party won both the general electoin and the andhra pradesh election in 2004?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:affiliation) dbr:Indian_general_election,_2004_(Delhi)) (JOIN (R dbo:affiliation) dbr:Indian_general_election,_2004_(Andhra_Pradesh)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which party",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "won both the general election and the andhra pradesh election in 2004",
                    "start": 12,
                    "end": 81
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN party)) (S (VP (VBD won) (NP (CC both) (NP (DT the) (JJ general) (NN electoin)) (CC and) (NP (DT the) (JJ andhra) (NNP pradesh) (NN election))) (PP (IN in) (NP (CD 2004))))) (. ?)))",
        "mask_entity": "Which party won both the general electoin and the andhra pradesh election in [ENT]?",
        "entity": [
            "2004"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3060",
        "question": "Give me someone on the board of trinity house?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House>  . }",
        "SExpr": "(JOIN dbo:board dbr:Trinity_House)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NN someone)) (PP (IN on) (NP (NP (DT the) (NN board)) (PP (IN of) (NP (NN trinity) (NN house)))))) (. ?)))",
        "mask_entity": "Give me someone on the board of trinity house?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1597",
        "question": "Whose leaders are Willem-Alexander and Fredis Refunjol?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . }",
        "SExpr": "(AND (JOIN dbo:leader dbr:Willem-Alexander_of_the_Netherlands) (JOIN dbo:leader dbr:Fredis_Refunjol))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Whose leaders are Willem-Alexander and Fredis Refunjol",
                    "start": 0,
                    "end": 54
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WP$ Whose) (NNS leaders)) (VP (VBP are) (NP (NNP Willem-Alexander) (CC and) (NNP Fredis) (NNP Refunjol))) (. ?)))",
        "mask_entity": "Whose leaders are [ENT] and [ENT]?",
        "entity": [
            "Willem-Alexander",
            "Fredis Refunjol"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2729",
        "question": "Horses grandsired by Sundridge  have won which awards?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Sundridge_(horse)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "SExpr": "(JOIN (R dbo:honours) (AND dbo:Horse (JOIN dbo:grandsire dbr:Sundridge_(horse)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] have won which awards",
                    "start": 0,
                    "end": 52,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Horses",
                                "start": 0,
                                "end": 6
                            },
                            {
                                "description": "grandsired by Sundridge",
                                "start": 7,
                                "end": 30
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN grandsired) (PP (IN by) (NP (NNP Sundridge))))) (VP (VBP have) (VP (VBN won) (SBAR (WHNP (WDT which) (NNS awards)) (. ?))))))",
        "mask_entity": "Horses grandsired by [ENT]  have won which awards?",
        "entity": [
            "Sundridge"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2625",
        "question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbp:sourceRegion dbr:North-Western_Province,_Zambia) (JOIN dbo:riverMouth dbr:Indian_Ocean)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the river",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "whose source region is North-Western Province, Zambia",
                    "start": 18,
                    "end": 71
                },
                {
                    "description": "and river mouth is Indian Ocean",
                    "start": 72,
                    "end": 103
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN source) (NN region)) (S (VP (VBZ is) (NP (NNP North) (NNP -Western) (NNP Province))))))))) (, ,) (NP (NP (NNP Zambia)) (CC and) (NP (NN river) (NN mouth))) (VP (VBZ is) (NP (NNP Indian) (NNP Ocean))) (. ?)))",
        "mask_entity": "What is the river whose source region is [ENT], [ENT] and river mouth is [ENT]?",
        "entity": [
            "North-Western Province",
            "Zambia",
            "Indian Ocean"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3157",
        "question": "Who was on the first team in the GPs that were held at Watkins Glen, NY?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
        "SExpr": "(JOIN (R dbp:firstTeam) (AND dbo:GrandPrix (JOIN dbp:location dbr:Watkins_Glen,_New_York))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was on the first team in [IQ1]",
                    "start": 0,
                    "end": 71,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the GPs",
                                "start": 29,
                                "end": 36
                            },
                            {
                                "description": "that were held at Watkins Glen, NY",
                                "start": 37,
                                "end": 71
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN on) (NP (NP (NP (DT the) (JJ first) (NN team)) (PP (IN in) (NP (DT the) (NNP GPs)))) (SBAR (WHNP (WDT that)) (S (VP (VBD were) (VP (VBN held) (PP (IN at) (NP (NP (NNP Watkins) (NNP Glen)) (, ,) (NP (NNP NY)))))))))))) (. ?)))",
        "mask_entity": "Who was on the [ENT] team in the [ENT] that were held at [ENT], [ENT]?",
        "entity": [
            "first",
            "GPs",
            "Watkins Glen",
            "NY"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3314",
        "question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:screenplay dbr:Akiva_Goldsman) (JOIN dbo:director dbr:Joel_Schumacher)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose screenplay is by Akiva Goldsman",
                    "start": 15,
                    "end": 52
                },
                {
                    "description": "and directed by Joel Schumacher",
                    "start": 53,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VP (VBZ is) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))) (CC and) (VP (VBN directed) (PP (IN by) (NP (NNP Joel) (NNP Schumacher))))))))) (. ?)))",
        "mask_entity": "Name the movie whose screenplay is by [ENT] and directed by [ENT] ?",
        "entity": [
            "Akiva Goldsman",
            "Joel Schumacher"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1722",
        "question": "What ethinicity of Linda Hogan is also the state of origin of Holmes Colbert ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:ethnicity) dbr:Linda_Hogan) (JOIN (R dbo:stateOfOrigin) dbr:Holmes_Colbert))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What ethnicity of Linda Hogan",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "is also the state of origin of Holmes Colbert",
                    "start": 30,
                    "end": 75
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN ethinicity)) (PP (IN of) (NP (NNP Linda) (NNP Hogan)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NP (NN origin)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert))))))) (. ?)))",
        "mask_entity": "What ethinicity of [ENT] is also the state of origin of [ENT] ?",
        "entity": [
            "Linda Hogan",
            "Holmes Colbert"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1059",
        "question": "What are the track and field events of Jamiatu Muslim Mindanao?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri } ",
        "SExpr": "(JOIN (R dbp:athletics) dbr:Jamiatu_Muslim_Mindanao)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NML (NN track) (CC and) (NN field)) (NNS events)) (PP (IN of) (NP (NNP Jamiatu) (JJ Muslim) (NNP Mindanao)))))) (. ?)))",
        "mask_entity": "What are the track and field events of [ENT] [ENT]?",
        "entity": [
            "Jamiatu Muslim",
            "Mindanao"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4636",
        "question": "How many cities are close to Lake Victoria?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri  . }",
        "SExpr": "(JOIN (R dbo:nearestCity) dbr:Lake_Victoria)",
        "intent": "COUNT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS cities)) (VP (VBP are) (ADJP (JJ close) (PP (IN to) (NP (NNP Lake) (NNP Victoria)))))) (. ?)))",
        "mask_entity": "How many cities are close to [ENT]?",
        "entity": [
            "Lake Victoria"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3242",
        "question": "Is greasy pop recording the distributor of festival records?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Greasy_Pop_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Festival_Records> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NP (JJ greasy) (NN pop)) (VP (VBG recording) (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NN festival) (NNS records)))))) (. ?)))",
        "mask_entity": "Is greasy pop recording the distributor of festival records?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "1678",
        "question": "What is the baseball team whose club manager's debut team is Houston Astros?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "SExpr": "(AND dbo:BaseballTeam (JOIN dbo:manager (JOIN dbo:debutTeam dbr:Houston_Astros))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the baseball team",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose club manager's [IQ1]",
                    "start": 26,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "debut team is Houston Astros",
                                "start": 47,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NN club) (NN manager) (POS 's)) (S (NP (NN debut) (NN team)) (VP (VBZ is) (NP (NNP Houston) (NNP Astros)))))))) (. ?)))",
        "mask_entity": "What is the baseball team whose club manager's debut team is [ENT]?",
        "entity": [
            "Houston Astros"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1757",
        "question": "What cities are near to Nihoa which is also known as Bird Island ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbp:nearestCity) dbr:Nihoa)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (PP (IN near) (PP (IN to) (NP (NP (NNP Nihoa)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (NNP Bird) (NNP Island)))))))))))) (. ?)))",
        "mask_entity": "What cities are near to [ENT] which is also known as [ENT] ?",
        "entity": [
            "Nihoa",
            "Bird Island"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4191",
        "question": "Is Sloth in the Chordate phylum?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sloth> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Sloth)) (PP (IN in) (NP (DT the) (JJ Chordate) (NN phylum))) (. ?)))",
        "mask_entity": "Is Sloth in the [ENT] phylum?",
        "entity": [
            "Chordate"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "563",
        "question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/owner> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:operator) dbr:New_Sanno_Hotel) (JOIN (R dbp:owner) dbr:Naval_Air_Facility_Adak))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which shareholder of Naval Air facility Adak",
                    "start": 0,
                    "end": 44
                },
                {
                    "description": "is also the operator of New Sanno Hotel",
                    "start": 45,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN shareholder)) (PP (IN of) (NP (NML (NML (NNP Naval) (NNP Air)) (NN facility)) (NNP Adak)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN operator)) (PP (IN of) (NP (NNP New) (NNP Sanno) (NNP Hotel)))))) (. ?)))",
        "mask_entity": "Which shareholder of [ENT] facility [ENT] is also the operator of [ENT] ?",
        "entity": [
            "Naval Air",
            "Adak",
            "New Sanno Hotel"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2790",
        "question": "What other awards have been given to Golden Globe winners?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "SExpr": "(JOIN (R dbp:awards) (JOIN dbo:award dbr:Golden_Globe_Award)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What other awards",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "have been given to [IQ1]",
                    "start": 18,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "Golden Globe winners",
                                "start": 37,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NNS awards)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NML (NNP Golden) (NNP Globe)) (NNS winners))))))) (. ?)))",
        "mask_entity": "What other awards have been given to [ENT] winners?",
        "entity": [
            "Golden Globe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "863",
        "question": "Which allegiance of the John Kotelawala is also the  sovereign state of the Sanath Weerakoon ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:allegiance) dbr:John_Kotelawala) (JOIN (R dbo:country) dbr:Sanath_Weerakoon))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which allegiance of the John Kotelawala",
                    "start": 0,
                    "end": 39
                },
                {
                    "description": "is also the sovereign state of the Sanath Weerakoon",
                    "start": 40,
                    "end": 91
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN allegiance)) (PP (IN of) (NP (DT the) (NNP John) (NNP Kotelawala)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN sovereign) (NN state)) (PP (IN of) (NP (DT the) (NNP Sanath) (NNP Weerakoon))))) (. ?)))",
        "mask_entity": "Which allegiance of [ENT] is also the  sovereign state of [ENT] ?",
        "entity": [
            "the John Kotelawala",
            "the Sanath Weerakoon"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1484",
        "question": "List the television shows whose network's sister names is N-tv.",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/N-tv> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:network (JOIN dbp:sisterNames dbr:N-tv))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the television shows",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose network's [IQ1]",
                    "start": 26,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "sister names is N-tv",
                                "start": 42,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN television) (NNS shows)) (SBAR (WHNP (WP$ whose) (NN network) (POS 's)) (S (NP (NN sister) (NNS names)) (VP (VBZ is) (NP (NNP N-tv))))))) (. .)))",
        "mask_entity": "List the television shows whose network's sister names is [ENT].",
        "entity": [
            "N-tv"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "206",
        "question": "God Defend New Zealand is the national anthem of which country?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> } ",
        "SExpr": "(JOIN dbp:nationalAnthem dbr:God_Defend_New_Zealand)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP God) (NNP Defend) (NNP New) (NNP Zealand)) (VP (VBZ is) (NP (NP (DT the) (JJ national) (NN anthem)) (SBAR (WHPP (IN of) (WHNP (WDT which))) (NP (NN country))))) (. ?)))",
        "mask_entity": "God Defend [ENT] is the national anthem of which country?",
        "entity": [
            "New Zealand"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4488",
        "question": "Where do the rivers starting from Zambia end?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(JOIN (R dbo:riverMouth) (AND dbo:River (JOIN dbo:sourceCountry dbr:Zambia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do [IQ1] end",
                    "start": 0,
                    "end": 44,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rivers",
                                "start": 9,
                                "end": 19
                            },
                            {
                                "description": "starting from Zambia",
                                "start": 20,
                                "end": 40
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (DT the) (NNS rivers)) (VP (VBG starting) (PP (IN from) (NP (NNP Zambia) (NN end))))) (. ?)))",
        "mask_entity": "Where do the rivers starting from [ENT] end?",
        "entity": [
            "Zambia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "870",
        "question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh) ",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:governmentType) dbr:Kumta) (JOIN (R dbo:affiliation) dbr:Indian_general_election,_2004_(Andhra_Pradesh)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which political party of kumta",
                    "start": 0,
                    "end": 30
                },
                {
                    "description": "had affiliation with Indian general election, 2004 (Andhra Pradesh)",
                    "start": 31,
                    "end": 98
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NNP kumta)))) (S (VP (VBD had) (NP (NP (NN affiliation)) (PP (IN with) (NP (NP (JJ Indian) (JJ general) (NN election)) (, ,) (NP (NP (CD 2004)) (PP (-LRB- () (NP (NNP Andhra) (NNP Pradesh) (-RRB- ))))))))))))",
        "mask_entity": "Which political party of kumta had affiliation with [ENT] general election, [ENT] ([ENT]) ",
        "entity": [
            "Indian",
            "2004",
            "Andhra Pradesh"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4493",
        "question": "Who was member of boards at Royal Society and Trinity House?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
        "SExpr": "(AND (JOIN dbo:board dbr:Royal_Society) (JOIN dbo:board dbr:Trinity_House))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was member of boards at Royal Society and Trinity House",
                    "start": 0,
                    "end": 59
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (NP (NP (NN member)) (PP (IN of) (NP (NNS boards)))) (PP (IN at) (NP (NP (NNP Royal) (NNP Society)) (CC and) (NP (NNP Trinity) (NNP House)))))) (. ?)))",
        "mask_entity": "Who was member of boards at [ENT] and [ENT]?",
        "entity": [
            "Royal Society",
            "Trinity House"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "502",
        "question": "Where is the king buried whose predecessor was Iyasu II?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "SExpr": "(JOIN (R dbp:placeOfBurial) (AND dbo:Monarch (JOIN dbp:predecessor dbr:Iyasu_II))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the king buried",
                    "start": 0,
                    "end": 24
                },
                {
                    "description": "[IQ1]",
                    "start": 25,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose predecessor was Iyasu II",
                                "start": 25,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (DT the) (NN king)) (VP (VBN buried) (SBAR (WHNP (WP$ whose) (NN predecessor)) (S (VP (VBD was) (NP (NNP Iyasu) (CD II))))))) (. ?)))",
        "mask_entity": "Where is the king buried whose predecessor was [ENT]?",
        "entity": [
            "Iyasu II"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1028",
        "question": "In how many different places have people beatified by Pope Pius X died?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "SExpr": "(AND dbo:Place (JOIN (R dbp:deathPlace) (JOIN dbp:beatifiedBy dbr:Pope_Pius_X))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In how many different places",
                    "start": 0,
                    "end": 28
                },
                {
                    "description": "have [IQ1] died",
                    "start": 29,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "people",
                                "start": 34,
                                "end": 40
                            },
                            {
                                "description": "beatified by Pope Pius X",
                                "start": 41,
                                "end": 65
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN In) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS places))) (VBP have) (NP (NP (NNS people)) (VP (VBN beatified) (PP (IN by) (NP (NNP Pope) (NNP Pius) (NNP X))))) (VP (VBD died)) (. ?)))",
        "mask_entity": "In how many different places have people beatified by [ENT] died?",
        "entity": [
            "Pope Pius X"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3840",
        "question": "What faiths are followed by the relatives of Meadow Soprano?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN (R dbo:relative) dbr:Meadow_Soprano)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What faiths",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "are followed by [IQ1]",
                    "start": 12,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the relatives of Meadow Soprano",
                                "start": 28,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS faiths)) (SQ (VP (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Meadow) (NNP Soprano)))))))) (. ?)))",
        "mask_entity": "What faiths are followed by the relatives of [ENT]?",
        "entity": [
            "Meadow Soprano"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2690",
        "question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
        "SExpr": "(JOIN (R dbp:headquarters) (JOIN (R dbo:owningOrganisation) dbr:Target_Field_(Metro_Transit_station))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where is the headquarters of [IQ1]",
                    "start": 0,
                    "end": 103,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the public transit system",
                                "start": 29,
                                "end": 54
                            },
                            {
                                "description": "which owns Target Field, a Metro Transit Station",
                                "start": 55,
                                "end": 103
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NP (NNP Target) (NNP Field)) (, ,) (NP (DT a) (NML (NNP Metro) (NNP Transit)) (NNP Station)))))))))) (. ?)))",
        "mask_entity": "Where is the headquarters of the public transit system which owns [ENT], [ENT]  ?",
        "entity": [
            "Target Field",
            "a Metro Transit Station"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1570",
        "question": "What is the nationality of Aishath Saffa ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri } ",
        "SExpr": "(JOIN (R dbp:nationality) dbr:Aishath_Saffa)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN nationality)) (PP (IN of) (NP (NNP Aishath) (NNP Saffa)))))) (. ?)))",
        "mask_entity": "What is the nationality of [ENT] ?",
        "entity": [
            "Aishath Saffa"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2773",
        "question": "who was the president under whom winston bryant served as a lieutenant?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> } ",
        "SExpr": "(JOIN dbo:lieutenant dbr:Winston_Bryant)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP who)) (SQ (VP (VBD was) (NP (NP (DT the) (NN president)) (SBAR (WHPP (IN under) (WHNP (WP whom))) (S (NP (NNP winston) (NN bryant)) (VP (VBD served) (PP (IN as) (NP (DT a) (NN lieutenant))))))))) (. ?)))",
        "mask_entity": "who was the president under whom [ENT] bryant served as a lieutenant?",
        "entity": [
            "winston"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2731",
        "question": "What are the bands associated with the artists of My Favorite Girl  ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "SExpr": "(JOIN (R dbo:associatedBand) (JOIN (R dbp:artist) dbr:My_Favorite_Girl_(Dave_Hollister_song))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the bands",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "associated with [IQ1]",
                    "start": 19,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the artists of My Favorite Girl",
                                "start": 35,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NNS bands)) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (NNS artists)) (PP (IN of) (NP (PRP$ My) (JJ Favorite) (NN Girl))))))))) (. ?)))",
        "mask_entity": "What are the bands associated with the artists of [ENT]  ?",
        "entity": [
            "My Favorite Girl"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "804",
        "question": "On what subjects was Broca's Brain written?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?uri } ",
        "SExpr": "(JOIN (R dbp:subject) dbr:Broca's_Brain)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHPP (IN On) (WHNP (WDT what) (NNS subjects))) (SQ (VBD was) (NP (NP (NNP Broca) (POS 's)) (NNP Brain)) (VP (VBN written))) (. ?)))",
        "mask_entity": "On what subjects was [ENT]'s Brain written?",
        "entity": [
            "Broca"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3645",
        "question": "Which parent organization of GetTV is also the label of next thing ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:recordLabel) dbr:Next_Thing) (JOIN (R dbo:parentOrganisation) dbr:GetTV))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which parent organization of GetTV",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is also the label of next thing",
                    "start": 35,
                    "end": 66
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN parent) (NN organization)) (PP (IN of) (NP (NNP GetTV)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (JJ next) (NN thing))))) (. ?)))",
        "mask_entity": "Which parent organization of [ENT] is also the label of next thing ?",
        "entity": [
            "GetTV"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2454",
        "question": "Which teams have used the stadium whose architect was Populous ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "SExpr": "(JOIN (R dbo:tenant) (AND dbo:Stadium (JOIN dbo:architect dbr:Populous_(company)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which teams",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have used [IQ1]",
                    "start": 12,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the stadium",
                                "start": 22,
                                "end": 33
                            },
                            {
                                "description": "whose architect was Populous",
                                "start": 34,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS teams)) (SQ (VP (VBP have) (VP (VBN used) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WP$ whose) (NN architect)) (S (VP (VBD was) (ADJP (JJ Populous))))))))) (. ?)))",
        "mask_entity": "Which teams have used the stadium whose architect was [ENT] ?",
        "entity": [
            "Populous"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4598",
        "question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:routeEnd) dbr:North\u2013South_Transport_Corridor) (JOIN (R dbo:routeEnd) dbr:Mumbai_Vadodara_Expressway))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
                    "start": 0,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NP (DT the) (NML (NML (NNP North) (HYPH -) (NNP South)) (NNP Transport)) (NNP Corridor)) (CC and) (NP (NNP Mumbai) (NNP Vadodara) (NNP Expressway)))))) (. ?)))",
        "mask_entity": "Name the route end of [ENT] and [ENT]?",
        "entity": [
            "the North-South Transport Corridor",
            "Mumbai Vadodara Expressway"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3104",
        "question": "Is Albert P Clark buried in Colorado?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Albert) (NNP P) (NNP Clark)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
        "mask_entity": "Is [ENT] buried in [ENT]?",
        "entity": [
            "Albert P Clark",
            "Colorado"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4875",
        "question": "Which hockey team is head coached by Bill Peters?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
        "SExpr": "(AND dbo:HockeyTeam (JOIN dbp:headCoach dbr:Bill_Peters_(ice_hockey)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which hockey team",
                    "start": 0,
                    "end": 17
                },
                {
                    "description": "is head coached by Bill Peters",
                    "start": 18,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN hockey) (NN team)) (SQ (VP (VBZ is) (NP (NN head)) (VP (VBN coached) (PP (IN by) (NP (NNP Bill) (NNP Peters)))))) (. ?)))",
        "mask_entity": "Which hockey team is head coached by [ENT]?",
        "entity": [
            "Bill Peters"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "200",
        "question": "Count the number of religions followed by the alumini of Ananda College.",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Ananda_College> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "SExpr": "(JOIN (R dbo:religion) (JOIN dbo:almaMater dbr:Ananda_College)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number of religions",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "followed by [IQ1]",
                    "start": 30,
                    "end": 70,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the alumni of Ananda College",
                                "start": 42,
                                "end": 70
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN alumini)) (PP (IN of) (NP (NNP Ananda) (NNP College)))))))))) (. .)))",
        "mask_entity": "Count the number of religions followed by the alumini of [ENT].",
        "entity": [
            "Ananda College"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3099",
        "question": "Which team did Wilfred McDonalds and Cam Plante play for?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:playedFor) dbr:Wilfred_McDonald) (JOIN (R dbp:playedFor) dbr:Cam_Plante))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which team",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "did Wilfred McDonalds and Cam Plante play for",
                    "start": 11,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD did) (NP (NP (NNP Wilfred) (NNP McDonalds)) (CC and) (NP (NNP Cam) (NNP Plante))) (VP (VB play) (PP (IN for)))) (. ?)))",
        "mask_entity": "Which team did [ENT] and [ENT] play for?",
        "entity": [
            "Wilfred McDonalds",
            "Cam Plante"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2278",
        "question": "What are the television shows whose network's stockholder is Warner Bros. Television?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbo:network (JOIN dbp:owner dbr:Warner_Bros._Television))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What are the television shows",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "whose network's [IQ1]",
                    "start": 30,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "stockholder is Warner Bros. Television",
                                "start": 46,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (NP (NN Television) (. ?)))",
        "mask_entity": "What are the television shows whose network's stockholder is [ENT]. Television?",
        "entity": [
            "Warner Bros"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3561",
        "question": "Name the Fox TV show judged by Rand Jackson ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Randy_Jackson) (JOIN dbp:channel dbr:Fox_Broadcasting_Company)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the Fox TV show",
                    "start": 0,
                    "end": 20
                },
                {
                    "description": "judged by Rand Jackson",
                    "start": 21,
                    "end": 43
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NML (NNP Fox) (NN TV)) (NN show)) (VP (VBN judged) (PP (IN by) (NP (NNP Rand) (NNP Jackson)))))) (. ?)))",
        "mask_entity": "Name the [ENT] show judged by [ENT] ?",
        "entity": [
            "Fox TV",
            "Rand Jackson"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4474",
        "question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
        "SExpr": "(AND (JOIN dbo:programmingLanguage dbr:C++) (JOIN dbo:operatingSystem dbr:Microsoft_Windows))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the total number of software",
                    "start": 0,
                    "end": 36
                },
                {
                    "description": "whose programming language is C++",
                    "start": 37,
                    "end": 70
                },
                {
                    "description": "and operating system is Microsoft Windows",
                    "start": 71,
                    "end": 112
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN software)) (SBAR (WHNP (WP$ whose) (NN programming) (NN language)) (S (VP (VBZ is) (NP (NNP C) (CD ++)))))))))) (CC and) (S (NP (NN operating) (NN system)) (VP (VBZ is) (NP (NNP Microsoft) (NNP Windows)))) (. ?)))",
        "mask_entity": "What is the total number of software whose programming language is C++ and operating system is [ENT] [ENT]?",
        "entity": [
            "Microsoft",
            "Windows"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4514",
        "question": "Name the city of Phil-Ellena ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Phil-Ellena> <http://dbpedia.org/ontology/city> ?uri } ",
        "SExpr": "(JOIN (R dbo:city) dbr:Phil-Ellena)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Phil-Ellena))))) (. ?)))",
        "mask_entity": "Name the city of [ENT] ?",
        "entity": [
            "Phil-Ellena"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "391",
        "question": "how many companies are located in a spanish speaking region?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "SExpr": "(AND dbo:Organisation (JOIN dbo:location (JOIN dbo:language dbr:Spanish_language))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "how many companies",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "are located in [IQ1]",
                    "start": 19,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a spanish speaking region",
                                "start": 34,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHADVP (WRB how) (JJ many)) (NNS companies)) (S (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (DT a) (JJ spanish) (VBG speaking) (NN region)))))) (. ?)))",
        "mask_entity": "how many companies are located in a spanish speaking region?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "1495",
        "question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan ",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/property/combatant> ?uri. <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:combatant) dbr:Northwest_Indian_War) (JOIN (R dbp:ethnicity) dbr:Linda_Hogan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the combatant of the Northwest Indian War",
                    "start": 0,
                    "end": 49
                },
                {
                    "description": "and also the ethnic group of the Linda Hogan",
                    "start": 50,
                    "end": 94
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN combatant)) (PP (IN of) (NP (NP (DT the) (NNP Northwest) (NNP Indian) (NNP War)) (CC and) (ADVP (RB also)) (NP (NP (DT the) (JJ ethnic) (NN group)) (PP (IN of) (NP (DT the) (NNP Linda) (NNP Hogan)))))))))))",
        "mask_entity": "What is the combatant of [ENT] and also the ethnic group of the [ENT] ",
        "entity": [
            "the Northwest Indian War",
            "Linda Hogan"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2695",
        "question": "Which airlines fly to Gimhae International Airport?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> } ",
        "SExpr": "(JOIN dbo:targetAirport dbr:Gimhae_International_Airport)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS airlines)) (SQ (VP (VBP fly) (PP (IN to) (NP (NNP Gimhae) (NNP International) (NNP Airport))))) (. ?)))",
        "mask_entity": "Which airlines fly to [ENT]?",
        "entity": [
            "Gimhae International Airport"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2027",
        "question": "GetTV is owned by which organisation?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
        "SExpr": "(JOIN (R dbo:parentOrganisation) dbr:GetTV)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP GetTV)) (VP (VBZ is) (VP (VBN owned) (SBAR (WHPP (IN by) (WHNP (WDT which) (NN organisation))) (. ?))))))",
        "mask_entity": "[ENT] is owned by which organisation?",
        "entity": [
            "GetTV"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2568",
        "question": "Name the islands that belong to the archipelago whose largest city is Papeete?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
        "SExpr": "(JOIN dbp:archipelago (JOIN dbo:largestCity dbr:Papeete)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the islands",
                    "start": 0,
                    "end": 16
                },
                {
                    "description": "that belong to [IQ1]",
                    "start": 17,
                    "end": 77,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the archipelago",
                                "start": 32,
                                "end": 47
                            },
                            {
                                "description": "whose largest city is Papeete",
                                "start": 48,
                                "end": 77
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS islands)) (SBAR (WHNP (WDT that)) (S (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN archipelago)) (SBAR (WHNP (WP$ whose) (JJS largest) (NN city)) (S (VP (VBZ is) (NP (NNP Papeete)))))))))))) (. ?)))",
        "mask_entity": "Name the islands that belong to the archipelago whose largest city is [ENT]?",
        "entity": [
            "Papeete"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "64",
        "question": "In which team did Dave Bing and Ron Reed started their basketball career?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:draftTeam) dbr:Dave_Bing) (JOIN (R dbp:draftTeam) dbr:Ron_Reed))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which team",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "did Dave Bing and Ron Reed started their basketball career",
                    "start": 14,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NN team)) (VP (VBD did) (NP (NP (NNP Dave) (NNP Bing)) (CC and) (NP (NNP Ron) (NNP Reed))) (VP (VBD started) (NP (PRP$ their) (NN basketball) (NN career))))) (. ?)))",
        "mask_entity": "In which team did [ENT] and [ENT] started their basketball career?",
        "entity": [
            "Dave Bing",
            "Ron Reed"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3884",
        "question": "List the settlements area whose province is Metropolitan City of Venice ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "SExpr": "(AND dbo:Settlement (JOIN dbp:province dbr:Metropolitan_City_of_Venice))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the settlements area",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "whose province is Metropolitan City of Venice",
                    "start": 26,
                    "end": 71
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS settlements) (NN area)) (SBAR (WHNP (WP$ whose) (NN province)) (S (VP (VBZ is) (NP (NP (NNP Metropolitan) (NNP City)) (PP (IN of) (NP (NNP Venice))))))))) (. ?)))",
        "mask_entity": "List the settlements area whose province is [ENT] of [ENT] ?",
        "entity": [
            "Metropolitan City",
            "Venice"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2062",
        "question": "What was recorded by Live in Detroit, MI and also palce of birth of the Bodhin Kjolhede?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:recordedIn) dbr:Live_in_Detroit,_MI) (JOIN (R dbp:placeOfBirth) dbr:Bodhin_Kjolhede))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What was recorded by Live in Detroit, MI",
                    "start": 0,
                    "end": 40
                },
                {
                    "description": "and also place of birth of the Bodhin Kjolhede",
                    "start": 41,
                    "end": 87
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (VP (VBN recorded) (PP (IN by) (NP (NP (NNP Live)) (PP (IN in) (NP (NP (NNP Detroit)) (, ,) (NP (NNP MI)) (CC and) (ADVP (RB also)) (NP (NP (NN palce)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (DT the) (NNP Bodhin) (NNP Kjolhede))))))))))))) (. ?)))",
        "mask_entity": "What was recorded by [ENT] in [ENT], [ENT] and also palce of birth of the Bodhin Kjolhede?",
        "entity": [
            "Live",
            "Detroit",
            "MI"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "492",
        "question": "From how many different institutes have the members of Judge Advocate General's Corps graduated?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
        "SExpr": "(AND dbo:EducationalInstitution (JOIN (R dbo:almaMater) (JOIN dbo:militaryRank dbr:Judge_Advocate_General's_Corps,_United_States_Army))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "From how many different institutes",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "have [IQ1] graduated",
                    "start": 35,
                    "end": 95,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the members of Judge Advocate General's Corps",
                                "start": 40,
                                "end": 85
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SINV (PP (IN From) (NP (WHADJP (WRB how) (JJ many)) (JJ different) (NNS institutes))) (VP (VBP have)) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NP (NNP Judge) (NNP Advocate) (NNP General) (POS 's)) (NNP Corps)))) (VP (VBD graduated)) (. ?)))",
        "mask_entity": "From how many different institutes have the members of Judge [ENT] graduated?",
        "entity": [
            "Advocate General's Corps"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "379",
        "question": "Whos a famous relative of anne spielberg?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Anne_Spielberg>  . }",
        "SExpr": "(JOIN dbo:relation dbr:Anne_Spielberg)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (FRAG (WHNP (WP Whos)) (NP (NP (DT a) (JJ famous) (NN relative)) (PP (IN of) (NP (NNP anne) (NN spielberg)))) (. ?)))",
        "mask_entity": "Whos a famous relative of [ENT]?",
        "entity": [
            "anne spielberg"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4859",
        "question": "To which city does Northeast Library belong?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northeast_Library> <http://dbpedia.org/ontology/city> ?uri } ",
        "SExpr": "(JOIN (R dbo:city) dbr:Northeast_Library)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHPP (IN To) (WHNP (WDT which))) (S (NP (NN city)) (VP (VBZ does) (NP (NNP Northeast) (NNP Library)) (S (VP (VB belong))))) (. ?)))",
        "mask_entity": "To which city does [ENT] belong?",
        "entity": [
            "Northeast Library"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3993",
        "question": "What are the airline hubs of Cascade Airways?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri } ",
        "SExpr": "(JOIN (R dbo:ideology) dbr:Union_of_Cambodian_Democrats)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (DT the) (NN airline) (NNS hubs)) (PP (IN of) (NP (NNP Cascade) (NNPS Airways)))))) (. ?)))",
        "mask_entity": "What are the airline hubs of [ENT]?",
        "entity": [
            "Cascade Airways"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4887",
        "question": "Who has manufactured vehicles designed originally by NASA?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/NASA> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "SExpr": "(JOIN (R dbo:manufacturer) (AND dbo:Automobile (JOIN dbo:designCompany dbr:NASA))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who has manufactured [IQ1]",
                    "start": 0,
                    "end": 57,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "vehicles",
                                "start": 21,
                                "end": 29
                            },
                            {
                                "description": "designed originally by NASA",
                                "start": 30,
                                "end": 57
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ has) (VP (VBN manufactured) (NP (NP (NNS vehicles)) (VP (VBN designed) (PP (ADVP (RB originally)) (IN by) (NP (NNP NASA))))))) (. ?)))",
        "mask_entity": "Who has manufactured vehicles designed originally by [ENT]?",
        "entity": [
            "NASA"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1076",
        "question": "What is the order of the Henry Clay and profession of the William Luther Hill?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Clay> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:order) dbr:Henry_Clay) (JOIN (R dbo:profession) dbr:William_Luther_Hill))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the order of the Henry Clay",
                    "start": 0,
                    "end": 35
                },
                {
                    "description": "and profession of the William Luther Hill",
                    "start": 36,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN order)) (PP (IN of) (NP (NP (DT the) (NNP Henry) (NNP Clay)) (CC and) (NP (NP (NN profession)) (PP (IN of) (NP (DT the) (NNP William) (NNP Luther) (NNP Hill))))))))) (. ?)))",
        "mask_entity": "What is the order of [ENT] and profession of [ENT]?",
        "entity": [
            "the Henry Clay",
            "the William Luther Hill"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "878",
        "question": "What show  has theme music composer as Ron Grainer and at the same time  related to Class (2016 TV series)?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Class_(2016_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:themeMusicComposer dbr:Ron_Grainer) (JOIN dbo:related dbr:Class_(2016_TV_series))))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What show",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "has theme music composer as Ron Grainer",
                    "start": 10,
                    "end": 49
                },
                {
                    "description": "and at the same time related to Class (2016 TV series)",
                    "start": 50,
                    "end": 104
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT What) (NN show)) (SQ (VP (VBZ has) (NP (NP (NN theme) (NN music) (NN composer)) (PP (IN as) (NP (NNP Ron) (NNP Grainer))))))) (CC and) (S (PP (IN at) (NP (DT the) (JJ same) (NN time))) (VP (VBN related) (PP (IN to) (NP (NML (NNP Class) (-LRB- () (CD 2016)) (NN TV) (NN series) (-RRB- )))))) (. ?)))",
        "mask_entity": "What show  has theme music composer as [ENT] and at the same time  related to [ENT] ([ENT] TV series)?",
        "entity": [
            "Ron Grainer",
            "Class",
            "2016"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "337",
        "question": "What is the life stance of the ethnic groups related to Micronesia ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Micronesia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "SExpr": "(JOIN (R dbo:religion) (AND dbo:EthnicGroup (JOIN dbo:related dbr:Micronesia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the life stance of [IQ1]",
                    "start": 0,
                    "end": 66,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the ethnic groups",
                                "start": 27,
                                "end": 44
                            },
                            {
                                "description": "related to Micronesia",
                                "start": 45,
                                "end": 66
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN life) (NN stance)) (PP (IN of) (NP (NP (DT the) (JJ ethnic) (NNS groups)) (ADJP (JJ related) (PP (IN to) (NP (NNP Micronesia))))))))) (. ?)))",
        "mask_entity": "What is the life stance of the ethnic groups related to [ENT] ?",
        "entity": [
            "Micronesia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1016",
        "question": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Southend-on-Sea> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:mouthMountain dbr:Southend-on-Sea) (JOIN dbo:mouthPlace dbr:Essex)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the river",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "whose mouth mountain is Southend-on-Sea",
                    "start": 15,
                    "end": 54
                },
                {
                    "description": "and mouth place is Essex",
                    "start": 55,
                    "end": 79
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NN mouth) (NN mountain)) (S (VP (VBZ is) (NP (NP (NNP Southend-)) (PP (IN on) (HYPH -) (NP (NNP Sea)))))))))) (CC and) (S (NP (NN mouth) (NN place)) (VP (VBZ is) (NP (NNP Essex)))) (. ?)))",
        "mask_entity": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is [ENT]?",
        "entity": [
            "Essex"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1275",
        "question": "Which venue of indy PopCon is also the death palce of Louis Le Cocqq ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:venue) dbr:Indy_PopCon) (JOIN (R dbp:placeOfDeath) dbr:Louis_LeCocq))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which venue of indy PopCon",
                    "start": 0,
                    "end": 26
                },
                {
                    "description": "is also the death place of Louis Le Cocqq",
                    "start": 27,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN venue)) (PP (IN of) (NP (NN indy) (NNP PopCon)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN death) (NN palce)) (PP (IN of) (NP (NNP Louis) (NNP Le) (NNP Cocqq))))) (. ?)))",
        "mask_entity": "Which venue of indy PopCon is also the death palce of [ENT] ?",
        "entity": [
            "Louis Le Cocqq"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3798",
        "question": "What genre's softwares are released with a GNU GPL license?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
        "SExpr": "(JOIN (R dbp:genre) (JOIN dbp:license dbr:GNU_General_Public_License)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What genre's [IQ1]",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "softwares",
                                "start": 13,
                                "end": 22
                            },
                            {
                                "description": "are released with a GNU GPL license",
                                "start": 23,
                                "end": 58
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (NP (WHNP (WDT What) (NN genre) (POS 's)) (NNS softwares)) (VP (VBP are) (VP (VBN released) (PP (IN with) (NP (DT a) (NML (NNP GNU) (NNP GPL)) (NN license))))) (. ?)))",
        "mask_entity": "What genre's softwares are released with a GNU GPL license?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "4551",
        "question": "Is Christchurch the largest city of South Island?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Christchurch)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP South) (NNP Island)))) (. ?)))",
        "mask_entity": "Is [ENT] the largest city of [ENT]?",
        "entity": [
            "Christchurch",
            "South Island"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3342",
        "question": "Who is the leader of Allgemeine SS ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri } ",
        "SExpr": "(JOIN (R dbo:leader) dbr:Allgemeine_SS)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Allgemeine) (NNP SS)))))) (. ?)))",
        "mask_entity": "Who is the leader of [ENT] ?",
        "entity": [
            "Allgemeine SS"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4911",
        "question": "Giorgos Kaminis is the mayor of what?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis> } ",
        "SExpr": "(JOIN dbo:mayor dbr:Giorgos_Kaminis)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (NP (NNP Giorgos) (NNP Kaminis)) (VP (VBZ is) (NP (NP (DT the) (NN mayor)) (PP (IN of) (SBAR (WHNP (WP what)) (S (. ?))))))))",
        "mask_entity": "[ENT] is the mayor of what?",
        "entity": [
            "Giorgos Kaminis"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "995",
        "question": "Where is the headquarters of Metro Transit (Minnesota) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri } ",
        "SExpr": "(JOIN (R dbp:headquarters) dbr:Metro_Transit_(Minnesota))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ is)) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (NNP Metro) (NNP Transit)) (VP (-LRB- () (NP (NNP Minnesota) (-RRB- )))))))) (. ?)))",
        "mask_entity": "Where is the headquarters of [ENT] ([ENT]) ?",
        "entity": [
            "Metro Transit",
            "Minnesota"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1981",
        "question": "Give me the count of all the names of characters created by Frank Miller",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . }",
        "SExpr": "(JOIN (R dbp:characterName) (JOIN dbp:creators dbr:Frank_Miller_(comics))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Give me the count of all the names of [IQ1]",
                    "start": 0,
                    "end": 72,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "characters",
                                "start": 38,
                                "end": 48
                            },
                            {
                                "description": "created by Frank Miller",
                                "start": 49,
                                "end": 72
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (NP (PDT all) (DT the) (NNS names)) (PP (IN of) (NP (NNS characters)))) (VP (VBN created) (PP (IN by) (NP (NNP Frank) (NNP Miller))))))))))",
        "mask_entity": "Give me the count of all the names of characters created by [ENT]",
        "entity": [
            "Frank Miller"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4297",
        "question": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "SExpr": "(AND dbo:FictionalCharacter (AND (JOIN dbo:portrayer dbr:Terminator_2:_Judgment_Day) (JOIN dbo:creator dbr:Josh_Friedman)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which fictional character",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "portrayed in Terminator 2: Judgment Day",
                    "start": 26,
                    "end": 65
                },
                {
                    "description": "is painted by Josh Friedman",
                    "start": 66,
                    "end": 93
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WDT Which) (JJ fictional) (NN character)) (S (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 2)))))) (: :) (NP (NN Judgment) (NN Day)) (VP (VBZ is) (VP (VBN painted) (PP (IN by) (NP (NNP Josh) (NNP Friedman))))) (. ?)))",
        "mask_entity": "Which fictional character portrayed in [ENT] is painted by [ENT]?",
        "entity": [
            "Terminator 2: Judgment Day",
            "Josh Friedman"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "161",
        "question": "Where was the narrator of Spain on the Road Again born?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spain..._on_the_Road_Again> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "SExpr": "(JOIN (R dbp:birthPlace) (JOIN (R dbo:narrator) dbr:Spain..._on_the_Road_Again)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where was [IQ1] born",
                    "start": 0,
                    "end": 54,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the narrator of Spain on the Road Again",
                                "start": 10,
                                "end": 49
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NNP Spain))) (PP (IN on) (NP (NP (DT the) (NNP Road)) (VP (ADVP (RB Again)) (VBN born)))))) (. ?)))",
        "mask_entity": "Where was the narrator of [ENT] on the Road Again born?",
        "entity": [
            "Spain"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4798",
        "question": "Does AMC Gremlin have the Volkswagen engine?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/AMC_Gremlin> <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/Volkswagen> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP AMC) (NNP Gremlin)) (VP (VB have) (NP (DT the) (NNP Volkswagen) (NN engine))) (. ?)))",
        "mask_entity": "Does [ENT] have the [ENT] engine?",
        "entity": [
            "AMC Gremlin",
            "Volkswagen"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1500",
        "question": "Name the movie with narrator as Trevor Peacock and music composer  as Christophe Beck?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Christophe_Beck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (AND (JOIN dbp:narrator dbr:Trevor_Peacock) (JOIN dbp:music dbr:Christophe_Beck)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the movie",
                    "start": 0,
                    "end": 14
                },
                {
                    "description": "with narrator as Trevor Peacock",
                    "start": 15,
                    "end": 46
                },
                {
                    "description": "and music composer as Christophe Beck",
                    "start": 47,
                    "end": 84
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT the) (NN movie)) (PP (IN with) (NP (NP (NN narrator)) (PP (IN as) (NP (NP (NP (NNP Trevor) (NNP Peacock)) (CC and) (NP (NN music) (NN composer))) (PP (IN as) (NP (NNP Christophe) (NNP Beck)))))))) (. ?)))",
        "mask_entity": "Name the movie with narrator as [ENT] and music composer  as [ENT]?",
        "entity": [
            "Trevor Peacock",
            "Christophe Beck"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3843",
        "question": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Leonard_Lerman> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(JOIN (R dbp:almaMater) (AND dbo:Scientist (JOIN dbp:doctoralAdvisor dbr:Leonard_Lerman))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did the scientist study",
                    "start": 0,
                    "end": 29
                },
                {
                    "description": "[IQ1]",
                    "start": 30,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "whose doctoral thesis was supervised by Leonard Lerman",
                                "start": 30,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN scientist)) (VP (VB study) (SBAR (WHNP (WP$ whose) (JJ doctoral) (NN thesis)) (S (VP (VBD was) (VP (VBN supervised) (PP (IN by) (NP (NNP Leonard) (NNP Lerman))))))))) (. ?)))",
        "mask_entity": "Where did the scientist study whose doctoral thesis was supervised by [ENT]?",
        "entity": [
            "Leonard Lerman"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2613",
        "question": "Where can one find some quick bread in the world?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
        "SExpr": "(JOIN (R dbo:region) (JOIN dbp:type dbr:Quick_bread)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where can one find [IQ1] in the world",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "some quick bread",
                                "start": 19,
                                "end": 35
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (CD one)) (VP (VB find) (NP (NP (DT some) (JJ quick) (NN bread)) (PP (IN in) (NP (DT the) (NN world)))))) (. ?)))",
        "mask_entity": "Where can one find some quick bread in the world?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3461",
        "question": "What is the sea whose cities are Gdask and Oulu?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Gda\u0144sk> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "SExpr": "(AND dbo:Sea (AND (JOIN dbp:cities dbr:Gda\u0144sk) (JOIN dbp:cities dbr:Oulu)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the sea",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "whose cities are Gdask and Oulu",
                    "start": 16,
                    "end": 47
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN sea)) (SBAR (WHNP (WP$ whose) (NNS cities)) (S (VP (VBP are) (NP (NNP Gdask) (CC and) (NNP Oulu)))))))) (. ?)))",
        "mask_entity": "What is the sea whose cities are [ENT] and [ENT]?",
        "entity": [
            "Gdask",
            "Oulu"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1021",
        "question": "What rivers originate from Australian Alps?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Australian_Alps>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (JOIN dbo:sourcePlace dbr:Australian_Alps))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What rivers",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "originate from Australian Alps",
                    "start": 12,
                    "end": 42
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NNS rivers)) (S (VP (VBP originate) (PP (IN from) (NP (NNP Australian) (NNPS Alps))))) (. ?)))",
        "mask_entity": "What rivers originate from [ENT]?",
        "entity": [
            "Australian Alps"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3073",
        "question": "Which venues are located at places governed by John Roberts?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/John_Roberts> . ?uri <http://dbpedia.org/property/address> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
        "SExpr": "(AND dbo:Venue (JOIN dbp:address (JOIN dbo:leader dbr:John_Roberts))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which venues",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "are located at [IQ1]",
                    "start": 13,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "places",
                                "start": 28,
                                "end": 34
                            },
                            {
                                "description": "governed by John Roberts",
                                "start": 35,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS venues)) (SQ (VP (VBP are) (VP (VBN located) (PP (IN at) (NP (NP (NNS places)) (VP (VBN governed) (PP (IN by) (NP (NNP John) (NNP Roberts))))))))) (. ?)))",
        "mask_entity": "Which venues are located at places governed by [ENT]?",
        "entity": [
            "John Roberts"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3943",
        "question": "What is the venue of San Diego Comic-Con International ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Diego_Comic-Con_International> <http://dbpedia.org/property/venue> ?uri } ",
        "SExpr": "(JOIN (R dbp:venue) dbr:San_Diego_Comic-Con_International)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN venue)) (PP (IN of) (NP (NML (NNP San) (NNP Diego)) (NNP Comic-) (NNP Con) (NNP International)))))) (. ?)))",
        "mask_entity": "What is the venue of [ENT] ?",
        "entity": [
            "San Diego Comic-Con International"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "1585",
        "question": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "SExpr": "(AND dbo:OfficeHolder (JOIN dbp:allegiance (JOIN dbo:capital dbr:Jamestown,_Virginia))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which office holder",
                    "start": 0,
                    "end": 19
                },
                {
                    "description": "owes its allegiance to [IQ1]",
                    "start": 20,
                    "end": 92,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "a state",
                                "start": 43,
                                "end": 50
                            },
                            {
                                "description": "whose capital town is Jamestown, Virginia",
                                "start": 51,
                                "end": 92
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NN office) (NN holder)) (S (VP (VBZ owes) (NP (PRP$ its) (NN allegiance)) (PP (IN to) (NP (NP (DT a) (NN state)) (SBAR (WHNP (WP$ whose) (NN capital) (NN town)) (S (VP (VBZ is) (NP (NP (NNP Jamestown)) (, ,) (NP (NNP Virginia)))))))))) (. ?)))",
        "mask_entity": "Which office holder owes its allegiance to a state whose capital town is [ENT], [ENT]?",
        "entity": [
            "Jamestown",
            "Virginia"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1955",
        "question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines?",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines> } ",
        "SExpr": "(JOIN dbp:occupation dbr:House_of_Representatives_of_the_Philippines)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (JJ professional) (NN fighter)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ is) (ADVP (RB also)) (NP (DT a) (NN politician))) (CC and) (VP (VBD was) (VP (VBN elected) (PP (IN to) (NP (NP (NNP House)) (PP (IN of) (NP (NNPS Representatives))) (PP (IN of) (NP (DT the) (NNPS Philippines)))))))))) (. ?)))",
        "mask_entity": "Which professional fighter, who is also a politician and was elected to [ENT] of the [ENT]?",
        "entity": [
            "House of Representatives",
            "Philippines"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3152",
        "question": "List the comic characters created by Joe Shuster ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Joe_Shuster>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "SExpr": "(AND dbo:ComicsCharacter (JOIN dbp:creators dbr:Joe_Shuster))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List the comic characters",
                    "start": 0,
                    "end": 25
                },
                {
                    "description": "created by Joe Shuster",
                    "start": 26,
                    "end": 48
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (DT the) (JJ comic) (NNS characters)) (VP (VBN created) (PP (IN by) (NP (NNP Joe) (NNP Shuster)))))) (. ?)))",
        "mask_entity": "List the comic characters created by [ENT] ?",
        "entity": [
            "Joe Shuster"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "34",
        "question": "Which kind of conventions are held in Rosemont, Illinois?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Rosemont,_Illinois> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Convention>}",
        "SExpr": "(JOIN (R dbp:genre) (AND dbo:Convention (JOIN dbo:location dbr:Rosemont,_Illinois))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which kind of [IQ1]",
                    "start": 0,
                    "end": 56,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "conventions",
                                "start": 14,
                                "end": 25
                            },
                            {
                                "description": "are held in Rosemont, Illinois",
                                "start": 26,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN kind)) (PP (IN of) (NP (NNS conventions)))) (SQ (VP (VBP are) (VP (VBN held) (PP (IN in) (NP (NP (NNP Rosemont)) (, ,) (NP (NNP Illinois))))))) (. ?)))",
        "mask_entity": "Which kind of conventions are held in [ENT], [ENT]?",
        "entity": [
            "Rosemont",
            "Illinois"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "4014",
        "question": "What city is located on the mouth of Duwamish River?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/riverMouth> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
        "SExpr": "(JOIN (R dbp:cities) (JOIN (R dbo:riverMouth) dbr:Duwamish_River)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "is located on [IQ1]",
                    "start": 10,
                    "end": 51,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the mouth of Duwamish River",
                                "start": 24,
                                "end": 51
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VBZ is) (VP (VBN located) (PP (IN on) (NP (NP (DT the) (NN mouth)) (PP (IN of) (NP (NNP Duwamish) (NNP River)))))))) (. ?)))",
        "mask_entity": "What city is located on the mouth of [ENT]?",
        "entity": [
            "Duwamish River"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "775",
        "question": "Which governer of Winston Bryant is the president of Joseph Stiglitz ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:governor) dbr:Winston_Bryant) (JOIN (R dbp:president) dbr:Joseph_Stiglitz))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which governor of Winston Bryant",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is the president of Joseph Stiglitz",
                    "start": 33,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN governer)) (PP (IN of) (NP (NNP Winston) (NNP Bryant)))) (SQ (VP (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Joseph) (NNP Stiglitz)))))) (. ?)))",
        "mask_entity": "Which governer of [ENT] is the president of [ENT] ?",
        "entity": [
            "Winston Bryant",
            "Joseph Stiglitz"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2556",
        "question": "How many people have led agencies in German occupied Europe?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
        "SExpr": "(JOIN (R dbo:leader) (JOIN dbp:jurisdiction dbr:German-occupied_Europe)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "How many people",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have led [IQ1]",
                    "start": 16,
                    "end": 59,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "agencies in German occupied Europe",
                                "start": 25,
                                "end": 59
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHADVP (WRB How)) (S (NP (JJ many) (NNS people)) (VP (VBP have) (VP (VBN led) (NP (NNS agencies)) (PP (IN in) (NP (JJ German) (VBN occupied) (NNP Europe)))))) (. ?)))",
        "mask_entity": "How many people have led agencies in [ENT] occupied [ENT]?",
        "entity": [
            "German",
            "Europe"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1478",
        "question": "Where did the plays written by Robert Schenkkan take place?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
        "SExpr": "(JOIN (R dbp:place) (AND dbo:Play (JOIN dbp:writer dbr:Robert_Schenkkan))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where did [IQ1] take place",
                    "start": 0,
                    "end": 58,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the plays",
                                "start": 10,
                                "end": 19
                            },
                            {
                                "description": "written by Robert Schenkkan",
                                "start": 20,
                                "end": 47
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS plays)) (VP (VBN written) (PP (IN by) (NP (NNP Robert) (NNP Schenkkan))))) (VP (VB take) (NP (NN place)))) (. ?)))",
        "mask_entity": "Where did the plays written by [ENT] take place?",
        "entity": [
            "Robert Schenkkan"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1363",
        "question": "Under which president did the predecessor of Simon Ferro work?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Simon_Ferro> . ?x <http://dbpedia.org/ontology/president> ?uri  . }",
        "SExpr": "(JOIN (R dbo:president) (JOIN dbo:successor dbr:Simon_Ferro)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Under which president",
                    "start": 0,
                    "end": 21
                },
                {
                    "description": "did [IQ1] work",
                    "start": 22,
                    "end": 61,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the predecessor of Simon Ferro",
                                "start": 26,
                                "end": 56
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN Under) (WHNP (WDT which))) (S (NP (NN president)) (VP (VBD did) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NML (NNP Simon) (NNP Ferro)) (NN work)))))) (. ?)))",
        "mask_entity": "Under which president did the predecessor of [ENT] work?",
        "entity": [
            "Simon Ferro"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2612",
        "question": "Name  some ww1 veterans?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_I>  . }",
        "SExpr": "(JOIN dbp:battles dbr:World_War_I)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (DT some) (JJ ww1) (NNS veterans))) (. ?)))",
        "mask_entity": "Name  some ww1 veterans?",
        "entity": [],
        "compositionality_type": "simple"
    },
    {
        "ID": "2824",
        "question": "Who appointed both John Drayton and William Clark to their respective offices?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:appointer) dbr:John_Drayton) (JOIN (R dbp:appointer) dbr:William_Clark))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who appointed both John Drayton and William Clark to their respective offices",
                    "start": 0,
                    "end": 77
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WP Who)) (S (VP (VBD appointed) (NP (CC both) (NP (NNP John) (NNP Drayton)) (CC and) (NP (NNP William) (NNP Clark))) (PP (IN to) (NP (PRP$ their) (JJ respective) (NNS offices))))) (. ?)))",
        "mask_entity": "Who appointed both [ENT] and [ENT] to their respective offices?",
        "entity": [
            "John Drayton",
            "William Clark"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2041",
        "question": "Which operator of New Sanno Hotel is also the  governing body of the Oahu Railway and Land Company ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:operator) dbr:New_Sanno_Hotel) (JOIN (R dbp:governingBody) dbr:Oahu_Railway_and_Land_Company))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which operator of New Sanno Hotel",
                    "start": 0,
                    "end": 33
                },
                {
                    "description": "is also the governing body of the Oahu Railway and Land Company",
                    "start": 34,
                    "end": 97
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WHNP (WDT Which) (NN operator)) (PP (IN of) (NP (NNP New) (NNP Sanno) (NNP Hotel)))) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (DT the) (NML (NML (NNP Oahu) (NNP Railway)) (CC and) (NML (NNP Land) (NNP Company)))))))) (. ?)))",
        "mask_entity": "Which operator of [ENT] is also the  governing body of [ENT] ?",
        "entity": [
            "New Sanno Hotel",
            "the Oahu Railway and Land Company"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "241",
        "question": "Which predecessor of Alexander Downer was deputy to Neil Brown ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . }",
        "SExpr": "(AND (JOIN dbo:predecessor dbr:Alexander_Downer) (JOIN dbp:deputy dbr:Neil_Brown_(Australian_politician)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which predecessor of Alexander Downer",
                    "start": 0,
                    "end": 37
                },
                {
                    "description": "was deputy to Neil Brown",
                    "start": 38,
                    "end": 62
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN predecessor)) (PP (IN of) (NP (NNP Alexander) (NNP Downer)))) (SQ (VP (VBD was) (NP (NP (NN deputy)) (PP (IN to) (NP (NNP Neil) (NNP Brown)))))) (. ?)))",
        "mask_entity": "Which predecessor of [ENT] was deputy to [ENT] ?",
        "entity": [
            "Alexander Downer",
            "Neil Brown"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2061",
        "question": "Which are the predecessor of Chevrolet Caprice?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Caprice> <http://dbpedia.org/ontology/predecessor> ?uri } ",
        "SExpr": "(JOIN (R dbo:predecessor) dbr:Chevrolet_Caprice)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VP (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Chevrolet) (NNP Caprice)))))) (. ?)))",
        "mask_entity": "Which are the predecessor of [ENT]?",
        "entity": [
            "Chevrolet Caprice"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2363",
        "question": "Who wrote the album coming right before Dead Man's Chest's OST?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nextAlbum> <http://dbpedia.org/resource/Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "SExpr": "(JOIN (R dbp:writer) (AND dbo:Album (JOIN dbp:nextAlbum dbr:Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who wrote [IQ1]",
                    "start": 0,
                    "end": 62,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the album",
                                "start": 10,
                                "end": 19
                            },
                            {
                                "description": "coming right before Dead Man's Chest's OST",
                                "start": 20,
                                "end": 62
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (DT the) (NN album)) (S (VP (VBG coming) (PP (ADVP (RB right)) (IN before) (NP (NP (NNP Dead) (NNP Man's) (NNP Chest) (POS 's)) (NNP OST))))))) (. ?)))",
        "mask_entity": "Who wrote the album coming right before [ENT]'s OST?",
        "entity": [
            "Dead Man's Chest"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "600",
        "question": "What is the series of the book which is a subsequent work of Blade Runner 2: The Edge of Human ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(JOIN (R dbo:series) (AND dbo:Book (JOIN (R dbo:subsequentWork) dbr:Blade_Runner_2:_The_Edge_of_Human))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What is the series of [IQ1]",
                    "start": 0,
                    "end": 94,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the book",
                                "start": 22,
                                "end": 30
                            },
                            {
                                "description": "which is a subsequent work of Blade Runner 2: The Edge of Human",
                                "start": 31,
                                "end": 94
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (NP (DT the) (NN book)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (NP (DT a) (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Blade) (NNP Runner) (CD 2)))) (: :) (NP (NP (DT The) (NNP Edge)) (PP (IN of) (NP (NNP Human))))))))))))) (. ?)))",
        "mask_entity": "What is the series of the book which is a subsequent work of [ENT] [ENT]: [ENT] ?",
        "entity": [
            "Blade Runner",
            "2",
            "The Edge of Human"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2435",
        "question": "For how many cities's teams did David Bowens play?",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/David_Bowens> <http://dbpedia.org/ontology/formerTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "SExpr": "(JOIN (R dbo:locationCity) (AND dbo:SportsTeam (JOIN (R dbo:formerTeam) dbr:David_Bowens))",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "For how many cities' [IQ1]",
                    "start": 0,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "teams",
                                "start": 21,
                                "end": 26
                            },
                            {
                                "description": "did David Bowens play",
                                "start": 27,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (PP (IN For) (SBAR (WHADVP (WRB how)) (S (NP (NP (JJ many) (NNS cities) (POS 's)) (NNS teams)) (VP (VBD did) (NP (NNP David) (NNP Bowens)) (VP (VB play))))) (. ?)))",
        "mask_entity": "For how many cities's teams did [ENT] play?",
        "entity": [
            "David Bowens"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2888",
        "question": "Is Anne Hidalgo the mayor of Paris?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Anne_Hidalgo> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VP (VBZ Is)) (NP (NNP Anne) (NNP Hidalgo)) (NP (NP (DT the) (NN mayor)) (PP (IN of) (NP (NNP Paris)))) (. ?)))",
        "mask_entity": "Is [ENT] the mayor of [ENT]?",
        "entity": [
            "Anne Hidalgo",
            "Paris"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "646",
        "question": "In which countries have models hanged themselves?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide_by_hanging> . ?x <http://dbpedia.org/property/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
        "SExpr": "(JOIN (R dbp:citizenship) (AND dbo:Model (JOIN dbp:deathCause dbr:Suicide_by_hanging))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "In which countries",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "have [IQ1]",
                    "start": 19,
                    "end": 48,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "models",
                                "start": 24,
                                "end": 30
                            },
                            {
                                "description": "hanged themselves",
                                "start": 31,
                                "end": 48
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHPP (IN In) (WHNP (WDT which))) (S (NP (NNS countries)) (VP (VBP have) (NP (NNS models)) (VP (VBN hanged) (NP (PRP themselves))))) (. ?)))",
        "mask_entity": "In which countries have models hanged themselves?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "3890",
        "question": "Is the Vadodara railway junction onwed by Indian Railway Ministry?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ministry_of_Railways_(India)> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NP (DT the) (NNP Vadodara) (NN railway) (NN junction)) (VP (VBN onwed) (PP (IN by) (NP (NNP Indian) (NNP Railway) (NNP Ministry))))) (. ?)))",
        "mask_entity": "Is the [ENT] railway junction onwed by [ENT]?",
        "entity": [
            "Vadodara",
            "Indian Railway Ministry"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3556",
        "question": "What city gave birth to Mishal Raheja and also houses New India Assurance?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mishal_Raheja> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/New_India_Assurance> <http://dbpedia.org/property/location> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:birthPlace) dbr:Mishal_Raheja) (JOIN (R dbp:location) dbr:New_India_Assurance))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What city",
                    "start": 0,
                    "end": 9
                },
                {
                    "description": "gave birth to Mishal Raheja",
                    "start": 10,
                    "end": 37
                },
                {
                    "description": "and also houses New India Assurance",
                    "start": 38,
                    "end": 73
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT What) (NN city)) (S (VP (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP Mishal) (NNP Raheja)))) (CC and) (ADVP (RB also)) (VP (VBZ houses) (NP (NNP New) (NNP India) (NNP Assurance))))) (. ?)))",
        "mask_entity": "What city gave birth to [ENT] and also houses [ENT]?",
        "entity": [
            "Mishal Raheja",
            "New India Assurance"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3202",
        "question": "Which TV show whose theme is composed by someone signed up with ATO records?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/ATO_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (JOIN dbp:themeMusicComposer (JOIN dbo:recordLabel dbr:ATO_Records))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which TV show",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "whose theme is composed by [IQ1]",
                    "start": 14,
                    "end": 75,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "someone",
                                "start": 41,
                                "end": 48
                            },
                            {
                                "description": "signed up with ATO records",
                                "start": 49,
                                "end": 75
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (WHNP (WP$ whose) (NN theme)) (SQ (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NP (NN someone)) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NNP ATO) (NNS records))))))))) (. ?)))",
        "mask_entity": "Which TV show whose theme is composed by someone signed up with [ENT] records?",
        "entity": [
            "ATO"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1528",
        "question": "Which models were featured in Playboy Playmates 1954?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/succeeded> <http://dbpedia.org/resource/List_of_Playboy_Playmates_of_1954>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PlayboyPlaymate>}",
        "SExpr": "(AND dbo:PlayboyPlaymate (JOIN dbp:succeeded dbr:List_of_Playboy_Playmates_of_1954))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which models",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "were featured in Playboy Playmates 1954",
                    "start": 13,
                    "end": 52
                }
            ]
        },
        "constituency": "(ROOT (SBAR (WHNP (WDT Which) (NNS models)) (S (VP (VBD were) (VP (VBN featured) (PP (IN in) (NP (NNP Playboy) (NNPS Playmates) (CD 1954)))))) (. ?)))",
        "mask_entity": "Which models were featured in [ENT]?",
        "entity": [
            "Playboy Playmates 1954"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1267",
        "question": "What currencies have been prevalent in the country whose national anthem is La Marseillaise?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/La_Marseillaise> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "SExpr": "(JOIN (R dbo:currency) (JOIN dbo:anthem dbr:La_Marseillaise)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What currencies",
                    "start": 0,
                    "end": 15
                },
                {
                    "description": "have been prevalent in [IQ1]",
                    "start": 16,
                    "end": 91,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the country",
                                "start": 39,
                                "end": 50
                            },
                            {
                                "description": "whose national anthem is La Marseillaise",
                                "start": 51,
                                "end": 91
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS currencies)) (SQ (VP (VBP have) (VP (VBN been) (ADJP (JJ prevalent)) (PP (IN in) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WP$ whose) (JJ national) (NN anthem)) (S (VP (VBZ is) (NP (NNP La) (NNP Marseillaise)))))))))) (. ?)))",
        "mask_entity": "What currencies have been prevalent in the country whose national anthem is [ENT]?",
        "entity": [
            "La Marseillaise"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "1899",
        "question": "Who is the relative of Jim Farley (businessman) ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Farley_(businessman)> <http://dbpedia.org/property/relatives> ?uri } ",
        "SExpr": "(JOIN (R dbp:relatives) dbr:Jim_Farley_(businessman))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN relative)) (PP (IN of) (NP (NP (NNP Jim) (NNP Farley)) (NP (-LRB- () (NN businessman)) (ADJP (-RRB- )))))))) (. ?)))",
        "mask_entity": "Who is the relative of [ENT] (businessman) ?",
        "entity": [
            "Jim Farley"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4658",
        "question": "Is Latin the official language of Sovereign Military Order of Malta?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sovereign_Military_Order_of_Malta> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Latin> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Is) (NP (NNP Latin)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NP (NNP Sovereign) (NNP Military) (NNP Order)) (PP (IN of) (NP (NNP Malta)))))) (. ?)))",
        "mask_entity": "Is [ENT] the official language of Sovereign Military Order of [ENT]?",
        "entity": [
            "Latin",
            "Malta"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3005",
        "question": "Where do the politicians, Blanche Bruce and John Franklin Miller work?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/John_Franklin_Miller_(senator)> <http://dbpedia.org/property/office> ?uri . }",
        "SExpr": "(AND (JOIN (R dbp:office) dbr:Blanche_Bruce) (JOIN (R dbp:office) dbr:John_Franklin_Miller_(senator)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
                    "start": 0,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (DT the) (NNS politicians)) (, ,) (NP (NNP Blanche) (NNP Bruce)) (CC and) (NP (NNP John) (NNP Franklin) (NNP Miller))) (VP (VB work))) (. ?)))",
        "mask_entity": "Where do the politicians, [ENT] and [ENT] work?",
        "entity": [
            "Blanche Bruce",
            "John Franklin Miller"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2734",
        "question": "Name an American football player whose debuted in Chicago Bears and former team is 1998 Baltimore Ravens season?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Chicago_Bears> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/1998_Baltimore_Ravens_season>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "SExpr": "(AND dbo:AmericanFootballPlayer (AND (JOIN dbp:debutteam dbr:Chicago_Bears) (JOIN dbo:formerTeam dbr:1998_Baltimore_Ravens_season)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name an American football player",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "whose debuted in Chicago Bears",
                    "start": 33,
                    "end": 63
                },
                {
                    "description": "and former team is 1998 Baltimore Ravens season",
                    "start": 64,
                    "end": 111
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (S (NP (NP (DT an) (JJ American) (NN football) (NN player)) (SBAR (WHNP (WP$ whose)) (S (VP (VBD debuted) (PP (IN in) (NP (NP (NNP Chicago) (NNPS Bears)) (CC and) (NP (JJ former) (NN team)))))))) (VP (VBZ is) (NP (CD 1998) (NML (NNP Baltimore) (NNPS Ravens)) (NN season))))) (. ?)))",
        "mask_entity": "Name an [ENT] football player whose debuted in [ENT] and former team is [ENT] [ENT]?",
        "entity": [
            "American",
            "Chicago Bears",
            "1998",
            "Baltimore Ravens season"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "189",
        "question": "Name a  river with source country as Zambia and source location as Ikelenge  District?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "SExpr": "(AND dbo:River (AND (JOIN dbo:sourceCountry dbr:Zambia) (JOIN dbp:sourceLocation dbr:Ikelenge_District)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name a river",
                    "start": 0,
                    "end": 12
                },
                {
                    "description": "with source country as Zambia",
                    "start": 13,
                    "end": 42
                },
                {
                    "description": "and source location as Ikelenge District",
                    "start": 43,
                    "end": 83
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN river)) (PP (IN with) (NP (NN source) (NN country)))) (PP (IN as) (NP (NP (NNP Zambia)) (CC and) (NP (NP (NN source) (NN location)) (PP (IN as) (NP (NNP Ikelenge) (NNP District))))))) (. ?)))",
        "mask_entity": "Name a  river with source country as [ENT] and source location as [ENT]?",
        "entity": [
            "Zambia",
            "Ikelenge  District"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1806",
        "question": "Does Ford own the Ford Kansas Assembly plant?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ford_Motor_Company> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBZ Does) (NP (NNP Ford)) (VP (VB own) (NP (DT the) (NML (NNP Ford) (NNP Kansas) (NNP Assembly)) (NN plant))) (. ?)))",
        "mask_entity": "Does [ENT] own the [ENT] [ENT] plant?",
        "entity": [
            "Ford",
            "Ford",
            "Kansas Assembly"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "975",
        "question": "Which fields of the Paul Demiville is also the faith of Koay Teng Hai ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Koay_Teng_Hai> <http://dbpedia.org/ontology/religion> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:fields) dbr:Paul_Demi\u00e9ville) (JOIN (R dbo:religion) dbr:Koay_Teng_Hai))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which fields of the Paul Demiville",
                    "start": 0,
                    "end": 34
                },
                {
                    "description": "is also the faith of Koay Teng Hai",
                    "start": 35,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NNS fields)) (PP (IN of) (NP (DT the) (NNP Paul) (NNP Demiville)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NNP Koay) (NNP Teng) (NNP Hai))))) (. ?)))",
        "mask_entity": "Which fields of [ENT] is also the faith of [ENT] ?",
        "entity": [
            "the Paul Demiville",
            "Koay Teng Hai"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2747",
        "question": "Name the institute of Alton Ochsner ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri } ",
        "SExpr": "(JOIN (R dbo:institution) dbr:Alton_Ochsner)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN institute)) (PP (IN of) (NP (NNP Alton) (NNP Ochsner))))) (. ?)))",
        "mask_entity": "Name the institute of [ENT] ?",
        "entity": [
            "Alton Ochsner"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "2047",
        "question": "What movies have been written by authors of Monty Python ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "SExpr": "(AND dbo:Film (JOIN dbo:writer dbr:Monty_Python))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What movies",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "have been written by authors of Monty Python",
                    "start": 12,
                    "end": 56
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT What) (NNS movies)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN written) (PP (IN by) (NP (NP (NNS authors)) (PP (IN of) (NP (NNP Monty) (NNP Python))))))))) (. ?)))",
        "mask_entity": "What movies have been written by authors of [ENT] ?",
        "entity": [
            "Monty Python"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2558",
        "question": "Who was the cover artist of The Adventure of Tom Sawyer also wrote mark Twain Tonight ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri} ",
        "SExpr": "(AND (JOIN (R dbo:coverArtist) dbr:The_Adventures_of_Tom_Sawyer) (JOIN (R dbp:writer) dbr:Mark_Twain_Tonight))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who was the cover artist of The Adventure of Tom Sawyer",
                    "start": 0,
                    "end": 55
                },
                {
                    "description": "also wrote mark Twain Tonight",
                    "start": 56,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (S (NP (NP (DT the) (NN cover) (NN artist)) (PP (IN of) (NP (NP (DT The) (NNP Adventure)) (PP (IN of) (NP (NNP Tom) (NNP Sawyer)))))) (ADVP (RB also)) (VP (VBD wrote) (NP (NN mark) (NNP Twain) (NNP Tonight)))))) (. ?)))",
        "mask_entity": "Who was the cover artist of [ENT] also wrote mark [ENT] ?",
        "entity": [
            "The Adventure of Tom Sawyer",
            "Twain Tonight"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1082",
        "question": "Name the scientist whose academic advisor is Karl Ewald Hasse and supervisor is Georg Meissner?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (AND (JOIN dbo:academicAdvisor dbr:Karl_Ewald_Hasse) (JOIN dbp:doctoralAdvisor dbr:Georg_Meissner)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the scientist",
                    "start": 0,
                    "end": 18
                },
                {
                    "description": "whose academic advisor is Karl Ewald Hasse",
                    "start": 19,
                    "end": 61
                },
                {
                    "description": "and supervisor is Georg Meissner",
                    "start": 62,
                    "end": 94
                }
            ]
        },
        "constituency": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ is) (NP (NNP Karl) (NNP Ewald) (NNP Hasse)))))))) (CC and) (S (NP (NN supervisor)) (VP (VBZ is) (NP (NNP Georg) (NNP Meissner)))) (. ?)))",
        "mask_entity": "Name the scientist whose academic advisor is [ENT] and supervisor is [ENT]?",
        "entity": [
            "Karl Ewald Hasse",
            "Georg Meissner"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "474",
        "question": "Where do current famous NatGeo photographers live?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/National_Geographic_(magazine)> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Photographer>}",
        "SExpr": "(JOIN (R dbo:residence) (AND dbo:Photographer (JOIN dbo:knownFor dbr:National_Geographic_(magazine)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Where do [IQ1] live",
                    "start": 0,
                    "end": 49,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "current famous NatGeo photographers",
                                "start": 9,
                                "end": 44
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (JJ current) (JJ famous) (NNP NatGeo) (NNS photographers)) (VP (VB live))) (. ?)))",
        "mask_entity": "Where do current famous [ENT] photographers live?",
        "entity": [
            "NatGeo"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "2904",
        "question": "Georg Meissner was doctoral supervisor of which scientist ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "SExpr": "(AND dbo:Scientist (JOIN dbp:doctoralAdvisor dbr:Georg_Meissner))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Georg Meissner was doctoral supervisor of",
                    "start": 0,
                    "end": 41
                },
                {
                    "description": "which scientist",
                    "start": 42,
                    "end": 57
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NNP Georg) (NNP Meissner)) (VP (VBD was) (NP (NP (JJ doctoral) (NN supervisor)) (WHPP (IN of) (WHNP (WDT which))) (NP (NN scientist)))) (. ?)))",
        "mask_entity": "[ENT] was doctoral supervisor of which scientist ?",
        "entity": [
            "Georg Meissner"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "4843",
        "question": "Did Stanlee write the Tales of Suspense?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Stan_Lee> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SQ (VBD Did) (NP (NNP Stanlee)) (VP (VB write) (NP (NP (DT the) (NNPS Tales)) (PP (IN of) (NP (NNP Suspense))))) (. ?)))",
        "mask_entity": "Did [ENT] write [ENT]?",
        "entity": [
            "Stanlee",
            "the Tales of Suspense"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4117",
        "question": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trishna_(yacht)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:homeport) dbr:Trishna_(yacht)) (JOIN (R dbo:homeport) dbr:INS_Viraat_(R22)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)",
                    "start": 0,
                    "end": 69
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN home) (NN port)) (PP (IN of) (NP (NP (NP (DT the) (NNP Trishna) (-LRB- () (NN yacht)) (ADVP (-RRB- )))) (CC and) (NP (NNP INS) (NNP Viraat) (-LRB- () (NNP R22) (-RRB- ))))))) (. ?)))",
        "mask_entity": "Name the common home port of the [ENT] (yacht) and [ENT] (R22)?",
        "entity": [
            "Trishna",
            "INS Viraat"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3385",
        "question": "does the US navy have the structure of command of us department of defence?",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> }",
        "SExpr": "",
        "intent": "ASK",
        "decomposition": "",
        "constituency": "(ROOT (SINV (VBZ does) (NP (DT the) (NNP US) (NN navy)) (VP (VB have) (NP (NP (DT the) (NN structure)) (PP (IN of) (NP (NP (NN command)) (PP (IN of) (NP (NP (PRP us) (NN department)) (PP (IN of) (NP (NN defence))))))))) (. ?)))",
        "mask_entity": "does the [ENT] navy have the structure of command of us department of defence?",
        "entity": [
            "US"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4555",
        "question": "Name books with publisher as Francisco de Robles and writer as Miguel de Cervantes ?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles> . ?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "SExpr": "(AND dbo:Book (AND (JOIN dbo:publisher dbr:Francisco_de_Robles) (JOIN dbp:author dbr:Miguel_de_Cervantes)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name books",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "with publisher as Francisco de Robles",
                    "start": 11,
                    "end": 48
                },
                {
                    "description": "and writer as Miguel de Cervantes",
                    "start": 49,
                    "end": 82
                }
            ]
        },
        "constituency": "(ROOT (NP (NP (NN Name) (NNS books)) (PP (IN with) (NP (NP (NN publisher)) (PP (IN as) (NP (NP (NNP Francisco) (NNP de) (NNP Robles)) (CC and) (NP (NP (NN writer)) (PP (IN as) (NP (NNP Miguel) (NNP de) (NNP Cervantes)))))))) (. ?)))",
        "mask_entity": "Name books with publisher as [ENT] and writer as [ENT] ?",
        "entity": [
            "Francisco de Robles",
            "Miguel de Cervantes"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1184",
        "question": "Who owns the schools which have a penguin as its mascot?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "SExpr": "(JOIN (R dbo:authority) (AND dbo:School (JOIN dbp:mascot dbr:Penguin))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who owns [IQ1]",
                    "start": 0,
                    "end": 55,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the schools",
                                "start": 9,
                                "end": 20
                            },
                            {
                                "description": "which have a penguin as its mascot",
                                "start": 21,
                                "end": 55
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NNS schools)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN penguin)) (PP (IN as) (NP (PRP$ its) (NN mascot)))))))))) (. ?)))",
        "mask_entity": "Who owns the schools which have a penguin as its mascot?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2433",
        "question": "River which flows into the eugene mahoney state park pass through which states?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Eugene_T._Mahoney_State_Park> . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "SExpr": "(JOIN (R dbo:state) (JOIN dbp:mouthLocation dbr:Eugene_T._Mahoney_State_Park)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "[IQ1] pass through",
                    "start": 0,
                    "end": 18,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "River",
                                "start": 0,
                                "end": 5
                            },
                            {
                                "description": "which flows into the eugene mahoney state park",
                                "start": 6,
                                "end": 52
                            }
                        ]
                    }
                },
                {
                    "description": "which states",
                    "start": 19,
                    "end": 78
                }
            ]
        },
        "constituency": "(ROOT (S (NP (NP (NN River)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN into) (NP (DT the) (NML (NN eugene) (NN mahoney)) (NN state) (NN park))))))) (VP (VB pass) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (VP (VBZ states))))) (. ?)))",
        "mask_entity": "River which flows into the eugene mahoney state park pass through which states?",
        "entity": [],
        "compositionality_type": "composition"
    },
    {
        "ID": "2391",
        "question": "What nation is Hornito located in, where Jamie Bateman Cayn died too?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jaime_Bateman_Cay\u00f3n> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Hornito,_Chiriqu\u00ed> <http://dbpedia.org/ontology/country> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:deathPlace) dbr:Jaime_Bateman_Cay\u00f3n) (JOIN (R dbo:country) dbr:Hornito,_Chiriqu\u00ed))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "What nation",
                    "start": 0,
                    "end": 11
                },
                {
                    "description": "is Hornito located in,",
                    "start": 12,
                    "end": 34
                },
                {
                    "description": "where Jamie Bateman Cayn died too",
                    "start": 35,
                    "end": 68
                }
            ]
        },
        "constituency": "(ROOT (S (SBARQ (WHNP (WDT What) (NN nation)) (SQ (VBZ is) (NP (NNP Hornito)) (VP (VBN located) (PP (IN in))))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jamie) (NNP Bateman) (NNP Cayn)) (VP (VBD died) (ADVP (RB too))))) (. ?)))",
        "mask_entity": "What nation is [ENT] located in, where [ENT] died too?",
        "entity": [
            "Hornito",
            "Jamie Bateman Cayn"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "769",
        "question": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest?",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.> . ?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "SExpr": "(AND dbo:TelevisionShow (AND (JOIN dbp:judges dbr:Harry_Connick,_Jr.) (JOIN dbo:presenter dbr:Ryan_Seacrest)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which TV show",
                    "start": 0,
                    "end": 13
                },
                {
                    "description": "had a judge named Harry Connick, Jr.",
                    "start": 14,
                    "end": 50
                },
                {
                    "description": "and was presented by Ryan Seacrest",
                    "start": 51,
                    "end": 85
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (SQ (VP (VP (VBD had) (NP (NP (NP (DT a) (NN judge)) (VP (VBN named) (S (NP (NNP Harry) (NNP Connick))))) (, ,) (NP (NNP Jr.)))) (CC and) (VP (VBD was) (VP (VBN presented) (PP (IN by) (NP (NNP Ryan) (NNP Seacrest))))))) (. ?)))",
        "mask_entity": "Which TV show had a judge named [ENT], [ENT] and was presented by [ENT]?",
        "entity": [
            "Harry Connick",
            "Jr.",
            "Ryan Seacrest"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "1685",
        "question": "Name the resting place of Fazlur Rahman Khan ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fazlur_Rahman_Khan> <http://dbpedia.org/ontology/restingPlace> ?uri } ",
        "SExpr": "(JOIN (R dbo:restingPlace) dbr:Fazlur_Rahman_Khan)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (VBG resting) (NN place)) (PP (IN of) (NP (NNP Fazlur) (NNP Rahman) (NNP Khan))))) (. ?)))",
        "mask_entity": "Name the resting place of [ENT]",
        "entity": [
            "Fazlur Rahman Khan ?"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "130",
        "question": "Which arena of WPC Dynamo Moscow is death location of Tigran Petrosian >",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
        "SExpr": "(AND (JOIN (R dbp:arena) dbr:WPC_Dynamo_Moscow) (JOIN (R dbo:deathPlace) dbr:Tigran_Petrosian))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which arena of WPC Dynamo Moscow",
                    "start": 0,
                    "end": 32
                },
                {
                    "description": "is death location of Tigran Petrosian >",
                    "start": 33,
                    "end": 72
                }
            ]
        },
        "constituency": "(ROOT (S (SBAR (WHNP (WHNP (WDT Which) (NN arena)) (PP (IN of) (NP (NNP WPC) (NNP Dynamo) (NNP Moscow)))) (S (VP (VBZ is) (NP (NP (NN death) (NN location)) (PP (IN of) (NP (NNP Tigran) (NNP Petrosian))))))) (NP (NP (-RRB- >)))))",
        "mask_entity": "Which arena of [ENT] [ENT] is death location of [ENT] >",
        "entity": [
            "WPC Dynamo",
            "Moscow",
            "Tigran Petrosian"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "2919",
        "question": "what cities are close by LoDaisKa ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "SExpr": "(JOIN (R dbo:nearestCity) dbr:LoDaisKa_Site)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBAR (WHNP (WDT what)) (S (NP (NNS cities)) (VP (VBP are) (ADJP (JJ close) (PP (IN by) (NP (NNP LoDaisKa)))))) (. ?)))",
        "mask_entity": "what cities are close by [ENT] ?",
        "entity": [
            "LoDaisKa"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "3171",
        "question": "Which wars were fought when the commanders involved served under PM Choi Tu Son?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Choi_Tu-son> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "SExpr": "(AND dbo:MilitaryConflict (JOIN dbo:commander (JOIN dbp:primeminister dbr:Choi_Tu-son))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Which wars",
                    "start": 0,
                    "end": 10
                },
                {
                    "description": "were fought when the commanders involved served [IQ1]",
                    "start": 11,
                    "end": 79,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "under PM Choi Tu Son",
                                "start": 59,
                                "end": 79
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WDT Which) (NNS wars)) (SQ (VP (VBD were) (VP (VBN fought) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NNS commanders)) (VP (VBD involved) (S (VP (VBN served) (PP (IN under) (NP (NN PM) (NNP Choi) (NNP Tu) (NNP Son))))))))))) (. ?)))",
        "mask_entity": "Which wars were fought when the commanders involved served under [ENT]?",
        "entity": [
            "PM Choi Tu Son"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3444",
        "question": "Who is the meaning of Isa  ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri } ",
        "SExpr": "(JOIN (R dbp:meaning) dbr:Isa_(name))",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (NNP Isa)))))) (. ?)))",
        "mask_entity": "Who is the meaning of [ENT]  ?",
        "entity": [
            "Isa"
        ],
        "compositionality_type": "simple"
    },
    {
        "ID": "4426",
        "question": "Who is  venerated in  Judaism and Islam?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . }",
        "SExpr": "(AND (JOIN dbo:veneratedIn dbr:Judaism) (JOIN dbo:veneratedIn dbr:Islam))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Who is venerated in Judaism and Islam",
                    "start": 0,
                    "end": 37
                }
            ]
        },
        "constituency": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ is) (VP (VBN venerated) (PP (IN in) (NP (NNP Judaism) (CC and) (NNP Islam)))))) (. ?)))",
        "mask_entity": "Who is  venerated in  [ENT] and [ENT]?",
        "entity": [
            "Judaism",
            "Islam"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "466",
        "question": "Count the number teams which have  former ice hockey players which also included American Hockey League ?",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/American_Hockey_League> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri }",
        "SExpr": "(JOIN (R dbo:formerTeam) (JOIN dbo:formerTeam dbr:American_Hockey_League)",
        "intent": "COUNT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Count the number teams",
                    "start": 0,
                    "end": 22
                },
                {
                    "description": "which have [IQ1]",
                    "start": 23,
                    "end": 102,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "former ice hockey players",
                                "start": 34,
                                "end": 59
                            },
                            {
                                "description": "which also included American Hockey League",
                                "start": 60,
                                "end": 102
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number) (NNS teams)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (JJ former) (NML (NN ice) (NN hockey)) (NNS players)) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBD included) (NP (NNP American) (NNP Hockey) (NNP League))))))))))) (. ?)))",
        "mask_entity": "Count the number teams which have  former ice hockey players which also included [ENT] ?",
        "entity": [
            "American Hockey League"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "3092",
        "question": "Name the common editor of Easy Street (film) and Work (film)?",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . }",
        "SExpr": "(AND (JOIN (R dbo:editing) dbr:Easy_Street_(film)) (JOIN (R dbo:editing) dbr:Work_(film)))",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "Name the common editor of Easy Street (film) and Work (film)",
                    "start": 0,
                    "end": 60
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN editor)) (PP (IN of) (NP (NP (NML (NML (NNP Easy) (NNP Street)) (-LRB- ()) (NN film) (-RRB- ))) (CC and) (NP (NNP Work) (-LRB- () (NN film))))) (ADVP (-RRB- )))) (. ?)))",
        "mask_entity": "Name the common editor of [ENT] (film) and [ENT] (film)?",
        "entity": [
            "Easy Street",
            "Work"
        ],
        "compositionality_type": "conjunction"
    },
    {
        "ID": "3772",
        "question": "List all the schools of the rugby player whose went to school named Pietermaritzburg ?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/school> <http://dbpedia.org/resource/Pietermaritzburg> . ?x <http://dbpedia.org/property/school> ?uri  . }",
        "SExpr": "(JOIN (R dbp:school) (JOIN dbp:school dbr:Pietermaritzburg)",
        "intent": "SELECT",
        "decomposition": {
            "root_question": [
                {
                    "description": "List all the schools of [IQ1]",
                    "start": 0,
                    "end": 84,
                    "inner_questions": {
                        "IQ1": [
                            {
                                "description": "the rugby player",
                                "start": 24,
                                "end": 40
                            },
                            {
                                "description": "whose went to school named Pietermaritzburg",
                                "start": 41,
                                "end": 84
                            }
                        ]
                    }
                }
            ]
        },
        "constituency": "(ROOT (S (VP (VB List) (NP (NP (PDT all) (DT the) (NNS schools)) (PP (IN of) (NP (NP (DT the) (NN rugby) (NN player)) (SBAR (WHNP (WP$ whose)) (S (VP (VBD went) (PP (IN to) (NP (NP (NN school)) (VP (VBN named) (S (NP (NNP Pietermaritzburg))))))))))))) (. ?)))",
        "mask_entity": "List all the schools of the rugby player whose went to school named [ENT] ?",
        "entity": [
            "Pietermaritzburg"
        ],
        "compositionality_type": "composition"
    },
    {
        "ID": "860",
        "question": "Name the office of Richard Coke ?",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri } ",
        "SExpr": "(JOIN (R dbp:office) dbr:Richard_Coke)",
        "intent": "SELECT",
        "decomposition": "",
        "constituency": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NNP Richard) (NNP Coke))))) (. ?)))",
        "mask_entity": "Name the office of [ENT] ?",
        "entity": [
            "Richard Coke"
        ],
        "compositionality_type": "simple"
    }
]