[
 {
  "taggedQuestion": "Which architect of <e0> was also tenant of <e1> ??",
  "entityMap": {
   "<e1>": "New Sanno hotel",
   "<e0>": "Marine Corps Air Station Kaneohe Bay"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which architect of Marine Corps Air Station Kaneohe Bay was",
    "originStr": "Which architect of Marine Corps Air Station Kaneohe Bay was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also tenant of New Sanno hotel / '",
    "originStr": "also tenant of New Sanno hotel / '"
   }
  ],
  "question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN architect) (PP (IN of) (NP (ADD <e0>))))) (SQ (VBD was) (NP (ADVP (RB also)) (NP (NN tenant)) (PP (IN of) (NP (ADD <e1>))))) (. ??)))",
  "entityNum": 1,
  "id": 0
 },
 {
  "taggedQuestion": "Which sects people are part of <e0> which fall under the International Muslim Brotherhood?",
  "entityMap": {
   "<e0>": "local political parties"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which sects people are part #entity1",
    "originStr": "Which sects people are part #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "of local political parties which fall under the International Muslim Brotherhood",
    "originStr": "of local political parties which fall under the International Muslim Brotherhood"
   }
  ],
  "question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NNS sects)) (NP (NNS people)))) (SQ (VBP are) (NP (NP (NN part)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (DT the) (NNP International) (NNP Muslim) (NNP Brotherhood)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 1
 },
 {
  "taggedQuestion": "List common systems are developed by of the Google Videos and written by of the <e0> ?",
  "entityMap": {
   "<e0>": "Google Web Toolkit"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List common systems are developed by of the Google Videos",
    "originStr": "List common systems are developed by of the Google Videos"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and written by of the Google Web Toolkit",
    "originStr": "and written by of the Google Web Toolkit"
   }
  ],
  "question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NN List) (JJ common) (NNS systems)) (VP (VBP are) (VP (VP (VBN developed) (PP (IN by) (PP (IN of) (NP (DT the) (NNP Google) (NNS Videos))))) (CC and) (VP (VBN written) (PP (IN by) (PP (IN of) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 2
 },
 {
  "taggedQuestion": "Which games are Sam Loyd and Eric Schiller both famous?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "For which games are",
    "originStr": "For which games are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Sam Loyd and Eric Schiller both famous",
    "originStr": "Sam Loyd and Eric Schiller both famous"
   }
  ],
  "question": "For which games are Sam Loyd and Eric Schiller both famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS games)) (SQ (VBP are) (NP (NP (NNP Sam) (NNP Loyd)) (CC and) (NP (NNP Eric) (NNP Schiller))) (ADJP (DT both) (JJ famous))) (. ?)))",
  "entityNum": 1,
  "id": 3
 },
 {
  "taggedQuestion": "Is <e0> in the pizza industry?",
  "entityMap": {
   "<e0>": "Peter Piper Pizza"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Peter Piper Pizza in the pizza industry",
    "originStr": "Is Peter Piper Pizza in the pizza industry"
   }
  ],
  "question": "Is Peter Piper Pizza in the pizza industry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (IN in) (NP (DT the) (NN pizza)))) (NP (NN industry)) (. ?)))",
  "entityNum": 1,
  "id": 4
 },
 {
  "taggedQuestion": "Name the artist who made Dream Dancing and is often associated with Joe Pass.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the artist who made Dream Dancing #entity1 is often associated with Joe Pass",
    "originStr": "Name the artist who made Dream Dancing #entity1 is often associated with Joe Pass"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "and",
    "originStr": "and"
   }
  ],
  "question": "Name the artist who made Dream Dancing and is often associated with Joe Pass",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD made) (NP (NNP Dream) (NNP Dancing))) (CC and) (VP (VBZ is) (ADVP (RB often)) (VP (VBN associated) (PP (IN with) (NP (NNP Joe) (NNP Pass)))))))))) (. .)))",
  "entityNum": 2,
  "id": 5
 },
 {
  "taggedQuestion": "Who is the office holder with deputies as Neil Brown and Andrew Peacock?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the office holder with deputies as Neil Brown and Andrew Peacock",
    "originStr": "is the office holder with deputies as Neil Brown and Andrew Peacock"
   }
  ],
  "question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NNS deputies)) (PP (IN as) (NP (NP (NNP Neil) (NNP Brown)) (CC and) (NP (NNP Andrew) (NN Peacock)))))))) (. ?)))",
  "entityNum": 1,
  "id": 6
 },
 {
  "taggedQuestion": "Where did these popular aeroplanes - <e1> and Start+Flug H 101 originate?",
  "entityMap": {
   "<e1>": "Focke Wulf 260",
   "<e0>": "+ Flug H 101"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did these",
    "originStr": "Where did these"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "popular aeroplanes - Focke Wulf 260 and Start + Flug H 101 originate",
    "originStr": "popular aeroplanes - Focke Wulf 260 and Start + Flug H 101 originate"
   }
  ],
  "question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT these) (JJ popular) (NNS aeroplanes) (HYPH -) (NN <e1>)) (CC and) (NP (NML (NN Start) (SYM +) (NN Flug)) (NN H) (CD 101))) (VP (VB originate))) (. ?)))",
  "entityNum": 1,
  "id": 7
 },
 {
  "taggedQuestion": "Which <e0> 's producer is <e1> and written by Erik Jendresen?",
  "entityMap": {
   "<e1>": "Stephen E. Ambrose",
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which television show's producer is Stephen E. Ambrose and",
    "originStr": "Which television show's producer is Stephen E. Ambrose and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "written by Erik Jendresen",
    "originStr": "written by Erik Jendresen"
   }
  ],
  "question": "Which television show's producer is Stephen E. Ambrose and written by Erik Jendresen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NN <e0>) (POS 's)) (NN producer)) (VP (VP (VBZ is) (NP (ADD <e1>))) (CC and) (VP (VBN written) (PP (IN by) (NP (NNP Erik) (NNP Jendresen)))))) (. ?)))",
  "entityNum": 1,
  "id": 8
 },
 {
  "taggedQuestion": "Who created the <e0> and also the <e1> ?",
  "entityMap": {
   "<e1>": "L'Enfant a la tasse",
   "<e0>": "Women in the Garden"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who created the",
    "originStr": "Who created the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Women in the Garden and also the L'Enfant a la tasse",
    "originStr": "Women in the Garden and also the L'Enfant a la tasse"
   }
  ],
  "question": "Who created the Women in the Garden and also the L'Enfant a la tasse",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD created) (NP (NP (DT the) (NN <e0>)) (CC and) (ADVP (RB also)) (NP (DT the) (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 9
 },
 {
  "taggedQuestion": "Which famous horserace has seen both Fergie sutherland and the illustrious <e0>?",
  "entityMap": {
   "<e0>": "War of Attrition"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which famous horserace has",
    "originStr": "Which famous horserace has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "seen both Fergie sutherland and the illustrious War of Attrition",
    "originStr": "seen both Fergie sutherland and the illustrious War of Attrition"
   }
  ],
  "question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (JJ famous) (NN horserace))) (SQ (VP (VBZ has) (VP (VBN seen) (NP (NP (DT both) (NNP Fergie) (NN sutherland)) (CC and) (NP (DT the) (ADJP (JJ illustrious)) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 10
 },
 {
  "taggedQuestion": "Tell me the name of the <e0>'s TV show whose Artist is Christopher Franke .",
  "entityMap": {
   "<e0>": "Prime Time Entertainment Network"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "tell me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Tell me the name of #entity1",
    "originStr": "Tell me the name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke",
    "originStr": "the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke"
   }
  ],
  "question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Tell) (NP (PRP me)) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (NP (DT the) (NN <e0>) (POS 's)) (NN TV) (NN show)) (SBAR (WHNP (WP$ whose) (NN Artist)) (S (VP (VBZ is) (NP (NNP Christopher) (NNP Franke))))))))) (. .)))",
  "entityNum": 2,
  "id": 11
 },
 {
  "taggedQuestion": "How many other battles have the military person fought whose one of the battles is <e0> ?",
  "entityMap": {
   "<e0>": "World War II"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many other battles have #entity1 II",
    "originStr": "How many other battles have #entity1 II"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the military person fought whose one of the battles is World War",
    "originStr": "the military person fought whose one of the battles is World War"
   }
  ],
  "question": "How many other battles have the military person fought whose one of the battles is World War II",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ other) (NNS battles)) (VP (VBP have) (NP (NP (DT the) (JJ military) (NN person)) (SBAR (S (VP (VBD fought) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS battles)))) (VP (VBZ is) (NP (ADD <e0>))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 12
 },
 {
  "taggedQuestion": "Whose network's parent organisation is Comcast?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Whose network's #entity1",
    "originStr": "Whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "parent organisation is Comcast",
    "originStr": "parent organisation is Comcast"
   }
  ],
  "question": "Whose network's parent organisation is Comcast",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose) (NML (NML (NN network) (POS 's)) (NN parent))) (NN organisation)) (SQ (VBZ is) (NP (NNP Comcast))) (. ?)))",
  "entityNum": 2,
  "id": 13
 },
 {
  "taggedQuestion": "Is <e0> buried in Colorado?",
  "entityMap": {
   "<e0>": "William H Blanchard"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is William H Blanchard buried in Colorado",
    "originStr": "Is William H Blanchard buried in Colorado"
   }
  ],
  "question": "Is William H Blanchard buried in Colorado",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
  "entityNum": 1,
  "id": 14
 },
 {
  "taggedQuestion": "Which cport of <e0> is also the genere of Battle chess ?",
  "entityMap": {
   "<e0>": "Vishwajyot High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which sport of Vishwajyot High School is",
    "originStr": "Which sport of Vishwajyot High School is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the genre of Battle chess",
    "originStr": "also the genre of Battle chess"
   }
  ],
  "question": "Which sport of Vishwajyot High School is also the genre of Battle chess",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN cport) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN genere)) (PP (IN of) (NP (NNP Battle) (NN chess))))) (. ?)))",
  "entityNum": 1,
  "id": 15
 },
 {
  "taggedQuestion": "Which state is the Channel district?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which state is",
    "originStr": "In which state is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Channel district",
    "originStr": "the Channel district"
   }
  ],
  "question": "In which state is the Channel district",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (DT the) (NNP Channel) (NN district))) (. ?)))",
  "entityNum": 1,
  "id": 16
 },
 {
  "taggedQuestion": "Who was in the missions of Apollo 11 and Gemini 8?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was in the missions of Apollo 11 and",
    "originStr": "Who was in the missions of Apollo 11 and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Gemini 8",
    "originStr": "Gemini 8"
   }
  ],
  "question": "Who was in the missions of Apollo 11 and Gemini 8",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (DT the) (NNS missions)) (PP (IN of) (NP (NP (NNP Apollo) (CD 11)) (CC and) (NP (NNP Gemini) (CD 8)))))))) (. ?)))",
  "entityNum": 1,
  "id": 17
 },
 {
  "taggedQuestion": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of other tenant of #entity1",
    "originStr": "What is the total number of other tenant of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadia whose one of the tenant is Raptors 905",
    "originStr": "the stadia whose one of the tenant is Raptors 905"
   }
  ],
  "question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN tenant)) (PP (IN of) (NP (NP (DT the) (NN stadia)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN tenant)))) (S (VP (VBZ is) (NP (NNPS Raptors))))))) (NP-TMP (CD 905)))))) (. ?)))",
  "entityNum": 2,
  "id": 18
 },
 {
  "taggedQuestion": "Where can one find the Dzogchen Ponolop Rinpoche?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where can one #entity1",
    "originStr": "Where can one #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "find the Dzogchen Ponolop Rinpoche",
    "originStr": "find the Dzogchen Ponolop Rinpoche"
   }
  ],
  "question": "Where can one find the Dzogchen Ponolop Rinpoche",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (DT the) (NNP Dzogchen) (NNP Ponolop) (NNP Rinpoche)))) (. ?)))",
  "entityNum": 2,
  "id": 19
 },
 {
  "taggedQuestion": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the stockholder of #entity1",
    "originStr": "Who is the stockholder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the road tunnels operated by the Massachusetts Department of Transportation",
    "originStr": "the road tunnels operated by the Massachusetts Department of Transportation"
   }
  ],
  "question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN stockholder)) (PP (IN of) (NP (DT the) (NN road) (NNS tunnels)))) (VP (VBN operated) (PP (IN by) (NP (NP (DT the) (NNP Massachusetts) (NNP Department)) (PP (IN of) (NP (NNP Transportation))))))) (. ?)))",
  "entityNum": 2,
  "id": 20
 },
 {
  "taggedQuestion": "What are the awards won by the film director of Saraband ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the awards won by #entity1",
    "originStr": "What are the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film director of Saraband",
    "originStr": "the film director of Saraband"
   }
  ],
  "question": "What are the awards won by the film director of Saraband",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Saraband))))))) (. ?)))",
  "entityNum": 2,
  "id": 21
 },
 {
  "taggedQuestion": "What is the almamater of the president whose vice president was <e0>?",
  "entityMap": {
   "<e0>": "Enrique Jos Varona"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the almamater of #entity1",
    "originStr": "What is the almamater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president whose vice president was Enrique Jos Varona",
    "originStr": "the president whose vice president was Enrique Jos Varona"
   }
  ],
  "question": "What is the almamater of the president whose vice president was Enrique Jos Varona",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN almamater)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NML (NN vice)) (NN president)) (S (VP (VBD was) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 22
 },
 {
  "taggedQuestion": "What is the route end of <e0> ?",
  "entityMap": {
   "<e0>": "Birmingham and Oxford Junction Railway"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the route end of Birmingham and Oxford Junction Railway",
    "originStr": "is the route end of Birmingham and Oxford Junction Railway"
   }
  ],
  "question": "What is the route end of Birmingham and Oxford Junction Railway",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 23
 },
 {
  "taggedQuestion": "Where did the <e0> originate?",
  "entityMap": {
   "<e0>": "Vitis Vinifera grapes"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did the Vitis Vinifera grapes originate",
    "originStr": "Where did the Vitis Vinifera grapes originate"
   }
  ],
  "question": "Where did the Vitis Vinifera grapes originate",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN <e0>)) (VP (VB originate))) (. ?)))",
  "entityNum": 1,
  "id": 24
 },
 {
  "taggedQuestion": "How many people are there whose children died in Indiana?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people are there whose #entity1",
    "originStr": "How many people are there whose #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "children died in Indiana",
    "originStr": "children died in Indiana"
   }
  ],
  "question": "How many people are there whose children died in Indiana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VBP are) (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBD died) (PP (IN in) (NP (NNP Indiana))))))) (. ?)))",
  "entityNum": 2,
  "id": 25
 },
 {
  "taggedQuestion": "What is the military branch of the <e0> which is also the branch of <e1> ?",
  "entityMap": {
   "<e1>": "Pierre R. Graham",
   "<e0>": "William French Smith"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the military branch of the William French Smith which",
    "originStr": "What is the military branch of the William French Smith which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the branch of Pierre R. Graham",
    "originStr": "is also the branch of Pierre R. Graham"
   }
  ],
  "question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NN <e1>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 26
 },
 {
  "taggedQuestion": "What is the river whose source is Lake Ontario?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the river whose",
    "originStr": "What is the river whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "source is Lake Ontario",
    "originStr": "source is Lake Ontario"
   }
  ],
  "question": "What is the river whose source is Lake Ontario",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (NP (NNP Lake) (NNP Ontario))))))) (. ?)))",
  "entityNum": 1,
  "id": 27
 },
 {
  "taggedQuestion": "Which location city of the Denver Broncos is the place of birth of Steven Clark Cunningham ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which location city of the Denver Broncos is",
    "originStr": "Which location city of the Denver Broncos is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the place of birth of Steven Clark Cunningham",
    "originStr": "the place of birth of Steven Clark Cunningham"
   }
  ],
  "question": "Which location city of the Denver Broncos is the place of birth of Steven Clark Cunningham",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN location) (NN city)) (PP (IN of) (NP (DT the) (NNP Denver) (NNPS Broncos)))) (SQ (VBZ is) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Steven) (NNP Clark) (NNP Cunningham))))))) (. ?)))",
  "entityNum": 1,
  "id": 28
 },
 {
  "taggedQuestion": "What is the religion of the person who founded the Emel magazine?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the religion of #entity1",
    "originStr": "What is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who founded the Emel magazine",
    "originStr": "the person who founded the Emel magazine"
   }
  ],
  "question": "What is the religion of the person who founded the Emel magazine",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD founded) (NP (DT the) (NNP Emel) (NN magazine))))))))) (. ?)))",
  "entityNum": 2,
  "id": 29
 },
 {
  "taggedQuestion": "Give the name of the  managers of <e0> and <e1>",
  "entityMap": {
   "<e1>": "England national under-21 football team.",
   "<e0>": "England national under-20 football team"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give the name of the",
    "originStr": "Give the name of the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "managers of England national under-20 football team and England national under-21 football team",
    "originStr": "managers of England national under-20 football team and England national under-21 football team"
   }
  ],
  "question": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (S (VP (VB Give) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS managers)) (PP (IN of))))))) (NP (ADD <e0>) (CC and) (ADD <e1>))))",
  "entityNum": 1,
  "id": 30
 },
 {
  "taggedQuestion": "How many cities are around the sea in which the the <e0> meets?",
  "entityMap": {
   "<e0>": "fig tree bay"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many cities are around #entity1",
    "originStr": "How many cities are around #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sea in which the fig tree bay meets",
    "originStr": "the sea in which the fig tree bay meets"
   }
  ],
  "question": "How many cities are around the sea in which the fig tree bay meets",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (PP (IN in) (SBAR (WHNP (WDT which) (DT the)) (S (NP (DT the) (NN <e0>)) (VP (VBZ meets))))))))) (. ?)))",
  "entityNum": 2,
  "id": 31
 },
 {
  "taggedQuestion": "Is <e0> a part of the bahamas achipelago?",
  "entityMap": {
   "<e0>": "blue lagoon island"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "is blue lagoon island a part of the bahamas archipelago",
    "originStr": "is blue lagoon island a part of the bahamas archipelago"
   }
  ],
  "question": "is blue lagoon island a part of the bahamas archipelago",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (DT the) (NNS bahamas))))) (NP (NN achipelago)) (. ?)))",
  "entityNum": 1,
  "id": 32
 },
 {
  "taggedQuestion": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movies distributed by RKO Pictures and",
    "originStr": "Name the movies distributed by RKO Pictures and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has music composer as Bernard Herrmann",
    "originStr": "has music composer as Bernard Herrmann"
   }
  ],
  "question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS movies)) (VP (VP (VBN distributed) (PP (IN by) (NP (NN RKO) (NNS Pictures)))) (CC and) (VP (VBZ has) (NP (NP (NN music) (NN composer)) (PP (IN as) (NP (NNP Bernard) (NNP Herrmann)))))))) (. .)))",
  "entityNum": 1,
  "id": 33
 },
 {
  "taggedQuestion": "Did the New Way party merge in the One Israel party?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did the New Way party merge in the One Israel party",
    "originStr": "Did the New Way party merge in the One Israel party"
   }
  ],
  "question": "Did the New Way party merge in the One Israel party",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (DT the) (NNP New) (NNP Way) (NN party)) (VP (VB merge) (PP (IN in) (NP (DT the) (CD One) (NNP Israel) (NN party)))) (. ?)))",
  "entityNum": 1,
  "id": 34
 },
 {
  "taggedQuestion": "How many pole drivers have been there in grand prixes where first driver was Damon Hill?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many pole drivers have been there in grand #entity1",
    "originStr": "How many pole drivers have been there in grand #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "prixes where first driver was Damon Hill",
    "originStr": "prixes where first driver was Damon Hill"
   }
  ],
  "question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN pole) (NNS drivers)) (VP (VBP have) (VP (VBN been) (ADVP (RB there)) (PP (IN in) (NP (NP (JJ grand) (NNS prixes)) (SBAR (WHADVP (WRB where)) (S (NP (JJ first) (NN driver)) (VP (VBD was) (NP (NNP Damon) (NNP Hill)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 35
 },
 {
  "taggedQuestion": "Where are jockeys in <e0> from?",
  "entityMap": {
   "<e0>": "Dubai World Cup"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where are jockeys in",
    "originStr": "Where are jockeys in"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Dubai World Cup from",
    "originStr": "Dubai World Cup from"
   }
  ],
  "question": "Where are jockeys in Dubai World Cup from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NNS jockeys)) (PP (IN in) (PP (NP (NN <e0>)) (IN from)))) (. ?)))",
  "entityNum": 1,
  "id": 36
 },
 {
  "taggedQuestion": "Who owns the newspaper which was founded by Nehru?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who owns #entity1",
    "originStr": "Who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the newspaper which was founded by Nehru",
    "originStr": "the newspaper which was founded by Nehru"
   }
  ],
  "question": "Who owns the newspaper which was founded by Nehru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN newspaper)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Nehru)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 37
 },
 {
  "taggedQuestion": "Which places do the flights go by airlines headquartered in the UK?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "To which places do #entity1",
    "originStr": "To which places do #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the flights go by airlines headquartered in the UK",
    "originStr": "the flights go by airlines headquartered in the UK"
   }
  ],
  "question": "To which places do the flights go by airlines headquartered in the UK",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS places))) (SQ (VBP do) (NP (DT the) (NNS flights)) (VP (VBP go) (PP (IN by) (NP (NP (NNS airlines)) (VP (VBN headquartered) (PP (IN in) (NP (DT the) (NNP UK)))))))) (. ?)))",
  "entityNum": 2,
  "id": 38
 },
 {
  "taggedQuestion": "What is the magazine which have been  founded by <e0>?",
  "entityMap": {
   "<e0>": "Ralph J. Gleason"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the magazine #entity1",
    "originStr": "What is the magazine #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which have been founded by Ralph J. Gleason",
    "originStr": "which have been founded by Ralph J. Gleason"
   }
  ],
  "question": "What is the magazine which have been founded by Ralph J. Gleason",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN magazine)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN founded) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 39
 },
 {
  "taggedQuestion": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Seattle the Ship builder of USS Marmora (IX-189)",
    "originStr": "Is Seattle the Ship builder of USS Marmora (IX-189)"
   }
  ],
  "question": "Is Seattle the Ship builder of USS Marmora (IX-189)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Seattle)) (NP (NP (DT the) (NN Ship) (NN builder)) (PP (IN of) (NP (NNP USS) (NNP Marmora) (PRN (-LRB- -LRB-) (NP (CD IX) (SYM -) (CD 189)) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 40
 },
 {
  "taggedQuestion": "Is Tirana the largest city of Albania?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Tirana the largest city of Albania",
    "originStr": "Is Tirana the largest city of Albania"
   }
  ],
  "question": "Is Tirana the largest city of Albania",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Tirana)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Albania)))) (. ?)))",
  "entityNum": 1,
  "id": 41
 },
 {
  "taggedQuestion": "Which cities can the beverage related to Barq's be found?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which cities can #entity1 be found",
    "originStr": "In which cities can #entity1 be found"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the beverage related to Barq's",
    "originStr": "the beverage related to Barq's"
   }
  ],
  "question": "In which cities can the beverage related to Barq's be found",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS cities)) (SQ (MD can) (NP (NP (DT the) (NN beverage)) (VP (VBN related) (PP (IN to) (NP (NNP Barq) (POS 's))))) (VP (VB be) (VP (VBN found)))) (. ?)))",
  "entityNum": 2,
  "id": 42
 },
 {
  "taggedQuestion": "What is the birth place of the astronaut whose mission was the Vostok programmer?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the birth place of #entity1",
    "originStr": "What is the birth place of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the astronaut whose mission was the Vostok programmer",
    "originStr": "the astronaut whose mission was the Vostok programmer"
   }
  ],
  "question": "What is the birth place of the astronaut whose mission was the Vostok programmer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (DT the) (NN astronaut)) (SBAR (WHNP (WP$ whose) (NN mission)) (S (VP (VBD was) (NP (DT the) (NNP Vostok) (NN programmer))))))))) (. ?)))",
  "entityNum": 2,
  "id": 43
 },
 {
  "taggedQuestion": "Count everyone who studied at an institute which are in Suburbs.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 in Suburbs",
    "originStr": "#entity1 in Suburbs"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Count everyone who studied at an institute which are",
    "originStr": "Count everyone who studied at an institute which are"
   }
  ],
  "question": "Count everyone who studied at an institute which are in Suburbs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBD studied) (PP (IN at) (NP (NP (DT an) (NN institute)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN in) (NP (NNS Suburbs))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 44
 },
 {
  "taggedQuestion": "Where did <e0>?",
  "entityMap": {
   "<e0>": "Whitney Wistert debut"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did Whitney Wistert debut",
    "originStr": "Where did Whitney Wistert debut"
   }
  ],
  "question": "Where did Whitney Wistert debut",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 45
 },
 {
  "taggedQuestion": "What is the major shrine of the monarchs whose successor is <e0>?",
  "entityMap": {
   "<e0>": "Dragimir of Travunia and Zachlumia"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the major shrine of #entity1",
    "originStr": "What is the major shrine of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the monarchs whose successor is Dragimir of Travunia and Zachlumia",
    "originStr": "the monarchs whose successor is Dragimir of Travunia and Zachlumia"
   }
  ],
  "question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ major) (NN shrine)) (PP (IN of) (NP (NP (DT the) (NNS monarchs)) (SBAR (WHNP (WP$ whose) (NML (NN successor))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 46
 },
 {
  "taggedQuestion": "How many <e0> have  <e1> as their channel?",
  "entityMap": {
   "<e1>": "Fox Broadcasting Company",
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many television shows #entity1",
    "originStr": "How many television shows #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have Fox Broadcasting Company as their channel",
    "originStr": "have Fox Broadcasting Company as their channel"
   }
  ],
  "question": "How many television shows have Fox Broadcasting Company as their channel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS <e0>)) (VP (VBP have) (NP (NP (ADD <e1>)) (PP (IN as) (NP (PRP$ their) (NN channel)))))) (. ?)))",
  "entityNum": 2,
  "id": 47
 },
 {
  "taggedQuestion": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the river whose",
    "originStr": "What is the river whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "mouth locations are Arctic Ocean and Laptev Sea",
    "originStr": "mouth locations are Arctic Ocean and Laptev Sea"
   }
  ],
  "question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN mouth) (NNS locations))) (S (VP (VBP are) (NP (NP (NNP Arctic) (NNP Ocean)) (CC and) (NP (NNP Laptev) (NNP Sea)))))))) (. ?)))",
  "entityNum": 1,
  "id": 48
 },
 {
  "taggedQuestion": "What are some wars fought when <e0> as the country's prime minister?",
  "entityMap": {
   "<e0>": "Chung Il Kwon"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are some wars   are some wars fought when Chung Il Kwon as the country's prime minister",
    "originStr": "What are some wars   are some wars fought when Chung Il Kwon as the country's prime minister"
   }
  ],
  "question": "What are some wars fought when Chung Il Kwon as the country's prime minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS wars)) (SBAR (S (VP (VBD fought) (SBAR (WHADVP (WRB when)) (FRAG (NP (ADD <e0>))))))) (PP (IN as) (NP (NP (DT the) (NN country) (POS 's)) (JJ prime) (NN minister))))) (. ?)))",
  "entityNum": 1,
  "id": 49
 },
 {
  "taggedQuestion": "Where was the person born who died in <e0>?",
  "entityMap": {
   "<e0>": "Bryn Mawr Hospital"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was the person born #entity1",
    "originStr": "Where was the person born #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who died in Bryn Mawr Hospital",
    "originStr": "who died in Bryn Mawr Hospital"
   }
  ],
  "question": "Where was the person born who died in Bryn Mawr Hospital",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN person)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 50
 },
 {
  "taggedQuestion": "What is the faith of the Ajith Perera and religious affiliation of the <e0>?",
  "entityMap": {
   "<e0>": "Neungin High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the faith of the Ajith Perera and",
    "originStr": "What is the faith of the Ajith Perera and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "religious affiliation of the Neungin High School",
    "originStr": "religious affiliation of the Neungin High School"
   }
  ],
  "question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (DT the) (NNP Ajith) (NNP Perera)))) (CC and) (NP (NP (JJ religious) (NN affiliation)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 51
 },
 {
  "taggedQuestion": "Who was in military unit which played the role of Air interdiction?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was in military unit which",
    "originStr": "Who was in military unit which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "played the role of Air interdiction",
    "originStr": "played the role of Air interdiction"
   }
  ],
  "question": "Who was in military unit which played the role of Air interdiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (JJ military) (NN unit)) (SBAR (WHNP (WDT which)) (S (VP (VBD played) (NP (NP (DT the) (NN role)) (PP (IN of) (NP (NML (NN Air) (NN interdiction)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 52
 },
 {
  "taggedQuestion": "Who are the current members of <e0>?",
  "entityMap": {
   "<e0>": "Insects vs Robots"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the current members of Insects vs Robots",
    "originStr": "Who are the current members of Insects vs Robots"
   }
  ],
  "question": "Who are the current members of Insects vs Robots",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (JJ current) (NNS members)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 53
 },
 {
  "taggedQuestion": "Is Ombla originate in Croatia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Ombla originate in Croatia",
    "originStr": "Is Ombla originate in Croatia"
   }
  ],
  "question": "Is Ombla originate in Croatia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (NNP Ombla)) (VP (VB originate) (PP (IN in) (NP (NNP Croatia)))))) (. ?)))",
  "entityNum": 1,
  "id": 54
 },
 {
  "taggedQuestion": "Greater Napanee is the home town of what people?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 what people",
    "originStr": "#entity1 what people"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Greater Napanee is the home town of",
    "originStr": "Greater Napanee is the home town of"
   }
  ],
  "question": "Greater Napanee is the home town of what people",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Greater) (NNP Napanee)) (VP (VBZ is) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (NP (NP (WP what)) (NP (NNS people)))))) (. ?)))",
  "entityNum": 2,
  "id": 55
 },
 {
  "taggedQuestion": "What place did Edwin Adams die at, which gave birth to William A Purtell?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What place did",
    "originStr": "What place did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Edwin Adams die at , which gave birth to William A Purtell",
    "originStr": "Edwin Adams die at , which gave birth to William A Purtell"
   }
  ],
  "question": "What place did Edwin Adams die at, which gave birth to William A Purtell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN place)) (SQ (VBD did) (NP (NNP Edwin) (NNP Adams)) (VP (VBP die) (ADVP (IN at)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP William) (NNP A) (NNP Purtell)))))))) (. ?)))",
  "entityNum": 1,
  "id": 56
 },
 {
  "taggedQuestion": "Name the nationalteam of <e0> .",
  "entityMap": {
   "<e0>": "Trn Vit Hng"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the nationalteam of Trn Vit Hng",
    "originStr": "Name the nationalteam of Trn Vit Hng"
   }
  ],
  "question": "Name the nationalteam of Trn Vit Hng",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN nationalteam)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 57
 },
 {
  "taggedQuestion": "Which designer of RENFE also owns Renaissance Center ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which designer of RENFE also",
    "originStr": "Which designer of RENFE also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "owns Renaissance Center",
    "originStr": "owns Renaissance Center"
   }
  ],
  "question": "Which designer of RENFE also owns Renaissance Center",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN designer)) (PP (IN of) (NP (NNP RENFE)))) (SQ (VP (ADVP (RB also)) (VBZ owns) (NP (NNP Renaissance) (NNP Center)))) (. ?)))",
  "entityNum": 1,
  "id": 58
 },
 {
  "taggedQuestion": "Which uni did <e0> attend ?",
  "entityMap": {
   "<e0>": "Joshua A. Siegel"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which uni did",
    "originStr": "Which uni did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Joshua A. Siegel attend",
    "originStr": "Joshua A. Siegel attend"
   }
  ],
  "question": "Which uni did Joshua A. Siegel attend",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN uni)) (SQ (VP (VBD did) (NP (ADD <e0>)) (S (VP (VB attend))))) (. ?)))",
  "entityNum": 1,
  "id": 59
 },
 {
  "taggedQuestion": "How many books are written by the author who is famous for Novelas Ejemplares?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many books are written by #entity1",
    "originStr": "How many books are written by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the author who is famous for Novelas Ejemplares",
    "originStr": "the author who is famous for Novelas Ejemplares"
   }
  ],
  "question": "How many books are written by the author who is famous for Novelas Ejemplares",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS books)) (VP (VBP are) (VP (VBN written) (PP (IN by) (NP (NP (DT the) (NN author)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADJP (JJ famous) (PP (IN for) (NP (NNP Novelas) (NNP Ejemplares)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 60
 },
 {
  "taggedQuestion": "Name the rivers who originate from Essex.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the rivers who #entity1",
    "originStr": "Name the rivers who #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "originate from Essex",
    "originStr": "originate from Essex"
   }
  ],
  "question": "Name the rivers who originate from Essex",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (SBAR (WHNP (WP who)) (S (VP (VB originate) (PP (IN from) (NP (NNP Essex)))))))) (. .)))",
  "entityNum": 2,
  "id": 61
 },
 {
  "taggedQuestion": "Companies founded in Taiwan have typically which divisions?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have typically which divisions",
    "originStr": "#entity1 have typically which divisions"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Companies founded in Taiwan",
    "originStr": "Companies founded in Taiwan"
   }
  ],
  "question": "Companies founded in Taiwan have typically which divisions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Taiwan))))) (VP (VBP have) (NP (UCP (ADVP (RB typically)) (NP (WDT which))) (NNS divisions))) (. ?)))",
  "entityNum": 2,
  "id": 62
 },
 {
  "taggedQuestion": "Did <e0> in Sunrise (HIMYM)?",
  "entityMap": {
   "<e0>": "Timm Gunn guest"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Timm Gunn guest in Sunrise (HIMYM)",
    "originStr": "Did Timm Gunn guest in Sunrise (HIMYM)"
   }
  ],
  "question": "Did Timm Gunn guest in Sunrise (HIMYM)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VBD Did) (NP (NP (ADD <e0>)) (PP (IN in) (NP (NNP Sunrise)))) (PRN (-LRB- -LRB-) (NP (NNP HIMYM)) (-RRB- -RRB-))) (. ?)))",
  "entityNum": 1,
  "id": 63
 },
 {
  "taggedQuestion": "Which university did both, the Stanford Cardinal and Gerald Reaven go?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "to which university did",
    "originStr": "to which university did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "both , the Stanford Cardinal and Gerald Reaven go",
    "originStr": "both , the Stanford Cardinal and Gerald Reaven go"
   }
  ],
  "question": "to which university did both, the Stanford Cardinal and Gerald Reaven go",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN university)) (SQ (VBD did) (NP (NP (DT both)) (, ,) (NP (DT the) (NNP Stanford) (NNP Cardinal)) (CC and) (NP (NNP Gerald) (NNP Reaven))) (VP (VB go))) (. ?)))",
  "entityNum": 1,
  "id": 64
 },
 {
  "taggedQuestion": "Name the nearest city to <e0> .",
  "entityMap": {
   "<e0>": "David W. Brown House"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the nearest city to David W. Brown House",
    "originStr": "Name the nearest city to David W. Brown House"
   }
  ],
  "question": "Name the nearest city to David W. Brown House",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (TO to) (NP (ADD <e0>)))) (. .)))",
  "entityNum": 1,
  "id": 65
 },
 {
  "taggedQuestion": "Where did Deion Sanders debut?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where did Deion Sanders debut",
    "originStr": "where did Deion Sanders debut"
   }
  ],
  "question": "where did Deion Sanders debut",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Deion) (NNP Sanders) (NN debut))) (. ?)))",
  "entityNum": 1,
  "id": 66
 },
 {
  "taggedQuestion": "What cities are nearer to <e0>?",
  "entityMap": {
   "<e0>": "Fuountain Lake Farm"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What cities #entity1",
    "originStr": "What cities #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are nearer to Fountain Lake Farm",
    "originStr": "are nearer to Fountain Lake Farm"
   }
  ],
  "question": "What cities are nearer to Fountain Lake Farm",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VBP are) (PP (ADVP (RBR nearer)) (IN to) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 2,
  "id": 67
 },
 {
  "taggedQuestion": "Who are the characters of Batman Live?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the characters of Batman Live",
    "originStr": "Who are the characters of Batman Live"
   }
  ],
  "question": "Who are the characters of Batman Live",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (S (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NNP Batman)))) (VP (VB Live)))) (. ?)))",
  "entityNum": 1,
  "id": 68
 },
 {
  "taggedQuestion": "Which artists trained in <e0>?",
  "entityMap": {
   "<e0>": "San Francisco Art Institute"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which artists trained",
    "originStr": "Which artists trained"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in San Francisco Art Institute",
    "originStr": "in San Francisco Art Institute"
   }
  ],
  "question": "Which artists trained in San Francisco Art Institute",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS artists))) (SQ (VP (VBN trained) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 69
 },
 {
  "taggedQuestion": "What is the owning organisation of the <e0> and also the builder of the Ford Y-block engine?",
  "entityMap": {
   "<e1>": "Ford Y - block engine",
   "<e0>": "Ford Kansas City Assembly Plant"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the owning organisation of the Ford Kansas City Assembly Plant and",
    "originStr": "What is the owning organisation of the Ford Kansas City Assembly Plant and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the builder of the Ford Y-block engine",
    "originStr": "also the builder of the Ford Y-block engine"
   }
  ],
  "question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (VBG owning)) (NN organisation)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (ADVP (RB also)) (NP (DT the) (NN builder)) (PP (IN of) (NP (DT the) (NNP Ford) (NML (NN Y) (HYPH -) (NN block)) (NN engine)))))))) (. ?)))",
  "entityNum": 1,
  "id": 70
 },
 {
  "taggedQuestion": "Name the country with currency as Aureus .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the country with currency",
    "originStr": "Name the country with currency"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "as Aureus",
    "originStr": "as Aureus"
   }
  ],
  "question": "Name the country with currency as Aureus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN country)) (PP (IN with) (NP (NP (NN currency)) (PP (IN as) (NP (NNP Aureus)))))) (. .)))",
  "entityNum": 1,
  "id": 71
 },
 {
  "taggedQuestion": "What awards have been given to A. Peter Dewey?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what awards have #entity1",
    "originStr": "what awards have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been given to A. Peter Dewey",
    "originStr": "been given to A. Peter Dewey"
   }
  ],
  "question": "what awards have been given to A. Peter Dewey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NNP A.) (NNP Peter) (NNP Dewey))))))) (. ?)))",
  "entityNum": 2,
  "id": 72
 },
 {
  "taggedQuestion": "How many shows belong to the network one of whose sister station is Cartoonite?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many shows belong to #entity1 Cartoonite",
    "originStr": "How many shows belong to #entity1 Cartoonite"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the network one of whose sister station is",
    "originStr": "the network one of whose sister station is"
   }
  ],
  "question": "How many shows belong to the network one of whose sister station is Cartoonite",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS shows)) (VP (VBP belong) (PP (IN to) (NP (DT the) (NN network))) (NP (NP (CD one)) (PP (IN of) (SBAR (WHNP (WP$ whose) (NML (NN sister)) (NN station)) (S (VP (VBZ is) (NP (NNP Cartoonite))))))))) (. ?)))",
  "entityNum": 2,
  "id": 73
 },
 {
  "taggedQuestion": "What has been developed by John Fanning?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what has been developed by John Fanning",
    "originStr": "what has been developed by John Fanning"
   }
  ],
  "question": "what has been developed by John Fanning",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN developed) (PP (IN by) (NP (NNP John) (NNP Fanning))))))) (. ?)))",
  "entityNum": 1,
  "id": 74
 },
 {
  "taggedQuestion": "Muhammad Yunus has won how many awards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 many awards",
    "originStr": "#entity1 many awards"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Muhammad Yunus has won how",
    "originStr": "Muhammad Yunus has won how"
   }
  ],
  "question": "Muhammad Yunus has won how many awards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Muhammad) (NNP Yunus)) (VP (VBZ has) (VP (VBN won) (SBAR (WHADJP (WRB how) (JJ many)) (FRAG (NP (NNS awards)))))) (. ?)))",
  "entityNum": 2,
  "id": 75
 },
 {
  "taggedQuestion": "List the associates of bands which have a label by Motown ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the associates of bands #entity1",
    "originStr": "List the associates of bands #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which have a label by Motown",
    "originStr": "which have a label by Motown"
   }
  ],
  "question": "List the associates of bands which have a label by Motown",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS associates)) (PP (IN of) (NP (NP (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT a) (NN label)) (PP (IN by) (NP (NNP Motown)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 76
 },
 {
  "taggedQuestion": "Who wrote the musical whose composer is <e0>?",
  "entityMap": {
   "<e0>": "Emil Dean Zoghby"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who wrote #entity1",
    "originStr": "Who wrote #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical whose composer is Emil Dean Zoghby",
    "originStr": "the musical whose composer is Emil Dean Zoghby"
   }
  ],
  "question": "Who wrote the musical whose composer is Emil Dean Zoghby",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (JJ musical)) (SBAR (WHNP (WP$ whose) (NN composer)) (S (VP (VBZ is) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 77
 },
 {
  "taggedQuestion": "Count the units garrisoned at Arlington County, Virginia.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the units garrisoned at Arlington County, Virginia",
    "originStr": "Count the units garrisoned at Arlington County, Virginia"
   }
  ],
  "question": "Count the units garrisoned at Arlington County, Virginia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS units)) (VP (VBN garrisoned) (PP (IN at) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia))))))) (. .)))",
  "entityNum": 1,
  "id": 78
 },
 {
  "taggedQuestion": "What is the faith of <e0> ?",
  "entityMap": {
   "<e0>": "Kwai Chang Caine"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the faith of Kwai Chang Caine",
    "originStr": "What is the faith of Kwai Chang Caine"
   }
  ],
  "question": "What is the faith of Kwai Chang Caine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 79
 },
 {
  "taggedQuestion": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is related to Kelly Osbourne & Ozzy Osbourne",
    "originStr": "Who is related to Kelly Osbourne & Ozzy Osbourne"
   }
  ],
  "question": "Who is related to Kelly Osbourne & Ozzy Osbourne",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN related) (PP (IN to) (NP (NNP Kelly) (NNP Osbourne) (CC &) (NNP Ozzy) (NNP Osbourne))))) (. ?)))",
  "entityNum": 1,
  "id": 80
 },
 {
  "taggedQuestion": "What are the houses of the legislature where the leader is called Pullaiahgaripalli ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the houses of #entity1",
    "originStr": "What are the houses of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the legislature where the leader is called Pullaiahgaripalli",
    "originStr": "the legislature where the leader is called Pullaiahgaripalli"
   }
  ],
  "question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS houses)) (PP (IN of) (NP (DT the) (NN legislature)))) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN leader)) (VP (VBZ is) (VP (VBN called) (NP (NNP Pullaiahgaripalli))))))) (. ?)))",
  "entityNum": 2,
  "id": 81
 },
 {
  "taggedQuestion": "Which serving railway line of the <e0> was also the place where 99 (2009 film) was recorded ?",
  "entityMap": {
   "<e0>": "Daund Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which serving railway line of the Daund Junction railway station was",
    "originStr": "Which serving railway line of the Daund Junction railway station was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the place where 99 -LRB- 2009 film -RRB- was recorded",
    "originStr": "also the place where 99 -LRB- 2009 film -RRB- was recorded"
   }
  ],
  "question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (S (VP (VBG serving) (NP (NP (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD 99)) (-LRB- -LRB-) (NP (CD 2009) (NN film)) (-RRB- -RRB-)) (VP (VBD was) (VP (VBN recorded)))))))) (. ?)))",
  "entityNum": 1,
  "id": 82
 },
 {
  "taggedQuestion": "List the ethnicity of Riley Reid?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the ethnicity of Riley Reid",
    "originStr": "List the ethnicity of Riley Reid"
   }
  ],
  "question": "List the ethnicity of Riley Reid",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN ethnicity)) (PP (IN of) (NP (NNP Riley) (NNP Reid))))) (. ?)))",
  "entityNum": 1,
  "id": 83
 },
 {
  "taggedQuestion": "Which shows are from a company whose subsidiary is Viacom Productions?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which shows are from #entity1",
    "originStr": "Which shows are from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a company whose subsidiary is Viacom Productions",
    "originStr": "a company whose subsidiary is Viacom Productions"
   }
  ],
  "question": "Which shows are from a company whose subsidiary is Viacom Productions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NNS shows)) (VP (VBP are) (PP (IN from) (NP (DT a) (NN company)))))) (WHNP (WHNP (WP$ whose)) (NP (NN subsidiary))) (SQ (VBZ is) (NP (NNP Viacom) (NNPS Productions))) (. ?)))",
  "entityNum": 2,
  "id": 84
 },
 {
  "taggedQuestion": "Giuseppe Bertello and Pietro Parolin are leaders of which place ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Giuseppe",
    "originStr": "Giuseppe"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Bertello and Pietro Parolin are leaders of which place",
    "originStr": "Bertello and Pietro Parolin are leaders of which place"
   }
  ],
  "question": "Giuseppe Bertello and Pietro Parolin are leaders of which place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Giuseppe) (NNP Bertello)) (CC and) (NP (NNP Pietro) (NNP Parolin))) (VP (VBP are) (NP (NP (NNS leaders)) (PP (IN of) (NP (WDT which) (NN place))))) (. ?)))",
  "entityNum": 1,
  "id": 85
 },
 {
  "taggedQuestion": "What is the university whose campus is Mount Moosilauke?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the university whose",
    "originStr": "What is the university whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "campus is Mount Moosilauke",
    "originStr": "campus is Mount Moosilauke"
   }
  ],
  "question": "What is the university whose campus is Mount Moosilauke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (NP (NNP Mount) (NNP Moosilauke))))))) (. ?)))",
  "entityNum": 1,
  "id": 86
 },
 {
  "taggedQuestion": "How many religions are followed by the group whose architectural style is  seen on Sanggar Agung?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many religions are followed by #entity1",
    "originStr": "How many religions are followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the group whose architectural style can be seen on Sanggar Agung",
    "originStr": "the group whose architectural style can be seen on Sanggar Agung"
   }
  ],
  "question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN group)) (SBAR (WHNP (WP$ whose) (NML (JJ architectural) (NN style))) (S (VP (VBZ is) (VP (VBN seen) (PP (IN on) (NP (NNP Sanggar) (NNP Agung))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 87
 },
 {
  "taggedQuestion": "How many things are written in C++?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many things are",
    "originStr": "How many things are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "written in C++",
    "originStr": "written in C++"
   }
  ],
  "question": "How many things are written in C++",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN written) (PP (IN in) (NP (NNP C++))))) (. ?)))",
  "entityNum": 1,
  "id": 88
 },
 {
  "taggedQuestion": "Name the garrison of the <e1> and line of the <e0> .",
  "entityMap": {
   "<e1>": "Western Naval Command",
   "<e0>": "Vadodara Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the garrison of the Western Naval Command and",
    "originStr": "Name the garrison of the Western Naval Command and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "line of the Vadodara Junction railway station",
    "originStr": "line of the Vadodara Junction railway station"
   }
  ],
  "question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN garrison)) (PP (IN of) (NP (NP (DT the) (NN <e1>) (CC and) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 89
 },
 {
  "taggedQuestion": "Who are the shareholder of the soccer club for whom Steve Holland plays?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who are the shareholder of #entity1",
    "originStr": "Who are the shareholder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club for whom Steve Holland plays",
    "originStr": "the soccer club for whom Steve Holland plays"
   }
  ],
  "question": "Who are the shareholder of the soccer club for whom Steve Holland plays",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN shareholder)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (PP (IN for) (SBAR (WHNP (WP whom)) (S (NP (NNP Steve) (NNP Holland)) (VP (VBZ plays))))))))) (. ?)))",
  "entityNum": 2,
  "id": 90
 },
 {
  "taggedQuestion": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season ?",
  "entityMap": {
   "<e0>": "Panionios G.S. S. season"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which city located on Mediterranean Sea is",
    "originStr": "Which city located on Mediterranean Sea is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the stadium of Panionios G.S.S. season",
    "originStr": "also the stadium of Panionios G.S.S. season"
   }
  ],
  "question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBN located) (PP (IN on) (NP (NP (NNP Mediterranean) (NNP Sea)) (SBAR (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (NNP Panionios) (NNP G.S.S.)))) (NP-TMP (NN season))))))))) (. ?)))",
  "entityNum": 1,
  "id": 91
 },
 {
  "taggedQuestion": "Was Don't Bring Me Down recorded in West Germany?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Don't Bring Me Down recorded in West Germany",
    "originStr": "Was Don't Bring Me Down recorded in West Germany"
   }
  ],
  "question": "Was Don't Bring Me Down recorded in West Germany",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (S (S (VP (VB Do) (RB n't) (VP (VB Bring)))) (S (NP (PRP Me)) (PP (IN Down) (S (VP (VBN recorded) (PP (IN in) (NP (NNP West) (NNP Germany)))))))) (. ?)))",
  "entityNum": 1,
  "id": 92
 },
 {
  "taggedQuestion": "Which cities do the rivers starting at the <e0> flow?",
  "entityMap": {
   "<e0>": "Montauk State Park"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Through which cities do #entity1",
    "originStr": "Through which cities do #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rivers starting at the Montauk State Park flow",
    "originStr": "the rivers starting at the Montauk State Park flow"
   }
  ],
  "question": "Through which cities do the rivers starting at the Montauk State Park flow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS cities)) (SQ (VP (VBP do) (NP (DT the) (NNS rivers)) (PP (VBG starting) (PP (IN at) (NP (DT the) (NN <e0>) (NN flow)))))) (. ?)))",
  "entityNum": 2,
  "id": 93
 },
 {
  "taggedQuestion": "How many ideologies do the political party of Boonchu Rojanastien hold?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many ideologies do #entity1 hold",
    "originStr": "How many ideologies do #entity1 hold"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the political party of Boonchu Rojanastien",
    "originStr": "the political party of Boonchu Rojanastien"
   }
  ],
  "question": "How many ideologies do the political party of Boonchu Rojanastien hold",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS ideologies)) (SQ (VBP do) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NNP Boonchu) (NNP Rojanastien)))) (VP (VB hold))) (. ?)))",
  "entityNum": 2,
  "id": 94
 },
 {
  "taggedQuestion": "What are the hubs of <e0>, a <e1> of PLUS Expressways?",
  "entityMap": {
   "<e1>": "highway helicopter unit",
   "<e0>": "PLUS Helicopter Services"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the hubs of #entity1",
    "originStr": "What are the hubs of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "PLUS Helicopter Services , a highway helicopter unit of PLUS Expressways",
    "originStr": "PLUS Helicopter Services , a highway helicopter unit of PLUS Expressways"
   }
  ],
  "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS hubs)) (PP (IN of) (NP (NP (ADD <e0>)) (, ,) (NP (NP (DT a) (NN <e1>)) (PP (IN of) (NP (NNP PLUS) (NNPS Expressways)))))))) (. ?)))",
  "entityNum": 2,
  "id": 95
 },
 {
  "taggedQuestion": "Name the movies for which music was given by  Geoffrey Burgon and distributed by  <e0>.",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movies for which music was given by Geoffrey Burgon and",
    "originStr": "Name the movies for which music was given by Geoffrey Burgon and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "distributed by Cinema International Corporation",
    "originStr": "distributed by Cinema International Corporation"
   }
  ],
  "question": "Name the movies for which music was given by Geoffrey Burgon and distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VP (VBN given) (PP (IN by) (NP (NNP Geoffrey) (NNP Burgon)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (ADD <e0>)))))))))) (. .)))",
  "entityNum": 1,
  "id": 96
 },
 {
  "taggedQuestion": "Is <e0> interested in Politics?",
  "entityMap": {
   "<e0>": "Henry David Thoreau"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Henry David Thoreau interested in Politics",
    "originStr": "Is Henry David Thoreau interested in Politics"
   }
  ],
  "question": "Is Henry David Thoreau interested in Politics",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (ADJP (JJ interested) (PP (IN in) (NP (NNS Politics)))) (. ?)))",
  "entityNum": 1,
  "id": 97
 },
 {
  "taggedQuestion": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Among the companies #entity1",
    "originStr": "Among the companies #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who has product named Chinook who has a key person as Dennis Muilenburg",
    "originStr": "who has product named Chinook who has a key person as Dennis Muilenburg"
   }
  ],
  "question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (PP (IN Among) (NP (DT the) (NNS companies))) (WHNP (WP who)) (SQ (VBZ has) (NP (NN product)) (VP (VBN named) (NP (NP (NNP Chinook)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (DT a) (JJ key) (NN person)) (PP (IN as) (NP (NNP Dennis) (NNP Muilenburg)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 98
 },
 {
  "taggedQuestion": "Which country's leader  is Giuseppe Bertello?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which country's #entity1",
    "originStr": "Which country's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "leader is Giuseppe Bertello",
    "originStr": "leader is Giuseppe Bertello"
   }
  ],
  "question": "Which country's leader is Giuseppe Bertello",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN country) (POS 's)) (NN leader)) (SQ (VBZ is) (NP (NNP Giuseppe) (NNP Bertello))) (. ?)))",
  "entityNum": 2,
  "id": 99
 },
 {
  "taggedQuestion": "Who wrote the subsequent work of <e0> ?",
  "entityMap": {
   "<e0>": "One Day at a Time (Em's Version)"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who wrote the subsequent work of #entity1",
    "originStr": "Who wrote the subsequent work of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "One Day at a Time -LRB- Em's Version -RRB-",
    "originStr": "One Day at a Time -LRB- Em's Version -RRB-"
   }
  ],
  "question": "Who wrote the subsequent work of One Day at a Time (Em's Version)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 100
 },
 {
  "taggedQuestion": "Name the TV shows with network as NBC and company as Paramount Television .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the TV shows with network as NBC and",
    "originStr": "Name the TV shows with network as NBC and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "company as Paramount Television",
    "originStr": "company as Paramount Television"
   }
  ],
  "question": "Name the TV shows with network as NBC and company as Paramount Television",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NN TV)) (VP (VBZ shows) (PP (IN with) (NP (NP (NP (NN network)) (PP (IN as) (NP (NNP NBC)))) (CC and) (NP (NP (NN company)) (PP (IN as) (NP (NNP Paramount) (NNP Television))))))))) (. .)))",
  "entityNum": 1,
  "id": 101
 },
 {
  "taggedQuestion": "Name the fictional character whose voice's animator is Hardie Gramatky.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the fictional character whose voice's #entity1",
    "originStr": "Name the fictional character whose voice's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "animator is Hardie Gramatky",
    "originStr": "animator is Hardie Gramatky"
   }
  ],
  "question": "Name the fictional character whose voice's animator is Hardie Gramatky",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJ fictional) (NN character)) (SBARQ (WHNP (WHNP (WP$ whose) (NN voice) (POS 's)) (NN animator)) (SQ (VBZ is) (NP (NNP Hardie) (NNP Gramatky))))) (. .)))",
  "entityNum": 2,
  "id": 102
 },
 {
  "taggedQuestion": "Which license provider of MSX basic is also the designer of <e0> ?",
  "entityMap": {
   "<e0>": "Language Integrated Query"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which license provider of MSX basic is",
    "originStr": "Which license provider of MSX basic is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the designer of Language Integrated Query",
    "originStr": "also the designer of Language Integrated Query"
   }
  ],
  "question": "Which license provider of MSX basic is also the designer of Language Integrated Query",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN license) (NN provider)) (PP (IN of) (NP (NNP MSX) (JJ basic))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN designer)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 103
 },
 {
  "taggedQuestion": "Who are the architect of the stadium whose one of the architect is <e0> ?",
  "entityMap": {
   "<e0>": "louis D. Astorino"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who are the architect of #entity1",
    "originStr": "Who are the architect of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium whose one of the architect is louis D. Astorino",
    "originStr": "the stadium whose one of the architect is louis D. Astorino"
   }
  ],
  "question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN architect)) (PP (IN of) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN architect)))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 104
 },
 {
  "taggedQuestion": "Who are the astronauts associated with NASA?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the astronauts associated",
    "originStr": "Who are the astronauts associated"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with NASA",
    "originStr": "with NASA"
   }
  ],
  "question": "Who are the astronauts associated with NASA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (DT the) (NNS astronauts)) (VP (VBN associated) (PP (IN with) (NP (NNP NASA))))) (. ?)))",
  "entityNum": 1,
  "id": 105
 },
 {
  "taggedQuestion": "What is a common ingredient used in boyt Blodpalt and Kaszanka ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is a common ingredient used in boyt Blodpalt and Kaszanka",
    "originStr": "is a common ingredient used in boyt Blodpalt and Kaszanka"
   }
  ],
  "question": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT a) (JJ common) (NN ingredient)) (VP (VBN used) (PP (IN in) (NP (NP (NN boyt) (NN Blodpalt)) (CC and) (NP (NNP Kaszanka)))))) (. ?)))",
  "entityNum": 1,
  "id": 106
 },
 {
  "taggedQuestion": "Who is the partner of Rob Patterson?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the partner of Rob Patterson",
    "originStr": "Who is the partner of Rob Patterson"
   }
  ],
  "question": "Who is the partner of Rob Patterson",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN partner)) (PP (IN of) (NP (NNP Rob) (NNP Patterson))))) (. ?)))",
  "entityNum": 1,
  "id": 107
 },
 {
  "taggedQuestion": "How many politicians are there from the city of Ganges?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many politicians are there from #entity1",
    "originStr": "How many politicians are there from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the city of Ganges",
    "originStr": "the city of Ganges"
   }
  ],
  "question": "How many politicians are there from the city of Ganges",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS politicians)) (VP (VBP are) (ADVP (RB there)) (PP (IN from) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNS Ganges))))))) (. ?)))",
  "entityNum": 2,
  "id": 108
 },
 {
  "taggedQuestion": "Which american football teams does the Heinz Field serve as home stadium?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which american football teams does",
    "originStr": "To which american football teams does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Heinz Field serve as home stadium",
    "originStr": "the Heinz Field serve as home stadium"
   }
  ],
  "question": "To which american football teams does the Heinz Field serve as home stadium",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NNS teams)) (SQ (VBZ does) (NP (DT the) (NNP Heinz) (NNP Field)) (VP (VB serve) (PP (IN as) (NP (NN home) (NN stadium))))) (. ?)))",
  "entityNum": 1,
  "id": 109
 },
 {
  "taggedQuestion": "Which architect of the <e0> is the branch of the <e1>?",
  "entityMap": {
   "<e1>": "Burnet R. Maybank",
   "<e0>": "Marine Corps Air Station Kaneohe Bay"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which architect of the Marine Corps Air Station Kaneohe Bay is",
    "originStr": "Which architect of the Marine Corps Air Station Kaneohe Bay is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the branch of the Burnet R. Maybank",
    "originStr": "the branch of the Burnet R. Maybank"
   }
  ],
  "question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN architect) (PP (IN of) (NP (DT the) (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (DT the) (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 110
 },
 {
  "taggedQuestion": "Which movies's screenplay is written by Akiva Goldsman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which movies ' screenplay #entity1",
    "originStr": "Which movies ' screenplay #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is written by Akiva Goldsman",
    "originStr": "is written by Akiva Goldsman"
   }
  ],
  "question": "Which movies' screenplay is written by Akiva Goldsman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS movies) (POS 's)) (NN screenplay)) (SQ (VBZ is) (VP (VBN written) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))))) (. ?)))",
  "entityNum": 2,
  "id": 111
 },
 {
  "taggedQuestion": "How many TV shows are similar to the ones belonging to fantasy genre?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many TV shows are similar to #entity1",
    "originStr": "How many TV shows are similar to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones belonging to fantasy genre",
    "originStr": "the ones belonging to fantasy genre"
   }
  ],
  "question": "How many TV shows are similar to the ones belonging to fantasy genre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN TV) (NNS shows)) (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBG belonging) (PP (IN to) (NP (NN fantasy) (NN genre))))))))) (. ?)))",
  "entityNum": 2,
  "id": 112
 },
 {
  "taggedQuestion": "Give me all commanders which had an important role in both, the <e1> and <e0>.",
  "entityMap": {
   "<e1>": "Battle of Fort Stephenson",
   "<e0>": "Battle of the Thames"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me all commanders which had an important role in both #entity1 of the Thames",
    "originStr": "Give me all commanders which had an important role in both #entity1 of the Thames"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": ", the Battle of Fort Stephenson and Battle",
    "originStr": ", the Battle of Fort Stephenson and Battle"
   }
  ],
  "question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS commanders)) (SBAR (WHNP (WDT which)) (S (VP (VBD had) (NP (NP (DT an) (JJ important) (NN role)) (PP (IN in) (NP (NP (CC both)) (, ,) (NP (DT the) (NN <e1>)) (CC and) (NP (ADD <e0>)))))))))) (. .)))",
  "entityNum": 2,
  "id": 113
 },
 {
  "taggedQuestion": "How many developers were involved in creating games whose score is composed by Gerard Marino?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many developers were involved in creating games #entity1",
    "originStr": "How many developers were involved in creating games #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose score is composed by Gerard Marino",
    "originStr": "whose score is composed by Gerard Marino"
   }
  ],
  "question": "How many developers were involved in creating games whose score is composed by Gerard Marino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS developers)) (VP (VBD were) (VP (VBN involved) (PP (IN in) (S (VP (VBG creating) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NML (NN score))) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Gerard) (NNP Marino)))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 114
 },
 {
  "taggedQuestion": "Which sea is surrounded by Rostock and Kaliningrad?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which sea is",
    "originStr": "Which sea is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "surrounded by Rostock and Kaliningrad",
    "originStr": "surrounded by Rostock and Kaliningrad"
   }
  ],
  "question": "Which sea is surrounded by Rostock and Kaliningrad",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN sea)) (SQ (VBZ is) (VP (VBN surrounded) (PP (IN by) (NP (NNP Rostock) (CC and) (NNP Kaliningrad))))) (. ?)))",
  "entityNum": 1,
  "id": 115
 },
 {
  "taggedQuestion": "Which <e0>'s developer is Brian Graden and voices to the character is by Isaac Hayes?",
  "entityMap": {
   "<e1>": "Brian Graden voices",
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which television show's developer is Brian Graden and",
    "originStr": "Which television show's developer is Brian Graden and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "voices to the character is by Isaac Hayes",
    "originStr": "voices to the character is by Isaac Hayes"
   }
  ],
  "question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (SBAR (WHNP (WDT Which)) (S (NP (NP (NN <e0>) (POS 's)) (NN developer)) (VP (VBZ is) (NP (NP (NNP Brian) (NNP Graden)) (CC and) (NP (NP (NNS voices)) (PP (IN to) (NP (DT the) (NN character)))))))) (VP (VBZ is) (PP (IN by) (NP (NNP Isaac) (NNP Hayes)))) (. ?)))",
  "entityNum": 1,
  "id": 116
 },
 {
  "taggedQuestion": "How did the child of <e0> die?",
  "entityMap": {
   "<e0>": "Stevens T. Mason"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "EXTENT",
    "trigger": "How"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How did the child of Stevens T. Mason die",
    "originStr": "How did the child of Stevens T. Mason die"
   }
  ],
  "question": "How did the child of Stevens T. Mason die",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (ADD <e0>)))) (VP (VB die))) (. ?)))",
  "entityNum": 1,
  "id": 117
 },
 {
  "taggedQuestion": "Does the <e0> serve the Inland Empire?",
  "entityMap": {
   "<e0>": "Ontario International Airport"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the Ontario International Airport serve the Inland Empire",
    "originStr": "Does the Ontario International Airport serve the Inland Empire"
   }
  ],
  "question": "Does the Ontario International Airport serve the Inland Empire",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (DT the) (NN <e0>)) (VP (VB serve) (NP (DT the) (NNP Inland) (NNP Empire))) (. ?)))",
  "entityNum": 1,
  "id": 118
 },
 {
  "taggedQuestion": "Is semnani one of the languages spoken in Iran?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is semnani one of the languages spoken in Iran",
    "originStr": "Is semnani one of the languages spoken in Iran"
   }
  ],
  "question": "Is semnani one of the languages spoken in Iran",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN semnani)) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS languages)) (VP (VBN spoken) (PP (IN in) (NP (NNP Iran))))))) (. ?)))",
  "entityNum": 1,
  "id": 119
 },
 {
  "taggedQuestion": "What is the nickname of the home stadium of Angels Toru?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the nickname of #entity1",
    "originStr": "What is the nickname of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the home stadium of Angels Toru",
    "originStr": "the home stadium of Angels Toru"
   }
  ],
  "question": "What is the nickname of the home stadium of Angels Toru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN nickname)) (PP (IN of) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (NNPS Angels) (NNP Toru))))))) (. ?)))",
  "entityNum": 2,
  "id": 120
 },
 {
  "taggedQuestion": "What is the <e0> whose executive producer is Douglas Netter?",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the television show whose",
    "originStr": "What is the television show whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "executive producer is Douglas Netter",
    "originStr": "executive producer is Douglas Netter"
   }
  ],
  "question": "What is the television show whose executive producer is Douglas Netter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (JJ executive) (NN producer))) (S (VP (VBZ is) (NP (NNP Douglas) (NNP Netter))))))) (. ?)))",
  "entityNum": 1,
  "id": 121
 },
 {
  "taggedQuestion": "List out the people who are related to the relatives of Jared Kushner ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List out the people who are related #entity1",
    "originStr": "List out the people who are related #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "to the relatives of Jared Kushner",
    "originStr": "to the relatives of Jared Kushner"
   }
  ],
  "question": "List out the people who are related to the relatives of Jared Kushner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (PRT (RP out)) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN related) (PP (IN to) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Jared) (NNP Kushner))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 122
 },
 {
  "taggedQuestion": "List all the doctoral student of the scientist who has advised john Bowlby ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all the doctoral student of #entity1",
    "originStr": "List all the doctoral student of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist who has advised john Bowlby",
    "originStr": "the scientist who has advised john Bowlby"
   }
  ],
  "question": "List all the doctoral student of the scientist who has advised john Bowlby",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (JJ doctoral) (NN student)) (PP (IN of) (NP (DT the) (NN scientist)))) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN advised) (NP (NNP john) (NNP Bowlby))))))) (. ?)))",
  "entityNum": 2,
  "id": 123
 },
 {
  "taggedQuestion": "Which series does the book belong which came after the <e0>?",
  "entityMap": {
   "<e0>": "Blade Runner 2"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "To which series does #entity1",
    "originStr": "To which series does #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the book belong which came after the Blade Runner 2",
    "originStr": "the book belong which came after the Blade Runner 2"
   }
  ],
  "question": "To which series does the book belong which came after the Blade Runner 2",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VBZ does) (S (NP (DT the) (NN book)) (VP (VBP belong) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (PP (IN after) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 124
 },
 {
  "taggedQuestion": "Which city did The Ultimate Fighter: <e0> take place ?",
  "entityMap": {
   "<e0>": "Team Rousey vs. Team Tate"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which city #entity1 place",
    "originStr": "In which city #entity1 place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "did The Ultimate Fighter : Team Rousey vs. Team Tate take",
    "originStr": "did The Ultimate Fighter : Team Rousey vs. Team Tate take"
   }
  ],
  "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBD did) (NP (DT The) (NNP Ultimate) (NNP Fighter)) (: :) (S (NP (ADD <e0>)) (VP (VB take) (NP (NN place)))))) (. ?)))",
  "entityNum": 2,
  "id": 125
 },
 {
  "taggedQuestion": "Where was Sino-French War fought ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Sino-French War fought",
    "originStr": "Where was Sino-French War fought"
   }
  ],
  "question": "Where was Sino-French War fought",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADJP (JJ Sino) (HYPH -) (JJ French)) (NNP War)) (VP (VBN fought)))) (. ?)))",
  "entityNum": 1,
  "id": 126
 },
 {
  "taggedQuestion": "Who did Daniel Gibson marry?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who did Daniel Gibson marry",
    "originStr": "Who did Daniel Gibson marry"
   }
  ],
  "question": "Who did Daniel Gibson marry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Daniel) (NNP Gibson)) (VP (VB marry))) (. ?)))",
  "entityNum": 1,
  "id": 127
 },
 {
  "taggedQuestion": "What is the political party of the daughter of Jawaharlal Nehru ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the political party of #entity1",
    "originStr": "What is the political party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the daughter of Jawaharlal Nehru",
    "originStr": "the daughter of Jawaharlal Nehru"
   }
  ],
  "question": "What is the political party of the daughter of Jawaharlal Nehru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (DT the) (NN daughter)) (PP (IN of) (NP (NNP Jawaharlal) (NNP Nehru))))))) (. ?)))",
  "entityNum": 2,
  "id": 128
 },
 {
  "taggedQuestion": "Name the river with source as Shannon Pot and its mouth is located in Limerick.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the river with source as Shannon Pot and",
    "originStr": "Name the river with source as Shannon Pot and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "its mouth is located in Limerick",
    "originStr": "its mouth is located in Limerick"
   }
  ],
  "question": "Name the river with source as Shannon Pot and its mouth is located in Limerick",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NN source))) (SBAR (IN as) (S (NP (NP (NNP Shannon) (NNP Pot)) (CC and) (NP (PRP$ its) (NN mouth))) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Limerick)))))))) (. .)))",
  "entityNum": 1,
  "id": 129
 },
 {
  "taggedQuestion": "What is the organisation whose purposes are Environmentalism and Peace?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the organisation whose",
    "originStr": "What is the organisation whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "purposes are Environmentalism and Peace",
    "originStr": "purposes are Environmentalism and Peace"
   }
  ],
  "question": "What is the organisation whose purposes are Environmentalism and Peace",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN organisation)) (SBAR (WHNP (WP$ whose) (NML (NNS purposes))) (S (VP (VBP are) (NP (NNP Environmentalism) (CC and) (NNP Peace))))))) (. ?)))",
  "entityNum": 1,
  "id": 130
 },
 {
  "taggedQuestion": "Count the sports team members  which have player named Matt Williams .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of sports team #entity1",
    "originStr": "Count the number of sports team #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "members which have player named Matt Williams",
    "originStr": "members which have player named Matt Williams"
   }
  ],
  "question": "Count the number of sports team members which have player named Matt Williams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS sports)) (NP (NP (NN team) (NNS members)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NN player)) (VP (VBN named) (NP (NNP Matt) (NNP Williams)))))))))) (. .)))",
  "entityNum": 2,
  "id": 131
 },
 {
  "taggedQuestion": "How many different people own the Timeform award winners?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many different people own #entity1",
    "originStr": "How many different people own #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the Timeform award winners",
    "originStr": "the Timeform award winners"
   }
  ],
  "question": "How many different people own the Timeform award winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NNS people)) (SQ (VP (VBP own) (NP (DT the) (NNP Timeform) (NN award) (NNS winners)))) (. ?)))",
  "entityNum": 2,
  "id": 132
 },
 {
  "taggedQuestion": "What religions do diplomats typically follow?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What religions do #entity1",
    "originStr": "What religions do #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "diplomats typically follow",
    "originStr": "diplomats typically follow"
   }
  ],
  "question": "What religions do diplomats typically follow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VBP do) (NP (NNS diplomats)) (ADVP (RB typically)) (VP (VB follow))) (. ?)))",
  "entityNum": 2,
  "id": 133
 },
 {
  "taggedQuestion": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Guggenheim family is the cofounder #entity1 teams",
    "originStr": "Guggenheim family is the cofounder #entity1 teams"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "of a company that invested stocks in which baseball",
    "originStr": "of a company that invested stocks in which baseball"
   }
  ],
  "question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Guggenheim) (NN family)) (VP (VBZ is) (NP (NP (DT the) (NN cofounder)) (PP (IN of) (NP (NP (DT a) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD invested) (NP (NNS stocks)) (PP (IN in) (FRAG (SBARQ (WHNP (WDT which) (NN baseball) (NNS teams)) (. ?)))))))))))))",
  "entityNum": 2,
  "id": 134
 },
 {
  "taggedQuestion": "Was John muir one of the first to ascend a mountain on mountain hoffmann?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John muir one of the first to ascend a mountain on Mt hoffmann",
    "originStr": "Was John muir one of the first to ascend a mountain on Mt hoffmann"
   }
  ],
  "question": "Was John muir one of the first to ascend a mountain on Mt hoffmann",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP muir)) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ first) (S (VP (TO to) (VP (VB ascend) (NP (DT a) (NN mountain)) (PP (IN on) (NP (NN mountain)))))) (NN hoffmann)))) (. ?)))",
  "entityNum": 1,
  "id": 135
 },
 {
  "taggedQuestion": "Which city is known for the people working in the <e0>?",
  "entityMap": {
   "<e0>": "western penn hospital"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which city is known for #entity1",
    "originStr": "Which city is known for #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people working in the western penn hospital",
    "originStr": "the people working in the western penn hospital"
   }
  ],
  "question": "Which city is known for the people working in the western penn hospital",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (DT the) (NNS people)) (VP (VBG working) (PP (IN in) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 136
 },
 {
  "taggedQuestion": "Which country does the publishing house exist which was cofounded by Panos Loannides?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which country does #entity1",
    "originStr": "In which country does #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the publishing house exist which was cofounded by Panos Loannides",
    "originStr": "the publishing house exist which was cofounded by Panos Loannides"
   }
  ],
  "question": "In which country does the publishing house exist which was cofounded by Panos Loannides",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (DT the) (NN publishing) (NN house)) (VP (VBP exist) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN cofounded) (PP (IN by) (NP (NNP Panos) (NNP Loannides))))))))) (. ?)))",
  "entityNum": 2,
  "id": 137
 },
 {
  "taggedQuestion": "Name the team which is owned by <e1> and stood first in <e0> .",
  "entityMap": {
   "<e1>": "Dafenham wind turbines",
   "<e0>": "1967 mexican Grand Prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the team which is owned by Dafenham wind turbines and",
    "originStr": "Name the team which is owned by Dafenham wind turbines and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "stood first in 1967 mexican Grand Prix",
    "originStr": "stood first in 1967 mexican Grand Prix"
   }
  ],
  "question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (ADD <e1>))))) (CC and) (VP (VBD stood) (ADVP (RB first)) (PP (IN in) (NP (ADD <e0>))))))))) (. .)))",
  "entityNum": 1,
  "id": 138
 },
 {
  "taggedQuestion": "Which <e0> attended which was also the alma mater of Lisa Brummel ?",
  "entityMap": {
   "<e0>": "education center Sidney Catlin Partrodge"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which education center Sidney Catlin Partrodge attended which",
    "originStr": "Which education center Sidney Catlin Partrodge attended which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was also the alma mater of Lisa Brummel",
    "originStr": "was also the alma mater of Lisa Brummel"
   }
  ],
  "question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NN <e0>)) (VP (VBD attended) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Lisa) (NNP Brummel))))))))) (. ?)))",
  "entityNum": 1,
  "id": 139
 },
 {
  "taggedQuestion": "What sports is  played in Kharghar's schools?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What sports can #entity1 schools",
    "originStr": "What sports can #entity1 schools"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "be played in Kharghar's",
    "originStr": "be played in Kharghar's"
   }
  ],
  "question": "What sports can be played in Kharghar's schools",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VBZ is) (VP (VBN played) (PP (IN in) (NP (NP (NNP Kharghar) (POS 's)) (NNS schools))))) (. ?)))",
  "entityNum": 2,
  "id": 140
 },
 {
  "taggedQuestion": "Which ethinicity of  Riley Reid is the <e0> of Holmes Colbert?",
  "entityMap": {
   "<e0>": "state of origin"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which ethnicity of Riley Reid is",
    "originStr": "Which ethnicity of Riley Reid is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the state of origin of Holmes Colbert",
    "originStr": "the state of origin of Holmes Colbert"
   }
  ],
  "question": "Which ethnicity of Riley Reid is the state of origin of Holmes Colbert",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN ethinicity) (PP (IN of) (NP (NNP Riley) (NNP Reid))))) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert))))) (. ?)))",
  "entityNum": 1,
  "id": 141
 },
 {
  "taggedQuestion": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
    "originStr": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010"
   }
  ],
  "question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP Boehner)) (NP (NP (DT the) (NN winner)) (PP (IN of) (NP (NP (DT the) (NNP US) (NNP House)) (PP (IN of) (NP (NP (NNPS Representatives) (NNS elections)) (PP (IN in) (NP (NP (NNP Ohio)) (PP (IN in) (NP (CD 2010)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 142
 },
 {
  "taggedQuestion": "Which american football team  has stadium as O.co Coliseum?",
  "entityMap": {
   "<e0>": "O.c o Coliseum"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which american football team has",
    "originStr": "Which american football team has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "stadium as O.co Coliseum",
    "originStr": "stadium as O.co Coliseum"
   }
  ],
  "question": "Which american football team has stadium as O.co Coliseum",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NN team)) (SQ (VP (VBZ has) (NP (NP (NN stadium)) (PP (IN as) (NP (NNP O.co) (NNP Coliseum)))))) (. ?)))",
  "entityNum": 1,
  "id": 143
 },
 {
  "taggedQuestion": "How many subjects are covered in the publications of Doubleday?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many subjects are covered in #entity1",
    "originStr": "How many subjects are covered in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the publications of Doubleday",
    "originStr": "the publications of Doubleday"
   }
  ],
  "question": "How many subjects are covered in the publications of Doubleday",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS subjects)) (VP (VBP are) (VP (VBN covered) (PP (IN in) (NP (NP (DT the) (NNS publications)) (PP (IN of) (NP (NNP Doubleday)))))))) (. ?)))",
  "entityNum": 2,
  "id": 144
 },
 {
  "taggedQuestion": "Which city of Pittsburg Steelers was the Congress of Inductrial Organization founded ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which city of Pittsburg Steelers was",
    "originStr": "In which city of Pittsburg Steelers was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Congress of Industrial Organization founded",
    "originStr": "the Congress of Industrial Organization founded"
   }
  ],
  "question": "In which city of Pittsburg Steelers was the Congress of Industrial Organization founded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN city)) (PP (IN of) (NP (NNP Pittsburg) (NNPS Steelers)))) (SQ (VBD was) (NP (NP (DT the) (NNP Congress)) (PP (IN of) (NP (NNP Inductrial) (NNP Organization)))) (VP (VBN founded))) (. ?)))",
  "entityNum": 1,
  "id": 145
 },
 {
  "taggedQuestion": "What is the hometown of the residents of Martha's vineyards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the hometown of #entity1",
    "originStr": "What is the hometown of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the residents of Martha's vineyards",
    "originStr": "the residents of Martha's vineyards"
   }
  ],
  "question": "What is the hometown of the residents of Martha's vineyards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN hometown)) (PP (IN of) (NP (NP (DT the) (NNS residents)) (PP (IN of) (NP (NP (NNP Martha) (POS 's)) (NNS vineyards))))))) (. ?)))",
  "entityNum": 2,
  "id": 146
 },
 {
  "taggedQuestion": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the city on the shore .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the sea into which Danish Straits flows and",
    "originStr": "Name the sea into which Danish Straits flows and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has Kaliningrad as one of the cities on the shore",
    "originStr": "has Kaliningrad as one of the cities on the shore"
   }
  ],
  "question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the cities on the shore",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN sea)) (PP (IN into) (SBAR (WHNP (WDT which)) (S (NP (JJ Danish) (NNPS Straits)) (VP (VP (VBZ flows)) (CC and) (VP (VBZ has) (NP (NP (NNP Kaliningrad)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN city)) (PP (IN on) (NP (DT the) (NN shore)))))))))))))) (. .)))",
  "entityNum": 1,
  "id": 147
 },
 {
  "taggedQuestion": "Name the team manger of Middlebrough F.C season 2006-07 .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the team manager of Middlebrough F.C season 2006-07",
    "originStr": "Name the team manager of Middlebrough F.C season 2006-07"
   }
  ],
  "question": "Name the team manager of Middlebrough F.C season 2006-07",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team) (NN manger)) (PP (IN of) (NP (NNP Middlebrough) (NNP F.C)))) (PRN (NP (NN season) (CD 2006) (HYPH -) (CD 07)))) (. .)))",
  "entityNum": 1,
  "id": 148
 },
 {
  "taggedQuestion": "What city has the football team in which Lee Robinson debuted?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What city has #entity1",
    "originStr": "What city has #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the football team in which Lee Robinson debuted",
    "originStr": "the football team in which Lee Robinson debuted"
   }
  ],
  "question": "What city has the football team in which Lee Robinson debuted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN football) (NN team)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Lee) (NNP Robinson)) (VP (VBD debuted))))))) (. ?)))",
  "entityNum": 2,
  "id": 149
 },
 {
  "taggedQuestion": "Who is the owner of the bank which owns Bloomberg Radio?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of #entity1",
    "originStr": "Who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the bank which owns Bloomberg Radio",
    "originStr": "the bank which owns Bloomberg Radio"
   }
  ],
  "question": "Who is the owner of the bank which owns Bloomberg Radio",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN bank)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NNP Bloomberg) (NNP Radio))))))))) (. ?)))",
  "entityNum": 2,
  "id": 150
 },
 {
  "taggedQuestion": "Which companies were behind the renovation of McKechnie Field ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which companies were behind #entity1",
    "originStr": "Which companies were behind #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the renovation of McKechnie Field",
    "originStr": "the renovation of McKechnie Field"
   }
  ],
  "question": "Which companies were behind the renovation of McKechnie Field",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS companies)) (VP (VBD were) (PP (IN behind) (NP (NP (DT the) (NN renovation)) (PP (IN of) (NP (NNP McKechnie) (NNP Field))))))) (. ?)))",
  "entityNum": 2,
  "id": 151
 },
 {
  "taggedQuestion": "Who was the coach of <e0>'s basketball team-2012,13 season ?",
  "entityMap": {
   "<e0>": "marquette Golden Eagles men"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the coach of",
    "originStr": "Who was the coach of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "marquette Golden Eagles men's basketball team-2012 ,13 season",
    "originStr": "marquette Golden Eagles men's basketball team-2012 ,13 season"
   }
  ],
  "question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN coach)) (PP (IN of) (NP (NP (NN <e0>) (POS 's)) (NN basketball) (NML (NN team) (HYPH -) (CD 2012,13)) (NN season))))) (. ?)))",
  "entityNum": 1,
  "id": 152
 },
 {
  "taggedQuestion": "Miluk and Cayuse are still spoken in which part of the world?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Miluk",
    "originStr": "Miluk"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and Cayuse are still spoken in which part of the world",
    "originStr": "and Cayuse are still spoken in which part of the world"
   }
  ],
  "question": "Miluk and Cayuse are still spoken in which part of the world",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NN Miluk) (CC and) (NN Cayuse)) (VP (VBP are) (ADVP (RB still)) (VP (VBN spoken) (WHPP (IN in) (WHNP (WDT which) (NN part))) (PP (IN of) (NP (DT the) (NN world))))) (. ?)))",
  "entityNum": 1,
  "id": 153
 },
 {
  "taggedQuestion": "Which governer of Winston bryant is also the president of Carl Stokes ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which governor of Winston bryant is",
    "originStr": "Which governor of Winston bryant is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the president of Carl Stokes",
    "originStr": "also the president of Carl Stokes"
   }
  ],
  "question": "Which governor of Winston bryant is also the president of Carl Stokes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN governer) (PP (IN of) (NP (NNP Winston) (NN bryant))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Carl) (NNP Stokes))))) (. ?)))",
  "entityNum": 1,
  "id": 154
 },
 {
  "taggedQuestion": "List the sports of <e0> which are of interest of Jon Speelman ?",
  "entityMap": {
   "<e0>": "PATTS College of Aeronautics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the sports of PATTS College of Aeronautics which",
    "originStr": "List the sports of PATTS College of Aeronautics which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are of interest of Jon Speelman",
    "originStr": "are of interest of Jon Speelman"
   }
  ],
  "question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS sports)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN interest)) (PP (IN of) (NP (NNP Jon) (NNP Speelman)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 155
 },
 {
  "taggedQuestion": "What is the home stadium of the club coached by Justine Omojong?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the home stadium of #entity1",
    "originStr": "What is the home stadium of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the club coached by Justine Omojong",
    "originStr": "the club coached by Justine Omojong"
   }
  ],
  "question": "What is the home stadium of the club coached by Justine Omojong",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (DT the) (NN club)))) (VP (VBN coached) (PP (IN by) (NP (NNP Justine) (NNP Omojong))))) (. ?)))",
  "entityNum": 2,
  "id": 156
 },
 {
  "taggedQuestion": "Which are the predecessors of the cars which are similar to the Oldsmobile 88?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which are the predecessors of #entity1",
    "originStr": "Which are the predecessors of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the cars which are similar to the Oldsmobile 88",
    "originStr": "the cars which are similar to the Oldsmobile 88"
   }
  ],
  "question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NNS predecessors)) (PP (IN of) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (DT the) (NNP Oldsmobile) (CD 88))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 157
 },
 {
  "taggedQuestion": "Name a queen whose parent is <e0> and consort is <e1>.",
  "entityMap": {
   "<e1>": "Ptolemy XIII Theos Philopator",
   "<e0>": "Ptolemy XII Auletes"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name a queen whose parent is Ptolemy XII Auletes and",
    "originStr": "Name a queen whose parent is Ptolemy XII Auletes and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "consort is Ptolemy XIII Theos Philopator",
    "originStr": "consort is Ptolemy XIII Theos Philopator"
   }
  ],
  "question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT a) (NN queen)) (SBAR (WHNP (WP$ whose) (NML (NN parent))) (S (VP (VBZ is) (NP (NP (ADD <e0>)) (CC and) (NP (NN consort))))))))) (VP (VBZ is) (NP (ADD <e1>))) (. .)))",
  "entityNum": 1,
  "id": 158
 },
 {
  "taggedQuestion": "Which show's theme music was composed by Primus and voiced by Isaac Hayes?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which show's theme music was composed by Primus and",
    "originStr": "Which show's theme music was composed by Primus and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "voiced by Isaac Hayes",
    "originStr": "voiced by Isaac Hayes"
   }
  ],
  "question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN show) (POS 's)) (NN theme) (NN music)) (SQ (VBD was) (VP (VP (VBN composed) (PP (IN by) (NP (NNP Primus)))) (CC and) (VP (VBN voiced) (PP (IN by) (NP (NNP Isaac) (NNP Hayes)))))) (. ?)))",
  "entityNum": 1,
  "id": 159
 },
 {
  "taggedQuestion": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the chancellor of #entity1",
    "originStr": "Who is the chancellor of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the university whose campus is in Woodlane , New Jersey",
    "originStr": "the university whose campus is in Woodlane , New Jersey"
   }
  ],
  "question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (PP (IN in) (NP (NP (NN Woodlane)) (, ,) (NP (NNP New) (NNP Jersey))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 160
 },
 {
  "taggedQuestion": "Name the mountain whose parent peak is located in Mexico.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the mountain whose parent peak is",
    "originStr": "Name the mountain whose parent peak is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "located in Mexico",
    "originStr": "located in Mexico"
   }
  ],
  "question": "Name the mountain whose parent peak is located in Mexico",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN mountain)) (SBAR (WHNP (WP$ whose) (NML (NN parent) (NN peak))) (S (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Mexico))))))))) (. .)))",
  "entityNum": 1,
  "id": 161
 },
 {
  "taggedQuestion": "List the ingredient of Blodpalt ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the ingredient of Blodpalt",
    "originStr": "List the ingredient of Blodpalt"
   }
  ],
  "question": "List the ingredient of Blodpalt",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN ingredient)) (PP (IN of) (NP (NNP Blodpalt))))) (. ?)))",
  "entityNum": 1,
  "id": 162
 },
 {
  "taggedQuestion": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the developers who has",
    "originStr": "List the developers who has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "contributed to both GNOWSYS and GNU TeXmacs",
    "originStr": "contributed to both GNOWSYS and GNU TeXmacs"
   }
  ],
  "question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS developers)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN contributed) (PP (IN to) (NP (NP (DT both) (NNP GNOWSYS)) (CC and) (NP (NNP GNU) (NNP TeXmacs)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 163
 },
 {
  "taggedQuestion": "List the served region of the organisations of Trade association.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the served region of #entity1",
    "originStr": "List the served region of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the organisations of Trade association",
    "originStr": "the organisations of Trade association"
   }
  ],
  "question": "List the served region of the organisations of Trade association",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NML (S (VP (VBN served)))) (NN region)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (PP (IN of) (NP (NNP Trade) (NN association))))))) (. .)))",
  "entityNum": 2,
  "id": 164
 },
 {
  "taggedQuestion": "Is Hyundai Lavita assembled in Malaysia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Hyundai Lavita assembled in Malaysia",
    "originStr": "Is Hyundai Lavita assembled in Malaysia"
   }
  ],
  "question": "Is Hyundai Lavita assembled in Malaysia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Malaysia))))))) (. ?)))",
  "entityNum": 1,
  "id": 165
 },
 {
  "taggedQuestion": "Who composed the music for Tonight's the Night ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who composed #entity1",
    "originStr": "Who composed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the music for Tonight's the Night",
    "originStr": "the music for Tonight's the Night"
   }
  ],
  "question": "Who composed the music for Tonight's the Night",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN composed) (NP (NP (DT the) (NN music)) (PP (IN for) (NP (NP (NN Tonight)) (POS 's)))) (NP-TMP (DT the) (NN Night)))) (. ?)))",
  "entityNum": 2,
  "id": 166
 },
 {
  "taggedQuestion": "How many things are made by companies who produce <e0>?",
  "entityMap": {
   "<e0>": "mass media articles"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many things are made by #entity1",
    "originStr": "How many things are made by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies who produce mass media articles",
    "originStr": "companies who produce mass media articles"
   }
  ],
  "question": "How many things are made by companies who produce mass media articles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN made) (PP (IN by) (NP (NP (NNS companies)) (SBAR (WHNP (WP who)) (S (VP (VBP produce) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 167
 },
 {
  "taggedQuestion": "What awards have been given to race horses bred by Bert Michell?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What awards have been given to #entity1",
    "originStr": "What awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "race horses bred by Bert Michell",
    "originStr": "race horses bred by Bert Michell"
   }
  ],
  "question": "What awards have been given to race horses bred by Bert Michell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (NN race) (NNS horses)) (VP (VBN bred) (PP (IN by) (NP (NNP Bert) (NNP Michell)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 168
 },
 {
  "taggedQuestion": "Whose mayors are affiliated with Christen-Democratisch en Vlaams?",
  "entityMap": {
   "<e0>": "Christen - Democratisch"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Whose mayors #entity1",
    "originStr": "Whose mayors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are affiliated with Christen-Democratisch en Vlaams",
    "originStr": "are affiliated with Christen-Democratisch en Vlaams"
   }
  ],
  "question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NML (NNS mayors))) (S (VP (VBP are) (VP (VBN affiliated) (PP (IN with) (NP (NP (NNP Christen) (HYPH -) (NNP Democratisch)) (PP (FW en) (NP (NNP Vlaams)))))))) (. ?)))",
  "entityNum": 2,
  "id": 169
 },
 {
  "taggedQuestion": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
    "originStr": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum"
   }
  ],
  "question": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (NP (NNP Viveka) (NNP Babajee) (NN anad) (NNP Ronny) (NNP Vencatachellum))))) (. ?)))",
  "entityNum": 1,
  "id": 170
 },
 {
  "taggedQuestion": "Is the Hyundai Lavita assembled in Ulsan?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Hyundai Lavita assembled in Ulsan",
    "originStr": "Is the Hyundai Lavita assembled in Ulsan"
   }
  ],
  "question": "Is the Hyundai Lavita assembled in Ulsan",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Ulsan))))))) (. ?)))",
  "entityNum": 1,
  "id": 171
 },
 {
  "taggedQuestion": "Which party won the elections when Y.S. Rajasekhara Reddy was in power?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which party won #entity1 power",
    "originStr": "Which party won #entity1 power"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the elections when Y.S. Rajasekhara Reddy was in",
    "originStr": "the elections when Y.S. Rajasekhara Reddy was in"
   }
  ],
  "question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBD won) (NP (DT the) (NNS elections)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Y.S.) (NNP Rajasekhara) (NNP Reddy)) (VP (VBD was) (PP (IN in) (NP (NN power)))))))) (. ?)))",
  "entityNum": 2,
  "id": 172
 },
 {
  "taggedQuestion": "Where does the river begin whose left tributary is Krapanski Potok?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where does the river begin #entity1",
    "originStr": "Where does the river begin #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose left tributary is Krapanski Potok",
    "originStr": "whose left tributary is Krapanski Potok"
   }
  ],
  "question": "Where does the river begin whose left tributary is Krapanski Potok",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB begin) (SBAR (WHNP (WP$ whose) (NML (JJ left) (NN tributary))) (S (VP (VBZ is) (NP (NNP Krapanski) (NNP Potok))))))) (. ?)))",
  "entityNum": 2,
  "id": 173
 },
 {
  "taggedQuestion": "What are the notable commanders of the army  whose one of the notable commanders is Paul Hausser?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the notable commanders of #entity1",
    "originStr": "What are the notable commanders of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the army whose one of the notable commanders is Paul Hausser",
    "originStr": "the army whose one of the notable commanders is Paul Hausser"
   }
  ],
  "question": "What are the notable commanders of the army whose one of the notable commanders is Paul Hausser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ notable) (NNS commanders)) (PP (IN of) (NP (NP (DT the) (NN army)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (JJ notable) (NNS commanders)))) (S (VP (VBZ is) (NP (NNP Paul) (NNP Hausser))))))))) (. ?)))",
  "entityNum": 2,
  "id": 174
 },
 {
  "taggedQuestion": "Name the source of Raa .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the source of Raa",
    "originStr": "Name the source of Raa"
   }
  ],
  "question": "Name the source of Raa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN source)) (PP (IN of) (NP (NN Raa))))) (. .)))",
  "entityNum": 1,
  "id": 175
 },
 {
  "taggedQuestion": "Does Fa'a<e0> serve tahiti too?",
  "entityMap": {
   "<e0>": "' International Airport"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does fa'a"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Fa'a' International Airport serve tahiti too",
    "originStr": "Does Fa'a' International Airport serve tahiti too"
   }
  ],
  "question": "Does Fa'a' International Airport serve tahiti too",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP Fa'a))) (S (NP (ADD <e0>)) (VP (VBP serve) (NP (NN tahiti)) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 176
 },
 {
  "taggedQuestion": "Who is the producer of  Frampton's Camel ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the producer of Frampton's Camel",
    "originStr": "Who is the producer of Frampton's Camel"
   }
  ],
  "question": "Who is the producer of Frampton's Camel",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NNP Frampton) (POS 's)) (NNP Camel))))) (. ?)))",
  "entityNum": 1,
  "id": 177
 },
 {
  "taggedQuestion": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)",
    "originStr": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)"
   }
  ],
  "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NNS directors)) (PP (IN of) (NP (NNP Lennon) (NNP Legend)))) (: :) (NP (NP (DT The) (ADJP (RB Very) (JJS Best))) (PP (IN of) (NP (NNP John) (NNP Lennon) (-LRB- -LRB-) (NNP DVD) (-RRB- -RRB-)))))) (. .)))",
  "entityNum": 1,
  "id": 178
 },
 {
  "taggedQuestion": "What is the political party of <e0> and Indira Gandhi?",
  "entityMap": {
   "<e0>": "Arun Chandra Guha"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the political party of Arun Chandra Guha and Indira Gandhi",
    "originStr": "is the political party of Arun Chandra Guha and Indira Gandhi"
   }
  ],
  "question": "What is the political party of Arun Chandra Guha and Indira Gandhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (ADD <e0>)) (CC and) (NP (NNP Indira) (NNP Gandhi)))))) (. ?)))",
  "entityNum": 1,
  "id": 179
 },
 {
  "taggedQuestion": "Which country is Svetlana Navasardyan from?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which country is Svetlana Navasardyan from",
    "originStr": "To which country is Svetlana Navasardyan from"
   }
  ],
  "question": "To which country is Svetlana Navasardyan from",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ is) (NP (NNP Svetlana) (NNP Navasardyan)) (PP (IN from))) (. ?)))",
  "entityNum": 1,
  "id": 180
 },
 {
  "taggedQuestion": "What is the alma mater of the scientist who is known for Rational analysis ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the alma mater of #entity1",
    "originStr": "What is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist who is known for Rational analysis",
    "originStr": "the scientist who is known for Rational analysis"
   }
  ],
  "question": "What is the alma mater of the scientist who is known for Rational analysis",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (JJ Rational) (NN analysis))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 181
 },
 {
  "taggedQuestion": "Who is the owner of  Chelsea F.C. ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of Chelsea F.C",
    "originStr": "Who is the owner of Chelsea F.C"
   }
  ],
  "question": "Who is the owner of Chelsea F.C.",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Chelsea) (NNP F.C.))))) (. ?)))",
  "entityNum": 1,
  "id": 182
 },
 {
  "taggedQuestion": "How many places has <e0> worked?",
  "entityMap": {
   "<e0>": "Don R. Berlin"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In how many places #entity1",
    "originStr": "In how many places #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has Don R. Berlin worked",
    "originStr": "has Don R. Berlin worked"
   }
  ],
  "question": "In how many places has Don R. Berlin worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS places)) (VP (VBZ has) (NP (NP (ADD <e0>)) (VP (VBN worked))))) (. ?)))",
  "entityNum": 2,
  "id": 183
 },
 {
  "taggedQuestion": "How many movies are there whose musicians home town is in Volos ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "For how many movies are there #entity1",
    "originStr": "For how many movies are there #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose musicians home town is in Volos",
    "originStr": "whose musicians home town is in Volos"
   }
  ],
  "question": "For how many movies are there whose musicians home town is in Volos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS movies))) (SQ (VBP are) (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS musicians)) (S (ADVP (RB home)) (NP (NN town)) (VP (VBZ is) (PP (IN in) (NP (NNP Volos))))))) (. ?)))",
  "entityNum": 2,
  "id": 184
 },
 {
  "taggedQuestion": "In all the places with a stagecoach, where is a <e0> located too?",
  "entityMap": {
   "<e0>": "Peetz Table Wind Energy Center"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too",
    "originStr": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too"
   }
  ],
  "question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (PP (IN In) (NP (NP (PDT all) (DT the) (NNS places)) (PP (IN with) (NP (DT a) (NN stagecoach))))) (, ,) (WHADVP (WRB where)) (SQ (VBZ is) (NP (DT a) (NN <e0>)) (VP (VBN located) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 185
 },
 {
  "taggedQuestion": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species <e0>.",
  "entityMap": {
   "<e0>": "American Pekin duck"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the fictional character whose relatives are Huey , Dewey , and",
    "originStr": "Name the fictional character whose relatives are Huey , Dewey , and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Louie and is of species American Pekin duck",
    "originStr": "Louie and is of species American Pekin duck"
   }
  ],
  "question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NML (NNS relatives))) (S (VP (VP (VBP are) (NP (NNP Huey) (, ,) (NNP Dewey) (, ,) (CC and) (NNP Louie))) (CC and) (VP (VBZ is) (PP (IN of) (NP (NNS species)))))))) (ADD <e0>))) (. .)))",
  "entityNum": 1,
  "id": 186
 },
 {
  "taggedQuestion": "Who is the owner of the website which has the label Seed Eight ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of #entity1",
    "originStr": "Who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the website which has the label Seed Eight",
    "originStr": "the website which has the label Seed Eight"
   }
  ],
  "question": "Who is the owner of the website which has the label Seed Eight",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN website)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN label) (NN Seed) (CD Eight))))))))) (. ?)))",
  "entityNum": 2,
  "id": 187
 },
 {
  "taggedQuestion": "Which country is <e0>?",
  "entityMap": {
   "<e0>": "Sierra del Merendin"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which country is Sierra del Merendin",
    "originStr": "In which country is Sierra del Merendin"
   }
  ],
  "question": "In which country is Sierra del Merendin",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VP (VBZ is) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 188
 },
 {
  "taggedQuestion": "What is on the border of the places which fall under crook county municipality, oregon?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is on the border of #entity1 oregon",
    "originStr": "What is on the border of #entity1 oregon"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the places which fall under crook county municipality ",
    "originStr": "the places which fall under crook county municipality "
   }
  ],
  "question": "What is on the border of the places which fall under crook county municipality, oregon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (PP (IN on) (NP (NP (DT the) (NN border)) (PP (IN of) (NP (NP (DT the) (NNS places)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (NP (NN crook) (NN county) (NN municipality)) (, ,) (NP (NNP oregon)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 189
 },
 {
  "taggedQuestion": "Which is the university of Vanderbilt Commodores ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which is the university of Vanderbilt Commodores",
    "originStr": "Which is the university of Vanderbilt Commodores"
   }
  ],
  "question": "Which is the university of Vanderbilt Commodores",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (PP (IN of) (NP (NNP Vanderbilt) (NNPS Commodores))))) (. ?)))",
  "entityNum": 1,
  "id": 190
 },
 {
  "taggedQuestion": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose",
    "originStr": "Whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "relatives are Clan McDuck and Huey , Dewey , and Louie",
    "originStr": "relatives are Clan McDuck and Huey , Dewey , and Louie"
   }
  ],
  "question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS relatives))) (SQ (VBP are) (NP (NP (NNP Clan) (NNP McDuck)) (CC and) (NP (NNP Huey) (, ,) (NNP Dewey) (, ,) (CC and) (NNP Louie)))) (. ?)))",
  "entityNum": 1,
  "id": 191
 },
 {
  "taggedQuestion": "What musicians are signed up with colpix records?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What musicians are #entity1",
    "originStr": "What musicians are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "signed up with colpix records",
    "originStr": "signed up with colpix records"
   }
  ],
  "question": "What musicians are signed up with colpix records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS musicians)) (VP (VBP are) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NN colpix) (NNS records)))))) (. ?)))",
  "entityNum": 2,
  "id": 192
 },
 {
  "taggedQuestion": "Who is the person that first ascented the Cathedral Peak and Mount Hoffmann?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the person that",
    "originStr": "Who is the person that"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "first ascended the Cathedral Peak and Mount Hoffmann",
    "originStr": "first ascended the Cathedral Peak and Mount Hoffmann"
   }
  ],
  "question": "Who is the person that first ascended the Cathedral Peak and Mount Hoffmann",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WDT that)) (S (ADVP (RB first)) (VP (VBD ascented) (NP (NP (DT the) (NNP Cathedral) (NN Peak)) (CC and) (NP (NNP Mount) (NNP Hoffmann)))))))) (. ?)))",
  "entityNum": 1,
  "id": 193
 },
 {
  "taggedQuestion": "What currencies are used in the country whose capital is Podgorica?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What currencies are used in #entity1",
    "originStr": "What currencies are used in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country whose capital is Podgorica",
    "originStr": "the country whose capital is Podgorica"
   }
  ],
  "question": "What currencies are used in the country whose capital is Podgorica",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT What)) (S (NP (NNS currencies)) (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (DT the) (NN country))))))) (WHNP (WP$ whose) (NN capital)) (SQ (VBZ is) (NP (NNP Podgorica))) (. ?)))",
  "entityNum": 2,
  "id": 194
 },
 {
  "taggedQuestion": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many other home stadium are there of #entity1",
    "originStr": "How many other home stadium are there of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club whose home stadium is Luzhniki Stadium",
    "originStr": "the soccer club whose home stadium is Luzhniki Stadium"
   }
  ],
  "question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ other) (NN home) (NN stadium)) (SQ (VBP are) (NP (NP (RB there)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (SBAR (WHNP (WP$ whose) (NN home) (NN stadium)) (S (VP (VBZ is) (NP (NNP Luzhniki) (NNP Stadium))))))))) (. ?)))",
  "entityNum": 2,
  "id": 195
 },
 {
  "taggedQuestion": "Where was  William Anthony  trained ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was William Anthony trained",
    "originStr": "Where was William Anthony trained"
   }
  ],
  "question": "Where was William Anthony trained",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP William) (NNP Anthony)) (VP (VBN trained))) (. ?)))",
  "entityNum": 1,
  "id": 196
 },
 {
  "taggedQuestion": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which composer of Motorpsycho Nitemare has",
    "originStr": "Which composer of Motorpsycho Nitemare has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also composed The time are A-Changing",
    "originStr": "also composed The time are A-Changing"
   }
  ],
  "question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN composer)) (PP (IN of) (NP (NNP Motorpsycho) (NNP Nitemare)))) (SQ (VP (VBZ has) (ADVP (RB also)) (VP (VBN composed) (SBAR (S (NP (DT The) (NN time)) (VP (VBP are) (NP (NN A-Changing)))))))) (. ?)))",
  "entityNum": 1,
  "id": 197
 },
 {
  "taggedQuestion": "What river is it whose source is Dowra?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What river is #entity1",
    "originStr": "What river is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "it whose source is Dowra",
    "originStr": "it whose source is Dowra"
   }
  ],
  "question": "What river is it whose source is Dowra",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VBZ is) (NP (PRP it)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (NP (NNP Dowra)))))) (. ?)))",
  "entityNum": 2,
  "id": 198
 },
 {
  "taggedQuestion": "What is the religion of the president who won the <e0>, 2004 ?",
  "entityMap": {
   "<e0>": "Mongolian legislative election"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the religion of #entity1",
    "originStr": "What is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president who won the Mongolian legislative election , 2004",
    "originStr": "the president who won the Mongolian legislative election , 2004"
   }
  ],
  "question": "What is the religion of the president who won the Mongolian legislative election, 2004",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD won) (NP (NP (DT the) (NN <e0>)) (, ,) (NP (CD 2004)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 199
 },
 {
  "taggedQuestion": "Give me everything owned by networks which is lead by Steve Burke.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me everything owned by",
    "originStr": "Give me everything owned by"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "networks which is lead by Steve Burke",
    "originStr": "networks which is lead by Steve Burke"
   }
  ],
  "question": "Give me everything owned by networks which is lead by Steve Burke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN everything)) (VP (VBN owned) (PP (IN by) (NP (NP (NNS networks)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (JJ lead)) (PP (IN by) (NP (NNP Steve) (NNP Burke)))))))))))) (. .)))",
  "entityNum": 1,
  "id": 200
 },
 {
  "taggedQuestion": "What is the municipality of <e0> ?",
  "entityMap": {
   "<e0>": "Homestead Grays Bridge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the municipality of Homestead Grays Bridge",
    "originStr": "What is the municipality of Homestead Grays Bridge"
   }
  ],
  "question": "What is the municipality of Homestead Grays Bridge",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 201
 },
 {
  "taggedQuestion": "What religion do the politicians follow, who graduated from the <e0>?",
  "entityMap": {
   "<e0>": "Yokkohama Nationaal University"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What religion do the politicians follow , #entity1",
    "originStr": "What religion do the politicians follow , #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who graduated from the Yokohama National University",
    "originStr": "who graduated from the Yokohama National University"
   }
  ],
  "question": "What religion do the politicians follow, who graduated from the Yokohama National University",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS politicians)) (VP (VBP follow)))) (, ,) (SBARQ (WHNP (WP who)) (SQ (VP (VBD graduated) (PP (IN from) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 202
 },
 {
  "taggedQuestion": "Who is the narrator of <e0> , <e1> ?",
  "entityMap": {
   "<e1>": "1982 TV series",
   "<e0>": "The Incredible Hulk"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the narrator of The Incredible Hulk , 1982 TV series",
    "originStr": "Who is the narrator of The Incredible Hulk , 1982 TV series"
   }
  ],
  "question": "Who is the narrator of The Incredible Hulk , 1982 TV series",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (NN <e0>)) (, ,) (NP (NN <e1>)))))) (. ?)))",
  "entityNum": 1,
  "id": 203
 },
 {
  "taggedQuestion": "What sports are played in schools where Swahili is the official language?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What sports are played in #entity1",
    "originStr": "What sports are played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "schools where Swahili is the official language",
    "originStr": "schools where Swahili is the official language"
   }
  ],
  "question": "What sports are played in schools where Swahili is the official language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Swahili)) (VP (VBZ is) (NP (DT the) (JJ official) (NN language))))))))) (. ?)))",
  "entityNum": 2,
  "id": 204
 },
 {
  "taggedQuestion": "Which interest of Philip Novak is the relegion of Vesak ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which interest of Philip Novak is",
    "originStr": "Which interest of Philip Novak is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the religion of Vesak",
    "originStr": "the religion of Vesak"
   }
  ],
  "question": "Which interest of Philip Novak is the religion of Vesak",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN interest)) (PP (IN of) (NP (NNP Philip) (NNP Novak)))) (SQ (VBZ is) (NP (NP (DT the) (NN relegion)) (PP (IN of) (NP (NNP Vesak))))) (. ?)))",
  "entityNum": 1,
  "id": 205
 },
 {
  "taggedQuestion": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family .",
  "entityMap": {
   "<e0>": "Anglo - Frisian language family"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count all the ethinic group #entity1",
    "originStr": "Count all the ethinic group #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who speaks language which belongs to Anglo-Frisian language family",
    "originStr": "who speaks language which belongs to Anglo-Frisian language family"
   }
  ],
  "question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ ethinic) (NN group)) (SBAR (WHNP (WP who)) (S (VP (VBZ speaks) (NP (NP (NN language)) (SBAR (WHNP (WDT which)) (S (VP (VBZ belongs) (PP (IN to) (NP (ADJP (JJ Anglo) (HYPH -) (JJ Frisian)) (NN language) (NN family)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 206
 },
 {
  "taggedQuestion": "What is the area of the <e0> which is  official residence of the Michael Nichols (photographer) ?",
  "entityMap": {
   "<e0>": "Tar Heel Sports Network"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the area of the Tar Heel Sports Network which",
    "originStr": "What is the area of the Tar Heel Sports Network which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is official residence of the Michael Nichols -LRB- photographer -RRB-",
    "originStr": "is official residence of the Michael Nichols -LRB- photographer -RRB-"
   }
  ],
  "question": "What is the area of the Tar Heel Sports Network which is official residence of the Michael Nichols (photographer)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (JJ official) (NN residence)) (PP (IN of) (NP (DT the) (NNP Michael) (NNP Nichols)))) (PRN (-LRB- -LRB-) (NP (NN photographer)) (-RRB- -RRB-))))))))) (. ?)))",
  "entityNum": 1,
  "id": 207
 },
 {
  "taggedQuestion": "Cologny and Lancy are the neighboring municipalities of which place ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Cologny",
    "originStr": "Cologny"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and Lancy are the neighboring municipalities of which place",
    "originStr": "and Lancy are the neighboring municipalities of which place"
   }
  ],
  "question": "Cologny and Lancy are the neighboring municipalities of which place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Cologny) (CC and) (NNP Lancy)) (VP (VBP are) (NP (NP (DT the) (NN neighboring) (NNS municipalities)) (PP (IN of) (NP (WDT which) (NN place))))) (. ?)))",
  "entityNum": 1,
  "id": 208
 },
 {
  "taggedQuestion": "How many artists have their works in the <e0> of Art?",
  "entityMap": {
   "<e0>": "Sao Paolo Museum"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many artists have #entity1 Art",
    "originStr": "How many artists have #entity1 Art"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "their works in the Sao Paolo Museum of",
    "originStr": "their works in the Sao Paolo Museum of"
   }
  ],
  "question": "How many artists have their works in the Sao Paolo Museum of Art",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS artists)) (VP (VBP have) (NP (PRP$ their) (NNS works)) (PP (IN in) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NN Art))))))) (. ?)))",
  "entityNum": 2,
  "id": 209
 },
 {
  "taggedQuestion": "VP-8 and VP-10 shares which command structure ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "VP-8 and VP-10 shares which",
    "originStr": "VP-8 and VP-10 shares which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "command structure",
    "originStr": "command structure"
   }
  ],
  "question": "VP-8 and VP-10 shares which command structure",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NML (NML (NN VP) (HYPH -) (CD 8)) (CC and) (NML (NN VP) (HYPH -) (CD 10))) (NNS shares)) (SBAR (WHNP (WDT which)) (S (VP (VBP command) (NP (NN structure))))) (. ?)))",
  "entityNum": 1,
  "id": 210
 },
 {
  "taggedQuestion": "What is used as money for <e0> is also the  product of the Karafarin Bank ?",
  "entityMap": {
   "<e0>": "French Southern and Antarctic Lands"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is used as money for French Southern and Antarctic",
    "originStr": "What is used as money for French Southern and Antarctic"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Lands is also the product of the Karafarin Bank",
    "originStr": "Lands is also the product of the Karafarin Bank"
   }
  ],
  "question": "What is used as money for French Southern and Antarctic Lands is also the product of the Karafarin Bank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN used) (SBAR (IN as) (S (NP (NP (NN money)) (PP (IN for) (NP (NN <e0>)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN product)) (PP (IN of) (NP (DT the) (NNP Karafarin) (NNP Bank))))))))) (. ?)))",
  "entityNum": 1,
  "id": 211
 },
 {
  "taggedQuestion": "Give me the total number of membership of the organisations which have memebers as  Azerbaijan.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me the total number of membership of #entity1",
    "originStr": "Give me the total number of membership of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the organisations which have members as Azerbaijan",
    "originStr": "the organisations which have members as Azerbaijan"
   }
  ],
  "question": "Give me the total number of membership of the organisations which have members as Azerbaijan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN membership)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS memebers)) (PP (IN as) (NP (NNP Azerbaijan))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 212
 },
 {
  "taggedQuestion": "What is the content licence of MSX BASIC ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the content license of MSX BASIC",
    "originStr": "What is the content license of MSX BASIC"
   }
  ],
  "question": "What is the content license of MSX BASIC",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN content) (NN licence)) (PP (IN of) (NP (NNP MSX) (NN BASIC))))) (. ?)))",
  "entityNum": 1,
  "id": 213
 },
 {
  "taggedQuestion": "What are the central characters in <e0>?",
  "entityMap": {
   "<e0>": "spy kids series"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the central characters in spy",
    "originStr": "What are the central characters in spy"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "kids series",
    "originStr": "kids series"
   }
  ],
  "question": "What are the central characters in spy kids series",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ central) (NNS characters)) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 214
 },
 {
  "taggedQuestion": "Which comic characters were created by Paul Dini?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which comic characters were",
    "originStr": "Which comic characters were"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "created by Paul Dini",
    "originStr": "created by Paul Dini"
   }
  ],
  "question": "Which comic characters were created by Paul Dini",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ comic) (NNS characters)) (SQ (VP (VBD were) (VP (VBN created) (PP (IN by) (NP (NNP Paul) (NNP Dini)))))) (. ?)))",
  "entityNum": 1,
  "id": 215
 },
 {
  "taggedQuestion": "Who owns the ship Victoria?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who owns the ship Victoria",
    "originStr": "who owns the ship Victoria"
   }
  ],
  "question": "who owns the ship Victoria",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (DT the) (NN ship)) (S (NP (NNP Victoria))))) (. ?)))",
  "entityNum": 1,
  "id": 216
 },
 {
  "taggedQuestion": "Where was the predecessor of Sevan Ross born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was #entity1 born",
    "originStr": "Where was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of Sevan Ross",
    "originStr": "the predecessor of Sevan Ross"
   }
  ],
  "question": "Where was the predecessor of Sevan Ross born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Sevan) (NNP Ross)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 217
 },
 {
  "taggedQuestion": "Which city council owns the <e0> and <e1>?",
  "entityMap": {
   "<e1>": "Leonard Memorial ridge",
   "<e0>": "Ted Williams tunnel"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which city council owns",
    "originStr": "Which city council owns"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Ted Williams tunnel and Leonard Memorial ridge",
    "originStr": "the Ted Williams tunnel and Leonard Memorial ridge"
   }
  ],
  "question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (NP (NN council)) (VP (VBZ owns) (NP (DT the) (NN <e0>) (CC and) (NN <e1>)))) (. ?)))",
  "entityNum": 1,
  "id": 218
 },
 {
  "taggedQuestion": "Where is the school which is the rival of Somerset Berkley Regional High?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where is #entity1",
    "originStr": "Where is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the school which is the rival of Somerset Berkley Regional High",
    "originStr": "the school which is the rival of Somerset Berkley Regional High"
   }
  ],
  "question": "Where is the school which is the rival of Somerset Berkley Regional High",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN school)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN rival)) (PP (IN of) (NP (NNP Somerset) (NNP Berkley) (NNP Regional) (NNP High))))))))) (. ?)))",
  "entityNum": 2,
  "id": 219
 },
 {
  "taggedQuestion": "How many soccer manager have been in the <e0>?",
  "entityMap": {
   "<e0>": "Spain nation football team"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many soccer manager #entity1 team",
    "originStr": "How many soccer manager #entity1 team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have been in the Spain nation football",
    "originStr": "have been in the Spain nation football"
   }
  ],
  "question": "How many soccer manager have been in the Spain nation football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN soccer) (NN manager)) (VP (VBP have) (VP (VBN been) (PP (IN in) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 220
 },
 {
  "taggedQuestion": "Name the common alma mater of the <e0> and Jack McGregor",
  "entityMap": {
   "<e0>": "Henry Morton Dexter"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the common alma mater of the Henry Morton Dexter and Jack McGregor",
    "originStr": "the common alma mater of the Henry Morton Dexter and Jack McGregor"
   }
  ],
  "question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (NNP Jack) (NNP McGregor))))))))",
  "entityNum": 1,
  "id": 221
 },
 {
  "taggedQuestion": "What are some companies which are founded in Dallas Jurisdiction?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are some companies which",
    "originStr": "What are some companies which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are founded in Dallas Jurisdiction",
    "originStr": "are founded in Dallas Jurisdiction"
   }
  ],
  "question": "What are some companies which are founded in Dallas Jurisdiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS companies)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN founded) (PP (IN in) (NP (NNP Dallas) (NN Jurisdiction))))))))) (. ?)))",
  "entityNum": 1,
  "id": 222
 },
 {
  "taggedQuestion": "How many bands collaborated with artists who signed up with EMI?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many bands collaborated with artists",
    "originStr": "How many bands collaborated with artists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who signed up with EMI",
    "originStr": "who signed up with EMI"
   }
  ],
  "question": "How many bands collaborated with artists who signed up with EMI",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS bands)) (VP (VBD collaborated) (PP (IN with) (NP (NNS artists)))))) (WHNP (WP who)) (SQ (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI))))) (. ?)))",
  "entityNum": 1,
  "id": 223
 },
 {
  "taggedQuestion": "What is the purpose of <e0> ?",
  "entityMap": {
   "<e0>": "New Zealand Chess Federation"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the purpose of New Zealand Chess Federation",
    "originStr": "What is the purpose of New Zealand Chess Federation"
   }
  ],
  "question": "What is the purpose of New Zealand Chess Federation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN purpose)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 224
 },
 {
  "taggedQuestion": "How many TV shows are of the company which are of company which is a subsidiary of <e0> ?",
  "entityMap": {
   "<e0>": "Big  Ticket Entertainment"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many TV shows are of the #entity1",
    "originStr": "How many TV shows are of the #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "company which are of company which is a subsidiary of Big Ticket Entertainment",
    "originStr": "company which are of company which is a subsidiary of Big Ticket Entertainment"
   }
  ],
  "question": "How many TV shows are of the company which are of company which is a subsidiary of Big Ticket Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN TV) (NNS shows)) (VP (VBP are) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT a) (NN subsidiary)) (PP (IN of) (NP (NN <e0>)))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 225
 },
 {
  "taggedQuestion": "Who operates <e0> ?",
  "entityMap": {
   "<e0>": "twin Cities 400"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who operates twin Cities 400",
    "originStr": "Who operates twin Cities 400"
   }
  ],
  "question": "Who operates twin Cities 400",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ operates) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 226
 },
 {
  "taggedQuestion": "What is the city of the <e0> is also the resting place of <e1> ?",
  "entityMap": {
   "<e1>": "Charles A. Boutelle",
   "<e0>": "Maine School of Science and Mathematics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the city of the Maine School of Science and",
    "originStr": "What is the city of the Maine School of Science and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Mathematics is also the resting place of Charles A. Boutelle",
    "originStr": "Mathematics is also the resting place of Charles A. Boutelle"
   }
  ],
  "question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (NN <e1>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 227
 },
 {
  "taggedQuestion": "Give me a count of royalties buried in Rome .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me a count of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me a count of royalties #entity1",
    "originStr": "Give me a count of royalties #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "buried in Rome",
    "originStr": "buried in Rome"
   }
  ],
  "question": "Give me a count of royalties buried in Rome",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NP (NNS royalties)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. .)))",
  "entityNum": 2,
  "id": 228
 },
 {
  "taggedQuestion": "How many places are Marjas found?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In #entity1 found",
    "originStr": "In #entity1 found"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "how many places are Marjas",
    "originStr": "how many places are Marjas"
   }
  ],
  "question": "In how many places are Marjas found",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS places))) (SQ (VBP are) (NP (NNP Marjas)) (VP (VBN found))) (. ?)))",
  "entityNum": 2,
  "id": 229
 },
 {
  "taggedQuestion": "List the soccer players whose current team has the ground Stoke-on-Trent.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the soccer players #entity1",
    "originStr": "List the soccer players #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose current team has the ground Stoke-on-Trent",
    "originStr": "whose current team has the ground Stoke-on-Trent"
   }
  ],
  "question": "List the soccer players whose current team has the ground Stoke-on-Trent",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP$ whose) (ADJP (JJ current)) (NN team)) (S (VP (VBZ has) (NP (NP (DT the) (NN ground) (NN Stoke)) (HYPH -) (PP (IN on) (HYPH -) (NP (NNP Trent))))))))) (. .)))",
  "entityNum": 2,
  "id": 230
 },
 {
  "taggedQuestion": "Which are the countires where Pioneer Corporation has flourished?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which are the countries where",
    "originStr": "Which are the countries where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Pioneer Corporation has flourished",
    "originStr": "Pioneer Corporation has flourished"
   }
  ],
  "question": "Which are the countries where Pioneer Corporation has flourished",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NNS countires)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Pioneer) (NNP Corporation)) (VP (VBZ has) (VP (VBN flourished))))))) (. ?)))",
  "entityNum": 1,
  "id": 231
 },
 {
  "taggedQuestion": "Who is the president of Carl Stokes nad Wyche Fowler ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the president of Carl Stokes and Wyche Fowler",
    "originStr": "Who is the president of Carl Stokes and Wyche Fowler"
   }
  ],
  "question": "Who is the president of Carl Stokes and Wyche Fowler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Carl) (NNP Stokes) (NNP nad) (NNP Wyche) (NNP Fowler))))) (. ?)))",
  "entityNum": 1,
  "id": 232
 },
 {
  "taggedQuestion": "Is <e0> the national anthem of United Kingdom?",
  "entityMap": {
   "<e0>": "God Save the Queen"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is God Save the Queen the national anthem of United Kingdom",
    "originStr": "Is God Save the Queen the national anthem of United Kingdom"
   }
  ],
  "question": "Is God Save the Queen the national anthem of United Kingdom",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (NP (DT the) (JJ national) (NN anthem)) (IN of))) (NP (NNP United) (NNP Kingdom)) (. ?)))",
  "entityNum": 1,
  "id": 233
 },
 {
  "taggedQuestion": "List few <e0> ?",
  "entityMap": {
   "<e0>": "Swedish language movies"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List",
    "originStr": "List"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "few Swedish language movies",
    "originStr": "few Swedish language movies"
   }
  ],
  "question": "List few Swedish language movies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (JJ few) (NN <e0>)) (. ?)))",
  "entityNum": 1,
  "id": 234
 },
 {
  "taggedQuestion": "Was christina crawford trained by Booker T?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was christina crawford trained by Booker T",
    "originStr": "Was christina crawford trained by Booker T"
   }
  ],
  "question": "Was christina crawford trained by Booker T",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP christina) (NNP crawford)) (VP (VBN trained) (PP (IN by) (NP (NNP Booker) (NNP T)))) (. ?)))",
  "entityNum": 1,
  "id": 235
 },
 {
  "taggedQuestion": "What is the currency of Kerguelen Islands ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the currency of Kerguelen Islands",
    "originStr": "What is the currency of Kerguelen Islands"
   }
  ],
  "question": "What is the currency of Kerguelen Islands",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN currency)) (PP (IN of) (NP (NNP Kerguelen) (NNPS Islands))))) (. ?)))",
  "entityNum": 1,
  "id": 236
 },
 {
  "taggedQuestion": "What are the musicals whose musicians worked under <e0>?",
  "entityMap": {
   "<e0>": "Sony Music Entertainment"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the musicals #entity1",
    "originStr": "What are the musicals #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose musicians worked under Sony Music Entertainment",
    "originStr": "whose musicians worked under Sony Music Entertainment"
   }
  ],
  "question": "What are the musicals whose musicians worked under Sony Music Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS musicals)) (SBAR (WHNP (WP$ whose) (NNS musicians)) (S (VP (VBD worked) (PP (IN under) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 237
 },
 {
  "taggedQuestion": "Whose shrines are in a place governed by Justin Trudeau?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Whose shrines are in a #entity1",
    "originStr": "Whose shrines are in a #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "place governed by Justin Trudeau",
    "originStr": "place governed by Justin Trudeau"
   }
  ],
  "question": "Whose shrines are in a place governed by Justin Trudeau",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NNS shrines)) (S (VP (VBP are) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NNP Justin) (NNP Trudeau)))))))) (. ?)))",
  "entityNum": 2,
  "id": 238
 },
 {
  "taggedQuestion": "What are the academic interests of the past members of Senser?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the academic interests of #entity1",
    "originStr": "What are the academic interests of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the past members of Senser",
    "originStr": "the past members of Senser"
   }
  ],
  "question": "What are the academic interests of the past members of Senser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ academic) (NNS interests)) (PP (IN of) (NP (NP (DT the) (JJ past) (NNS members)) (PP (IN of) (NP (NNP Senser))))))) (. ?)))",
  "entityNum": 2,
  "id": 239
 },
 {
  "taggedQuestion": "Who is the leader of Hackweiser ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the leader of Hackweiser",
    "originStr": "Who is the leader of Hackweiser"
   }
  ],
  "question": "Who is the leader of Hackweiser",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Hackweiser))))) (. ?)))",
  "entityNum": 1,
  "id": 240
 },
 {
  "taggedQuestion": "Which city is the sister station of KTXY located ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which city is #entity1 located",
    "originStr": "In which city is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sister station of KTXY",
    "originStr": "the sister station of KTXY"
   }
  ],
  "question": "In which city is the sister station of KTXY located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ is) (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NNP KTXY)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 241
 },
 {
  "taggedQuestion": "Where was the successor of Hank Brown born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was #entity1 born",
    "originStr": "Where was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the successor of Hank Brown",
    "originStr": "the successor of Hank Brown"
   }
  ],
  "question": "Where was the successor of Hank Brown born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Hank) (NNP Brown)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 242
 },
 {
  "taggedQuestion": "Name the constituency of Jonas Gahr where Sverre Krogh was born .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the constituency of Jonas Gahr",
    "originStr": "Name the constituency of Jonas Gahr"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where Sverre Krogh was born",
    "originStr": "where Sverre Krogh was born"
   }
  ],
  "question": "Name the constituency of Jonas Gahr where Sverre Krogh was born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN constituency)) (PP (IN of) (NP (NNP Jonas) (NNP Gahr)))) (SBAR (WHADVP (WRB where)) (S (NP (NNP Sverre) (NNP Krogh)) (VP (VBD was) (VP (VBN born)))))) (. .)))",
  "entityNum": 1,
  "id": 243
 },
 {
  "taggedQuestion": "What is the common battle fought by Stephen Urban and <e0> ?",
  "entityMap": {
   "<e0>": "Ali Habib Mahmud"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the common battle fought by Stephen Urban and Ali Habib Mahmud",
    "originStr": "is the common battle fought by Stephen Urban and Ali Habib Mahmud"
   }
  ],
  "question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJ common) (NN battle)) (VP (VBN fought) (PP (IN by) (NP (NP (NNP Stephen) (NNP Urban)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 244
 },
 {
  "taggedQuestion": "What is the relegious affiliations of Katyayana ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the relegious affiliations of Katyayana",
    "originStr": "What is the relegious affiliations of Katyayana"
   }
  ],
  "question": "What is the relegious affiliations of Katyayana",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ relegious) (NNS affiliations)) (PP (IN of) (NP (NNP Katyayana))))) (. ?)))",
  "entityNum": 1,
  "id": 245
 },
 {
  "taggedQuestion": "Where was the engineer born who manufactured EP R.E.P. 1?",
  "entityMap": {
   "<e0>": "EP R.E. P. 1"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was the engineer born #entity1",
    "originStr": "Where was the engineer born #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who manufactured EP R.E.P. 1",
    "originStr": "who manufactured EP R.E.P. 1"
   }
  ],
  "question": "Where was the engineer born who manufactured EP R.E.P. 1",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN engineer)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD manufactured) (NP (NNP EP) (NNP R.E.P.) (CD 1))))))) (. ?)))",
  "entityNum": 2,
  "id": 246
 },
 {
  "taggedQuestion": "Who all have been a manager of english under twenty one football team?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who all have been a manager of #entity1",
    "originStr": "who all have been a manager of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "english under twenty one football team",
    "originStr": "english under twenty one football team"
   }
  ],
  "question": "who all have been a manager of english under twenty one football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN been) (NP (NP (DT a) (NN manager)) (PP (IN of) (NP (NNP english)))) (PP (IN under) (NP (QP (CD twenty) (CD one)) (NN football) (NN team)))))) (. ?)))",
  "entityNum": 2,
  "id": 247
 },
 {
  "taggedQuestion": "What is the military conflict whose commanders are John McEwen and <e0>?",
  "entityMap": {
   "<e0>": "Phm Vn ng"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the military conflict whose",
    "originStr": "What is the military conflict whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "commanders are John McEwen and Phm Vn ng",
    "originStr": "commanders are John McEwen and Phm Vn ng"
   }
  ],
  "question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN conflict)) (SBAR (WHNP (WP$ whose) (NNS commanders)) (S (VP (VBP are) (NP (NP (NNP John) (NNP McEwen)) (CC and) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 1,
  "id": 248
 },
 {
  "taggedQuestion": "Which party has come in power in Mumbai North?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which party has come in #entity1",
    "originStr": "Which party has come in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "power in Mumbai North",
    "originStr": "power in Mumbai North"
   }
  ],
  "question": "Which party has come in power in Mumbai North",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBZ has) (VP (VBN come) (PP (IN in) (NP (NN power))) (PP (IN in) (NP (NNP Mumbai) (NNP North)))))) (. ?)))",
  "entityNum": 2,
  "id": 249
 },
 {
  "taggedQuestion": "Name the tv show with judges Randy Jackson and Jennifer Lopez.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the tv show with judges Randy Jackson and Jennifer Lopez",
    "originStr": "the tv show with judges Randy Jackson and Jennifer Lopez"
   }
  ],
  "question": "Name the tv show with judges Randy Jackson and Jennifer Lopez",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN tv) (NN show)) (PP (IN with) (NP (NP (NP (NNS judges)) (NP (NNP Randy) (NNP Jackson))) (CC and) (NP (NNP Jennifer) (NNP Lopez))))) (. .)))",
  "entityNum": 1,
  "id": 250
 },
 {
  "taggedQuestion": "What is the largest city of the country which hosted the <e0>?",
  "entityMap": {
   "<e0>": "1951 Asian Games"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the largest city of #entity1",
    "originStr": "What is the largest city of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country which hosted the 1951 Asian Games",
    "originStr": "the country which hosted the 1951 Asian Games"
   }
  ],
  "question": "What is the largest city of the country which hosted the 1951 Asian Games",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBD hosted) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 251
 },
 {
  "taggedQuestion": "Which royalty was married to <e0> and had mother named Cleopatra V ?",
  "entityMap": {
   "<e0>": "ptolemy XIII Theos Philopator"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which royalty was",
    "originStr": "Which royalty was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "married to ptolemy XIII Theos Philopator and had mother named Cleopatra V",
    "originStr": "married to ptolemy XIII Theos Philopator and had mother named Cleopatra V"
   }
  ],
  "question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN royalty)) (SQ (VBD was) (VP (VP (VBN married) (PP (IN to) (NP (ADD <e0>)))) (CC and) (VP (VBD had) (NP (NP (NN mother)) (VP (VBN named) (NP (NNP Cleopatra) (NNP V))))))) (. ?)))",
  "entityNum": 1,
  "id": 252
 },
 {
  "taggedQuestion": "Whose theme music was composed by a band which collaborated with Phish?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Whose theme music was composed by a #entity1",
    "originStr": "Whose theme music was composed by a #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "band which collaborated with Phish",
    "originStr": "band which collaborated with Phish"
   }
  ],
  "question": "Whose theme music was composed by a band which collaborated with Phish",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose) (NML (NN theme))) (NN music)) (SQ (VBD was) (VP (VBN composed) (PP (IN by) (NP (NP (DT a) (NN band)) (SBAR (WHNP (WDT which)) (S (VP (VBD collaborated) (PP (IN with) (NP (NNP Phish)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 253
 },
 {
  "taggedQuestion": "Is morrissey in the smiths?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is morrissey in the smiths",
    "originStr": "Is morrissey in the smiths"
   }
  ],
  "question": "Is morrissey in the smiths",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN morrissey)) (PP (IN in) (NP (DT the) (NNS smiths))) (. ?)))",
  "entityNum": 1,
  "id": 254
 },
 {
  "taggedQuestion": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which administrative headquarters of the Pulau Ubin is",
    "originStr": "Which administrative headquarters of the Pulau Ubin is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the resting place of the Nicole Lai",
    "originStr": "also the resting place of the Nicole Lai"
   }
  ],
  "question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ administrative) (NN headquarters)) (PP (IN of) (NP (DT the) (NNP Pulau) (NNP Ubin))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (DT the) (NNP Nicole) (NNP Lai))))) (. ?)))",
  "entityNum": 1,
  "id": 255
 },
 {
  "taggedQuestion": "Where did the beverages sold by Refriango originate?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did #entity1 originate",
    "originStr": "Where did #entity1 originate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the beverages sold by Refriango",
    "originStr": "the beverages sold by Refriango"
   }
  ],
  "question": "Where did the beverages sold by Refriango originate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS beverages)) (VP (VBN sold) (PP (IN by) (NP (NNP Refriango))))) (VP (VB originate))) (. ?)))",
  "entityNum": 2,
  "id": 256
 },
 {
  "taggedQuestion": "Who built the stadium which was rented by <e0>?",
  "entityMap": {
   "<e0>": "Costa Rica national football team"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who built #entity1",
    "originStr": "Who built #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium which was rented by Costa Rica national football team",
    "originStr": "the stadium which was rented by Costa Rica national football team"
   }
  ],
  "question": "Who built the stadium which was rented by Costa Rica national football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD built) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN rented) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 257
 },
 {
  "taggedQuestion": "Which country does the <e0> play  ?",
  "entityMap": {
   "<e0>": "Auckland rugby union team"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which country does #entity1 play",
    "originStr": "In which country does #entity1 play"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the Auckland rugby union team",
    "originStr": "the Auckland rugby union team"
   }
  ],
  "question": "In which country does the Auckland rugby union team play",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (DT the) (NN <e0>)) (VP (VB play))) (. ?)))",
  "entityNum": 2,
  "id": 258
 },
 {
  "taggedQuestion": "What is the serving railway line of <e0>, Perth ?",
  "entityMap": {
   "<e0>": "Warwick railway station"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the serving railway line of Warwick railway station, Perth",
    "originStr": "What is the serving railway line of Warwick railway station, Perth"
   }
  ],
  "question": "What is the serving railway line of Warwick railway station, Perth",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (VBG serving) (NN railway) (NN line)) (PP (IN of) (NP (NP (NN <e0>)) (, ,) (NP (NNP Perth)))))) (. ?)))",
  "entityNum": 1,
  "id": 259
 },
 {
  "taggedQuestion": "What is the radio show created by Timoteo Jeffries, about?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the radio show #entity1 about",
    "originStr": "What is the radio show #entity1 about"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "created by Timoteo Jeffries ",
    "originStr": "created by Timoteo Jeffries "
   }
  ],
  "question": "What is the radio show created by Timoteo Jeffries, about",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN radio) (NN show)) (VP (VBN created) (PP (IN by) (NP (NNP Timoteo) (NNP Jeffries))) (, ,) (ADVP (RB about)))) (. ?)))",
  "entityNum": 2,
  "id": 260
 },
 {
  "taggedQuestion": "Where are all the protected areas near Bend, Oregon?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where are all the protected areas near Bend, Oregon",
    "originStr": "Where are all the protected areas near Bend, Oregon"
   }
  ],
  "question": "Where are all the protected areas near Bend, Oregon",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NP (PDT all) (DT the) (VBN protected) (NNS areas)) (PP (IN near) (NP (NNP Bend) (, ,) (NNP Oregon))))) (. ?)))",
  "entityNum": 1,
  "id": 261
 },
 {
  "taggedQuestion": "Was True Grit a novel of the western genre?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was True Grit a novel of the western genre",
    "originStr": "Was True Grit a novel of the western genre"
   }
  ],
  "question": "Was True Grit a novel of the western genre",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (JJ True) (NN Grit)) (NP (NP (DT a) (NN novel)) (PP (IN of) (NP (DT the) (JJ western) (NN genre)))) (. ?)))",
  "entityNum": 1,
  "id": 262
 },
 {
  "taggedQuestion": "Which notable series of <e0> is also the series of Short Trips: A day in the life ?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which notable series of Russell T Davies is",
    "originStr": "Which notable series of Russell T Davies is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the series of Short Trips : A day in the life",
    "originStr": "also the series of Short Trips : A day in the life"
   }
  ],
  "question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (S (NP (NP (WDT Which) (JJ notable) (NN series)) (PP (IN of) (NP (NN <e0>)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (JJ Short) (NNS Trips)))))) (: :) (NP (NP (DT A) (NN day)) (PP (IN in) (NP (DT the) (NN life)))) (. ?)))",
  "entityNum": 1,
  "id": 263
 },
 {
  "taggedQuestion": "Which battles were fought under the president when Chung Won Shik was the prime minister?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which battles were fought under #entity1",
    "originStr": "Which battles were fought under #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president when Chung Won Shik was the prime minister",
    "originStr": "the president when Chung Won Shik was the prime minister"
   }
  ],
  "question": "Which battles were fought under the president when Chung Won Shik was the prime minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS battles)) (VP (VBD were) (VP (VBN fought) (PP (IN under) (NP (NP (DT the) (NN president)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Chung) (NNP Won) (NNP Shik)) (VP (VBD was) (NP (DT the) (JJ prime) (NN minister)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 264
 },
 {
  "taggedQuestion": "Which office holder's resting place is in  Palo Alto, California and was succeeded by <e0> ?",
  "entityMap": {
   "<e0>": "Adrian A. Basora"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which office holder's resting place is in Palo Alto , California",
    "originStr": "Which office holder's resting place is in Palo Alto , California"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and was succeeded by Adrian A. Basora",
    "originStr": "and was succeeded by Adrian A. Basora"
   }
  ],
  "question": "Which office holder's resting place is in Palo Alto, California and was succeeded by Adrian A. Basora",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN office)) (SQ (NP (NP (NN holder) (POS 's)) (JJ resting) (NN place)) (VP (VP (VBZ is) (PP (IN in) (NP (NP (NNP Palo) (NNP Alto)) (, ,) (NP (NNP California))))) (CC and) (VP (VBD was) (VP (VBN succeeded) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 265
 },
 {
  "taggedQuestion": "Which movies have been published by <e0>?",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which movies have #entity1",
    "originStr": "which movies have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been published by Cinema International Corporation",
    "originStr": "been published by Cinema International Corporation"
   }
  ],
  "question": "which movies have been published by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN published) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 266
 },
 {
  "taggedQuestion": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of other destinations of #entity1",
    "originStr": "What is the total number of other destinations of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airlines whose one of the destinations is Mediterranean Sea",
    "originStr": "the airlines whose one of the destinations is Mediterranean Sea"
   }
  ],
  "question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NNS destinations)) (PP (IN of) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS destinations))))) (S (VP (VBZ is) (NP (NNP Mediterranean) (NNP Sea))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 267
 },
 {
  "taggedQuestion": "Count the academic discipline of the journals whose one of the academic discipline is Neuroimaging .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the total number of academic discipline of #entity1",
    "originStr": "Count the total number of academic discipline of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the journals whose one of the academic discipline is Neuroimaging",
    "originStr": "the journals whose one of the academic discipline is Neuroimaging"
   }
  ],
  "question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ academic) (NN discipline)) (PP (IN of) (NP (NP (DT the) (NNS journals)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ academic) (NN discipline))))) (S (VP (VBZ is) (NP (NNP Neuroimaging))))))))) (. .)))",
  "entityNum": 2,
  "id": 268
 },
 {
  "taggedQuestion": "List the award which have been won by both Charles LeMaire and Nick Park ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the award which have #entity1 Nick Park",
    "originStr": "List the award which have #entity1 Nick Park"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been won by both Charles LeMaire and",
    "originStr": "been won by both Charles LeMaire and"
   }
  ],
  "question": "List the award which have been won by both Charles LeMaire and Nick Park",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN award)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (NP (DT both) (NNP Charles) (NNP LeMaire)) (CC and) (NP (NNP Nick) (NNP Park))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 269
 },
 {
  "taggedQuestion": "What are some cities which have a Ferris wheel?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are some cities which",
    "originStr": "What are some cities which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have a Ferris wheel",
    "originStr": "have a Ferris wheel"
   }
  ],
  "question": "What are some cities which have a Ferris wheel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS cities)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT a) (NNP Ferris) (NN wheel))))))) (. ?)))",
  "entityNum": 1,
  "id": 270
 },
 {
  "taggedQuestion": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movie who has screenplay by Akiva Goldsman and",
    "originStr": "Name the movie who has screenplay by Akiva Goldsman and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is edited by Mark Stevens",
    "originStr": "is edited by Mark Stevens"
   }
  ],
  "question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ has) (NP (NN screenplay)) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))) (CC and) (VP (VBZ is) (VP (VBN edited) (PP (IN by) (NP (NNP Mark) (NNP Stevens)))))))))) (. .)))",
  "entityNum": 1,
  "id": 271
 },
 {
  "taggedQuestion": "Count the movies in Swedish language.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the movies in Swedish",
    "originStr": "Count the movies in Swedish"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "language",
    "originStr": "language"
   }
  ],
  "question": "Count the movies in Swedish language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (DT the) (NNS movies)) (PP (IN in) (NP (JJ Swedish) (NN language)))) (. .)))",
  "entityNum": 1,
  "id": 272
 },
 {
  "taggedQuestion": "Give me the total number of <e0> whose theme music composer is Julian Gingell and created by  Simon Fuller.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me the total number of television shows whose",
    "originStr": "Give me the total number of television shows whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "theme music composer is Julian Gingell and created by Simon Fuller",
    "originStr": "theme music composer is Julian Gingell and created by Simon Fuller"
   }
  ],
  "question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by Simon Fuller",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (NN theme) (NN music)) (NN composer)) (S (VP (VBZ is) (UCP (NP (NNP Julian) (NNP Gingell)) (CC and) (VP (VBN created) (PP (IN by) (NP (NNP Simon) (NNP Fuller)))))))))))) (. .)))",
  "entityNum": 1,
  "id": 273
 },
 {
  "taggedQuestion": "Which cloud platform of <e0> also provides services to 21Vianet ?",
  "entityMap": {
   "<e0>": "Google cloud connect"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which cloud platform of Google cloud connect",
    "originStr": "Which cloud platform of Google cloud connect"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also provides services to 21Vianet",
    "originStr": "also provides services to 21Vianet"
   }
  ],
  "question": "Which cloud platform of Google cloud connect also provides services to 21Vianet",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN cloud) (NN platform)) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (ADVP (RB also)) (VBZ provides) (NP (NNS services)) (PP (IN to) (NP (NN 21Vianet))))) (. ?)))",
  "entityNum": 1,
  "id": 274
 },
 {
  "taggedQuestion": "Name the office holder whose constituency is Haight-Ashbury.",
  "entityMap": {
   "<e0>": "Haight - Ashbury"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office holder whose",
    "originStr": "Name the office holder whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "constituency is Haight-Ashbury",
    "originStr": "constituency is Haight-Ashbury"
   }
  ],
  "question": "Name the office holder whose constituency is Haight-Ashbury",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (NN constituency)) (S (VP (VBZ is) (NP (NNP Haight) (HYPH -) (NNP Ashbury))))))) (. .)))",
  "entityNum": 1,
  "id": 275
 },
 {
  "taggedQuestion": "Name the loocation of Lekh Castle which is also the location of SamurAbsheron channel .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the location of Lekh Castle which",
    "originStr": "Name the location of Lekh Castle which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the location of SamurAbsheron channel",
    "originStr": "is also the location of SamurAbsheron channel"
   }
  ],
  "question": "Name the location of Lekh Castle which is also the location of SamurAbsheron channel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN loocation)) (PP (IN of) (NP (NP (NNP Lekh) (NNP Castle)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (NNP SamurAbsheron) (NN channel))))))))))) (. .)))",
  "entityNum": 1,
  "id": 276
 },
 {
  "taggedQuestion": "Count the families of the Animal kingdom.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of families of #entity1",
    "originStr": "Count the number of families of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the Animal kingdom",
    "originStr": "the Animal kingdom"
   }
  ],
  "question": "Count the number of families of the Animal kingdom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS families)) (PP (IN of) (NP (DT the) (NN Animal) (NN kingdom))))) (. .)))",
  "entityNum": 2,
  "id": 277
 },
 {
  "taggedQuestion": "What is the political party of the person succeeded by A.K. Singh?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the political party of #entity1",
    "originStr": "What is the political party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person succeeded by A.K. Singh",
    "originStr": "the person succeeded by A.K. Singh"
   }
  ],
  "question": "What is the political party of the person succeeded by A.K. Singh",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (DT the) (NN person)))) (VP (VBN succeeded) (PP (IN by) (NP (NNP A.K.) (NNP Singh))))) (. ?)))",
  "entityNum": 2,
  "id": 278
 },
 {
  "taggedQuestion": "Who is the head coach of the teams in Middlesbrough FC?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the head coach of #entity1",
    "originStr": "Who is the head coach of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the teams in Middlesbrough FC",
    "originStr": "the teams in Middlesbrough FC"
   }
  ],
  "question": "Who is the head coach of the teams in Middlesbrough FC",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NP (DT the) (NNS teams)) (PP (IN in) (NP (NNP Middlesbrough) (NNP FC))))))) (. ?)))",
  "entityNum": 2,
  "id": 279
 },
 {
  "taggedQuestion": "Which uni. did  <e0> and cyril hume both once went?",
  "entityMap": {
   "<e0>": "sidney c patridge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which uni ",
    "originStr": "To which uni "
   }
  ],
  "question": "To which uni. did sidney c patridge and cyril hume both once went",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (WHNP (WDT Which) (NN uni)) (. .)))(ROOT (S (VP (VBD did) (NP (NP (ADD <e0>)) (CC and) (NP (NP (NNP cyril) (NNP hume)) (VP (ADVP (DT both) (IN once)) (VBN went))))) (. ?)))",
  "entityNum": 1,
  "id": 280
 },
 {
  "taggedQuestion": "People in the <e0> follow which religion?",
  "entityMap": {
   "<e0>": "royal Thai army"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 follow which religion",
    "originStr": "#entity1 follow which religion"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "People in the royal Thai army",
    "originStr": "People in the royal Thai army"
   }
  ],
  "question": "People in the royal Thai army follow which religion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS People)) (PP (IN in) (NP (DT the) (NN <e0>)))) (VP (VB follow) (WHNP (WDT which) (NN religion))) (. ?)))",
  "entityNum": 2,
  "id": 281
 },
 {
  "taggedQuestion": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
    "originStr": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici"
   }
  ],
  "question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Lucrezia) (NNP Tornabuoni)) (NP (NP (DT the) (NN mother)) (PP (IN of) (NP (NP (NNP Lorenzo) (NNP de) (POS ')) (NNP Medici)))) (. ?)))",
  "entityNum": 1,
  "id": 282
 },
 {
  "taggedQuestion": "Who are the producers of the movies  which has music by Gary Chang ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who are the producers of #entity1",
    "originStr": "Who are the producers of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the movies which has music by Gary Chang",
    "originStr": "the movies which has music by Gary Chang"
   }
  ],
  "question": "Who are the producers of the movies which has music by Gary Chang",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NN music)) (PP (IN by) (NP (NNP Gary) (NNP Chang)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 283
 },
 {
  "taggedQuestion": "Where was Special 26 recorded ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Special 26 recorded",
    "originStr": "Where was Special 26 recorded"
   }
  ],
  "question": "Where was Special 26 recorded",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (JJ Special) (NP (CD 26))) (VP (VBN recorded))) (. ?)))",
  "entityNum": 1,
  "id": 284
 },
 {
  "taggedQuestion": "How many movies music composers are associated with Demis Roussos ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many movies music composers are #entity1",
    "originStr": "How many movies music composers are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "associated with Demis Roussos",
    "originStr": "associated with Demis Roussos"
   }
  ],
  "question": "How many movies music composers are associated with Demis Roussos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NP (NNS movies)) (NP (NN music) (NNS composers)))) (SQ (VBP are) (VP (VBN associated) (PP (IN with) (NP (NNP Demis) (NNP Roussos))))) (. ?)))",
  "entityNum": 2,
  "id": 285
 },
 {
  "taggedQuestion": "Which nation did <e0> owe his allegiance?",
  "entityMap": {
   "<e0>": "David Animle Hanses"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which nation did",
    "originStr": "To which nation did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "David Animle Hanses owe his allegiance",
    "originStr": "David Animle Hanses owe his allegiance"
   }
  ],
  "question": "To which nation did David Animle Hanses owe his allegiance",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN nation)) (SQ (VP (VBD did) (NP (ADD <e0>)) (S (VP (VB owe) (NP (PRP$ his) (NN allegiance)))))) (. ?)))",
  "entityNum": 1,
  "id": 286
 },
 {
  "taggedQuestion": "What is the alma mater of the actors of The God Who Wasn't There ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the alma mater of #entity1",
    "originStr": "What is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the actors of The God Who Was n't There",
    "originStr": "the actors of The God Who Was n't There"
   }
  ],
  "question": "What is the alma mater of the actors of The God Who Wasn't There",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NNS actors)) (PP (IN of) (NP (NP (DT The) (NNP God)) (SBAR (WHNP (WP Who)) (S (VP (VBD Was) (RB n't) (NP (EX There))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 287
 },
 {
  "taggedQuestion": "List some musicians associated with <e0>?",
  "entityMap": {
   "<e0>": "famous guitar players"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List some musicians associated with #entity1",
    "originStr": "List some musicians associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "famous guitar players",
    "originStr": "famous guitar players"
   }
  ],
  "question": "List some musicians associated with famous guitar players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT some) (NNS musicians)) (VP (VBN associated) (PP (IN with) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 288
 },
 {
  "taggedQuestion": "What are the airlines whose hub airport is operated by the <e0>?",
  "entityMap": {
   "<e0>": "Los Angeles World Airports"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the airlines whose hub airport is #entity1",
    "originStr": "What are the airlines whose hub airport is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "operated by the Los Angeles World Airports",
    "originStr": "operated by the Los Angeles World Airports"
   }
  ],
  "question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NML (NN hub)) (NN airport)) (S (VP (VBZ is) (VP (VBN operated) (PP (IN by) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 289
 },
 {
  "taggedQuestion": "Which company's cars are assembled in Colombia?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which company's cars are #entity1",
    "originStr": "Which company's cars are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "assembled in Colombia",
    "originStr": "assembled in Colombia"
   }
  ],
  "question": "Which company's cars are assembled in Colombia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN company) (POS 's)) (NNS cars)) (SQ (VBP are) (VP (VBN assembled) (PP (IN in) (NP (NNP Colombia))))) (. ?)))",
  "entityNum": 2,
  "id": 290
 },
 {
  "taggedQuestion": "Who directed The Haunted House ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who directed The Haunted House",
    "originStr": "Who directed The Haunted House"
   }
  ],
  "question": "Who directed The Haunted House",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD directed) (NP (DT The) (NNP Haunted) (NNP House)))) (. ?)))",
  "entityNum": 1,
  "id": 291
 },
 {
  "taggedQuestion": "Count all the different purposes followed by the different NGOs.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count all the different purposes followed by #entity1",
    "originStr": "Count all the different purposes followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the different NGOs",
    "originStr": "the different NGOs"
   }
  ],
  "question": "Count all the different purposes followed by the different NGOs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ different) (NNS purposes)) (VP (VBN followed) (PP (IN by) (NP (DT the) (JJ different) (NNPS NGOs)))))) (. .)))",
  "entityNum": 2,
  "id": 292
 },
 {
  "taggedQuestion": "The players born in Bellaire, Ohio have played for which team?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": 10,
    "entityID": -1,
    "end": 12,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which",
    "str": "which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "The players born",
    "originStr": "The players born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in Bellaire , Ohio have played for which team",
    "originStr": "in Bellaire , Ohio have played for which team"
   }
  ],
  "question": "The players born in Bellaire, Ohio have played for which team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (NP (DT The) (NNS players)) (VP (VBN born) (PP (IN in) (NP (NNP Bellaire))))) (, ,) (NP (NNP Ohio)) (VP (VBP have) (VP (VBN played) (WHPP (IN for) (WHNP (WDT which) (NN team))))) (. ?)))",
  "entityNum": 1,
  "id": 293
 },
 {
  "taggedQuestion": "What is the common ideology followed by Katyayana and <e0> ?",
  "entityMap": {
   "<e0>": "Palang Dharma Party"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the common ideology followed by Katyayana and Palang Dharma Party",
    "originStr": "is the common ideology followed by Katyayana and Palang Dharma Party"
   }
  ],
  "question": "What is the common ideology followed by Katyayana and Palang Dharma Party",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJ common) (NN ideology)) (VP (VBN followed) (PP (IN by) (NP (NP (NNP Katyayana)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 294
 },
 {
  "taggedQuestion": "Count the tenants of MasterCard Centre.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the tenants of MasterCard Centre",
    "originStr": "Count the tenants of MasterCard Centre"
   }
  ],
  "question": "Count the tenants of MasterCard Centre",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MasterCard) (NNP Centre))))) (. .)))",
  "entityNum": 1,
  "id": 295
 },
 {
  "taggedQuestion": "Who are starring in the movies written by Mark Sandrich ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are starring in #entity1",
    "originStr": "who are starring in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the movies written by Mark Sandrich",
    "originStr": "the movies written by Mark Sandrich"
   }
  ],
  "question": "who are starring in the movies written by Mark Sandrich",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (VP (VBG starring) (PP (IN in) (NP (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Mark) (NNP Sandrich))))))))) (. ?)))",
  "entityNum": 2,
  "id": 296
 },
 {
  "taggedQuestion": "Count the religions followed by BJP members.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of religions #entity1",
    "originStr": "Count the number of religions #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "followed by BJP members",
    "originStr": "followed by BJP members"
   }
  ],
  "question": "Count the number of religions followed by BJP members",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NNP BJP) (NNS members)))))) (. .)))",
  "entityNum": 2,
  "id": 297
 },
 {
  "taggedQuestion": "What is the mascot of the rival school of <e0>?",
  "entityMap": {
   "<e0>": "Sullivan Central High"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the mascot of #entity1",
    "originStr": "What is the mascot of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rival school of Sullivan Central High",
    "originStr": "the rival school of Sullivan Central High"
   }
  ],
  "question": "What is the mascot of the rival school of Sullivan Central High",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 298
 },
 {
  "taggedQuestion": "What award has been awarded to both Dion Beebe and Charles LeMaire?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What award has",
    "originStr": "What award has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "been awarded to both Dion Beebe and Charles LeMaire",
    "originStr": "been awarded to both Dion Beebe and Charles LeMaire"
   }
  ],
  "question": "What award has been awarded to both Dion Beebe and Charles LeMaire",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (NP (DT both) (NNP Dion) (NNP Beebe)) (CC and) (NP (NNP Charles) (NNP LeMaire)))))))) (. ?)))",
  "entityNum": 1,
  "id": 299
 },
 {
  "taggedQuestion": "What is the birth name  of Putri Raemawasti ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the birth name of Putri Raemawasti",
    "originStr": "What is the birth name of Putri Raemawasti"
   }
  ],
  "question": "What is the birth name of Putri Raemawasti",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birth) (NN name)) (PP (IN of) (NP (NNP Putri) (NNP Raemawasti))))) (. ?)))",
  "entityNum": 1,
  "id": 300
 },
 {
  "taggedQuestion": "What is the party of the politicians whose children is Sanjay Gandhi ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the party of #entity1",
    "originStr": "What is the party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the politicians whose children is Sanjay Gandhi",
    "originStr": "the politicians whose children is Sanjay Gandhi"
   }
  ],
  "question": "What is the party of the politicians whose children is Sanjay Gandhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN party)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBZ is) (NP (NNP Sanjay) (NNP Gandhi))))))))) (. ?)))",
  "entityNum": 2,
  "id": 301
 },
 {
  "taggedQuestion": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the tenants of MAsterCard center wich is",
    "originStr": "Name the tenants of MAsterCard center wich is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the draft team of Antoine Bibeau",
    "originStr": "also the draft team of Antoine Bibeau"
   }
  ],
  "question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MAsterCard) (NN center) (NN wich)))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NNP Antoine) (NNP Bibeau))))) (. .)))",
  "entityNum": 1,
  "id": 302
 },
 {
  "taggedQuestion": "What is the number of occupation of the people who died in tampa bay, florida?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the number of occupation of #entity1",
    "originStr": "What is the number of occupation of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people who died in tampa bay , florida",
    "originStr": "the people who died in tampa bay , florida"
   }
  ],
  "question": "What is the number of occupation of the people who died in tampa bay, florida",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN occupation)) (PP (IN of) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP tampa) (NN bay) (, ,) (NN florida)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 303
 },
 {
  "taggedQuestion": "Who was the <e0> who also served as a governor of Indiana Territory?",
  "entityMap": {
   "<e0>": "United States president"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the United States president who",
    "originStr": "Who was the United States president who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also served as a governor of Indiana Territory",
    "originStr": "also served as a governor of Indiana Territory"
   }
  ],
  "question": "Who was the United States president who also served as a governor of Indiana Territory",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBD served) (PP (IN as) (NP (NP (DT a) (NN governor)) (PP (IN of) (NP (NNP Indiana) (NNP Territory)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 304
 },
 {
  "taggedQuestion": "List the people who were born in Gelnhausen and graduated from Pepperdine University?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the people who were born in Gelnhausen and",
    "originStr": "List the people who were born in Gelnhausen and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "graduated from Pepperdine University",
    "originStr": "graduated from Pepperdine University"
   }
  ],
  "question": "List the people who were born in Gelnhausen and graduated from Pepperdine University",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Gelnhausen))))) (CC and) (VP (VBD graduated) (PP (IN from) (NP (NNP Pepperdine) (NNP University))))))))) (. ?)))",
  "entityNum": 1,
  "id": 305
 },
 {
  "taggedQuestion": "Musical artists who are associated with <e0> were born where ?",
  "entityMap": {
   "<e0>": "Ren & Angela"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Musical artists #entity1 Angela were born where",
    "originStr": "Musical artists #entity1 Angela were born where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who are associated with Ren &",
    "originStr": "who are associated with Ren &"
   }
  ],
  "question": "Musical artists who are associated with Ren & Angela were born where",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (JJ Musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NN <e0>)))))))) (VP (VBD were) (VP (VBN born) (FRAG (WHADVP (WRB where))))) (. ?)))",
  "entityNum": 2,
  "id": 306
 },
 {
  "taggedQuestion": "What religion do the Wickramabahu Centeral College and Neungin High School both follow?",
  "entityMap": {
   "<e0>": "Wickramabahu Centeral College Neungin High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What religion do",
    "originStr": "What religion do"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Wickramabahu Centeral College and Neungin High School both follow",
    "originStr": "the Wickramabahu Centeral College and Neungin High School both follow"
   }
  ],
  "question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (DT the) (NNP Wickramabahu) (NNP Centeral) (NNP College) (CC and) (NNP Neungin) (NNP High) (NNP School)) (VP (ADVP (CC both)) (VB follow))) (. ?)))",
  "entityNum": 1,
  "id": 307
 },
 {
  "taggedQuestion": "Who designed the <e0>?",
  "entityMap": {
   "<e0>": "language integrated query"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who designed the language integrated query",
    "originStr": "Who designed the language integrated query"
   }
  ],
  "question": "Who designed the language integrated query",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 308
 },
 {
  "taggedQuestion": "Name the debut team of Dan Otero .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the debut team of Dan Otero",
    "originStr": "Name the debut team of Dan Otero"
   }
  ],
  "question": "Name the debut team of Dan Otero",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NNP Dan) (NNP Otero))))) (. .)))",
  "entityNum": 1,
  "id": 309
 },
 {
  "taggedQuestion": "Who started at the pole position in both <e0> and the 94 spanish one?",
  "entityMap": {
   "<e0>": "1997 canadian grand prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who started at the pole position in both 1997 canadian grand prix and",
    "originStr": "Who started at the pole position in both 1997 canadian grand prix and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the 94 spanish one",
    "originStr": "the 94 spanish one"
   }
  ],
  "question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD started) (PP (IN at) (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (CC both) (NP (ADD <e0>)) (CC and) (NP (DT the) (CD 94) (NNP spanish)))) (NP-TMP (CD one)))))) (. ?)))",
  "entityNum": 1,
  "id": 310
 },
 {
  "taggedQuestion": "Who founded the Not on our Watch NGO?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who founded the Not on our Watch NGO",
    "originStr": "Who founded the Not on our Watch NGO"
   }
  ],
  "question": "Who founded the Not on our Watch NGO",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD founded) (NP (DT the) (RB Not)) (PP (IN on) (NP (PRP$ our) (NNP Watch) (NNP NGO))))) (. ?)))",
  "entityNum": 1,
  "id": 311
 },
 {
  "taggedQuestion": "What is the name of the artist which worked on the subsequent work of <e0> ?",
  "entityMap": {
   "<e0>": "Ella Loves Cole"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the name of #entity1",
    "originStr": "What is the name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artist which worked on the subsequent work of Ella Loves Cole",
    "originStr": "the artist which worked on the subsequent work of Ella Loves Cole"
   }
  ],
  "question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WDT which)) (S (VP (VBD worked) (PP (IN on) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 312
 },
 {
  "taggedQuestion": "Which company owns Sony bank ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which company owns Sony bank",
    "originStr": "Which company owns Sony bank"
   }
  ],
  "question": "Which company owns Sony bank",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ owns) (NP (NNP Sony) (NN bank)))) (. ?)))",
  "entityNum": 1,
  "id": 313
 },
 {
  "taggedQuestion": "What state was Cyrus Mann born in, and has the famous Downriver ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What state was",
    "originStr": "What state was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Cyrus Mann born in , and has the famous Downriver",
    "originStr": "Cyrus Mann born in , and has the famous Downriver"
   }
  ],
  "question": "What state was Cyrus Mann born in, and has the famous Downriver",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN state)) (SQ (VBD was) (NP (NNP Cyrus) (NNP Mann)) (VP (VP (VBN born) (PP (IN in))) (, ,) (CC and) (VP (VBZ has) (NP (DT the) (JJ famous) (NNP Downriver))))) (. ?)))",
  "entityNum": 1,
  "id": 314
 },
 {
  "taggedQuestion": "Who is a religious figure titled superior general?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is a religious figure titled superior general",
    "originStr": "Who is a religious figure titled superior general"
   }
  ],
  "question": "Who is a religious figure titled superior general",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (DT a) (JJ religious) (NN figure)) (VP (VBN titled) (S (ADJP (JJ superior) (JJ general))))) (. ?)))",
  "entityNum": 1,
  "id": 315
 },
 {
  "taggedQuestion": "List the employments of people who died in Tampa, Florida.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the employments of people #entity1",
    "originStr": "List the employments of people #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who died in Tampa , Florida",
    "originStr": "who died in Tampa , Florida"
   }
  ],
  "question": "List the employments of people who died in Tampa, Florida",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS employments)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Tampa) (, ,) (NNP Florida)))))))))) (. .)))",
  "entityNum": 2,
  "id": 316
 },
 {
  "taggedQuestion": "What are some <e0> known for?",
  "entityMap": {
   "<e0>": "famous veterinary physicians"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some famous veterinary physicians #entity1 for",
    "originStr": "What are some famous veterinary physicians #entity1 for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "known",
    "originStr": "known"
   }
  ],
  "question": "What are some famous veterinary physicians known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NN <e0>)) (VP (VBN known) (PP (IN for)))) (. ?)))",
  "entityNum": 2,
  "id": 317
 },
 {
  "taggedQuestion": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the movies edited by Julian Doyle in which",
    "originStr": "List the movies edited by Julian Doyle in which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "music was composed by Geoffrey Brugon",
    "originStr": "music was composed by Geoffrey Brugon"
   }
  ],
  "question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS movies)) (VP (VBN edited) (PP (IN by) (NP (NP (NNP Julian) (NNP Doyle)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VBN composed) (PP (IN by) (NP (NNP Geoffrey) (NNP Brugon)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 318
 },
 {
  "taggedQuestion": "Name the children of the person who is the star of <e0> .",
  "entityMap": {
   "<e0>": "The Weathered Underground"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the children of #entity1",
    "originStr": "Name the children of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who is the star of The Weathered Underground",
    "originStr": "the person who is the star of The Weathered Underground"
   }
  ],
  "question": "Name the children of the person who is the star of The Weathered Underground",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NN star)) (PP (IN of) (NP (ADD <e0>))))))))))) (. .)))",
  "entityNum": 2,
  "id": 319
 },
 {
  "taggedQuestion": "Which owner of Chelsea F.C also owns Evraz ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which owner of Chelsea F.C also",
    "originStr": "Which owner of Chelsea F.C also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "owns Evraz",
    "originStr": "owns Evraz"
   }
  ],
  "question": "Which owner of Chelsea F.C also owns Evraz",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN owner) (PP (IN of) (NP (NNP Chelsea) (NNP F.C))))) (SQ (VP (ADVP (RB also)) (VBZ owns) (NP (NNP Evraz)))) (. ?)))",
  "entityNum": 1,
  "id": 320
 },
 {
  "taggedQuestion": "Did <e0> had Nelson Mandela as a commander?",
  "entityMap": {
   "<e0>": "Umkhonto we Sizwe"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
    "originStr": "Did Umkhonto we Sizwe had Nelson Mandela as a commander"
   }
  ],
  "question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VBD Did) (SBAR (S (NP (ADD <e0>)) (VP (VBD had) (NP (NP (NNP Nelson) (NNP Mandela)) (PP (IN as) (NP (DT a) (NN commander)))))))) (. ?)))",
  "entityNum": 1,
  "id": 321
 },
 {
  "taggedQuestion": "Name the office holder with associate as <e0> and has a kid named Augustus.",
  "entityMap": {
   "<e0>": "Marcus Calpurnius Bibulus"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office holder with associate as Marcus Calpurnius Bibulus and",
    "originStr": "Name the office holder with associate as Marcus Calpurnius Bibulus and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has a kid named Augustus",
    "originStr": "has a kid named Augustus"
   }
  ],
  "question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NN associate)) (PP (IN as) (NP (ADD <e0>)))))) (CC and) (VP (VBZ has) (NP (NP (DT a) (NN kid)) (VP (VBN named) (NP (NNP Augustus)))))) (. .)))",
  "entityNum": 1,
  "id": 322
 },
 {
  "taggedQuestion": "What are the movies whose screenplay is done by Eric Roth?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the movies #entity1",
    "originStr": "What are the movies #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose screenplay is done by Eric Roth",
    "originStr": "whose screenplay is done by Eric Roth"
   }
  ],
  "question": "What are the movies whose screenplay is done by Eric Roth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Eric) (NNP Roth))))))))) (. ?)))",
  "entityNum": 2,
  "id": 323
 },
 {
  "taggedQuestion": "What is the total number of writers whose singles are recorded in Miami?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of writers whose #entity1",
    "originStr": "What is the total number of writers whose #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "singles are recorded in Miami",
    "originStr": "singles are recorded in Miami"
   }
  ],
  "question": "What is the total number of writers whose singles are recorded in Miami",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS writers)) (SBAR (WHNP (WP$ whose) (NNS singles)) (S (VP (VBP are) (VP (VBN recorded) (PP (IN in) (NP (NNP Miami))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 324
 },
 {
  "taggedQuestion": "What religions are followed by members of the societies whose architectural influences is  seen on the Sanggar Agung ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What religions are followed by members of #entity1",
    "originStr": "What religions are followed by members of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the societies whose architectural influences can be seen on the Sanggar Agung",
    "originStr": "the societies whose architectural influences can be seen on the Sanggar Agung"
   }
  ],
  "question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS members)) (PP (IN of) (NP (NP (DT the) (NNS societies)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ architectural) (NNS influences)) (VP (VBZ is) (VP (VBN seen) (PP (IN on) (NP (DT the) (NNP Sanggar) (NNP Agung))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 325
 },
 {
  "taggedQuestion": "Who is the producer of album which has the song Money?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the producer of album",
    "originStr": "Who is the producer of album"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which has the song Money",
    "originStr": "which has the song Money"
   }
  ],
  "question": "Who is the producer of album which has the song Money",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NN album)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN song) (NN Money))))))))) (. ?)))",
  "entityNum": 1,
  "id": 326
 },
 {
  "taggedQuestion": "List the <e0> with theme music given by Ron Grainer?",
  "entityMap": {
   "<e0>": "Sci-fi TV shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the Sci-fi TV shows with theme #entity1",
    "originStr": "List the Sci-fi TV shows with theme #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "music given by Ron Grainer",
    "originStr": "music given by Ron Grainer"
   }
  ],
  "question": "List the Sci-fi TV shows with theme music given by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN <e0>)) (PP (IN with) (NP (NN theme) (NN music)))) (PP (VBN given) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))) (. ?)))",
  "entityNum": 2,
  "id": 327
 },
 {
  "taggedQuestion": "What is the company to which Fusajiro Yamauchi proprietor to ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is #entity1 to",
    "originStr": "What is #entity1 to"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company to which Fusajiro Yamauchi proprietor",
    "originStr": "the company to which Fusajiro Yamauchi proprietor"
   }
  ],
  "question": "What is the company to which Fusajiro Yamauchi proprietor to",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN company)) (WHPP (TO to) (WHNP (WDT which)))) (PP (NP (NML (NNP Fusajiro) (NNP Yamauchi)) (NN proprietor)) (IN to)))) (. ?)))",
  "entityNum": 2,
  "id": 328
 },
 {
  "taggedQuestion": "Who is the writer of <e0> ?",
  "entityMap": {
   "<e0>": "mark twain Tonight"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the writer of mark twain Tonight",
    "originStr": "Who is the writer of mark twain Tonight"
   }
  ],
  "question": "Who is the writer of mark twain Tonight",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 329
 },
 {
  "taggedQuestion": "How many members are there in the <e0>?",
  "entityMap": {
   "<e0>": "European Go Federation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many members are there in the",
    "originStr": "How many members are there in the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "European Go Federation",
    "originStr": "European Go Federation"
   }
  ],
  "question": "How many members are there in the European Go Federation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS members)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 330
 },
 {
  "taggedQuestion": "Was Kevin Rudd the PM of Julia Gillard?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Kevin Rudd the PM of Julia Gillard",
    "originStr": "Was Kevin Rudd the PM of Julia Gillard"
   }
  ],
  "question": "Was Kevin Rudd the PM of Julia Gillard",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Kevin) (NNP Rudd)) (NP (NP (DT the) (NN PM)) (PP (IN of) (NP (NNP Julia) (NNP Gillard)))) (. ?)))",
  "entityNum": 1,
  "id": 331
 },
 {
  "taggedQuestion": "<e0> and Job Durfee have based their political career in which US state?",
  "entityMap": {
   "<e0>": "Daniel L D Granger"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Daniel L D Granger and Job Durfee have based their political career",
    "originStr": "Daniel L D Granger and Job Durfee have based their political career"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which US state",
    "originStr": "in which US state"
   }
  ],
  "question": "Daniel L D Granger and Job Durfee have based their political career in which US state",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (ADD <e0>)) (CC and) (NP (NNP Job) (NNP Durfee))) (VP (VBP have) (VP (VBN based) (NP (NP (PRP$ their) (JJ political) (NN career)) (WHPP (IN in) (WHNP (WDT which) (NNP US) (NN state)))))) (. ?)))",
  "entityNum": 1,
  "id": 332
 },
 {
  "taggedQuestion": "What is the mascot of the handball teams in the <e0>?",
  "entityMap": {
   "<e0>": "Turkish Handball Super League"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the mascot of #entity1",
    "originStr": "What is the mascot of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the handball teams in the Turkish Handball Super League",
    "originStr": "the handball teams in the Turkish Handball Super League"
   }
  ],
  "question": "What is the mascot of the handball teams in the Turkish Handball Super League",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (NN handball) (NNS teams)) (PP (IN in) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 333
 },
 {
  "taggedQuestion": "What city was recorded in Live in detroit which is also the official residence of ken Holland ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What city was recorded in Live in detroit which",
    "originStr": "What city was recorded in Live in detroit which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the official residence of ken Holland",
    "originStr": "is also the official residence of ken Holland"
   }
  ],
  "question": "What city was recorded in Live in detroit which is also the official residence of ken Holland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VBD was) (VP (VBN recorded) (PP (IN in) (ADJP (JJ Live))) (PP (IN in) (NP (NP (NN detroit)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ official) (NN residence)) (PP (IN of) (NP (NNP ken) (NNP Holland))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 334
 },
 {
  "taggedQuestion": "Marika Gombitov makes songs in which languages?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 songs in which languages",
    "originStr": "#entity1 songs in which languages"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Marika Gombitov makes",
    "originStr": "Marika Gombitov makes"
   }
  ],
  "question": "Marika Gombitov makes songs in which languages",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Marika) (NNP Gombitov)) (VP (VBZ makes) (NP (NP (NNS songs)) (WHPP (IN in) (WHNP (WDT which) (NNS languages))))) (. ?)))",
  "entityNum": 2,
  "id": 335
 },
 {
  "taggedQuestion": "What are some musical artists associated with the ones signed up with EMI?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some musical artists associated with #entity1",
    "originStr": "What are some musical artists associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones signed up with EMI",
    "originStr": "the ones signed up with EMI"
   }
  ],
  "question": "What are some musical artists associated with the ones signed up with EMI",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (JJ musical) (NNS artists)) (VP (VBN associated) (SBAR (IN with) (S (NP (DT the) (NNS ones)) (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI)))))))) (. ?)))",
  "entityNum": 2,
  "id": 336
 },
 {
  "taggedQuestion": "Name the river which flows through the closest city of Mount Raimer .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the river which #entity1",
    "originStr": "Name the river which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "flows through the closest city of Mount Raimer",
    "originStr": "flows through the closest city of Mount Raimer"
   }
  ],
  "question": "Name the river which flows through the closest city of Mount Raimer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN through) (NP (NP (DT the) (JJS closest) (NN city)) (PP (IN of) (NP (NNP Mount) (NNP Raimer)))))))))) (. .)))",
  "entityNum": 2,
  "id": 337
 },
 {
  "taggedQuestion": "Name the scientist whose supervisor also supervised Mary Ainsworth.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the scientist whose #entity1",
    "originStr": "Name the scientist whose #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "supervisor also supervised Mary Ainsworth",
    "originStr": "supervisor also supervised Mary Ainsworth"
   }
  ],
  "question": "Name the scientist whose supervisor also supervised Mary Ainsworth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NML (NN supervisor))) (S (ADVP (RB also)) (VP (VBD supervised) (NP (NNP Mary) (NNP Ainsworth))))))) (. .)))",
  "entityNum": 2,
  "id": 338
 },
 {
  "taggedQuestion": "What are some relatives of armymen who died in Germany?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some relatives of #entity1",
    "originStr": "What are some relatives of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "armymen who died in Germany",
    "originStr": "armymen who died in Germany"
   }
  ],
  "question": "What are some relatives of armymen who died in Germany",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS relatives)) (PP (IN of) (NP (NP (NNS armymen)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Germany)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 339
 },
 {
  "taggedQuestion": "Deion sanders and Hinkey haines debuted their career with which common team?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Deion sanders and Hinkey haines debuted their career with",
    "originStr": "Deion sanders and Hinkey haines debuted their career with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which common team",
    "originStr": "which common team"
   }
  ],
  "question": "Deion sanders and Hinkey haines debuted their career with which common team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Deion) (NNP sanders)) (CC and) (NP (NNP Hinkey) (NNS haines))) (VP (VBD debuted) (NP (PRP$ their) (NN career)) (PP (IN with) (NP (WDT which) (JJ common) (NN team)))) (. ?)))",
  "entityNum": 1,
  "id": 340
 },
 {
  "taggedQuestion": "Which garrison of <e0> is also the route end of Mumbai Vadodara Express ?",
  "entityMap": {
   "<e0>": "East Indies Station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which garrison of East Indies Station is",
    "originStr": "Which garrison of East Indies Station is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the route end of Mumbai Vadodara Express",
    "originStr": "also the route end of Mumbai Vadodara Express"
   }
  ],
  "question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN garrison) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NNP Mumbai) (NNP Vadodara) (NNP Express))))) (. ?)))",
  "entityNum": 1,
  "id": 341
 },
 {
  "taggedQuestion": "Which political party does Virendra Kataria belongs ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which political party does Virendra Kataria belongs",
    "originStr": "To which political party does Virendra Kataria belongs"
   }
  ],
  "question": "To which political party does Virendra Kataria belongs",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ political) (NN party)) (SQ (VBZ does) (NP (NNP Virendra) (NNP Kataria)) (VP (VBZ belongs))) (. ?)))",
  "entityNum": 1,
  "id": 342
 },
 {
  "taggedQuestion": "Copley Medal has been awarded to which scientists?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 awarded to which scientists",
    "originStr": "#entity1 awarded to which scientists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Copley Medal has been",
    "originStr": "Copley Medal has been"
   }
  ],
  "question": "Copley Medal has been awarded to which scientists",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Copley) (NNP Medal)) (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (WDT which) (NNS scientists)))))) (. ?)))",
  "entityNum": 2,
  "id": 343
 },
 {
  "taggedQuestion": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of awards whose presenter 's headquarters is Beverly Hills , California ",
    "originStr": "What is the total number of awards whose presenter 's headquarters is Beverly Hills , California "
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "'s headquarters is Beverly Hills , California",
    "originStr": "'s headquarters is Beverly Hills , California"
   }
  ],
  "question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS awards)) (SBAR (WHNP (WP$ whose) (NP (NN presenter) (POS 's)) (NN headquarters)) (S (VP (VBZ is) (NP (NP (NNP Beverly) (NNP Hills)) (, ,) (NP (NNP California)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 344
 },
 {
  "taggedQuestion": "Who is the narrator of <e0> ?",
  "entityMap": {
   "<e0>": "The Price of Beauty"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the narrator of The Price of Beauty",
    "originStr": "Who is the narrator of The Price of Beauty"
   }
  ],
  "question": "Who is the narrator of The Price of Beauty",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 345
 },
 {
  "taggedQuestion": "Does Dan River flow into the Jordan Valley?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Dan River flow into the Jordan Valley",
    "originStr": "Does Dan River flow into the Jordan Valley"
   }
  ],
  "question": "Does Dan River flow into the Jordan Valley",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Dan) (NNP River)) (VP (VB flow) (PP (IN into) (NP (DT the) (NNP Jordan) (NNP Valley)))) (. ?)))",
  "entityNum": 1,
  "id": 346
 },
 {
  "taggedQuestion": "Who is the producer of the device which is the operating system of Now TV  ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the producer of #entity1",
    "originStr": "Who is the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the device which is the operating system of Now TV",
    "originStr": "the device which is the operating system of Now TV"
   }
  ],
  "question": "Who is the producer of the device which is the operating system of Now TV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN device)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN operating) (NN system)) (PP (IN of) (NP (ADVP (RB Now)) (NN TV))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 347
 },
 {
  "taggedQuestion": "How many artists have collaborated with <e0>?",
  "entityMap": {
   "<e0>": "famous guitar players"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many artists have collaborated #entity1",
    "originStr": "How many artists have collaborated #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "with famous guitar players",
    "originStr": "with famous guitar players"
   }
  ],
  "question": "How many artists have collaborated with famous guitar players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS artists)) (VP (VBP have) (VP (VBN collaborated) (PP (IN with) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 348
 },
 {
  "taggedQuestion": "How many politicians live in India?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many politicians live",
    "originStr": "How many politicians live"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in India",
    "originStr": "in India"
   }
  ],
  "question": "How many politicians live in India",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS politicians)) (VP (VBP live) (PP (IN in) (NP (NNP India))))) (. ?)))",
  "entityNum": 1,
  "id": 349
 },
 {
  "taggedQuestion": "What is the base currency of the country which operates the Marion Dufresne?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the base currency of #entity1",
    "originStr": "What is the base currency of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country which operates the Marion Dufresne",
    "originStr": "the country which operates the Marion Dufresne"
   }
  ],
  "question": "What is the base currency of the country which operates the Marion Dufresne",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBZ operates) (NP (DT the) (NNP Marion) (NNP Dufresne))))))))) (. ?)))",
  "entityNum": 2,
  "id": 350
 },
 {
  "taggedQuestion": "What is the region served by the governor of Stephen L.R. McNichols ?",
  "entityMap": {
   "<e0>": "Stephen L. R. McNichols"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the region served by #entity1",
    "originStr": "What is the region served by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the governor of Stephen L.R. McNichols",
    "originStr": "the governor of Stephen L.R. McNichols"
   }
  ],
  "question": "What is the region served by the governor of Stephen L.R. McNichols",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN region)) (VP (VBN served) (PP (IN by) (NP (NP (DT the) (NN governor)) (PP (IN of) (NP (NNP Stephen) (NNP L.R.) (NNP McNichols))))))) (. ?)))",
  "entityNum": 2,
  "id": 351
 },
 {
  "taggedQuestion": "Who operates Liverpool Playhouse ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who operates Liverpool Playhouse",
    "originStr": "Who operates Liverpool Playhouse"
   }
  ],
  "question": "Who operates Liverpool Playhouse",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ operates) (NP (NNP Liverpool) (NNP Playhouse)))) (. ?)))",
  "entityNum": 1,
  "id": 352
 },
 {
  "taggedQuestion": "Who has composed songs produced by Terry Melcher?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who has composed songs #entity1",
    "originStr": "Who has composed songs #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "produced by Terry Melcher",
    "originStr": "produced by Terry Melcher"
   }
  ],
  "question": "Who has composed songs produced by Terry Melcher",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN composed) (NP (NP (NNS songs)) (VP (VBN produced) (PP (IN by) (NP (NNP Terry) (NNP Melcher)))))))) (. ?)))",
  "entityNum": 2,
  "id": 353
 },
 {
  "taggedQuestion": "Which series does <e0> to ?",
  "entityMap": {
   "<e0>": "Lost special belong"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which series does Lost special belong to",
    "originStr": "To which series does Lost special belong to"
   }
  ],
  "question": "To which series does Lost special belong to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VP (VBZ does) (NP (ADD <e0>)) (S (VP (TO to))))) (. ?)))",
  "entityNum": 1,
  "id": 354
 },
 {
  "taggedQuestion": "How many albums did the maker of The Band produce?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many albums did #entity1 produce",
    "originStr": "How many albums did #entity1 produce"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the maker of The Band",
    "originStr": "the maker of The Band"
   }
  ],
  "question": "How many albums did the maker of The Band produce",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS albums)) (SQ (VBD did) (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (DT The) (NNP Band)))) (VP (VB produce))) (. ?)))",
  "entityNum": 2,
  "id": 355
 },
 {
  "taggedQuestion": "List few musical artist whose notable instruments are Ludwig Drums and  Remo?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List few musical artist whose notable instruments are Ludwig Drums and Remo",
    "originStr": "List few musical artist whose notable instruments are Ludwig Drums and Remo"
   }
  ],
  "question": "List few musical artist whose notable instruments are Ludwig Drums and Remo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (JJ few) (JJ musical) (NN artist)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ notable) (NNS instruments)) (VP (VBP are) (NP (NP (NNP Ludwig) (NNPS Drums)) (CC and) (NP (NNP Remo)))))) (. ?)))",
  "entityNum": 1,
  "id": 356
 },
 {
  "taggedQuestion": "How many rivers start in an <e0>?",
  "entityMap": {
   "<e0>": "English speaking country"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many rivers start #entity1",
    "originStr": "How many rivers start #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "in an English speaking country",
    "originStr": "in an English speaking country"
   }
  ],
  "question": "How many rivers start in an English speaking country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS rivers)) (VP (VBP start) (PP (IN in) (NP (DT an) (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 357
 },
 {
  "taggedQuestion": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "For a position in which",
    "originStr": "For a position in which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "institution were both Jack Ryan and Robert sarvis both appointed",
    "originStr": "institution were both Jack Ryan and Robert sarvis both appointed"
   }
  ],
  "question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (S (PP (IN For) (NP (NP (DT a) (NN position)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN institution)) (VP (VBD were) (DT both) (NP (NP (NNP Jack) (NNP Ryan)) (CC and) (NP (NNP Robert) (NNP sarvis))))))))) (NP (DT both)) (ADJP (VBN appointed)) (. ?)))",
  "entityNum": 1,
  "id": 358
 },
 {
  "taggedQuestion": "Where Everybody knows you is the theme album of which show ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 show",
    "originStr": "#entity1 show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Where Everybody knows you is the theme album of which",
    "originStr": "Where Everybody knows you is the theme album of which"
   }
  ],
  "question": "Where Everybody knows you is the theme album of which show",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (NP (NN Everybody)) (VP (VBZ knows) (SBAR (S (NP (PRP you)) (VP (VBZ is) (NP (NP (DT the) (NN theme) (NN album)) (WHPP (IN of) (WHNP (WDT which) (NN show))))))))) (. ?)))",
  "entityNum": 2,
  "id": 359
 },
 {
  "taggedQuestion": "Food in which countries has shallot in it?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Food in which countries #entity1",
    "originStr": "Food in which countries #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has shallot in it",
    "originStr": "has shallot in it"
   }
  ],
  "question": "Food in which countries has shallot in it",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (NP (NNP Food)) (WHPP (IN in) (WHNP (WDT which) (NNS countries))) (SQ (VBZ has) (NP (NP (NN shallot)) (PP (IN in) (NP (PRP it))))) (. ?)))",
  "entityNum": 2,
  "id": 360
 },
 {
  "taggedQuestion": "Which rivers have source origins asnorth western, Zambia ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which rivers have",
    "originStr": "Which rivers have"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "source origins asnorth western , Zambia",
    "originStr": "source origins asnorth western , Zambia"
   }
  ],
  "question": "Which rivers have source origins asnorth western, Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (SBAR (WHNP (WDT Which)) (S (NP (NNS rivers)) (VP (VBP have) (NP (NP (NN source) (NNS origins)) (ADJP (JJ asnorth) (JJ western)))))) (, ,) (NP (NNP Zambia)) (. ?)))",
  "entityNum": 1,
  "id": 361
 },
 {
  "taggedQuestion": "Organization holding stocks of  Galician and German wikipedias?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Organization",
    "originStr": "Organization"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "holding stocks of Galician and German wikipedias",
    "originStr": "holding stocks of Galician and German wikipedias"
   }
  ],
  "question": "Organization holding stocks of Galician and German wikipedias",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Tirana)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Albania)))) (. ?)))",
  "entityNum": 1,
  "id": 362
 },
 {
  "taggedQuestion": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the river with Readin , Brekshire in its path and",
    "originStr": "Name the river with Readin , Brekshire in its path and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "mouth place is Sothend-on-sea",
    "originStr": "mouth place is Sothend-on-sea"
   }
  ],
  "question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NNP Readin))))) (, ,) (NP (NP (NNP Brekshire)) (PP (IN in) (NP (NP (PRP$ its) (NN path)) (CC and) (NP (NN mouth) (NN place))))) (VP (VBZ is) (NP (NP (NNP Sothend)) (HYPH -) (PP (IN on) (HYPH -) (NP (NN sea))))) (. .)))",
  "entityNum": 1,
  "id": 363
 },
 {
  "taggedQuestion": "Alexander Magleby, a rugby player is alma mater to which university?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Alexander",
    "originStr": "Alexander"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Magleby , a rugby player is alma mater to which university",
    "originStr": "Magleby , a rugby player is alma mater to which university"
   }
  ],
  "question": "Alexander Magleby, a rugby player is alma mater to which university",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Alexander) (NNP Magleby)) (, ,) (NP (DT a) (JJ rugby) (NN player))) (VP (VBZ is) (NP (NP (JJ alma) (NN mater)) (WHPP (TO to) (WHNP (WDT which) (NN university))))) (. ?)))",
  "entityNum": 1,
  "id": 364
 },
 {
  "taggedQuestion": "Is Amharic the official language of Ethiopia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Amharic the official language of Ethiopia",
    "originStr": "Is Amharic the official language of Ethiopia"
   }
  ],
  "question": "Is Amharic the official language of Ethiopia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Amharic)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NNP Ethiopia)))) (. ?)))",
  "entityNum": 1,
  "id": 365
 },
 {
  "taggedQuestion": "What sport played at <e1> employes <e0>?",
  "entityMap": {
   "<e1>": "Islamic azad uni",
   "<e0>": "Craig Van Tilbury"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What sport played",
    "originStr": "What sport played"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "at Islamic azad uni employes Craig Van Tilbury",
    "originStr": "at Islamic azad uni employes Craig Van Tilbury"
   }
  ],
  "question": "What sport played at Islamic azad uni employes Craig Van Tilbury",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN sport)) (SQ (VP (VBD played) (ADVP (IN at) (NP (CD <e1>) (NNS employes))) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 366
 },
 {
  "taggedQuestion": "List the products of the company which published Tweenies: Game Time.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the products of #entity1",
    "originStr": "List the products of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which published Tweenies : Game Time",
    "originStr": "the company which published Tweenies : Game Time"
   }
  ],
  "question": "List the products of the company which published Tweenies: Game Time",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS products)) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBD published) (NP (NP (NNP Tweenies)) (: :) (NP (NN Game) (NN Time)))))))))) (. .)))",
  "entityNum": 2,
  "id": 367
 },
 {
  "taggedQuestion": "List the agencies located someplace lead by Alex Chalk.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the agencies located",
    "originStr": "List the agencies located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "someplace lead by Alex Chalk",
    "originStr": "someplace lead by Alex Chalk"
   }
  ],
  "question": "List the agencies located someplace lead by Alex Chalk",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (NP (DT the) (NNS agencies)) (VP (VBN located) (ADVP (RB someplace) (NP (NP (JJ lead)) (PP (IN by) (NP (NNP Alex))))))) (VP (VB Chalk)))) (. .)))",
  "entityNum": 1,
  "id": 368
 },
 {
  "taggedQuestion": "What religion are the characters of Absolutely Fabulous from?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What religion are #entity1 Fabulous from",
    "originStr": "What religion are #entity1 Fabulous from"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the characters of Absolutely",
    "originStr": "the characters of Absolutely"
   }
  ],
  "question": "What religion are the characters of Absolutely Fabulous from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP are) (NP (NP (DT the) (NNS characters)) (PP (IN of) (ADVP (RB Absolutely) (PP (NP (NNP Fabulous)) (IN from)))))) (. ?)))",
  "entityNum": 2,
  "id": 369
 },
 {
  "taggedQuestion": "What are the movies whose music composer uses a Hammond organ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the movies whose",
    "originStr": "What are the movies whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "music composer uses a Hammond organ",
    "originStr": "music composer uses a Hammond organ"
   }
  ],
  "question": "What are the movies whose music composer uses a Hammond organ",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN music) (NN composer)) (S (VP (VBZ uses) (NP (DT a) (NNP Hammond) (NN organ))))))) (. ?)))",
  "entityNum": 1,
  "id": 370
 },
 {
  "taggedQuestion": "Was Love Hurts in <e0>?",
  "entityMap": {
   "<e0>": "Short Cut Draw Blood"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Love Hurts in Short Cut Draw Blood",
    "originStr": "Was Love Hurts in Short Cut Draw Blood"
   }
  ],
  "question": "Was Love Hurts in Short Cut Draw Blood",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (S (NP (NNP Love)) (VP (VBZ Hurts) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 371
 },
 {
  "taggedQuestion": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Janaka Thissakuttiarachchi follows what religion #entity1 Srijnana too",
    "originStr": "Janaka Thissakuttiarachchi follows what religion #entity1 Srijnana too"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": ", which once employed Atisa",
    "originStr": ", which once employed Atisa"
   }
  ],
  "question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Janaka) (NNP Thissakuttiarachchi)) (VP (VBZ follows) (NP (NP (WP what) (NN religion)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB once)) (VP (VBD employed) (NP (NNP Atisa) (NNP Srijnana)) (ADVP (RB too))))))) (. ?)))",
  "entityNum": 2,
  "id": 372
 },
 {
  "taggedQuestion": "Which birthplace of Svetlana Gounkina is also the largest city of Union State ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which birthpalce of Svetlana Gounkina is",
    "originStr": "Which birthpalce of Svetlana Gounkina is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the largest city of Union State",
    "originStr": "also the largest city of Union State"
   }
  ],
  "question": "Which birthpalce of Svetlana Gounkina is also the largest city of Union State",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN birthplace) (PP (IN of) (NP (NNP Svetlana) (NNP Gounkina))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Union) (NNP State))))) (. ?)))",
  "entityNum": 1,
  "id": 373
 },
 {
  "taggedQuestion": "Name the TV show with artist Christopher Franke and cast member Jason Carter .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the TV show with artist Christopher Franke and",
    "originStr": "Name the TV show with artist Christopher Franke and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "cast member Jason Carter",
    "originStr": "cast member Jason Carter"
   }
  ],
  "question": "Name the TV show with artist Christopher Franke and cast member Jason Carter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN TV) (NN show)) (PP (IN with) (NP (NN artist) (NNP Christopher) (NNP Franke)))) (CC and) (VP (VBD cast) (NP (NN member) (NNP Jason) (NNP Carter)))) (. .)))",
  "entityNum": 1,
  "id": 374
 },
 {
  "taggedQuestion": "Which artist married to Lee Krasner?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which artist married",
    "originStr": "Which artist married"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "to Lee Krasner",
    "originStr": "to Lee Krasner"
   }
  ],
  "question": "Which artist married to Lee Krasner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN artist)) (SQ (VP (VBD married) (PP (IN to) (NP (NNP Lee) (NNP Krasner))))) (. ?)))",
  "entityNum": 1,
  "id": 375
 },
 {
  "taggedQuestion": "What teams did the ex teamplayers of <e0> start their career with?",
  "entityMap": {
   "<e0>": "lighthouse boy club"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What teams did #entity1 start their career with",
    "originStr": "What teams did #entity1 start their career with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ex teamplayers of lighthouse boy club",
    "originStr": "the ex teamplayers of lighthouse boy club"
   }
  ],
  "question": "What teams did the ex teamplayers of lighthouse boy club start their career with",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS teams)) (SQ (VP (VBD did) (SBAR (S (NP (NP (DT the) (NN ex) (NNS teamplayers)) (PP (IN of) (NP (NN <e0>)))) (VP (VBP start) (NP (PRP$ their) (NN career)) (PP (IN with))))))) (. ?)))",
  "entityNum": 2,
  "id": 376
 },
 {
  "taggedQuestion": "Where was the deadbody discovered of one of the alumni of <e0>?",
  "entityMap": {
   "<e0>": "General Educational Development"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was the deadbody discovered of one of #entity1",
    "originStr": "Where was the deadbody discovered of one of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the alumni of General Educational Development",
    "originStr": "the alumni of General Educational Development"
   }
  ],
  "question": "Where was the deadbody discovered of one of the alumni of General Educational Development",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN deadbody)) (VP (VBN discovered) (PP (IN of) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS alumni)) (PP (IN of) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 377
 },
 {
  "taggedQuestion": "Who designed the bridge in Oddamavadi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who designed #entity1",
    "originStr": "Who designed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the bridge in Oddamavadi",
    "originStr": "the bridge in Oddamavadi"
   }
  ],
  "question": "Who designed the bridge in Oddamavadi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN bridge)) (PP (IN in) (NP (NNP Oddamavadi))))) (. ?)))",
  "entityNum": 2,
  "id": 378
 },
 {
  "taggedQuestion": "What is the leader name of the settlements whose governing body is Municipal council?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the leader name of #entity1",
    "originStr": "What is the leader name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the settlements whose governing body is Municipal council",
    "originStr": "the settlements whose governing body is Municipal council"
   }
  ],
  "question": "What is the leader name of the settlements whose governing body is Municipal council",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN leader) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose) (NN governing) (NN body)) (S (VP (VBZ is) (NP (JJ Municipal) (NN council))))))))) (. ?)))",
  "entityNum": 2,
  "id": 379
 },
 {
  "taggedQuestion": "Name the co-founder of the record labels which have one of the founder as Chris DuBois .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the co-founder of #entity1",
    "originStr": "Name the co-founder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the record labels which have one of the founder as Chris DuBois",
    "originStr": "the record labels which have one of the founder as Chris DuBois"
   }
  ],
  "question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN co-founder)) (PP (IN of) (NP (NP (DT the) (NN record) (NNS labels)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN founder)) (PP (IN as) (NP (NNP Chris) (NNP DuBois))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 380
 },
 {
  "taggedQuestion": "List the companies operating in Australia?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the companies operating in",
    "originStr": "List the companies operating in"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Australia",
    "originStr": "Australia"
   }
  ],
  "question": "List the companies operating in Australia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS companies)) (VP (VBG operating) (PP (IN in) (NP (NNP Australia)))))) (. ?)))",
  "entityNum": 1,
  "id": 381
 },
 {
  "taggedQuestion": "Which countries is coconut used as a food ingredient?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which countries is #entity1",
    "originStr": "In which countries is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "coconut used as a food ingredient",
    "originStr": "coconut used as a food ingredient"
   }
  ],
  "question": "In which countries is coconut used as a food ingredient",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBZ is) (NP (NN coconut)) (VP (VBN used) (PP (IN as) (NP (DT a) (NN food) (NN ingredient))))) (. ?)))",
  "entityNum": 2,
  "id": 382
 },
 {
  "taggedQuestion": "How many people have worked for teams chaired by Patricia Amorim?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people have worked for #entity1",
    "originStr": "How many people have worked for #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "teams chaired by Patricia Amorim",
    "originStr": "teams chaired by Patricia Amorim"
   }
  ],
  "question": "How many people have worked for teams chaired by Patricia Amorim",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN worked) (PP (IN for) (NP (NP (NNS teams)) (VP (VBN chaired) (PP (IN by) (NP (NNP Patricia) (NNP Amorim))))))))) (. ?)))",
  "entityNum": 2,
  "id": 383
 },
 {
  "taggedQuestion": "How many kinds of games is  played on the Amiga?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many kinds of games #entity1",
    "originStr": "How many kinds of games #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "can be played on the Amiga",
    "originStr": "can be played on the Amiga"
   }
  ],
  "question": "How many kinds of games can be played on the Amiga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WHADJP (WRB How) (JJ many)) (NNS kinds)) (PP (IN of) (NP (NNS games)))) (SQ (VBZ is) (VP (VBN played) (PP (IN on) (NP (DT the) (NNP Amiga))))) (. ?)))",
  "entityNum": 2,
  "id": 384
 },
 {
  "taggedQuestion": "Is the book <e0> a book about Buddhism?",
  "entityMap": {
   "<e0>": "The Buddha and his Dhamma"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the book The Buddha and his Dhamma a book about Buddhism",
    "originStr": "Is the book The Buddha and his Dhamma a book about Buddhism"
   }
  ],
  "question": "Is the book The Buddha and his Dhamma a book about Buddhism",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NN book) (NN <e0>)) (NP (NP (DT a) (NN book)) (PP (IN about) (NP (NNP Buddhism)))) (. ?)))",
  "entityNum": 1,
  "id": 385
 },
 {
  "taggedQuestion": "How many relatives are there of people fought in the <e0>?",
  "entityMap": {
   "<e0>": "Battle of the Bulge"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many relatives are there of #entity1",
    "originStr": "How many relatives are there of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people fought in the Battle of the Bulge",
    "originStr": "people fought in the Battle of the Bulge"
   }
  ],
  "question": "How many relatives are there of people fought in the Battle of the Bulge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS relatives)) (VP (VBP are) (ADVP (RB there) (PP (IN of) (NP (NNS people)))) (VP (VBN fought) (PP (IN in) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 386
 },
 {
  "taggedQuestion": "How many genres of games can I find on the commodore CDTV?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many genres of games #entity1",
    "originStr": "How many genres of games #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "can I find on the commodore CDTV",
    "originStr": "can I find on the commodore CDTV"
   }
  ],
  "question": "How many genres of games can I find on the commodore CDTV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NP (NNS genres)) (PP (IN of) (NP (NNS games))))) (SQ (MD can) (NP (PRP I)) (VP (VB find) (PP (IN on) (NP (DT the) (NN commodore) (NNP CDTV))))) (. ?)))",
  "entityNum": 2,
  "id": 387
 },
 {
  "taggedQuestion": "Does Jevan Snead play as Quarterback?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Jevan Snead play as Quarterback",
    "originStr": "Does Jevan Snead play as Quarterback"
   }
  ],
  "question": "Does Jevan Snead play as Quarterback",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Jevan) (NNP Snead)) (VP (VB play) (PP (IN as) (NP (NN Quarterback)))) (. ?)))",
  "entityNum": 1,
  "id": 388
 },
 {
  "taggedQuestion": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me the sitcoms where",
    "originStr": "Give me the sitcoms where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Eliza Schneider and Isaac Hayes gave voice",
    "originStr": "Eliza Schneider and Isaac Hayes gave voice"
   }
  ],
  "question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (DT the) (NNS sitcoms)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNP Eliza) (NNP Schneider)) (CC and) (NP (NNP Isaac) (NNP Hayes))) (VP (VBD gave) (NP (NN voice)))))) (. .)))",
  "entityNum": 1,
  "id": 389
 },
 {
  "taggedQuestion": "Directors of which movies are buried in Ronda?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Directors of which movies #entity1",
    "originStr": "Directors of which movies #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are buried in Ronda",
    "originStr": "are buried in Ronda"
   }
  ],
  "question": "Directors of which movies are buried in Ronda",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NNS Directors)) (PP (IN of) (SBAR (WHNP (WDT which)) (S (NP (NNS movies)) (VP (VBP are) (VP (VBN buried) (PP (IN in) (NP (NNP Ronda)))))))) (. ?)))",
  "entityNum": 2,
  "id": 390
 },
 {
  "taggedQuestion": "List the debut team of the baseball player who born in Houston.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the debut team of #entity1",
    "originStr": "List the debut team of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the baseball player who born in Houston",
    "originStr": "the baseball player who born in Houston"
   }
  ],
  "question": "List the debut team of the baseball player who born in Houston",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NP (DT the) (NN baseball) (NN player)) (SBAR (WHNP (WP who)) (S (VP (VBN born) (PP (IN in) (NP (NNP Houston)))))))))) (. .)))",
  "entityNum": 2,
  "id": 391
 },
 {
  "taggedQuestion": "Does Cascade Airways have a hub in Seattle?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does cascade"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Cascade Airways have a hub in Seattle",
    "originStr": "Does Cascade Airways have a hub in Seattle"
   }
  ],
  "question": "Does Cascade Airways have a hub in Seattle",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP Cascade))) (S (NP (NNPS Airways)) (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NNP Seattle)))))) (. ?)))",
  "entityNum": 1,
  "id": 392
 },
 {
  "taggedQuestion": "Who edited  British Gazette ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who edited British Gazette",
    "originStr": "Who edited British Gazette"
   }
  ],
  "question": "Who edited British Gazette",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN edited) (NP (JJ British) (NNP Gazette)))) (. ?)))",
  "entityNum": 1,
  "id": 393
 },
 {
  "taggedQuestion": "List the things for which the relatives of Mrunalini Kunte are known?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the things for which #entity1 are known",
    "originStr": "List the things for which #entity1 are known"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of Mrunalini Kunte",
    "originStr": "the relatives of Mrunalini Kunte"
   }
  ],
  "question": "List the things for which the relatives of Mrunalini Kunte are known",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS things)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mrunalini) (NNP Kunte)))) (VP (VBP are) (VP (VBN known))))))) (. ?)))",
  "entityNum": 2,
  "id": 394
 },
 {
  "taggedQuestion": "What acts and artists are associated with people who have worked with Divertis?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What acts and artists are associated with people #entity1",
    "originStr": "What acts and artists are associated with people #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who have worked with Divertis",
    "originStr": "who have worked with Divertis"
   }
  ],
  "question": "What acts and artists are associated with people who have worked with Divertis",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (NP (WDT What)) (VP (VBZ acts))) (CC and) (S (NP (NNS artists)) (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN worked) (PP (IN with) (NP (NNP Divertis)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 395
 },
 {
  "taggedQuestion": "What are the notableworks of <e0>?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the notableworks of Russell T Davies",
    "originStr": "What are the notableworks of Russell T Davies"
   }
  ],
  "question": "What are the notableworks of Russell T Davies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS notableworks)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 396
 },
 {
  "taggedQuestion": "Which company has developed games whose music is done by Gerard Marino?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which company has developed #entity1",
    "originStr": "Which company has developed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games whose music is done by Gerard Marino",
    "originStr": "games whose music is done by Gerard Marino"
   }
  ],
  "question": "Which company has developed games whose music is done by Gerard Marino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ has) (VP (VBN developed) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NN music)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Gerard) (NNP Marino))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 397
 },
 {
  "taggedQuestion": "Who all have developed softwares for Unix Like OSes?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who all have developed #entity1",
    "originStr": "Who all have developed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "softwares for Unix Like OSes",
    "originStr": "softwares for Unix Like OSes"
   }
  ],
  "question": "Who all have developed softwares for Unix Like OSes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN developed) (NP (NP (NNS softwares)) (PP (IN for) (NP (NNP Unix)))) (PP (IN Like) (NP (NNPS OSes)))))) (. ?)))",
  "entityNum": 2,
  "id": 398
 },
 {
  "taggedQuestion": "What are some party leaders of the parties which have had a seat in Berlin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some party leaders of #entity1",
    "originStr": "What are some party leaders of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the parties which have had a seat in Berlin",
    "originStr": "the parties which have had a seat in Berlin"
   }
  ],
  "question": "What are some party leaders of the parties which have had a seat in Berlin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN party) (NNS leaders)) (PP (IN of) (NP (NP (DT the) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN had) (NP (NP (DT a) (NN seat)) (PP (IN in) (NP (NNP Berlin)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 399
 },
 {
  "taggedQuestion": "Was James maker in the band Noko?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was James maker in the band Noko",
    "originStr": "Was James maker in the band Noko"
   }
  ],
  "question": "Was James maker in the band Noko",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP James)) (NP (NP (NN maker)) (PP (IN in) (NP (DT the) (NN band) (NNP Noko)))) (. ?)))",
  "entityNum": 1,
  "id": 400
 },
 {
  "taggedQuestion": "Was Nick Jonas a member of the Jonas Brothers?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Nick Jonas a member of the Jonas Brothers",
    "originStr": "Was Nick Jonas a member of the Jonas Brothers"
   }
  ],
  "question": "Was Nick Jonas a member of the Jonas Brothers",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Nick) (NNP Jonas)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNP Jonas) (NNPS Brothers)))) (. ?)))",
  "entityNum": 1,
  "id": 401
 },
 {
  "taggedQuestion": "Which tenant of <e0> is the military branch of the Gary Holder-Winfield ?",
  "entityMap": {
   "<e0>": "New Sanno Hotel"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which tenant of New Sanno Hotel is",
    "originStr": "Which tenant of New Sanno Hotel is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the military branch of the Gary Holder-Winfield",
    "originStr": "the military branch of the Gary Holder-Winfield"
   }
  ],
  "question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN tenant) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (DT the) (NNP Gary) (NNP Holder) (HYPH -) (NNP Winfield))))) (. ?)))",
  "entityNum": 1,
  "id": 402
 },
 {
  "taggedQuestion": "List the director of The Adventures of mimi ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the director of The Adventures of mimi",
    "originStr": "List the director of The Adventures of mimi"
   }
  ],
  "question": "List the director of The Adventures of mimi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN director)) (PP (IN of) (NP (NP (DT The) (NNS Adventures)) (PP (IN of) (NP (NN mimi))))))) (. ?)))",
  "entityNum": 1,
  "id": 403
 },
 {
  "taggedQuestion": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team?",
  "entityMap": {
   "<e0>": "Middlesbrough F.C. England national under-21 football team"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "List"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List sports managers who",
    "originStr": "List sports managers who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "managed Middlesbrough F.C. and England national under-21 football team",
    "originStr": "managed Middlesbrough F.C. and England national under-21 football team"
   }
  ],
  "question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (NNS sports) (NNS managers)) (SBAR (WHNP (WP who)) (S (VP (VBD managed) (NP (NML (NNP Middlesbrough) (NNP F.C.) (CC and) (NNP England)) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 21)))) (NN football) (NN team))))) (. ?)))",
  "entityNum": 1,
  "id": 404
 },
 {
  "taggedQuestion": "Name all the soccer players who played in a under 18 club for La Liga.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name all the soccer players who played in #entity1",
    "originStr": "Name all the soccer players who played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a under 18 club for La Liga",
    "originStr": "a under 18 club for La Liga"
   }
  ],
  "question": "Name all the soccer players who played in a under 18 club for La Liga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBD played) (PP (IN in) (NP (NP (DT a) (NML (QP (IN under) (CD 18))) (NN club)) (PP (IN for) (NP (NNP La) (NNP Liga)))))))))) (. .)))",
  "entityNum": 2,
  "id": 405
 },
 {
  "taggedQuestion": "Which key perosn of the Elders is also the president of <e0> ?",
  "entityMap": {
   "<e0>": "united World College"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which key perosn of the Elders is",
    "originStr": "Which key perosn of the Elders is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the president of united World College",
    "originStr": "also the president of united World College"
   }
  ],
  "question": "Which key perosn of the Elders is also the president of united World College",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ key) (NN perosn)) (PP (IN of) (NP (DT the) (NNPS Elders))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 406
 },
 {
  "taggedQuestion": "Who are the players whose current clubs have Ferran Soriano as chairman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who are the players whose current #entity1",
    "originStr": "Who are the players whose current #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "clubs have Ferran Soriano as chairman",
    "originStr": "clubs have Ferran Soriano as chairman"
   }
  ],
  "question": "Who are the players whose current clubs have Ferran Soriano as chairman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (NML (JJ current) (NNS clubs))) (S (VP (VBP have) (NP (NP (NNP Ferran) (NNP Soriano)) (PP (IN as) (NP (NN chairman))))))))) (. ?)))",
  "entityNum": 2,
  "id": 407
 },
 {
  "taggedQuestion": "What are some parties which have people from Mangalore as a member?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some parties which have #entity1",
    "originStr": "What are some parties which have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people from Mangalore as a member",
    "originStr": "people from Mangalore as a member"
   }
  ],
  "question": "What are some parties which have people from Mangalore as a member",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS people)) (PP (IN from) (NP (NNP Mangalore)))) (PP (IN as) (NP (DT a) (NN member)))))))) (. ?)))",
  "entityNum": 2,
  "id": 408
 },
 {
  "taggedQuestion": "Which employer of <e0> is also the producer of Delta III ?",
  "entityMap": {
   "<e0>": "Michael M. Sears"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which employer of Michael M. Sears is",
    "originStr": "Which employer of Michael M. Sears is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the producer of Delta III",
    "originStr": "also the producer of Delta III"
   }
  ],
  "question": "Which employer of Michael M. Sears is also the producer of Delta III",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN employer) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Delta) (NNP III))))) (. ?)))",
  "entityNum": 1,
  "id": 409
 },
 {
  "taggedQuestion": "Name the largest city in the county where there is a Cy-<e0>",
  "entityMap": {
   "<e0>": "Fair High School."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the largest city in #entity1",
    "originStr": "Name the largest city in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the county where there is a Cy-Fair High School",
    "originStr": "the county where there is a Cy-Fair High School"
   }
  ],
  "question": "Name the largest city in the county where there is a Cy-Fair High School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (SINV (VP (VB Name)) (NP (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (DT the) (NN county)))) (SBAR (WHADVP (WRB where)) (S (NP (EX there)) (VP (VBZ is) (NP (DT a) (NNP Cy))))))) (HYPH -) (NP (ADD <e0>))))",
  "entityNum": 2,
  "id": 410
 },
 {
  "taggedQuestion": "How many bacterias are there whose division is Firmicutes?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many bacterias are there",
    "originStr": "How many bacterias are there"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose division is Firmicutes",
    "originStr": "whose division is Firmicutes"
   }
  ],
  "question": "How many bacterias are there whose division is Firmicutes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS bacterias)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP$ whose) (NML (NN division))) (S (VP (VBZ is) (NP (NNP Firmicutes)))))))) (. ?)))",
  "entityNum": 1,
  "id": 411
 },
 {
  "taggedQuestion": "Which country does Peter Blay owe his allegiance?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which country does Peter Blay owe his allegiance",
    "originStr": "To which country does Peter Blay owe his allegiance"
   }
  ],
  "question": "To which country does Peter Blay owe his allegiance",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (NNP Peter) (NNP Blay)) (VP (VB owe) (NP (PRP$ his) (NN allegiance)))) (. ?)))",
  "entityNum": 1,
  "id": 412
 },
 {
  "taggedQuestion": "Is jim harbaugh currently in the Michigan Wolverines?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is jim harbaugh currently in the Michigan Wolverines",
    "originStr": "Is jim harbaugh currently in the Michigan Wolverines"
   }
  ],
  "question": "Is jim harbaugh currently in the Michigan Wolverines",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP jim) (NNP harbaugh)) (ADVP (RB currently)) (PP (IN in) (NP (DT the) (NNP Michigan) (NNPS Wolverines))) (. ?)))",
  "entityNum": 1,
  "id": 413
 },
 {
  "taggedQuestion": "Name the <e0> whose subsequent work is Crusade and Composer is Stewart Copeland.",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the television show whose subsequent work is Crusade and",
    "originStr": "Name the television show whose subsequent work is Crusade and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Composer is Stewart Copeland",
    "originStr": "Composer is Stewart Copeland"
   }
  ],
  "question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (JJ subsequent) (NN work))) (S (VP (VBZ is) (NP (NP (NN Crusade) (CC and) (NN Composer)) (SBAR (S (VP (VBZ is) (NP (NNP Stewart) (NNP Copeland))))))))))) (. .)))",
  "entityNum": 1,
  "id": 414
 },
 {
  "taggedQuestion": "What are the current music bands of Chester Bennington?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the current music bands of",
    "originStr": "What are the current music bands of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Chester Bennington",
    "originStr": "Chester Bennington"
   }
  ],
  "question": "What are the current music bands of Chester Bennington",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ current) (NN music) (NNS bands)) (PP (IN of) (NP (NNP Chester) (NNP Bennington))))) (. ?)))",
  "entityNum": 1,
  "id": 415
 },
 {
  "taggedQuestion": "Who was the prime minister under which the predecessor of <e0> served?",
  "entityMap": {
   "<e0>": "Derick Heathcoat Amory"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who was the prime minister under #entity1 served",
    "originStr": "Who was the prime minister under #entity1 served"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which the predecessor of Derick Heathcoat Amory",
    "originStr": "which the predecessor of Derick Heathcoat Amory"
   }
  ],
  "question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (JJ prime) (NN minister)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN served)))))) (. ?)))",
  "entityNum": 2,
  "id": 416
 },
 {
  "taggedQuestion": "Which person designed the cars which has been designed by <e0>?",
  "entityMap": {
   "<e0>": "ASC Creative Services"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which person designed #entity1",
    "originStr": "Which person designed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the cars which has been designed by ASC Creative Services",
    "originStr": "the cars which has been designed by ASC Creative Services"
   }
  ],
  "question": "Which person designed the cars which has been designed by ASC Creative Services",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN person)) (SQ (VP (VBD designed) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN designed) (PP (IN by) (NP (NN <e0>))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 417
 },
 {
  "taggedQuestion": "What are some orthonychidae birds?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are some orthonychidae birds",
    "originStr": "What are some orthonychidae birds"
   }
  ],
  "question": "What are some orthonychidae birds",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS orthonychidae)) (NP (NNS birds)))) (. ?)))",
  "entityNum": 1,
  "id": 418
 },
 {
  "taggedQuestion": "Which driver had the pole position in <e0> ?",
  "entityMap": {
   "<e0>": "1994 Spanish Grand Prix"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which driver had #entity1",
    "originStr": "Which driver had #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the pole position in 1994 Spanish Grand Prix",
    "originStr": "the pole position in 1994 Spanish Grand Prix"
   }
  ],
  "question": "Which driver had the pole position in 1994 Spanish Grand Prix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN driver)) (SQ (VP (VBD had) (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 419
 },
 {
  "taggedQuestion": "Does the US route 281 have a junction at San Antonio?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does the us route"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the US route 281 have a junction at San Antonio",
    "originStr": "Does the US route 281 have a junction at San Antonio"
   }
  ],
  "question": "Does the US route 281 have a junction at San Antonio",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (DT the) (NNP US) (NN route))) (S (NP (CD 281)) (VP (VBP have) (NP (NP (DT a) (NN junction)) (PP (IN at) (NP (NNP San) (NNP Antonio)))))) (. ?)))",
  "entityNum": 1,
  "id": 420
 },
 {
  "taggedQuestion": "How many awards have been given to the founder of Grameen Bank?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many awards have been given to #entity1",
    "originStr": "How many awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the founder of Grameen Bank",
    "originStr": "the founder of Grameen Bank"
   }
  ],
  "question": "How many awards have been given to the founder of Grameen Bank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NNP Grameen) (NNP Bank))))))))) (. ?)))",
  "entityNum": 2,
  "id": 421
 },
 {
  "taggedQuestion": "Was Queen Latifah in the U.N.I.T.Y. group?",
  "entityMap": {
   "<e0>": "U.N. I.T. Y. group"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Queen Latifah in the U.N.I.T.Y. group",
    "originStr": "Was Queen Latifah in the U.N.I.T.Y. group"
   }
  ],
  "question": "Was Queen Latifah in the U.N.I.T.Y. group",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Queen) (NNP Latifah)) (PP (IN in) (NP (DT the) (NNP U.N.I.T.Y.) (NN group))) (. ?)))",
  "entityNum": 1,
  "id": 422
 },
 {
  "taggedQuestion": "Count the important works done by the writers of The Second Coming.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of important works done by #entity1",
    "originStr": "Count the number of important works done by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the writers of The Second Coming",
    "originStr": "the writers of The Second Coming"
   }
  ],
  "question": "Count the number of important works done by the writers of The Second Coming",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Count) (NP (DT the) (JJ important)))) (VP (VBZ works) (VP (VBN done) (PP (IN by) (NP (NP (DT the) (NNS writers)) (PP (IN of) (NP (NP (DT The) (JJ Second)) (VP (VBG Coming)))))))) (. .)))",
  "entityNum": 2,
  "id": 423
 },
 {
  "taggedQuestion": "Who all are known to play the <e0>?",
  "entityMap": {
   "<e0>": "Gibson Guitar Corporation"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who all are known to play the Gibson Guitar Corporation",
    "originStr": "Who all are known to play the Gibson Guitar Corporation"
   }
  ],
  "question": "Who all are known to play the Gibson Guitar Corporation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP are) (VP (VBN known) (S (VP (TO to) (VP (VB play) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 1,
  "id": 424
 },
 {
  "taggedQuestion": "Which child of Jack Ferguson became a Prime Minister?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which child of",
    "originStr": "Which child of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Jack Ferguson became a Prime Minister",
    "originStr": "Jack Ferguson became a Prime Minister"
   }
  ],
  "question": "Which child of Jack Ferguson became a Prime Minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN child)) (PP (IN of) (NP (NNP Jack) (NNP Ferguson)))) (SQ (VP (VBD became) (NP (DT a) (NML (NNP Prime) (NNP Minister))))) (. ?)))",
  "entityNum": 1,
  "id": 425
 },
 {
  "taggedQuestion": "Did Annie Leibovitz do the cover of The Road Ahead?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Annie Leibovitz do the cover of The Road Ahead",
    "originStr": "Did Annie Leibovitz do the cover of The Road Ahead"
   }
  ],
  "question": "Did Annie Leibovitz do the cover of The Road Ahead",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Annie) (NNP Leibovitz)) (VP (VBP do) (NP (NP (DT the) (NN cover)) (PP (IN of) (NP (DT The) (NNP Road)))) (ADVP (RB Ahead))) (. ?)))",
  "entityNum": 1,
  "id": 426
 },
 {
  "taggedQuestion": "What are the things whose mascots are from the class Eutheria?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the things whose mascots #entity1",
    "originStr": "What are the things whose mascots #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are from the class Eutheria",
    "originStr": "are from the class Eutheria"
   }
  ],
  "question": "What are the things whose mascots are from the class Eutheria",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS things)) (SBAR (WHNP (WP$ whose) (NNS mascots)) (S (VP (VBP are) (PP (IN from) (NP (DT the) (NN class) (NNP Eutheria)))))))) (. ?)))",
  "entityNum": 2,
  "id": 427
 },
 {
  "taggedQuestion": "Whom did Michael Springer palyed for which is also had a former student named Donald Brooks ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "For whom did Michael Springer played for which is",
    "originStr": "For whom did Michael Springer played for which is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also had a former student named Donald Brooks",
    "originStr": "also had a former student named Donald Brooks"
   }
  ],
  "question": "For whom did Michael Springer played for which is also had a former student named Donald Brooks",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Whom)) (SQ (VBD did) (NP (NNP Michael) (NNP Springer)) (VP (VBD palyed) (PP (IN for) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN had) (NP (NP (DT a) (JJ former) (NN student)) (VP (VBN named) (NP (NNP Donald) (NNP Brooks))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 428
 },
 {
  "taggedQuestion": "Name the common nationality of <e1> and <e0> .",
  "entityMap": {
   "<e1>": "Georgina Theodora Wood",
   "<e0>": "akwasi Oppong Fosu"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu",
    "originStr": "the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu"
   }
  ],
  "question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (FRAG (NP (ADD <e1>) (CC and) (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 429
 },
 {
  "taggedQuestion": "Name the movie written by Monty Python and distributed by <e0> .",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movie written by Monty Python and",
    "originStr": "Name the movie written by Monty Python and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "distributed by Cinema International Corporation",
    "originStr": "distributed by Cinema International Corporation"
   }
  ],
  "question": "Name the movie written by Monty Python and distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (VP (VP (VBN written) (PP (IN by) (NP (NNP Monty) (NNP Python)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (ADD <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 430
 },
 {
  "taggedQuestion": "Is Pittsburgh Steelers the former team of Marv McFadden?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Pittsburgh Steelers the former team of Marv McFadden",
    "originStr": "Is Pittsburgh Steelers the former team of Marv McFadden"
   }
  ],
  "question": "Is Pittsburgh Steelers the former team of Marv McFadden",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Pittsburgh) (NNPS Steelers)) (NP (NP (DT the) (JJ former) (NN team)) (PP (IN of) (NP (NNP Marv) (NNP McFadden)))) (. ?)))",
  "entityNum": 1,
  "id": 431
 },
 {
  "taggedQuestion": "Which series was written by Eric Jendresen and John Orloff?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which series was",
    "originStr": "Which series was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "written by Eric Jendresen and John Orloff",
    "originStr": "written by Eric Jendresen and John Orloff"
   }
  ],
  "question": "Which series was written by Eric Jendresen and John Orloff",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VBD was) (VP (VBN written) (PP (IN by) (NP (NP (NNP Eric) (NNP Jendresen)) (CC and) (NP (NNP John) (NNP Orloff)))))) (. ?)))",
  "entityNum": 1,
  "id": 432
 },
 {
  "taggedQuestion": "Which city can I find both the office of Elasticsearch and <e0> DJ?",
  "entityMap": {
   "<e0>": "the Yellow Claw"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which city can I find both the office of Elasticsearch and",
    "originStr": "In which city can I find both the office of Elasticsearch and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Yellow Claw DJ",
    "originStr": "the Yellow Claw DJ"
   }
  ],
  "question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (MD can) (NP (PRP I)) (VP (VB find) (NP (PDT both) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NNP Elasticsearch)))) (CC and) (NP (NP (ADD <e0>)) (NP (NN DJ)))))) (. ?)))",
  "entityNum": 1,
  "id": 433
 },
 {
  "taggedQuestion": "Name the partners of Kelly Brook.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the partners of Kelly Brook",
    "originStr": "Name the partners of Kelly Brook"
   }
  ],
  "question": "Name the partners of Kelly Brook",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS partners)) (PP (IN of) (NP (NNP Kelly) (NNP Brook))))) (. .)))",
  "entityNum": 1,
  "id": 434
 },
 {
  "taggedQuestion": "What is the area of the broadcast network which has the affiliation with 9TV?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the area of #entity1",
    "originStr": "What is the area of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the broadcast network which has the affiliation with 9TV",
    "originStr": "the broadcast network which has the affiliation with 9TV"
   }
  ],
  "question": "What is the area of the broadcast network which has the affiliation with 9TV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN broadcast) (NN network)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT the) (NN affiliation)) (PP (IN with) (NP (NN 9TV))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 435
 },
 {
  "taggedQuestion": "Who is married to Gerard Piqu?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is married to Gerard Piqu",
    "originStr": "Who is married to Gerard Piqu"
   }
  ],
  "question": "Who is married to Gerard Piqu",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN married) (PP (IN to) (NP (NNP Gerard) (NNP Piqu))))) (. ?)))",
  "entityNum": 1,
  "id": 436
 },
 {
  "taggedQuestion": "Which sports are played in schools affiliated with the <e0>?",
  "entityMap": {
   "<e0>": "Harvest Christian Center"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which sports are played in #entity1",
    "originStr": "Which sports are played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "schools affiliated with the Harvest Christian Center",
    "originStr": "schools affiliated with the Harvest Christian Center"
   }
  ],
  "question": "Which sports are played in schools affiliated with the Harvest Christian Center",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS sports)) (SQ (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (VP (VBN affiliated) (PP (IN with) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 437
 },
 {
  "taggedQuestion": "Who debuted their career in a team coached by Chip Kelly?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who debuted their career in #entity1",
    "originStr": "Who debuted their career in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a team coached by Chip Kelly",
    "originStr": "a team coached by Chip Kelly"
   }
  ],
  "question": "Who debuted their career in a team coached by Chip Kelly",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD debuted) (NP (PRP$ their) (NN career)) (PP (IN in) (NP (NP (DT a) (NN team)) (VP (VBN coached) (PP (IN by) (NP (NN Chip) (NNP Kelly)))))))) (. ?)))",
  "entityNum": 2,
  "id": 438
 },
 {
  "taggedQuestion": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the nicknames given to #entity1",
    "originStr": "What are the nicknames given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the characters of The Wolves of the Mercy Falls",
    "originStr": "the characters of The Wolves of the Mercy Falls"
   }
  ],
  "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS nicknames)) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NP (DT The) (NNS Wolves)) (PP (IN of) (NP (DT the) (NN Mercy) (NNS Falls))))))))) (. ?)))",
  "entityNum": 2,
  "id": 439
 },
 {
  "taggedQuestion": "Name the river with source country in Zambia and source region as North-Western Province, Zambia.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the river with source country in Zambia and",
    "originStr": "Name the river with source country in Zambia and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "source region as North-Western Province , Zambia",
    "originStr": "source region as North-Western Province , Zambia"
   }
  ],
  "question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NP (NP (NN source) (NN country)) (PP (IN in) (NP (NNP Zambia)))) (CC and) (NP (NP (NN source) (NN region)) (PP (IN as) (NP (NNP North) (HYPH -) (NNP Western) (NNP Province) (, ,) (NNP Zambia))))))) (. .)))",
  "entityNum": 1,
  "id": 440
 },
 {
  "taggedQuestion": "Members of how many political parties have died in Delhi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Members of how many political #entity1",
    "originStr": "Members of how many political #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "parties have died in Delhi",
    "originStr": "parties have died in Delhi"
   }
  ],
  "question": "Members of how many political parties have died in Delhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NNS Members)) (PP (IN of) (SBAR (WHADJP (WRB how) (JJ many)) (S (NP (JJ political) (NNS parties)) (VP (VBP have) (VP (VBN died) (PP (IN in) (NP (NNP Delhi)))))))) (. ?)))",
  "entityNum": 2,
  "id": 441
 },
 {
  "taggedQuestion": "What is the birthplace of Adugna Deyas and the place where Fiq is located?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the birthplace of Adugna Deyas",
    "originStr": "What is the birthplace of Adugna Deyas"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and the place where Fiq is located",
    "originStr": "and the place where Fiq is located"
   }
  ],
  "question": "What is the birthplace of Adugna Deyas and the place where Fiq is located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NP (NNP Adugna) (NNP Deyas)) (CC and) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Fiq)) (VP (VBZ is) (VP (VBN located)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 442
 },
 {
  "taggedQuestion": "What is the headquarters of <e0>?",
  "entityMap": {
   "<e0>": "Juan Dalmau Ramerez"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the headquarters of Juan Dalmau Ramerez",
    "originStr": "what is the headquarters of Juan Dalmau Ramerez"
   }
  ],
  "question": "what is the headquarters of Juan Dalmau Ramerez",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 443
 },
 {
  "taggedQuestion": "The president who was in office when <e0> was the PM followed which religion?",
  "entityMap": {
   "<e0>": "Lee Hyun Jae"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "The president who was in office when Lee Hyun Jae was the",
    "originStr": "The president who was in office when Lee Hyun Jae was the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "PM followed which religion",
    "originStr": "PM followed which religion"
   }
  ],
  "question": "The president who was in office when Lee Hyun Jae was the PM followed which religion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (DT The) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (PP (IN in) (NP (NN office))) (SBAR (WHADVP (WRB when)) (S (NP (ADD <e0>)) (VP (VBD was) (NP-TMP (DT the) (NN PM))))))))) (VP (VBD followed) (SBARQ (WHNP (WDT which) (NN religion)))) (. ?)))",
  "entityNum": 1,
  "id": 444
 },
 {
  "taggedQuestion": "Who is the maker of the engine of Ford F-Series first generation ?",
  "entityMap": {
   "<e0>": "Ford F-Series generation"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the maker of #entity1 first generation",
    "originStr": "Who is the maker of #entity1 first generation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the engine of Ford F-Series",
    "originStr": "the engine of Ford F-Series"
   }
  ],
  "question": "Who is the maker of the engine of Ford F-Series first generation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (NP (DT the) (NN engine)) (PP (IN of) (NP (NML (NNP Ford) (NNP F) (HYPH -) (NNP Series)) (JJ first) (NN generation))))))) (. ?)))",
  "entityNum": 2,
  "id": 445
 },
 {
  "taggedQuestion": "What is the religious affiliation of <e0>?",
  "entityMap": {
   "<e0>": "Neungin High School"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the religious affiliation of Neungin High School",
    "originStr": "What is the religious affiliation of Neungin High School"
   }
  ],
  "question": "What is the religious affiliation of Neungin High School",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ religious) (NN affiliation)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 446
 },
 {
  "taggedQuestion": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
  "entityMap": {
   "<e0>": "2012 Summer Olympics Women"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
    "originStr": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles"
   }
  ],
  "question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Maria) (NNP Sharapova)) (NP (NP (DT the) (NN silver) (NN medalist)) (PP (IN of) (NP (NP (NN Tennis)) (PP (IN at) (NP (NP (DT the) (CD 2012) (NN Summer)) (NP (NP (NNP Olympics) (NNP Women) (POS 's)) (NNS singles))))))) (. ?)))",
  "entityNum": 1,
  "id": 447
 },
 {
  "taggedQuestion": "Name the office holder with successor as Adrian A Basora and child as Lori Black .",
  "entityMap": {
   "<e0>": "Adrian Basora child"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office holder with successor as Adrian A Basora and",
    "originStr": "Name the office holder with successor as Adrian A Basora and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "child as Lori Black",
    "originStr": "child as Lori Black"
   }
  ],
  "question": "Name the office holder with successor as Adrian A Basora and child as Lori Black",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NN successor))) (PP (IN as) (NP (NP (NNP Adrian) (NNP A) (NNP Basora)) (CC and) (NP (NN child)))) (PP (IN as) (NP (NNP Lori) (NNP Black)))) (. .)))",
  "entityNum": 1,
  "id": 448
 },
 {
  "taggedQuestion": "Who is the owner of the South end ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of #entity1",
    "originStr": "Who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the South end",
    "originStr": "the South end"
   }
  ],
  "question": "Who is the owner of the South end",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (DT the) (JJ South) (NN end))))) (. ?)))",
  "entityNum": 2,
  "id": 449
 },
 {
  "taggedQuestion": "What is the colour of Xocolatlite ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the colour of Xocolatlite",
    "originStr": "What is the colour of Xocolatlite"
   }
  ],
  "question": "What is the colour of Xocolatlite",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN colour)) (PP (IN of) (NP (NNP Xocolatlite))))) (. ?)))",
  "entityNum": 1,
  "id": 450
 },
 {
  "taggedQuestion": "How many other teams have the members of <e0> played?",
  "entityMap": {
   "<e0>": "Atlant Moscow Oblast"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "For how many other teams have #entity1 played",
    "originStr": "For how many other teams have #entity1 played"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of Atlant Moscow Oblast",
    "originStr": "the members of Atlant Moscow Oblast"
   }
  ],
  "question": "For how many other teams have the members of Atlant Moscow Oblast played",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ other) (NNS teams)) (SQ (VBP have) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN played))) (. ?)))",
  "entityNum": 2,
  "id": 451
 },
 {
  "taggedQuestion": "What is the <e1> of the president whose alma mater is <e0> ?",
  "entityMap": {
   "<e1>": "state of origin",
   "<e0>": "Hellenic Naval Academy"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the state of origin of #entity1",
    "originStr": "What is the state of origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president whose alma mater is Hellenic Naval Academy",
    "originStr": "the president whose alma mater is Hellenic Naval Academy"
   }
  ],
  "question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e1>)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NML (NN alma) (NN mater))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 452
 },
 {
  "taggedQuestion": "What is the common ethnicity of the Maike Evers and Francisco Lachowski ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the common ethnicity of the Maike Evers and Francisco Lachowski",
    "originStr": "is the common ethnicity of the Maike Evers and Francisco Lachowski"
   }
  ],
  "question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (NN ethnicity)) (PP (IN of) (NP (NP (DT the) (NNP Maike) (NNP Evers)) (CC and) (NP (NNP Francisco) (NNP Lachowski)))))) (. ?)))",
  "entityNum": 1,
  "id": 453
 },
 {
  "taggedQuestion": "Which places do companies founded in Newcastle operate?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which places do companies #entity1 operate",
    "originStr": "In which places do companies #entity1 operate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "founded in Newcastle",
    "originStr": "founded in Newcastle"
   }
  ],
  "question": "In which places do companies founded in Newcastle operate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS places)) (VP (VBP do) (S (NP (NP (NNS companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Newcastle))))) (VP (VB operate))))) (. ?)))",
  "entityNum": 2,
  "id": 454
 },
 {
  "taggedQuestion": "Which senator served in <e0> and VMF-218?",
  "entityMap": {
   "<e0>": "military units VMF-155"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which senator served",
    "originStr": "Which senator served"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in military units VMF-155 and VMF-218",
    "originStr": "in military units VMF-155 and VMF-218"
   }
  ],
  "question": "Which senator served in military units VMF-155 and VMF-218",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN senator)) (SQ (VP (VBD served) (PP (IN in) (NP (NN <e0>) (CC and) (NN VMF) (HYPH -) (CD 218))))) (. ?)))",
  "entityNum": 1,
  "id": 455
 },
 {
  "taggedQuestion": "What games are made by Interplay Entertainment?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What kind of #entity1",
    "originStr": "What kind of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games are made by Interplay Entertainment",
    "originStr": "games are made by Interplay Entertainment"
   }
  ],
  "question": "What kind of games are made by Interplay Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS games)) (SQ (VBP are) (VP (VBN made) (PP (IN by) (NP (NNP Interplay) (NNP Entertainment))))) (. ?)))",
  "entityNum": 2,
  "id": 456
 },
 {
  "taggedQuestion": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which producer of Purvis Eureka engine is",
    "originStr": "Which producer of Purvis Eureka engine is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the owner of Ford Theatre",
    "originStr": "also the owner of Ford Theatre"
   }
  ],
  "question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN producer) (PP (IN of) (NP (NML (NNP Purvis) (NNP Eureka)) (NN engine))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Ford) (NNP Theatre))))) (. ?)))",
  "entityNum": 1,
  "id": 457
 },
 {
  "taggedQuestion": "What developed EMMS?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What developed EMMS",
    "originStr": "What developed EMMS"
   }
  ],
  "question": "What developed EMMS",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (NP (WDT What) (JJ developed) (NN EMMS))) (. ?)))",
  "entityNum": 1,
  "id": 458
 },
 {
  "taggedQuestion": "Which music band made <e0>, and to which Tedd Riley was associated?",
  "entityMap": {
   "<e0>": "Take Me There"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which music band made",
    "originStr": "Which music band made"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Take Me There , and to which Tedd Riley was associated",
    "originStr": "Take Me There , and to which Tedd Riley was associated"
   }
  ],
  "question": "Which music band made Take Me There, and to which Tedd Riley was associated",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN music) (NN band)) (SQ (VP (VBD made) (NP (NP (ADD <e0>)) (, ,) (CC and) (SBAR (WHPP (TO to) (WHNP (WDT which))) (S (NP (NNP Tedd) (NNP Riley)) (VP (VBD was) (VP (VBN associated)))))))) (. ?)))",
  "entityNum": 1,
  "id": 459
 },
 {
  "taggedQuestion": "Which time zone is Pong Pha?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which time zone is Pong Pha",
    "originStr": "In which time zone is Pong Pha"
   }
  ],
  "question": "In which time zone is Pong Pha",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (NP (WDT Which) (NN time) (NN zone))) (SQ (VBZ is) (NP (NNP Pong) (NNP Pha))) (. ?)))",
  "entityNum": 1,
  "id": 460
 },
 {
  "taggedQuestion": "How many fictional characters are there in a series in which Craig Robinson acted?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many fictional characters are there in a #entity1",
    "originStr": "How many fictional characters are there in a #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "series in which Craig Robinson acted",
    "originStr": "series in which Craig Robinson acted"
   }
  ],
  "question": "How many fictional characters are there in a series in which Craig Robinson acted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ fictional) (NNS characters)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (DT a) (NN series))) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Craig) (NNP Robinson)) (VP (VBD acted))))) (. ?)))",
  "entityNum": 2,
  "id": 461
 },
 {
  "taggedQuestion": "Which political party of Chandra Shekhar is also the political party of <e0> ?",
  "entityMap": {
   "<e0>": "Datl Satyanarayana Raju"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which political party of Chandra Shekhar is",
    "originStr": "Which political party of Chandra Shekhar is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the political party of Datl Satyanarayana Raju",
    "originStr": "also the political party of Datl Satyanarayana Raju"
   }
  ],
  "question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NNP Chandra) (NNP Shekhar)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 462
 },
 {
  "taggedQuestion": "Who owns the airport in Paphos?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who owns #entity1",
    "originStr": "Who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airport in Paphos",
    "originStr": "the airport in Paphos"
   }
  ],
  "question": "Who owns the airport in Paphos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN airport)) (PP (IN in) (NP (NNP Paphos)))))) (. ?)))",
  "entityNum": 2,
  "id": 463
 },
 {
  "taggedQuestion": "What is the baseball team whose club manager is Chip Hale?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the baseball team whose",
    "originStr": "What is the baseball team whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "club manager is Chip Hale",
    "originStr": "club manager is Chip Hale"
   }
  ],
  "question": "What is the baseball team whose club manager is Chip Hale",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NML (NN club) (NN manager))) (S (VP (VBZ is) (NP (NNP Chip) (NNP Hale))))))) (. ?)))",
  "entityNum": 1,
  "id": 464
 },
 {
  "taggedQuestion": "Which bacteria's taxonomic class is Bacilli?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which bacteria's taxonomic class #entity1",
    "originStr": "Which bacteria's taxonomic class #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is Bacilli",
    "originStr": "is Bacilli"
   }
  ],
  "question": "Which bacteria's taxonomic class is Bacilli",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NNS bacteria) (POS 's)) (JJ taxonomic) (NN class)) (VP (VBZ is) (NP (NNP Bacilli)))) (. ?)))",
  "entityNum": 2,
  "id": 465
 },
 {
  "taggedQuestion": "What honours did Reigh Count receive?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What honours did Reigh Count receive",
    "originStr": "What honours did Reigh Count receive"
   }
  ],
  "question": "What honours did Reigh Count receive",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS honours)) (SQ (VBD did) (NP (NNP Reigh) (NNP Count)) (VP (VB receive))) (. ?)))",
  "entityNum": 1,
  "id": 466
 },
 {
  "taggedQuestion": "What are some products of the the company whose subsidiary is Sony Corp shareholders and subsidies?",
  "entityMap": {
   "<e0>": "Sony Corp shareholders subsidies"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some products of #entity1 subsidies",
    "originStr": "What are some products of #entity1 subsidies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company whose subsidiary is Sony Corp shareholders and",
    "originStr": "the company whose subsidiary is Sony Corp shareholders and"
   }
  ],
  "question": "What are some products of the company whose subsidiary is Sony Corp shareholders and subsidies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS products)) (PP (IN of) (NP (NP (DT the) (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (NML (NN subsidiary))) (S (VP (VBZ is) (NP (NNP Sony) (NNP Corp) (NNS shareholders) (CC and) (NNS subsidies))))))))) (. ?)))",
  "entityNum": 2,
  "id": 467
 },
 {
  "taggedQuestion": "Who built the stadiums where 2014 FIFA under 17 woman<e0> took place?",
  "entityMap": {
   "<e0>": "'s world cup"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who built #entity1 place",
    "originStr": "Who built #entity1 place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadiums where 2014 FIFA under 17 woman's world cup took",
    "originStr": "the stadiums where 2014 FIFA under 17 woman's world cup took"
   }
  ],
  "question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD built) (NP (DT the) (NNS stadiums)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD 2014) (NNP FIFA)) (PP (IN under) (NP (NP (CD 17) (NN woman)) (NP (ADD <e0>))))) (VP (VBD took) (NP (NN place))))))) (. ?)))",
  "entityNum": 2,
  "id": 468
 },
 {
  "taggedQuestion": "Which area operataed by the <e0> is also the place of death of the Sakari Suzuki ?",
  "entityMap": {
   "<e0>": "South Side Elevated Railroad"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which area operated by the South Side Elevated Railroad is",
    "originStr": "Which area operated by the South Side Elevated Railroad is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the place of death of the Sakari Suzuki",
    "originStr": "also the place of death of the Sakari Suzuki"
   }
  ],
  "question": "Which area operated by the South Side Elevated Railroad is also the place of death of the Sakari Suzuki",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN area)) (VBN operataed) (PP (IN by) (NP (DT the) (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN death)) (PP (IN of) (NP (DT the) (NNP Sakari) (NNP Suzuki))))))) (. ?)))",
  "entityNum": 1,
  "id": 469
 },
 {
  "taggedQuestion": "What is the <e0> whose related with  <e1>?",
  "entityMap": {
   "<e1>": "Doctor Who Confidential",
   "<e0>": "television show"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the television show whose #entity1",
    "originStr": "What is the television show whose #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "related with Doctor Who Confidential",
    "originStr": "related with Doctor Who Confidential"
   }
  ],
  "question": "What is the television show whose related with Doctor Who Confidential",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose)) (FRAG (ADJP (JJ related))))) (PP (IN with) (NP (NN <e1>))))) (. ?)))",
  "entityNum": 2,
  "id": 470
 },
 {
  "taggedQuestion": "Which <e0>  performed live?",
  "entityMap": {
   "<e0>": "city wasThe Triple Door (The Courage album)"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which city wasThe Triple Door #entity1 live",
    "originStr": "In which city wasThe Triple Door #entity1 live"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "-LRB- The Courage album -RRB- performed",
    "originStr": "-LRB- The Courage album -RRB- performed"
   }
  ],
  "question": "In which city wasThe Triple Door (The Courage album) performed live",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN <e0>))) (SQ (VP (VBD performed) (ADVP (RB live)))) (. ?)))",
  "entityNum": 2,
  "id": 471
 },
 {
  "taggedQuestion": "Which nearest city of Jurgens Site is the death plce of Jimmie Heuga ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which nearest city of Jurgens Site is",
    "originStr": "Which nearest city of Jurgens Site is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the death place of Jimmie Heuga",
    "originStr": "the death place of Jimmie Heuga"
   }
  ],
  "question": "Which nearest city of Jurgens Site is the death place of Jimmie Heuga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJS nearest) (NN city)) (PP (IN of) (NP (NNP Jurgens) (NNP Site))))) (SQ (VBZ is) (NP (NP (DT the) (NN death) (NN plce)) (PP (IN of) (NP (NNP Jimmie) (NNP Heuga))))) (. ?)))",
  "entityNum": 1,
  "id": 472
 },
 {
  "taggedQuestion": "List the battles fought by  <e0> ?",
  "entityMap": {
   "<e0>": "Ali Habib Mahmud"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the battles fought by Ali Habib Mahmud",
    "originStr": "List the battles fought by Ali Habib Mahmud"
   }
  ],
  "question": "List the battles fought by Ali Habib Mahmud",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 473
 },
 {
  "taggedQuestion": "How many companies were started in the states?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many companies were",
    "originStr": "How many companies were"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "started in the states",
    "originStr": "started in the states"
   }
  ],
  "question": "How many companies were started in the states",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS companies)) (VP (VBD were) (VP (VBN started) (PP (IN in) (NP (DT the) (NNS states)))))) (. ?)))",
  "entityNum": 1,
  "id": 474
 },
 {
  "taggedQuestion": "Is <e0> a doctoral student of James Chadwick?",
  "entityMap": {
   "<e0>": "Charles Drummond Ellis"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Charles Drummond Ellis a doctoral student of James Chadwick",
    "originStr": "Is Charles Drummond Ellis a doctoral student of James Chadwick"
   }
  ],
  "question": "Is Charles Drummond Ellis a doctoral student of James Chadwick",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (NP (DT a) (JJ doctoral) (NN student)) (IN of))) (NP (NNP James) (NNP Chadwick)) (. ?)))",
  "entityNum": 1,
  "id": 475
 },
 {
  "taggedQuestion": "How many movies are distributed by <e0>?",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many movies are",
    "originStr": "How many movies are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "distributed by Cinema International Corporation",
    "originStr": "distributed by Cinema International Corporation"
   }
  ],
  "question": "How many movies are distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS movies)) (VP (VBP are) (VP (VBN distributed) (PP (IN by) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 476
 },
 {
  "taggedQuestion": "Name the local authority of Trinity School, Brentwood .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the local authority of Trinity School, Brentwood",
    "originStr": "Name the local authority of Trinity School, Brentwood"
   }
  ],
  "question": "Name the local authority of Trinity School, Brentwood",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)))))) (. .)))",
  "entityNum": 1,
  "id": 477
 },
 {
  "taggedQuestion": "Name the president of Wyche Fowler .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the president of Wyche Fowler",
    "originStr": "Name the president of Wyche Fowler"
   }
  ],
  "question": "Name the president of Wyche Fowler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Wyche) (NNP Fowler))))) (. .)))",
  "entityNum": 1,
  "id": 478
 },
 {
  "taggedQuestion": "Which fields have people born in Lausanne worked?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which fields have #entity1 worked",
    "originStr": "In which fields have #entity1 worked"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people born in Lausanne",
    "originStr": "people born in Lausanne"
   }
  ],
  "question": "In which fields have people born in Lausanne worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NNS fields)) (VP (VBP have) (NP (NP (NNS people)) (VP (VBN born) (PP (IN in) (NP (NNP Lausanne)))))))) (VP (VBD worked)) (. ?)))",
  "entityNum": 2,
  "id": 479
 },
 {
  "taggedQuestion": "Which <e0>  was founded by Jim Harris ?",
  "entityMap": {
   "<e0>": "Texas based company"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which Texas based company was",
    "originStr": "Which Texas based company was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "founded by Jim Harris",
    "originStr": "founded by Jim Harris"
   }
  ],
  "question": "Which Texas based company was founded by Jim Harris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (ADD <e0>)) (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. ?)))",
  "entityNum": 1,
  "id": 480
 },
 {
  "taggedQuestion": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr..",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name a show hosted by Brian Dunkleman and",
    "originStr": "Name a show hosted by Brian Dunkleman and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "judged by Harry Connick , Jr",
    "originStr": "judged by Harry Connick , Jr"
   }
  ],
  "question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN show)) (VP (VP (VBN hosted) (PP (IN by) (NP (NNP Brian) (NNP Dunkleman)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NP (NNP Harry) (NNP Connick)) (, ,) (NP (NNP Jr.)))))))) (. .)))(ROOT (. .))",
  "entityNum": 1,
  "id": 481
 },
 {
  "taggedQuestion": "Which educational institute does <e0> belong to?",
  "entityMap": {
   "<e0>": "Cornell University Press"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which educational institute does Cornell University Press belong to",
    "originStr": "To which educational institute does Cornell University Press belong to"
   }
  ],
  "question": "To which educational institute does Cornell University Press belong to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (JJ educational) (NN institute))) (SQ (VBZ does) (S (NP (ADD <e0>)) (VP (VBP belong) (PP (IN to))))) (. ?)))",
  "entityNum": 1,
  "id": 482
 },
 {
  "taggedQuestion": "Which country's cuisine, ham is an important part?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which country's cuisine , ham is",
    "originStr": "In which country's cuisine , ham is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "an important part",
    "originStr": "an important part"
   }
  ],
  "question": "In which country's cuisine, ham is an important part",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN country) (POS 's)) (NP (NP (NN cuisine)) (, ,) (NP (NN ham))))) (SQ (VBZ is) (NP (DT an) (JJ important) (NN part))) (. ?)))",
  "entityNum": 1,
  "id": 483
 },
 {
  "taggedQuestion": "List the softwares which runs on Microsoft Windows and has license as <e0>?",
  "entityMap": {
   "<e0>": "Software as a service"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the softwares which runs on Microsoft Windows and",
    "originStr": "List the softwares which runs on Microsoft Windows and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has license as Software as a service",
    "originStr": "has license as Software as a service"
   }
  ],
  "question": "List the softwares which runs on Microsoft Windows and has license as Software as a service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS softwares)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ runs) (PP (IN on) (NP (NNP Microsoft) (NNP Windows)))) (CC and) (VP (VBZ has) (NP (NP (NN license)) (PP (IN as) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 484
 },
 {
  "taggedQuestion": "Which ppolitical party of Yashpal Kapur is also the owner of National Herald ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which political party of Yashpal Kapur is",
    "originStr": "Which political party of Yashpal Kapur is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the owner of National Herald",
    "originStr": "also the owner of National Herald"
   }
  ],
  "question": "Which political party of Yashpal Kapur is also the owner of National Herald",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ ppolitical) (NN party)) (PP (IN of) (NP (NNP Yashpal) (NNP Kapur))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP National) (NNP Herald))))) (. ?)))",
  "entityNum": 1,
  "id": 485
 },
 {
  "taggedQuestion": "Who all have been presenters on shows by the NBC?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who all have been presenters on #entity1",
    "originStr": "Who all have been presenters on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "shows by the NBC",
    "originStr": "shows by the NBC"
   }
  ],
  "question": "Who all have been presenters on shows by the NBC",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN been) (NP (NP (NNS presenters)) (PP (IN on) (NP (NNS shows)))) (PP (IN by) (NP (DT the) (NNP NBC)))))) (. ?)))",
  "entityNum": 2,
  "id": 486
 },
 {
  "taggedQuestion": "Give me the <e0> which are the predecessor of <e1>.",
  "entityMap": {
   "<e1>": "Full Sized Cars",
   "<e0>": "list of cars"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me the list of cars which are #entity1",
    "originStr": "Give me the list of cars which are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of Full Sized Cars",
    "originStr": "the predecessor of Full Sized Cars"
   }
  ],
  "question": "Give me the list of cars which are the predecessor of Full Sized Cars",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (ADD <e1>))))))))) (. .)))",
  "entityNum": 2,
  "id": 487
 },
 {
  "taggedQuestion": "List the people with final resting place as Plymouth, Vermont and has <e0> as predecessor?",
  "entityMap": {
   "<e0>": "Samuel W. McCall"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the people with final resting place as Plymouth , Vermont",
    "originStr": "List the people with final resting place as Plymouth , Vermont"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has Samuel W. McCall as predecessor",
    "originStr": "and has Samuel W. McCall as predecessor"
   }
  ],
  "question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NP (JJ final) (JJ resting) (NN place)) (PP (IN as) (NP (NNP Plymouth) (, ,) (NNP Vermont)))))) (CC and) (VP (VBZ has) (NP (NP (ADD <e0>)) (PP (IN as) (NP (NN predecessor)))))) (. ?)))",
  "entityNum": 1,
  "id": 488
 },
 {
  "taggedQuestion": "What disease led to the demise of <e0> and Martino Martini ?",
  "entityMap": {
   "<e0>": "Letitia MacTavish Hargrave"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What disease led",
    "originStr": "What disease led"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "to the demise of Letitia MacTavish Hargrave and Martino Martini",
    "originStr": "to the demise of Letitia MacTavish Hargrave and Martino Martini"
   }
  ],
  "question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN disease)) (SQ (VP (VBD led) (PP (IN to) (NP (NP (DT the) (NN demise)) (PP (IN of) (NP (NP (ADD <e0>)) (CC and) (NP (NNP Martino) (NNP Martini)))))))) (. ?)))",
  "entityNum": 1,
  "id": 489
 },
 {
  "taggedQuestion": "What are some software which are written in languages that are run on Unix like OS?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some software which are written in #entity1",
    "originStr": "What are some software which are written in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "languages that are run on Unix like OS",
    "originStr": "languages that are run on Unix like OS"
   }
  ],
  "question": "What are some software which are written in languages that are run on Unix like OS",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN written) (PP (IN in) (NP (NP (NNS languages)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (VP (VBN run) (PP (IN on) (NP (NNP Unix))) (PP (IN like) (NP (NNP OS))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 490
 },
 {
  "taggedQuestion": "List all the movies whose directors were born in Kenosha, Wisconsin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all the movies whose directors #entity1",
    "originStr": "List all the movies whose directors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "were born in Kenosha , Wisconsin",
    "originStr": "were born in Kenosha , Wisconsin"
   }
  ],
  "question": "List all the movies whose directors were born in Kenosha, Wisconsin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (PDT all) (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NNS directors))) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Kenosha) (, ,) (NNP Wisconsin)))))))) (. ?)))",
  "entityNum": 2,
  "id": 491
 },
 {
  "taggedQuestion": "Does the <e0> in Kingston, Ontario?",
  "entityMap": {
   "<e0>": "St lawrence river start"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the St lawrence river start in Kingston, Ontario",
    "originStr": "Does the St lawrence river start in Kingston, Ontario"
   }
  ],
  "question": "Does the St lawrence river start in Kingston, Ontario",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VBZ Does) (NP (NP (DT the) (NN <e0>)) (PP (IN in) (NP (NNP Kingston) (, ,) (NNP Ontario))))) (. ?)))",
  "entityNum": 1,
  "id": 492
 },
 {
  "taggedQuestion": "What stadium's operator is Stan Kroenke?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What stadium's operator is Stan Kroenke",
    "originStr": "What stadium's operator is Stan Kroenke"
   }
  ],
  "question": "What stadium's operator is Stan Kroenke",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN stadium) (POS 's)) (NP (NN operator))) (SQ (VBZ is) (NP (NNP Stan) (NNP Kroenke))) (. ?)))",
  "entityNum": 1,
  "id": 493
 },
 {
  "taggedQuestion": "Is Mike Babcock the head coach of <e0>?",
  "entityMap": {
   "<e0>": "Toronto Maple Leafs"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Mike Babcock the head coach of Toronto Maple Leafs",
    "originStr": "Is Mike Babcock the head coach of Toronto Maple Leafs"
   }
  ],
  "question": "Is Mike Babcock the head coach of Toronto Maple Leafs",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Mike) (NNP Babcock)) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 494
 },
 {
  "taggedQuestion": "Whose commanders are John Mc Ewen and Park Chunghee?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose",
    "originStr": "Whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "commanders are John Mc Ewen and Park Chunghee",
    "originStr": "commanders are John Mc Ewen and Park Chunghee"
   }
  ],
  "question": "Whose commanders are John Mc Ewen and Park Chunghee",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NNS commanders)) (SQ (VBP are) (NP (NP (NNP John) (NNP Mc) (NNP Ewen)) (CC and) (NP (NNP Park) (NNP Chunghee)))) (. ?)))",
  "entityNum": 1,
  "id": 495
 },
 {
  "taggedQuestion": "Who gave guest appearances on the show which is the next episode after the Bombshell one?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who gave guest appearances on #entity1",
    "originStr": "Who gave guest appearances on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the show which is the next episode after the Bombshell one",
    "originStr": "the show which is the next episode after the Bombshell one"
   }
  ],
  "question": "Who gave guest appearances on the show which is the next episode after the Bombshell one",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD gave) (NP (NN guest) (NNS appearances)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (JJ next) (NN episode)) (PP (IN after) (NP (DT the) (NN Bombshell) (CD one))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 496
 },
 {
  "taggedQuestion": "What is manufactured by a company headed by Kazuo Hirai?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is manufactured by #entity1",
    "originStr": "What is manufactured by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a company headed by Kazuo Hirai",
    "originStr": "a company headed by Kazuo Hirai"
   }
  ],
  "question": "What is manufactured by a company headed by Kazuo Hirai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN manufactured) (PP (IN by) (NP (NP (DT a) (NN company)) (VP (VBN headed) (PP (IN by) (NP (NNP Kazuo) (NNP Hirai)))))))) (. ?)))",
  "entityNum": 2,
  "id": 497
 },
 {
  "taggedQuestion": "Which presidents have politicians from the Continental army served?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Under which presidents have #entity1",
    "originStr": "Under which presidents have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "politicians from the Continental army served",
    "originStr": "politicians from the Continental army served"
   }
  ],
  "question": "Under which presidents have politicians from the Continental army served",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS presidents)) (SQ (VP (VBP have) (NP (NP (NP (NNS politicians)) (PP (IN from) (NP (DT the) (NNP Continental) (NN army)))) (SBAR (S (VP (VBD served))))))) (. ?)))",
  "entityNum": 2,
  "id": 498
 },
 {
  "taggedQuestion": "<e0> is the governing body of which city?",
  "entityMap": {
   "<e0>": "Philadelphia City Council"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 of which city",
    "originStr": "#entity1 of which city"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Philadelphia City Council is the governing body",
    "originStr": "Philadelphia City Council is the governing body"
   }
  ],
  "question": "Philadelphia City Council is the governing body of which city",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (ADD <e0>)) (VP (VBZ is) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (WDT which) (NN city))))) (. ?)))",
  "entityNum": 2,
  "id": 499
 },
 {
  "taggedQuestion": "What are the binomial authority of Menetries's warbler?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the binomial authority of Menetries's warbler",
    "originStr": "What are the binomial authority of Menetries's warbler"
   }
  ],
  "question": "What are the binomial authority of Menetries's warbler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ binomial) (NN authority)) (PP (IN of) (NP (NP (NNPS Menetries) (POS 's)) (NN warbler))))) (. ?)))",
  "entityNum": 1,
  "id": 500
 },
 {
  "taggedQuestion": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movie which has music composed by Elliot Goldenthal and",
    "originStr": "Name the movie which has music composed by Elliot Goldenthal and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "screenplay by Akiva Goldsman",
    "originStr": "screenplay by Akiva Goldsman"
   }
  ],
  "question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN music)) (VP (VBN composed) (PP (IN by) (NP (NP (NNP Elliot) (NNP Goldenthal)) (CC and) (NP (NN screenplay)))) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))))))))) (. .)))",
  "entityNum": 1,
  "id": 501
 },
 {
  "taggedQuestion": "Name the fictional character whose relative are Duck family and Clan McDuck.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the fictional character whose relative are Duck family and Clan McDuck",
    "originStr": "the fictional character whose relative are Duck family and Clan McDuck"
   }
  ],
  "question": "Name the fictional character whose relative are Duck family and Clan McDuck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN relative)) (S (VP (VBP are) (NP (NP (NN Duck) (NN family)) (CC and) (NP (NNP Clan) (NNP McDuck)))))))) (. .)))",
  "entityNum": 1,
  "id": 502
 },
 {
  "taggedQuestion": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname <e0> ?",
  "entityMap": {
   "<e1>": "NCAA Division Football Bowl Subdivision",
   "<e0>": "Tulane Green Wave"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which university with",
    "originStr": "Which university with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave",
    "originStr": "athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave"
   }
  ],
  "question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN university)) (PP (IN with) (NP (NP (NNS athletics) (NN department)) (PP (IN in) (NP (NML (NNP NCAA) (NNP Division)) (NNP I) (NNP Football) (NNP Bowl) (NNP Subdivision)))))) (SQ (VP (VBZ has) (NP (NN nickname) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 503
 },
 {
  "taggedQuestion": "Which state does <e0> belong ?",
  "entityMap": {
   "<e0>": "Jerome B. Chaffee"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which state does Jerome B. Chaffee belong",
    "originStr": "Which state does Jerome B. Chaffee belong"
   }
  ],
  "question": "Which state does Jerome B. Chaffee belong",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ does) (NP (ADD <e0>)) (VP (VB belong)))) (. ?)))",
  "entityNum": 1,
  "id": 504
 },
 {
  "taggedQuestion": "Which of the parties that have governed over Rishikesh, does Govinda belong too?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which of the parties that",
    "originStr": "In which of the parties that"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have governed over Rishikesh , does Govinda belong too",
    "originStr": "have governed over Rishikesh , does Govinda belong too"
   }
  ],
  "question": "In which of the parties that have governed over Rishikesh, does Govinda belong too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which)) (PP (IN of) (NP (DT the) (NNS parties)))) (SQ (SBAR (WHNP (WDT that)) (S (VP (VBP have) (VP (VBN governed) (PP (IN over) (NP (NNP Rishikesh))))))) (, ,) (VBZ does) (NP (NNP Govinda)) (VP (VB belong) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 505
 },
 {
  "taggedQuestion": "What awards are won by the screenwriter of Lucky You?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What awards are won by #entity1",
    "originStr": "What awards are won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the screenwriter of Lucky You",
    "originStr": "the screenwriter of Lucky You"
   }
  ],
  "question": "What awards are won by the screenwriter of Lucky You",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP are) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN screenwriter)) (PP (IN of) (NP (NNP Lucky) (NNP You)))))))) (. ?)))",
  "entityNum": 2,
  "id": 506
 },
 {
  "taggedQuestion": "Name  the Pole driver of <e0> .",
  "entityMap": {
   "<e0>": "1994 Spanish Grand Prix"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the Pole driver of 1994 Spanish Grand Prix",
    "originStr": "Name the Pole driver of 1994 Spanish Grand Prix"
   }
  ],
  "question": "Name the Pole driver of 1994 Spanish Grand Prix",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 507
 },
 {
  "taggedQuestion": "Where did Georges Wolinski and Judson Huss die/?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where",
    "originStr": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did Georges Wolinski and Judson Huss die",
    "originStr": "did Georges Wolinski and Judson Huss die"
   }
  ],
  "question": "Where did Georges Wolinski and Judson Huss die",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (NP (NNP Georges) (NNP Wolinski)) (CC and) (NP (NNP Judson) (NNPS Huss)) (NML (NN die) (HYPH /))))) (. ?)))",
  "entityNum": 1,
  "id": 508
 },
 {
  "taggedQuestion": "What is the parent company of the airline whose hub is in Detroit?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the parent company of #entity1",
    "originStr": "What is the parent company of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airline whose hub is in Detroit",
    "originStr": "the airline whose hub is in Detroit"
   }
  ],
  "question": "What is the parent company of the airline whose hub is in Detroit",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (NP (DT the) (NN airline)) (SBAR (WHNP (WP$ whose) (NML (NN hub))) (S (VP (VBZ is) (PP (IN in) (NP (NNP Detroit)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 509
 },
 {
  "taggedQuestion": "What is the appliance which uses the <e1> manufactured by <e0>?",
  "entityMap": {
   "<e1>": "central processing unit",
   "<e0>": "Marvell Technology Group"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the appliance   is the appliance which uses the central processing unit manufactured by Marvell Technology Group",
    "originStr": "What is the appliance   is the appliance which uses the central processing unit manufactured by Marvell Technology Group"
   }
  ],
  "question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN appliance)) (SBAR (WHNP (WDT which)) (S (VP (VBZ uses) (NP (NP (DT the) (NN <e1>)) (VP (VBN manufactured) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 510
 },
 {
  "taggedQuestion": "Give me all magazines whose founder died in Berkeley, California.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me all magazines whose founder #entity1",
    "originStr": "Give me all magazines whose founder #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "died in Berkeley , California",
    "originStr": "died in Berkeley , California"
   }
  ],
  "question": "Give me all magazines whose founder died in Berkeley, California",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS magazines)) (SBAR (WHNP (WP$ whose) (NN founder)) (S (VP (VBD died) (PP (IN in) (NP (NNP Berkeley) (, ,) (NNP California)))))))) (. .)))",
  "entityNum": 2,
  "id": 511
 },
 {
  "taggedQuestion": "Which technological products were manufactured by Foxconn?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which technological products #entity1",
    "originStr": "Which technological products #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "were manufactured by Foxconn",
    "originStr": "were manufactured by Foxconn"
   }
  ],
  "question": "Which technological products were manufactured by Foxconn",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (JJ technological) (NNS products)) (VP (VBD were) (VP (VBN manufactured) (PP (IN by) (NP (NNP Foxconn)))))) (. ?)))",
  "entityNum": 2,
  "id": 512
 },
 {
  "taggedQuestion": "Is George Lucas the cinematographer of 6-18-67?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is George Lucas the cinematographer of 6-18-67",
    "originStr": "Is George Lucas the cinematographer of 6-18-67"
   }
  ],
  "question": "Is George Lucas the cinematographer of 6-18-67",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP George) (NNP Lucas)) (NP (NP (DT the) (NN cinematographer)) (PP (IN of) (NP (CD 6-18-67)))) (. ?)))",
  "entityNum": 1,
  "id": 513
 },
 {
  "taggedQuestion": "Whose predecessor had Jenny Macklin as a deputy ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1",
    "originStr": "#entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Whose predecessor had Jenny Macklin as a deputy",
    "originStr": "Whose predecessor had Jenny Macklin as a deputy"
   }
  ],
  "question": "Whose predecessor had Jenny Macklin as a deputy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP$ Whose) (NN predecessor)) (SQ (VP (VBD had) (NP (NP (NNP Jenny) (NNP Macklin)) (PP (IN as) (NP (DT a) (NN deputy)))))) (. ?)))",
  "entityNum": 2,
  "id": 514
 },
 {
  "taggedQuestion": "How many cars are similar to the ones assembled in the <e0>?",
  "entityMap": {
   "<e0>": "Jefferson North Assembly"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many cars are similar to #entity1",
    "originStr": "How many cars are similar to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones assembled in the Jefferson North Assembly",
    "originStr": "the ones assembled in the Jefferson North Assembly"
   }
  ],
  "question": "How many cars are similar to the ones assembled in the Jefferson North Assembly",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cars)) (SQ (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBN assembled) (PP (IN in) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 515
 },
 {
  "taggedQuestion": "Count the region of AN/FSQ-7 Combat Direction Central.",
  "entityMap": {
   "<e0>": "/ FSQ-7 Combat Direction Central"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the number of region of AN/FSQ-7 Combat Direction Central",
    "originStr": "Count the number of region of AN/FSQ-7 Combat Direction Central"
   }
  ],
  "question": "Count the number of region of AN/FSQ-7 Combat Direction Central",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN region)) (PP (IN of) (NP (DT AN) (ADJP (SYM /) (NP (NN FSQ) (HYPH -) (CD 7))) (NNP Combat) (NNP Direction) (NNP Central))))) (. .)))",
  "entityNum": 1,
  "id": 516
 },
 {
  "taggedQuestion": "What are the common houses of US Congress and the Kansas Legislature?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are the common houses of US Congress and the Kansas Legislature",
    "originStr": "are the common houses of US Congress and the Kansas Legislature"
   }
  ],
  "question": "What are the common houses of US Congress and the Kansas Legislature",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ common) (NNS houses)) (PP (IN of) (NP (NP (NNP US) (NNP Congress)) (CC and) (NP (DT the) (NNP Kansas) (NNP Legislature)))))) (. ?)))",
  "entityNum": 1,
  "id": 517
 },
 {
  "taggedQuestion": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John Muir the first one to ascend one of the peaks in the cathedral peak",
    "originStr": "Was John Muir the first one to ascend one of the peaks in the cathedral peak"
   }
  ],
  "question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP Muir)) (NP (NP (DT the) (JJ first) (CD one)) (S (VP (TO to) (VP (VB ascend) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS peaks)) (PP (IN in) (NP (DT the) (NN cathedral) (NN peak)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 518
 },
 {
  "taggedQuestion": "How many different places have people gone to the <e0>?",
  "entityMap": {
   "<e0>": "Harward Medical School"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "From how many different places have #entity1",
    "originStr": "From how many different places have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people gone to the Harward Medical School",
    "originStr": "people gone to the Harward Medical School"
   }
  ],
  "question": "From how many different places have people gone to the Harward Medical School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NML (NNS places))) (SQ (VBP have) (NP (NNS people)) (VP (VBN gone) (PP (IN to) (NP (DT the) (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 519
 },
 {
  "taggedQuestion": "Name the <e0> where Mona Marshall has given voice and is distributed by Comedy Central.",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the television show where",
    "originStr": "Name the television show where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Mona Marshall has given voice and is distributed by Comedy Central",
    "originStr": "Mona Marshall has given voice and is distributed by Comedy Central"
   }
  ],
  "question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN <e0>)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Mona) (NNP Marshall)) (VP (VP (VBZ has) (VP (VBN given) (NP (NN voice)))) (CC and) (VP (VBZ is) (VP (VBN distributed) (PP (IN by) (NP (NNP Comedy) (NNP Central))))))))) (. .)))",
  "entityNum": 1,
  "id": 520
 },
 {
  "taggedQuestion": "What are Jerry Bock's musicals based upon?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are Jerry Bock's musicals #entity1",
    "originStr": "What are Jerry Bock's musicals #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "based upon",
    "originStr": "based upon"
   }
  ],
  "question": "What are Jerry Bock's musicals based upon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (NNP Jerry) (NNP Bock) (POS 's)) (NNS musicals)) (VP (VBN based) (PP (IN upon)))) (. ?)))",
  "entityNum": 2,
  "id": 521
 },
 {
  "taggedQuestion": "Give me list of people who were the first to climb a peak in the Yosemite park.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me list of people #entity1",
    "originStr": "Give me list of people #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who were the first to climb a peak in the Yosemite park",
    "originStr": "who were the first to climb a peak in the Yosemite park"
   }
  ],
  "question": "Give me list of people who were the first to climb a peak in the Yosemite park",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN list)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD were) (NP (DT the) (JJ first) (S (VP (TO to) (VP (VB climb) (NP (DT a) (NN peak)) (PP (IN in) (NP (DT the) (NNP Yosemite) (NN park)))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 522
 },
 {
  "taggedQuestion": "What is <e0> a part of?",
  "entityMap": {
   "<e0>": "Naval Support Activity Naples"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is Naval Support Activity Naples a part of",
    "originStr": "What is Naval Support Activity Naples a part of"
   }
  ],
  "question": "What is Naval Support Activity Naples a part of",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (ADD <e0>)) (PP (NP (DT a) (NN part)) (IN of)))) (. ?)))",
  "entityNum": 1,
  "id": 523
 },
 {
  "taggedQuestion": "Who has allegiance is <e0> and buried in Montpelier?",
  "entityMap": {
   "<e0>": "Colony of Virginia"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has allegiance is Colony of Virginia and buried in Montpelier",
    "originStr": "has allegiance is Colony of Virginia and buried in Montpelier"
   }
  ],
  "question": "Who has allegiance is Colony of Virginia and buried in Montpelier",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ has) (NP (NN allegiance)) (VP (VP (VBZ is) (NP (ADD <e0>))) (CC and) (VP (VBN buried) (PP (IN in) (NP (NNP Montpelier)))))) (. ?)))",
  "entityNum": 1,
  "id": 524
 },
 {
  "taggedQuestion": "Was Tim Gunn a guest on <e0>?",
  "entityMap": {
   "<e0>": "The Broken Code"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Tim Gunn a guest on The Broken Code",
    "originStr": "Was Tim Gunn a guest on The Broken Code"
   }
  ],
  "question": "Was Tim Gunn a guest on The Broken Code",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Tim) (NNP Gunn)) (NP (NP (DT a) (NN guest)) (PP (IN on) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 525
 },
 {
  "taggedQuestion": "What is the successor of PlayStation 4?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the",
    "originStr": "What is the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "successor of PlayStation 4",
    "originStr": "successor of PlayStation 4"
   }
  ],
  "question": "What is the successor of PlayStation 4",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP PlayStation) (CD 4))))) (. ?)))",
  "entityNum": 1,
  "id": 526
 },
 {
  "taggedQuestion": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the sovereign state of the Dafydd Benfras where",
    "originStr": "What is the sovereign state of the Dafydd Benfras where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Jasmine Lowson is also citizen of",
    "originStr": "Jasmine Lowson is also citizen of"
   }
  ],
  "question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ sovereign) (NN state)) (PP (IN of) (NP (NP (DT the) (NNP Dafydd) (NNP Benfras)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jasmine) (NNP Lowson)) (VP (VBZ is) (ADVP (RB also)) (NP (NP (NN citizen)) (PP (IN of)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 527
 },
 {
  "taggedQuestion": "Who did their highschool from a school whose mascot was a fighting tiger?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who did their highschool from #entity1",
    "originStr": "Who did their highschool from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a school whose mascot was a fighting tiger",
    "originStr": "a school whose mascot was a fighting tiger"
   }
  ],
  "question": "Who did their highschool from a school whose mascot was a fighting tiger",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD did) (NP (PRP$ their) (NN highschool)) (PP (IN from) (NP (NP (DT a) (NN school)) (SBAR (WHNP (WP$ whose) (NN mascot)) (S (VP (VBD was) (NP (DT a) (NN fighting) (NN tiger))))))))) (. ?)))",
  "entityNum": 2,
  "id": 528
 },
 {
  "taggedQuestion": "Which destination of Emerald Air is also the city served by <e0> ?",
  "entityMap": {
   "<e0>": "houston Fort Bend Airport"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which destination of Emerald Air is",
    "originStr": "Which destination of Emerald Air is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the city served by houston Fort Bend Airport",
    "originStr": "also the city served by houston Fort Bend Airport"
   }
  ],
  "question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN destination) (PP (IN of) (NP (NNP Emerald) (NNP Air))))) (SQ (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN city)) (VP (VBN served) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 529
 },
 {
  "taggedQuestion": "Name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the region served by Jerusalem Institue of Justice which",
    "originStr": "name the region served by Jerusalem Institue of Justice which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was also the conflict region in GazaIsrael",
    "originStr": "was also the conflict region in GazaIsrael"
   }
  ],
  "question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN region)) (VP (VBN served) (PP (IN by) (NP (NP (NP (NNP Jerusalem) (NNP Institue)) (PP (IN of) (NP (NNP Justice)))) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN conflict) (NN region)) (PP (IN in) (NP (NNP GazaIsrael)))))))))))) (. .)))",
  "entityNum": 1,
  "id": 530
 },
 {
  "taggedQuestion": "Name the company whose key person is Raymond Conner and produces <e0>.",
  "entityMap": {
   "<e0>": "Boeing CH-47 Chinook"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the company whose key person is Raymond Conner and",
    "originStr": "Name the company whose key person is Raymond Conner and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "produces Boeing CH-47 Chinook",
    "originStr": "produces Boeing CH-47 Chinook"
   }
  ],
  "question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (ADJP (JJ key)) (NN person)) (S (VP (VP (VBZ is) (NP (NNP Raymond) (NNP Conner))) (CC and) (VP (VBZ produces) (NP (ADD <e0>)))))))) (. .)))",
  "entityNum": 1,
  "id": 531
 },
 {
  "taggedQuestion": "What is the total number of professions in which someone who has suicided worked?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": " which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of professions in #entity1",
    "originStr": "What is the total number of professions in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which someone who has suicided worked",
    "originStr": "which someone who has suicided worked"
   }
  ],
  "question": "What is the total number of professions in which someone who has suicided worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS professions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN suicided)))))) (VP (VBN worked)))))))) (. ?)))",
  "entityNum": 2,
  "id": 532
 },
 {
  "taggedQuestion": "How many golf players are there in <e0> ?",
  "entityMap": {
   "<e0>": "Arizona State Sun Devils"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many golf players are there #entity1",
    "originStr": "How many golf players are there #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "in Arizona State Sun Devils",
    "originStr": "in Arizona State Sun Devils"
   }
  ],
  "question": "How many golf players are there in Arizona State Sun Devils",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NN golf)) (NNS players)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 2,
  "id": 533
 },
 {
  "taggedQuestion": "Count the characters in Batman Live.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the number of characters in Batman Live",
    "originStr": "Count the number of characters in Batman Live"
   }
  ],
  "question": "Count the number of characters in Batman Live",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (DT the) (NNS characters)) (PP (IN in) (NP (NNP Batman) (NNP Live)))) (. .)))",
  "entityNum": 1,
  "id": 534
 },
 {
  "taggedQuestion": "List the services provided by the company which provides Microsoft azure as one of the service ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the services provided by #entity1",
    "originStr": "List the services provided by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which provides Microsoft azure as one of the service",
    "originStr": "the company which provides Microsoft azure as one of the service"
   }
  ],
  "question": "List the services provided by the company which provides Microsoft azure as one of the service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (DT the) (NNS services)) (PP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ provides) (NP (NNP Microsoft) (JJ azure)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN service)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 535
 },
 {
  "taggedQuestion": "What are some team members of the team based in Camp Nou?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some team members of #entity1",
    "originStr": "What are some team members of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the team based in Camp Nou",
    "originStr": "the team based in Camp Nou"
   }
  ],
  "question": "What are some team members of the team based in Camp Nou",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN team) (NNS members)) (PP (IN of) (NP (DT the) (NN team)))) (VP (VBN based) (PP (IN in) (NP (NNP Camp) (NNP Nou))))) (. ?)))",
  "entityNum": 2,
  "id": 536
 },
 {
  "taggedQuestion": "Which universities are also known as the <e0>?",
  "entityMap": {
   "<e0>": "Tulane Green wave"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which universities are #entity1",
    "originStr": "Which universities are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "also known as the Tulane Green wave",
    "originStr": "also known as the Tulane Green wave"
   }
  ],
  "question": "Which universities are also known as the Tulane Green wave",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS universities)) (VP (VBP are) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 537
 },
 {
  "taggedQuestion": "What is the branch of the politicians whose governor is Bill Clements?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the branch of #entity1",
    "originStr": "What is the branch of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the politicians whose governor is Bill Clements",
    "originStr": "the politicians whose governor is Bill Clements"
   }
  ],
  "question": "What is the branch of the politicians whose governor is Bill Clements",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NML (NN governor))) (S (VP (VBZ is) (NP (NNP Bill) (NNP Clements))))))))) (. ?)))",
  "entityNum": 2,
  "id": 538
 },
 {
  "taggedQuestion": "Who composed the episode after which came Butter's Very own Episode?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who composed #entity1",
    "originStr": "Who composed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the episode after which came Butter's Very own Episode",
    "originStr": "the episode after which came Butter's Very own Episode"
   }
  ],
  "question": "Who composed the episode after which came Butter's Very own Episode",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN composed) (NP (DT the) (NN episode)) (PP (IN after) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (NP (NP (NNP Butter) (POS 's)) (ADJP (RB Very) (JJ own)) (NN Episode)))))))) (. ?)))",
  "entityNum": 2,
  "id": 539
 },
 {
  "taggedQuestion": "What is the location country of Teperberg 1870 ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the location country of Teperberg 1870",
    "originStr": "What is the location country of Teperberg 1870"
   }
  ],
  "question": "What is the location country of Teperberg 1870",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN location) (NN country)) (PP (IN of) (NP (NNP Teperberg) (CD 1870))))) (. ?)))",
  "entityNum": 1,
  "id": 540
 },
 {
  "taggedQuestion": "List the software developed by Shawn Fanning ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the software #entity1",
    "originStr": "List the software #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "developed by Shawn Fanning",
    "originStr": "developed by Shawn Fanning"
   }
  ],
  "question": "List the software developed by Shawn Fanning",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN software)) (VP (VBN developed) (PP (IN by) (NP (NNP Shawn) (NNP Fanning)))))) (. ?)))",
  "entityNum": 2,
  "id": 541
 },
 {
  "taggedQuestion": "What is the stylistic origin of the music genres where the Bass guitar is important?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the stylistic origin of #entity1",
    "originStr": "What is the stylistic origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the music genres where the Bass guitar is important",
    "originStr": "the music genres where the Bass guitar is important"
   }
  ],
  "question": "What is the stylistic origin of the music genres where the Bass guitar is important",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ stylistic) (NN origin)) (PP (IN of) (NP (NP (DT the) (NN music) (NNS genres)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NNP Bass) (NN guitar)) (VP (VBZ is) (ADJP (JJ important))))))))) (. ?)))",
  "entityNum": 2,
  "id": 542
 },
 {
  "taggedQuestion": "What are the other notable work of the executive producer of <e0> episode of Doctor Who?",
  "entityMap": {
   "<e0>": "The Runaway Bride"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the other notable work of #entity1",
    "originStr": "What are the other notable work of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the executive producer of The Runaway Bride episode of Doctor Who",
    "originStr": "the executive producer of The Runaway Bride episode of Doctor Who"
   }
  ],
  "question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ other) (JJ notable) (NN work)) (PP (IN of) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NP (NN <e0>) (NN episode)) (PP (IN of) (NP (NP (NNP Doctor)) (SBAR (WHNP (WP Who))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 543
 },
 {
  "taggedQuestion": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the voice actor of allen walker also",
    "originStr": "Who was the voice actor of allen walker also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "gave voice to kimihiro watanuki",
    "originStr": "gave voice to kimihiro watanuki"
   }
  ],
  "question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN voice)) (SBAR (S (NP (NP (NN actor)) (PP (IN of) (NP (NN allen) (NN walker)))) (ADVP (RB also)) (VP (VBD gave) (NP (NN voice)) (PP (IN to) (NP (NN kimihiro) (NN watanuki)))))))) (. ?)))",
  "entityNum": 1,
  "id": 544
 },
 {
  "taggedQuestion": "Name the office holder whose final resting place is North Bend and was part of <e0> conflict .",
  "entityMap": {
   "<e0>": "Siege of fort recovery"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office holder whose final resting place is North Bend and",
    "originStr": "Name the office holder whose final resting place is North Bend and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was part of Siege of fort recovery conflict",
    "originStr": "was part of Siege of fort recovery conflict"
   }
  ],
  "question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ final) (JJ resting) (NN place)) (VP (VBZ is) (ADJP (JJ North)) (UCP (NP (NNP Bend)) (CC and) (S (VP (VBD was) (NP (NP (NN part)) (PP (IN of) (NP (NN <e0>) (NN conflict))))))))))) (. .)))",
  "entityNum": 1,
  "id": 545
 },
 {
  "taggedQuestion": "What type of engines are utilised by Purvis Eureka?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What type of engines are utilised #entity1",
    "originStr": "What type of engines are utilised #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "by Purvis Eureka",
    "originStr": "by Purvis Eureka"
   }
  ],
  "question": "What type of engines are utilised by Purvis Eureka",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NNS engines)))) (SQ (VBP are) (VP (VBN utilised) (PP (IN by) (NP (NNP Purvis) (NNP Eureka))))) (. ?)))",
  "entityNum": 2,
  "id": 546
 },
 {
  "taggedQuestion": "Who edited Easy street ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who edited Easy street",
    "originStr": "Who edited Easy street"
   }
  ],
  "question": "Who edited Easy street",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN edited) (NP (JJ Easy) (NN street)))) (. ?)))",
  "entityNum": 1,
  "id": 547
 },
 {
  "taggedQuestion": "Who were involved in the wars where Jonathan Haskell battled?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who were involved in the",
    "originStr": "Who were involved in the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "wars where Jonathan Haskell battled",
    "originStr": "wars where Jonathan Haskell battled"
   }
  ],
  "question": "Who were involved in the wars where Jonathan Haskell battled",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD were) (VP (VBN involved) (PP (IN in) (NP (NP (DT the) (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jonathan) (NNP Haskell)) (VP (VBD battled))))))))) (. ?)))",
  "entityNum": 1,
  "id": 548
 },
 {
  "taggedQuestion": "Which city was the film star of Singhasan Battisi born ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which city was #entity1 born",
    "originStr": "In which city was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film star of Singhasan Battisi",
    "originStr": "the film star of Singhasan Battisi"
   }
  ],
  "question": "In which city was the film star of Singhasan Battisi born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBD was) (NP (NP (DT the) (NN film) (NN star)) (PP (IN of) (NP (NNP Singhasan) (NNP Battisi)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 549
 },
 {
  "taggedQuestion": "What are the reason served by <e0> which is also the country of LPGA ?",
  "entityMap": {
   "<e0>": "Toll Global Express"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the reason served by Toll Global Express which",
    "originStr": "What are the reason served by Toll Global Express which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the country of LPGA",
    "originStr": "is also the country of LPGA"
   }
  ],
  "question": "What are the reason served by Toll Global Express which is also the country of LPGA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NN reason)) (VP (VBN served) (PP (IN by) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN country)) (PP (IN of) (NP (NN LPGA))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 550
 },
 {
  "taggedQuestion": "List the territory of Tonkin Campaign ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the territory of Tonkin Campaign",
    "originStr": "List the territory of Tonkin Campaign"
   }
  ],
  "question": "List the territory of Tonkin Campaign",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN territory)) (PP (IN of) (NP (NNP Tonkin) (NNP Campaign))))) (. ?)))",
  "entityNum": 1,
  "id": 551
 },
 {
  "taggedQuestion": "Which teams did Ryan Powell play for?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "For which teams did",
    "originStr": "For which teams did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Ryan Powell play for",
    "originStr": "Ryan Powell play for"
   }
  ],
  "question": "For which teams did Ryan Powell play for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS teams)) (SQ (VBD did) (NP (NNP Ryan) (NNP Powell)) (VP (VB play) (PP (IN for)))) (. ?)))",
  "entityNum": 1,
  "id": 552
 },
 {
  "taggedQuestion": "What are the awards won by the person who wrote the screen play for Lost in Rio ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the awards won by #entity1",
    "originStr": "What are the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who wrote the screen play for Lost in Rio",
    "originStr": "the person who wrote the screen play for Lost in Rio"
   }
  ],
  "question": "What are the awards won by the person who wrote the screen play for Lost in Rio",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD wrote) (NP (DT the) (NN screen) (NN play)) (PP (IN for) (S (VP (VBN Lost) (PP (IN in) (NP (NNP Rio))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 553
 },
 {
  "taggedQuestion": "Total number of places where people drafted in the detroit pistons have died.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Total number of places where #entity1 have died",
    "originStr": "Total number of places where #entity1 have died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people drafted in the detroit pistons",
    "originStr": "people drafted in the detroit pistons"
   }
  ],
  "question": "Total number of places where people drafted in the detroit pistons have died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (JJ Total) (NN number)) (PP (IN of) (NP (NP (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NNS people)) (VP (VBD drafted) (PP (IN in) (NP (DT the) (NN detroit) (NNS pistons))))))))) (VP (VBP have) (VP (VBN died))) (. .)))",
  "entityNum": 2,
  "id": 554
 },
 {
  "taggedQuestion": "What band made The trial and One of these days song?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What band made",
    "originStr": "What band made"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "The trial and One of these days song",
    "originStr": "The trial and One of these days song"
   }
  ],
  "question": "What band made The trial and One of these days song",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN band)) (SQ (VP (VBD made) (NP (NP (DT The) (NN trial)) (CC and) (NP (NP (CD One)) (PP (IN of) (NP (DT these) (NNS days) (NN song))))))) (. ?)))",
  "entityNum": 1,
  "id": 555
 },
 {
  "taggedQuestion": "Name the club of Julie Hastings .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the club of Julie Hastings",
    "originStr": "Name the club of Julie Hastings"
   }
  ],
  "question": "Name the club of Julie Hastings",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN club)) (PP (IN of) (NP (NNP Julie) (NNP Hastings))))) (. .)))",
  "entityNum": 1,
  "id": 556
 },
 {
  "taggedQuestion": "Where does the river Upper Neretva start flowing?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "From where does #entity1 flowing",
    "originStr": "From where does #entity1 flowing"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the river Upper Neretva start",
    "originStr": "the river Upper Neretva start"
   }
  ],
  "question": "From where does the river Upper Neretva start flowing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (S (NP (DT the) (NN river)) (NP (NP (NML (NNP Upper) (NNP Neretva)) (NN start)) (VP (VBG flowing))))) (. ?)))",
  "entityNum": 2,
  "id": 557
 },
 {
  "taggedQuestion": "Name the university located in Indiana and has affiliations with Kaplan, Inc..",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the university located in Indiana and",
    "originStr": "Name the university located in Indiana and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has affiliations with Kaplan , Inc",
    "originStr": "has affiliations with Kaplan , Inc"
   }
  ],
  "question": "Name the university located in Indiana and has affiliations with Kaplan, Inc",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NN university)) (VP (VBN located) (PP (IN in) (NP (NNP Indiana)))))) (CC and) (VP (VBZ has) (NP (NP (NNS affiliations)) (PP (IN with) (NP (NNP Kaplan) (, ,) (NNP Inc.)))))) (. .)))(ROOT (. .))",
  "entityNum": 1,
  "id": 558
 },
 {
  "taggedQuestion": "List the newspapers whose offices are situated in <e0>?",
  "entityMap": {
   "<e0>": "1211 Avenue of the Americas"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the newspapers whose offices #entity1",
    "originStr": "List the newspapers whose offices #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are situated in 1211 Avenue of the Americas",
    "originStr": "are situated in 1211 Avenue of the Americas"
   }
  ],
  "question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS newspapers)) (SBAR (WHNP (WP$ whose) (NNS offices)) (S (VP (VBP are) (VP (VBN situated) (PP (IN in) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 559
 },
 {
  "taggedQuestion": "Was Morrissey a member of the Smiths?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Morrissey a member of the Smiths",
    "originStr": "Was Morrissey a member of the Smiths"
   }
  ],
  "question": "Was Morrissey a member of the Smiths",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Morrissey)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNP Smiths)))) (. ?)))",
  "entityNum": 1,
  "id": 560
 },
 {
  "taggedQuestion": "Did Phillippe Cabot go to Columbia for studying?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Phillippe Cabot go to Columbia for studying",
    "originStr": "Did Phillippe Cabot go to Columbia for studying"
   }
  ],
  "question": "Did Phillippe Cabot go to Columbia for studying",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Phillippe) (NNP Cabot)) (VP (VB go) (PP (IN to) (NP (NNP Columbia))) (PP (IN for) (S (VP (VBG studying))))) (. ?)))",
  "entityNum": 1,
  "id": 561
 },
 {
  "taggedQuestion": "What river originates in Kingston Ontario?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What river originates",
    "originStr": "What river originates"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in Kingston Ontario",
    "originStr": "in Kingston Ontario"
   }
  ],
  "question": "What river originates in Kingston Ontario",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VP (VBZ originates) (PP (IN in) (NP (NNP Kingston) (NNP Ontario))))) (. ?)))",
  "entityNum": 1,
  "id": 562
 },
 {
  "taggedQuestion": "What style was Providence Chapel, Charlwood made?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "By what style was Providence Chapel, Charlwood made",
    "originStr": "By what style was Providence Chapel, Charlwood made"
   }
  ],
  "question": "By what style was Providence Chapel, Charlwood made",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN style))) (SQ (VBD was) (NP (NP (NNP Providence) (NN Chapel)) (, ,) (NP (NNP Charlwood))) (VP (VBN made))) (. ?)))",
  "entityNum": 1,
  "id": 563
 },
 {
  "taggedQuestion": "How many PMs did the politician work, whose successor was Kingsley Wood?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "For how many PMs did #entity1",
    "originStr": "For how many PMs did #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the politician work , whose successor was Kingsley Wood",
    "originStr": "the politician work , whose successor was Kingsley Wood"
   }
  ],
  "question": "For how many PMs did the politician work, whose successor was Kingsley Wood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNPS PMs)) (VP (VBD did) (NP (DT the) (NN politician) (NN work))))) (, ,) (WHNP (WP$ whose) (NN successor)) (SQ (VBD was) (NP (NNP Kingsley) (NNP Wood))) (. ?)))",
  "entityNum": 2,
  "id": 564
 },
 {
  "taggedQuestion": "List some companies founded by Jim Harris.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list some companies founded by",
    "originStr": "list some companies founded by"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Jim Harris",
    "originStr": "Jim Harris"
   }
  ],
  "question": "list some companies founded by Jim Harris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT some) (NNS companies)) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. .)))",
  "entityNum": 1,
  "id": 565
 },
 {
  "taggedQuestion": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me the total number of employer of #entity1",
    "originStr": "Give me the total number of employer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the engineers whose one of the employer is McDonnell Aircraft",
    "originStr": "the engineers whose one of the employer is McDonnell Aircraft"
   }
  ],
  "question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN employer)) (PP (IN of) (NP (NP (DT the) (NNS engineers)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN employer))))) (S (VP (VBZ is) (NP (NNP McDonnell) (NNP Aircraft))))))))))) (. .)))",
  "entityNum": 2,
  "id": 566
 },
 {
  "taggedQuestion": "How many developers have games where I can hear Lightning McQueen?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many developers have games #entity1",
    "originStr": "How many developers have games #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where I can hear Lightning McQueen",
    "originStr": "where I can hear Lightning McQueen"
   }
  ],
  "question": "How many developers have games where I can hear Lightning McQueen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS developers)) (VP (VBP have) (NP (NP (NNS games)) (SBAR (WHADVP (WRB where)) (S (NP (PRP I)) (VP (MD can) (VP (VB hear) (NP (NNP Lightning) (NNP McQueen))))))))) (. ?)))",
  "entityNum": 2,
  "id": 567
 },
 {
  "taggedQuestion": "Which universit's affiliation is with Kalpan, Inc. and has campus at Iowa ?",
  "entityMap": {
   "<e0>": "Kalpan , Inc."
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which university's affiliation is with Kalpan , Inc",
    "originStr": "Which university's affiliation is with Kalpan , Inc"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has campus at Iowa",
    "originStr": "and has campus at Iowa"
   }
  ],
  "question": "Which university's affiliation is with Kalpan, Inc. and has campus at Iowa",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NN universit) (POS 's)) (NN affiliation)) (VP (VP (VBZ is) (PP (IN with) (NP (NNP Kalpan) (, ,) (NNP Inc.)))) (CC and) (VP (VBZ has) (NP (NP (NN campus)) (PP (IN at) (NP (NNP Iowa))))))) (. ?)))",
  "entityNum": 1,
  "id": 568
 },
 {
  "taggedQuestion": "How many record labels publish works of Jazz fusion?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many record labels #entity1",
    "originStr": "How many record labels #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "publish works of Jazz fusion",
    "originStr": "publish works of Jazz fusion"
   }
  ],
  "question": "How many record labels publish works of Jazz fusion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADJP (WRB How) (JJ many)) (SQ (NP (NN record) (NNS labels)) (VP (VB publish) (NP (NP (NNS works)) (PP (IN of) (NP (NN Jazz) (NN fusion)))))) (. ?)))",
  "entityNum": 2,
  "id": 569
 },
 {
  "taggedQuestion": "What are the regions in which the distributor of Secrets and Lies serves ? ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the regions in #entity1 serves",
    "originStr": "What are the regions in #entity1 serves"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which the distributor of Secrets and Lies",
    "originStr": "which the distributor of Secrets and Lies"
   }
  ],
  "question": "What are the regions in which the distributor of Secrets and Lies serves",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS regions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NNS Secrets)))) (VP (VP (CC and) (VP (VBZ Lies))) (VP (VBZ serves))))))) (. ?)))(ROOT (. ?))",
  "entityNum": 2,
  "id": 570
 },
 {
  "taggedQuestion": "List all the writers of the comics which has Robert Bernstein as one of the writer ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all the writers of #entity1",
    "originStr": "List all the writers of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the comics which has Robert Bernstein as one of the writer",
    "originStr": "the comics which has Robert Bernstein as one of the writer"
   }
  ],
  "question": "List all the writers of the comics which has Robert Bernstein as one of the writer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (NNS writers)) (PP (IN of) (NP (DT the) (NNS comics)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NNP Robert) (NNP Bernstein)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN writer)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 571
 },
 {
  "taggedQuestion": "What are the settlements whose neighboring municipalities is Lancy?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the settlements whose",
    "originStr": "What are the settlements whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "neighboring municipalities is Lancy",
    "originStr": "neighboring municipalities is Lancy"
   }
  ],
  "question": "What are the settlements whose neighboring municipalities is Lancy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose)) (S (NP (NN neighboring) (NNS municipalities)) (VP (VBZ is) (NP (NNP Lancy))))))) (. ?)))",
  "entityNum": 1,
  "id": 572
 },
 {
  "taggedQuestion": "Count the total number  of hometown of the gymnasts whose one of the hometown in Russia .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the total number of hometown of #entity1",
    "originStr": "Count the total number of hometown of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the gymnasts whose one of the hometown in Russia",
    "originStr": "the gymnasts whose one of the hometown in Russia"
   }
  ],
  "question": "Count the total number of hometown of the gymnasts whose one of the hometown in Russia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN hometown)) (PP (IN of) (NP (NP (DT the) (NNS gymnasts)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN hometown)) (PP (IN in) (NP (NNP Russia)))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 573
 },
 {
  "taggedQuestion": "Which states does the river flow whose left tributary is Toms Creek?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which states does #entity1",
    "originStr": "In which states does #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the river flow whose left tributary is Toms Creek",
    "originStr": "the river flow whose left tributary is Toms Creek"
   }
  ],
  "question": "In which states does the river flow whose left tributary is Toms Creek",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBZ does) (NP (NP (DT the) (NN river) (NN flow)) (SBAR (WHNP (WP$ whose) (NML (JJ left) (NN tributary))) (S (VP (VBZ is) (NP (NNP Toms) (NNP Creek)))))))) (. ?)))",
  "entityNum": 2,
  "id": 574
 },
 {
  "taggedQuestion": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the river whose source mountain is Baikal Mountains and",
    "originStr": "Name the river whose source mountain is Baikal Mountains and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "mouth location is Arctic Ocean",
    "originStr": "mouth location is Arctic Ocean"
   }
  ],
  "question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source)) (NN mountain)) (S (VP (VBZ is) (NP (JJ Baikal) (NNS Mountains)))))))) (CC and) (S (NP (NN mouth) (NN location)) (VP (VBZ is) (NP (NNP Arctic) (NNP Ocean)))) (. .)))",
  "entityNum": 1,
  "id": 575
 },
 {
  "taggedQuestion": "Count the PhD students whose thesis are supervised by <e0> winners.",
  "entityMap": {
   "<e0>": "National Medal of Science"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the PhD students whose thesis #entity1",
    "originStr": "Count the PhD students whose thesis #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are supervised by National Medal of Science winners",
    "originStr": "are supervised by National Medal of Science winners"
   }
  ],
  "question": "Count the PhD students whose thesis are supervised by National Medal of Science winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN PhD) (NNS students)) (SBAR (WHNP (WP$ whose) (NN thesis)) (S (VP (VBP are) (VP (VBN supervised) (PP (IN by) (NP (NN <e0>) (NNS winners))))))))) (. .)))",
  "entityNum": 2,
  "id": 576
 },
 {
  "taggedQuestion": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond",
    "originStr": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond"
   }
  ],
  "question": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN broadcast) (NN area)) (PP (IN of) (NP (NNP CFRX))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Anthony) (NNP Raymond))))))) (. ?)))",
  "entityNum": 1,
  "id": 577
 },
 {
  "taggedQuestion": "Count the cast member of the <e0> whose actress is Joey McIntyre.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the total number of cast member of the #entity1",
    "originStr": "Count the total number of cast member of the #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "television shows whose actress is Joey McIntyre",
    "originStr": "television shows whose actress is Joey McIntyre"
   }
  ],
  "question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN cast) (NN member)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NN actress)) (S (VP (VBZ is) (NP (NNP Joey) (NNP McIntyre))))))))) (. .)))",
  "entityNum": 2,
  "id": 578
 },
 {
  "taggedQuestion": "List all the awards won by the artist who has won SIGGRAPH ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all the awards won by #entity1",
    "originStr": "List all the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artist who has won SIGGRAPH",
    "originStr": "the artist who has won SIGGRAPH"
   }
  ],
  "question": "List all the awards won by the artist who has won SIGGRAPH",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (PDT all) (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN won) (NP (NNP SIGGRAPH)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 579
 },
 {
  "taggedQuestion": "Where was david Scherman trained ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was david Scherman trained",
    "originStr": "Where was david Scherman trained"
   }
  ],
  "question": "Where was david Scherman trained",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (JJ david) (NNP Scherman)) (VP (VBN trained))) (. ?)))",
  "entityNum": 1,
  "id": 580
 },
 {
  "taggedQuestion": "Count the battles fought by Raoul Magrin-Vernerey.",
  "entityMap": {
   "<e0>": "Raoul Magrin - Vernerey"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the battles fought by Raoul Magrin-Vernerey",
    "originStr": "Count the battles fought by Raoul Magrin-Vernerey"
   }
  ],
  "question": "Count the battles fought by Raoul Magrin-Vernerey",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NNP Raoul) (NNP Magrin) (HYPH -) (NNP Vernerey)))))) (. .)))",
  "entityNum": 1,
  "id": 581
 },
 {
  "taggedQuestion": "Which athlete was the flag bearer for Switzerland in 2004 and <e0> ?",
  "entityMap": {
   "<e0>": "2008 summer Olympics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which athlete was",
    "originStr": "Which athlete was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
    "originStr": "the flag bearer for Switzerland in 2004 and 2008 summer Olympics"
   }
  ],
  "question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN athlete)) (SQ (VBD was) (NP (NP (DT the) (NN flag) (NN bearer)) (PP (IN for) (NP (NP (NNP Switzerland)) (PP (IN in) (NP (CD 2004) (CC and) (CD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 582
 },
 {
  "taggedQuestion": "Which nationalist group was responsible for foundation of Young Lords?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which nationalist group was",
    "originStr": "Which nationalist group was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "responsible for foundation of Young Lords",
    "originStr": "responsible for foundation of Young Lords"
   }
  ],
  "question": "Which nationalist group was responsible for foundation of Young Lords",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (ADJP (JJ nationalist)) (NN group)) (SQ (VP (VBD was) (ADJP (JJ responsible) (PP (IN for) (NP (NP (NN foundation)) (PP (IN of) (NP (NNP Young) (NNPS Lords)))))))) (. ?)))",
  "entityNum": 1,
  "id": 583
 },
 {
  "taggedQuestion": "What award was won by the father of Angelina Jolie?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What award was won by #entity1",
    "originStr": "What award was won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the father of Angelina Jolie",
    "originStr": "the father of Angelina Jolie"
   }
  ],
  "question": "What award was won by the father of Angelina Jolie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VBD was) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN father)) (PP (IN of) (NP (NNP Angelina) (NNP Jolie))))))) (. ?)))",
  "entityNum": 2,
  "id": 584
 },
 {
  "taggedQuestion": "What are the software whose programming language are Multilingual?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the software whose",
    "originStr": "What are the software whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "programming language are Multilingual",
    "originStr": "programming language are Multilingual"
   }
  ],
  "question": "What are the software whose programming language are Multilingual",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WP$ whose) (NML (NN programming)) (NN language)) (S (VP (VBP are) (ADJP (JJ Multilingual))))))) (. ?)))",
  "entityNum": 1,
  "id": 585
 },
 {
  "taggedQuestion": "Was Marshall Arisman the cover artist in american psycho?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Marshall Arisman the cover artist in american psycho",
    "originStr": "Was Marshall Arisman the cover artist in american psycho"
   }
  ],
  "question": "Was Marshall Arisman the cover artist in american psycho",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Marshall) (NNP Arisman)) (NP (NP (DT the) (NN cover) (NN artist)) (PP (IN in) (NP (JJ american) (NN psycho)))) (. ?)))",
  "entityNum": 1,
  "id": 586
 },
 {
  "taggedQuestion": "Which birthplace of Liliya Lobanova is also the location of the Snake Island ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which birthplace of Liliya Lobanova is",
    "originStr": "Which birthplace of Liliya Lobanova is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the location of the Snake Island",
    "originStr": "also the location of the Snake Island"
   }
  ],
  "question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN birthplace) (PP (IN of) (NP (NNP Liliya) (NNP Lobanova))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (DT the) (NNP Snake) (NNP Island))))) (. ?)))",
  "entityNum": 1,
  "id": 587
 },
 {
  "taggedQuestion": "Count all the stateless people",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count all the stateless people",
    "originStr": "Count all the stateless people"
   }
  ],
  "question": "Count all the stateless people",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (PDT all) (DT the) (JJ stateless) (NNS people)))))",
  "entityNum": 1,
  "id": 588
 },
 {
  "taggedQuestion": "Josef Bhler belongs to which political party?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Josef Bhler belongs #entity1 which political party",
    "originStr": "Josef Bhler belongs #entity1 which political party"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "to",
    "originStr": "to"
   }
  ],
  "question": "Josef Bhler belongs to which political party",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Josef) (NNP Bhler)) (VP (VBZ belongs) (PP (IN to) (NP (WDT which) (JJ political) (NN party)))) (. ?)))",
  "entityNum": 2,
  "id": 589
 },
 {
  "taggedQuestion": "Where did the war take place where one of the commander was Zuo Zongtang?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did the war take place #entity1",
    "originStr": "Where did the war take place #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where one of the commander was Zuo Zongtang",
    "originStr": "where one of the commander was Zuo Zongtang"
   }
  ],
  "question": "Where did the war take place where one of the commander was Zuo Zongtang",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN war)) (VP (VB take) (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN commander)))) (VP (VBD was) (NP (NNP Zuo) (NNP Zongtang))))))) (. ?)))",
  "entityNum": 2,
  "id": 590
 },
 {
  "taggedQuestion": "Which place is the company which is known for Barbara bestor located ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which place is #entity1 located",
    "originStr": "In which place is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which is known for Barbara bestor",
    "originStr": "the company which is known for Barbara bestor"
   }
  ],
  "question": "In which place is the company which is known for Barbara bestor located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN place)) (SQ (VBZ is) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (NNP Barbara) (NNP bestor)) (VP (VBN located)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 591
 },
 {
  "taggedQuestion": "What novels are belong to the genre of Utopian and dystopian fiction?",
  "entityMap": {
   "<e0>": "Utopian dystopian fiction"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What novels are belong to #entity1",
    "originStr": "What novels are belong to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the genre of Utopian and dystopian fiction",
    "originStr": "the genre of Utopian and dystopian fiction"
   }
  ],
  "question": "What novels are belong to the genre of Utopian and dystopian fiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS novels)) (SQ (VP (VP (VBP are)) (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN genre)) (PP (IN of) (NP (ADJP (JJ Utopian) (CC and) (JJ dystopian)) (NN fiction)))))))) (. ?)))",
  "entityNum": 2,
  "id": 592
 },
 {
  "taggedQuestion": "What are the movies written by Nick Castle?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the movies written",
    "originStr": "What are the movies written"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "by Nick Castle",
    "originStr": "by Nick Castle"
   }
  ],
  "question": "What are the movies written by Nick Castle",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Nick) (NNP Castle))))) (. ?)))",
  "entityNum": 1,
  "id": 593
 },
 {
  "taggedQuestion": "Which river are there things belonging to <e0>?",
  "entityMap": {
   "<e0>": "zambezi river authority"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "On which river are there #entity1 authority",
    "originStr": "On which river are there #entity1 authority"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "things belonging to zambezi river",
    "originStr": "things belonging to zambezi river"
   }
  ],
  "question": "On which river are there things belonging to zambezi river authority",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VBP are) (S (NP (EX there)) (NP (NP (NNS things)) (VP (VBG belonging) (PP (IN to) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 594
 },
 {
  "taggedQuestion": "Is Egyptian Arabic belong to the <e0>?",
  "entityMap": {
   "<e0>": "Central Semitic Languages family"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Egyptian Arabic belong to the Central Semitic Languages family",
    "originStr": "Is Egyptian Arabic belong to the Central Semitic Languages family"
   }
  ],
  "question": "Is Egyptian Arabic belong to the Central Semitic Languages family",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ Egyptian)) (NP (NP (NNP Arabic)) (SBAR (S (VP (VBP belong) (PP (IN to) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 595
 },
 {
  "taggedQuestion": "Who is the artist of Sings Kristofferson and also performed <e0> atleast once?",
  "entityMap": {
   "<e0>": "Milk Cow Blues"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the artist of Sings Kristofferson and",
    "originStr": "Who is the artist of Sings Kristofferson and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also performed Milk Cow Blues at least once",
    "originStr": "also performed Milk Cow Blues at least once"
   }
  ],
  "question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues at least once",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN artist)) (PP (IN of) (NP (NNP Sings) (NNP Kristofferson))))) (CC and) (ADVP (RB also)) (VP (VBD performed) (NP (NN <e0>)) (ADVP (RB atleast) (RB once))))) (. ?)))",
  "entityNum": 1,
  "id": 596
 },
 {
  "taggedQuestion": "Who has fought in wars under <e0>?",
  "entityMap": {
   "<e0>": "commander Arthur St Clair"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who has fought in wars #entity1",
    "originStr": "Who has fought in wars #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "under commander Arthur St Clair",
    "originStr": "under commander Arthur St Clair"
   }
  ],
  "question": "Who has fought in wars under commander Arthur St Clair",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN fought) (PP (IN in) (NP (NNS wars))) (PP (IN under) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 597
 },
 {
  "taggedQuestion": "Which Paramount TV show was produced by <e0> ?",
  "entityMap": {
   "<e0>": "Glen and Les Charles"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which Paramount TV show was",
    "originStr": "Which Paramount TV show was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "produced by Glen and Les Charles",
    "originStr": "produced by Glen and Les Charles"
   }
  ],
  "question": "Which Paramount TV show was produced by Glen and Les Charles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNP Paramount) (NN TV) (NN show)) (SQ (VBD was) (VP (VBN produced) (PP (IN by) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 598
 },
 {
  "taggedQuestion": "Name some basketball players who  have played for chicago bulls.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name some basketball players who #entity1",
    "originStr": "Name some basketball players who #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have played for chicago bulls",
    "originStr": "have played for chicago bulls"
   }
  ],
  "question": "Name some basketball players who have played for chicago bulls",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NN basketball) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN played) (PP (IN for) (NP (NN chicago) (NNS bulls))))))))) (. .)))",
  "entityNum": 2,
  "id": 599
 },
 {
  "taggedQuestion": "Which owner of the national Herald india is the leader of Kumta ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which owner of the national Herald india is",
    "originStr": "Which owner of the national Herald india is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the leader of Kumta",
    "originStr": "the leader of Kumta"
   }
  ],
  "question": "Which owner of the national Herald india is the leader of Kumta",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN owner) (PP (IN of) (NP (DT the) (JJ national) (NNP Herald) (NNP india))))) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Kumta))))) (. ?)))",
  "entityNum": 1,
  "id": 600
 },
 {
  "taggedQuestion": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire",
    "originStr": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire"
   }
  ],
  "question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Francisco)) (NP (NP (NNP Pizarro)) (PP (IN of) (NP (NP (DT the) (NN monarch)) (PP (IN of) (NP (NNP Charles) (CD 5))) (, ,) (PP (IN of) (NP (DT the) (JJ roman) (NN empire)))))) (. ?)))",
  "entityNum": 1,
  "id": 601
 },
 {
  "taggedQuestion": "What is the largest city of Pulau Ubin ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the largest city of Pulau Ubin",
    "originStr": "What is the largest city of Pulau Ubin"
   }
  ],
  "question": "What is the largest city of Pulau Ubin",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Pulau) (NNP Ubin))))) (. ?)))",
  "entityNum": 1,
  "id": 602
 },
 {
  "taggedQuestion": "What is the origin of the musical artist of A <e0> ?",
  "entityMap": {
   "<e0>": "Todo Romantic Style"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the origin of #entity1",
    "originStr": "What is the origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical artist of A Todo Romantic Style",
    "originStr": "the musical artist of A Todo Romantic Style"
   }
  ],
  "question": "What is the origin of the musical artist of A Todo Romantic Style",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NP (DT the) (JJ musical) (NN artist)) (PP (IN of) (NP (DT A) (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 603
 },
 {
  "taggedQuestion": "Horses sired by Karinga Bay have participated in which races?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 participated in which races",
    "originStr": "#entity1 participated in which races"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Horses sired by Karinga Bay have",
    "originStr": "Horses sired by Karinga Bay have"
   }
  ],
  "question": "Horses sired by Karinga Bay have participated in which races",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN sired) (PP (IN by) (NP (NNP Karinga) (NNP Bay))))) (VP (VBP have) (VP (VBN participated) (PP (IN in) (NP (WDT which) (NNS races))))) (. ?)))",
  "entityNum": 2,
  "id": 604
 },
 {
  "taggedQuestion": "What is the alma mater of the scientists  known for  String theory?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the alma mater of #entity1",
    "originStr": "What is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientists known for String theory",
    "originStr": "the scientists known for String theory"
   }
  ],
  "question": "What is the alma mater of the scientists known for String theory",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (DT the) (NNS scientists)))) (VP (VBN known) (PP (IN for) (NP (NN String) (NN theory))))) (. ?)))",
  "entityNum": 2,
  "id": 605
 },
 {
  "taggedQuestion": "How many apes are there?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 apes are there",
    "originStr": "#entity1 apes are there"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "How many",
    "originStr": "How many"
   }
  ],
  "question": "How many apes are there",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS apes)) (SQ (VBP are) (NP (EX there))) (. ?)))",
  "entityNum": 2,
  "id": 606
 },
 {
  "taggedQuestion": "What is a common nickname given to both <e0> and the wheaton college in massachusetts?",
  "entityMap": {
   "<e0>": "Lyons Township high school"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts",
    "originStr": "is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts"
   }
  ],
  "question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT a) (JJ common) (NN nickname)) (VP (VBN given) (PP (IN to) (NP (NP (DT both) (NN <e0>)) (CC and) (NP (DT the) (NN wheaton) (NN college)))) (PP (IN in) (NP (NNS massachusetts))))) (. ?)))",
  "entityNum": 1,
  "id": 607
 },
 {
  "taggedQuestion": "Where do beauty queens with brown hair reside?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where #entity1 reside",
    "originStr": "Where #entity1 reside"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "do beauty queens with brown hair",
    "originStr": "do beauty queens with brown hair"
   }
  ],
  "question": "Where do beauty queens with brown hair reside",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (NN beauty) (NNS queens)) (PP (IN with) (NP (NP (JJ brown) (NN hair)) (SBAR (S (VP (VBP reside)))))))) (. ?)))",
  "entityNum": 2,
  "id": 608
 },
 {
  "taggedQuestion": "List the <e0> one of whose distributor's divisions is <e1>.",
  "entityMap": {
   "<e1>": "Warner Bros. Animation",
   "<e0>": "television shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the television shows one of whose distributor's divisions is",
    "originStr": "List the television shows one of whose distributor's divisions is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Warner Bros",
    "originStr": "Warner Bros"
   }
  ],
  "question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN <e0>)) (NP-TMP (CD one)) (PP (IN of) (SBAR (WHNP (WP$ whose)) (S (NP (NP (NN distributor) (POS 's)) (NNS divisions)) (VP (VBZ is) (NP (ADD <e1>)))))))) (. .)))",
  "entityNum": 1,
  "id": 609
 },
 {
  "taggedQuestion": "Name the <e0> directed by Simon Fuller and judged by Jennifier Lopez .",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the television show directed by Simon Fuller and",
    "originStr": "Name the television show directed by Simon Fuller and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "judged by Jennifier Lopez",
    "originStr": "judged by Jennifier Lopez"
   }
  ],
  "question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Simon) (NNP Fuller)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NNP Jennifier) (NNP Lopez))))))) (. .)))",
  "entityNum": 1,
  "id": 610
 },
 {
  "taggedQuestion": "Name the appointer of William Clark .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the appointer of William Clark",
    "originStr": "Name the appointer of William Clark"
   }
  ],
  "question": "Name the appointer of William Clark",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN appointer)) (PP (IN of) (NP (NNP William) (NNP Clark))))) (. .)))",
  "entityNum": 1,
  "id": 611
 },
 {
  "taggedQuestion": "Which movies have momoki kochi acted?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which movies have",
    "originStr": "in which movies have"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "momoki kochi acted",
    "originStr": "momoki kochi acted"
   }
  ],
  "question": "in which movies have momoki kochi acted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS movies))) (SQ (VBP have) (NP (NN momoki) (NNS kochi)) (VP (VBN acted))) (. ?)))",
  "entityNum": 1,
  "id": 612
 },
 {
  "taggedQuestion": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the base currency of the Benelux and",
    "originStr": "What is the base currency of the Benelux and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also used as money in Kerguelen Islands",
    "originStr": "is also used as money in Kerguelen Islands"
   }
  ],
  "question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (DT the) (NNP Benelux))))) (CC and) (VP (VBZ is) (ADVP (RB also)) (VP (VBN used) (PP (IN as) (NP (NN money))) (PP (IN in) (NP (NNP Kerguelen) (NNPS Islands))))))) (. ?)))",
  "entityNum": 1,
  "id": 613
 },
 {
  "taggedQuestion": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the mammals whose taxonomy is Diprotodontia",
    "originStr": "List the mammals whose taxonomy is Diprotodontia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and phylum is Chordate",
    "originStr": "and phylum is Chordate"
   }
  ],
  "question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB List) (NP (NP (DT the) (NNS mammals)) (SBAR (WHNP (WP$ whose) (NML (NN taxonomy))) (S (VP (VBZ is) (NP (NP (NNP Diprotodontia)) (CC and) (NP (NN phylum))))))))) (VP (VBZ is) (NP (NN Chordate))) (. ?)))",
  "entityNum": 1,
  "id": 614
 },
 {
  "taggedQuestion": "Count the key people of the Clinton Foundation.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the key people of the Clinton Foundation",
    "originStr": "Count the key people of the Clinton Foundation"
   }
  ],
  "question": "Count the key people of the Clinton Foundation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ key) (NNS people)) (PP (IN of) (NP (DT the) (NNP Clinton) (NNP Foundation))))) (. .)))",
  "entityNum": 1,
  "id": 615
 },
 {
  "taggedQuestion": "Name the company founded in New Mexico and provides Outlook.com as services .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the company founded in New Mexico and",
    "originStr": "Name the company founded in New Mexico and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "provides Outlook.com as services",
    "originStr": "provides Outlook.com as services"
   }
  ],
  "question": "Name the company founded in New Mexico and provides Outlook.com as services",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NN company)) (VP (VBN founded) (PP (IN in) (NP (NNP New) (NNP Mexico)))))) (CC and) (VP (VBZ provides) (NP (NP (ADD Outlook.com)) (PP (IN as) (NP (NNS services)))))) (. .)))",
  "entityNum": 1,
  "id": 616
 },
 {
  "taggedQuestion": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which tv show was preceded by The spirit of Christmas and",
    "originStr": "Which tv show was preceded by The spirit of Christmas and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "voice to the character was given by Mona Marshall",
    "originStr": "voice to the character was given by Mona Marshall"
   }
  ],
  "question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NML (NN tv)) (NN show)) (SQ (VBD was) (VP (VBN preceded) (PP (IN by) (NP (NP (DT The) (NN spirit)) (PP (IN of) (NP (NP (NNP Christmas)) (CC and) (NP (NN voice)))))) (PP (IN to) (NP (NP (DT the) (NN character)) (SBAR (S (VP (VBD was) (VP (VBN given) (PP (IN by) (NP (NNP Mona) (NNP Marshall))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 617
 },
 {
  "taggedQuestion": "Which common jurisdiction do Trinity School, Brentwood and <e0> fall?",
  "entityMap": {
   "<e0>": "Buckhurst Hill County High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Under",
    "originStr": "Under"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which common jurisdiction do Trinity School , Brentwood and Buckhurst Hill County High School fall",
    "originStr": "which common jurisdiction do Trinity School , Brentwood and Buckhurst Hill County High School fall"
   }
  ],
  "question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ common) (NN jurisdiction)) (SQ (VBP do) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)) (CC and) (NP (ADD <e0>))) (VP (VB fall))) (. ?)))",
  "entityNum": 1,
  "id": 618
 },
 {
  "taggedQuestion": "Music of how many things has been given by Akira Ifukube?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Music of how many things #entity1",
    "originStr": "Music of how many things #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has been given by Akira Ifukube",
    "originStr": "has been given by Akira Ifukube"
   }
  ],
  "question": "Music of how many things has been given by Akira Ifukube",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NN Music)) (PP (IN of) (SBAR (WHADJP (WRB how) (JJ many)) (S (NP (NNS things)) (VP (VBZ has) (VP (VBN been) (VP (VBN given) (PP (IN by) (NP (NNP Akira) (NNP Ifukube))))))))) (. ?)))",
  "entityNum": 2,
  "id": 619
 },
 {
  "taggedQuestion": "What made jo garcia and merritt cabal both famous?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What",
    "originStr": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "made jo garcia and merritt cabal both famous",
    "originStr": "made jo garcia and merritt cabal both famous"
   }
  ],
  "question": "What made jo garcia and merritt cabal both famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD made) (S (NP (NP (NNP jo) (NNP garcia)) (CC and) (NP (NN merritt) (NN cabal) (CC both))) (ADJP (JJ famous))))) (. ?)))",
  "entityNum": 1,
  "id": 620
 },
 {
  "taggedQuestion": "What was the career of some people who have committed suicide?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What was the career of #entity1",
    "originStr": "What was the career of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some people who have committed suicide",
    "originStr": "some people who have committed suicide"
   }
  ],
  "question": "What was the career of some people who have committed suicide",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN career)) (PP (IN of) (NP (NP (DT some) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN committed) (NP (NN suicide)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 621
 },
 {
  "taggedQuestion": "How many places are the tombs of people who died in Connecticut Colony?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In how many places are the tombs of #entity1",
    "originStr": "In how many places are the tombs of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who died in Connecticut Colony",
    "originStr": "people who died in Connecticut Colony"
   }
  ],
  "question": "In how many places are the tombs of people who died in Connecticut Colony",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS places)) (VP (VBP are) (NP (NP (DT the) (NNS tombs)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Connecticut) (NN Colony))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 622
 },
 {
  "taggedQuestion": "List the producer of the <e0> distributed by FremantleMedia.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the producer of #entity1",
    "originStr": "List the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the television shows distributed by FremantleMedia",
    "originStr": "the television shows distributed by FremantleMedia"
   }
  ],
  "question": "List the producer of the television shows distributed by FremantleMedia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (VP (VBN distributed) (PP (IN by) (NP (NNP FremantleMedia)))))))) (. .)))",
  "entityNum": 2,
  "id": 623
 },
 {
  "taggedQuestion": "Name the awards won by Elie Wiesel .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the awards won by Elie Wiesel",
    "originStr": "Name the awards won by Elie Wiesel"
   }
  ],
  "question": "Name the awards won by Elie Wiesel",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NNP Elie) (NNP Wiesel)))))) (. .)))",
  "entityNum": 1,
  "id": 624
 },
 {
  "taggedQuestion": "Who are the producers of Marie Sisters?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the producers of Marie Sisters",
    "originStr": "Who are the producers of Marie Sisters"
   }
  ],
  "question": "Who are the producers of Marie Sisters",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NNP Marie) (NNPS Sisters))))) (. ?)))",
  "entityNum": 1,
  "id": 625
 },
 {
  "taggedQuestion": "Who won the silver medal when the bronze was won by Yang Yilin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who won the silver medal #entity1",
    "originStr": "Who won the silver medal #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "when the bronze was won by Yang Yilin",
    "originStr": "when the bronze was won by Yang Yilin"
   }
  ],
  "question": "Who won the silver medal when the bronze was won by Yang Yilin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD won) (NP (DT the) (NN silver) (NN medal)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN bronze)) (VP (VBD was) (VP (VBN won) (PP (IN by) (NP (NNP Yang) (NNP Yilin))))))))) (. ?)))",
  "entityNum": 2,
  "id": 626
 },
 {
  "taggedQuestion": "List the successor of successor of Hayden, Stone & Co.",
  "entityMap": {
   "<e0>": "Hayden , Stone & Co."
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List",
    "originStr": "List"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the successor of successor of Hayden , Stone & Co",
    "originStr": "the successor of successor of Hayden , Stone & Co"
   }
  ],
  "question": "List the successor of successor of Hayden, Stone & Co",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NP (NN successor)) (PP (IN of) (NP (NNP Hayden) (, ,) (NNP Stone) (CC &) (NNP Co.))))))) (. .)))",
  "entityNum": 1,
  "id": 627
 },
 {
  "taggedQuestion": "Count the battles fought by the military person involved in Morocco .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of battles fought by #entity1",
    "originStr": "Count the number of battles fought by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the military person involved in Morocco",
    "originStr": "the military person involved in Morocco"
   }
  ],
  "question": "Count the number of battles fought by the military person involved in Morocco",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NP (DT the) (JJ military) (NN person)) (VP (VBN involved) (PP (IN in) (NP (NNP Morocco))))))))) (. .)))",
  "entityNum": 2,
  "id": 628
 },
 {
  "taggedQuestion": "What is the origin of Xynisteri?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the origin of Xynisteri",
    "originStr": "What is the origin of Xynisteri"
   }
  ],
  "question": "What is the origin of Xynisteri",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NNP Xynisteri))))) (. ?)))",
  "entityNum": 1,
  "id": 629
 },
 {
  "taggedQuestion": "How many important works have been done by Russel Davies?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many important works have #entity1",
    "originStr": "How many important works have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been done by Russel Davies",
    "originStr": "been done by Russel Davies"
   }
  ],
  "question": "How many important works have been done by Russel Davies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ important) (NNS works)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN done) (PP (IN by) (NP (NNP Russel) (NNP Davies))))))) (. ?)))",
  "entityNum": 2,
  "id": 630
 },
 {
  "taggedQuestion": "Who are currently playing for Barcelona FC?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are currently playing for Barcelona FC",
    "originStr": "Who are currently playing for Barcelona FC"
   }
  ],
  "question": "Who are currently playing for Barcelona FC",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (ADVP (RB currently)) (VP (VBG playing) (PP (IN for) (NP (NNP Barcelona) (NNP FC)))))) (. ?)))",
  "entityNum": 1,
  "id": 631
 },
 {
  "taggedQuestion": "Is Andrew Lincoln the narrator of <e0>?",
  "entityMap": {
   "<e0>": "Million Dollar Traders"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Andrew Lincoln the narrator of Million Dollar Traders",
    "originStr": "Is Andrew Lincoln the narrator of Million Dollar Traders"
   }
  ],
  "question": "Is Andrew Lincoln the narrator of Million Dollar Traders",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Andrew) (NNP Lincoln)) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 632
 },
 {
  "taggedQuestion": "Who is the owner of Saumarez ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of Saumarez",
    "originStr": "Who is the owner of Saumarez"
   }
  ],
  "question": "Who is the owner of Saumarez",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Saumarez))))) (. ?)))",
  "entityNum": 1,
  "id": 633
 },
 {
  "taggedQuestion": "What is telecasted on the network where Deborah Turness holds important position?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is telecasted on the",
    "originStr": "What is telecasted on the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "position network where Deborah Turness holds important position",
    "originStr": "position network where Deborah Turness holds important position"
   }
  ],
  "question": "What is telecasted on the network where Deborah Turness holds important position",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN telecasted) (PP (IN on) (NP (NP (DT the) (NN network)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Deborah) (NNP Turness)) (VP (VBZ holds) (NP (JJ important) (NN position))))))))) (. ?)))",
  "entityNum": 1,
  "id": 634
 },
 {
  "taggedQuestion": "Who is the fictional character whose relative is Vestigial Peter?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the fictional character whose",
    "originStr": "Who is the fictional character whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "relative is Vestigial Peter",
    "originStr": "relative is Vestigial Peter"
   }
  ],
  "question": "Who is the fictional character whose relative is Vestigial Peter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose)) (S (ADVP (JJ relative)) (VP (VBZ is) (NP (JJ Vestigial) (NNP Peter))))))) (. ?)))",
  "entityNum": 1,
  "id": 635
 },
 {
  "taggedQuestion": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many home stadium are there , of #entity1",
    "originStr": "How many home stadium are there , of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club seasons whose chairman is Merritt Paulson",
    "originStr": "the soccer club seasons whose chairman is Merritt Paulson"
   }
  ],
  "question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NN home) (NN stadium)) (SQ (VBP are) (NP (NP (NP (RB there)) (, ,) (PP (IN of) (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)))) (SBAR (WHNP (WP$ whose) (NML (NN chairman))) (S (VP (VBZ is) (NP (NNP Merritt) (NNP Paulson))))))) (. ?)))",
  "entityNum": 2,
  "id": 636
 },
 {
  "taggedQuestion": "Name the alma mater of <e0> .",
  "entityMap": {
   "<e0>": "Ernest de Saisset"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the alma mater of Ernest de Saisset",
    "originStr": "Name the alma mater of Ernest de Saisset"
   }
  ],
  "question": "Name the alma mater of Ernest de Saisset",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 637
 },
 {
  "taggedQuestion": "What magazine companies are of <e0>?",
  "entityMap": {
   "<e0>": "form Limited liability company"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What magazine companies #entity1",
    "originStr": "What magazine companies #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are of form Limited liability company",
    "originStr": "are of form Limited liability company"
   }
  ],
  "question": "What magazine companies are of form Limited liability company",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NN magazine) (NNS companies)) (VP (VBP are) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 638
 },
 {
  "taggedQuestion": "List the driver of <e0> is also the Pole driver of Canadian Grand Proix ?",
  "entityMap": {
   "<e0>": "SA MArino Grand Prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the driver of SA MArino Grand Prix is",
    "originStr": "List the driver of SA MArino Grand Prix is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the Pole driver of Canadian Grand Proix",
    "originStr": "also the Pole driver of Canadian Grand Proix"
   }
  ],
  "question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB List) (NP (NP (DT the) (NN driver)) (PP (IN of) (NP (NN <e0>)))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (JJ Canadian) (NNP Grand) (NNP Proix))))) (. ?)))",
  "entityNum": 1,
  "id": 639
 },
 {
  "taggedQuestion": "Where does John A Danaher III work?",
  "entityMap": {
   "<e0>": "John Danaher III work"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where does John A Danaher III work",
    "originStr": "Where does John A Danaher III work"
   }
  ],
  "question": "Where does John A Danaher III work",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (NNP John) (NNP A) (NNP Danaher) (NNP III) (NN work))) (. ?)))",
  "entityNum": 1,
  "id": 640
 },
 {
  "taggedQuestion": "Name few movies directed by Tim Burton .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name few movies directed by",
    "originStr": "Name few movies directed by"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Tim Burton",
    "originStr": "Tim Burton"
   }
  ],
  "question": "Name few movies directed by Tim Burton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (JJ few) (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NNP Tim) (NNP Burton)))))) (. .)))",
  "entityNum": 1,
  "id": 641
 },
 {
  "taggedQuestion": "Where was Live in Detroit, MI recorded ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Live",
    "originStr": "Where was Live"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in Detroit , MI recorded",
    "originStr": "in Detroit , MI recorded"
   }
  ],
  "question": "Where was Live in Detroit, MI recorded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (JJ Live)) (PP (IN in) (NP (NNP Detroit) (, ,) (NNP MI)))) (VP (VBN recorded))) (. ?)))",
  "entityNum": 1,
  "id": 642
 },
 {
  "taggedQuestion": "Name all the bands which have members of QDT in them.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name all the bands which #entity1",
    "originStr": "Name all the bands which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have members of QDT in them",
    "originStr": "have members of QDT in them"
   }
  ],
  "question": "Name all the bands which have members of QDT in them",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS members)) (PP (IN of) (NP (NP (NN QDT)) (PP (IN in) (NP (PRP them))))))))))) (. .)))",
  "entityNum": 2,
  "id": 643
 },
 {
  "taggedQuestion": "Which footballers did their high school in west Sacramento california? ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which footballers #entity1",
    "originStr": "Which footballers #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "did their high school in west Sacramento california",
    "originStr": "did their high school in west Sacramento california"
   }
  ],
  "question": "Which footballers did their high school in west Sacramento california",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS footballers))) (SQ (VP (VBD did) (NP (PRP$ their) (JJ high) (NN school)) (PP (IN in) (NP (NN west) (NNP Sacramento) (NNP california))))) (. ?)))(ROOT (. ?))",
  "entityNum": 2,
  "id": 644
 },
 {
  "taggedQuestion": "List the names of the soccer club seasons whose division is <e0>",
  "entityMap": {
   "<e0>": "2012 Campeonato Brasileiro Srie A."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the names of #entity1",
    "originStr": "List the names of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A",
    "originStr": "the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A"
   }
  ],
  "question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (NP (DT the) (NNS names)) (PP (IN of) (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)))) (SBAR (WHNP (WP$ whose) (NML (NN division))) (S (VP (VBZ is) (NP (ADD <e0>)))))))))",
  "entityNum": 2,
  "id": 645
 },
 {
  "taggedQuestion": "Which successor of <e0> is the <e1> of <e2> ?",
  "entityMap": {
   "<e2>": "Ruben J. Villote",
   "<e1>": "state of origin",
   "<e0>": "Philippine Ports Authority"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which successor of Philippine Ports Authority is",
    "originStr": "Which successor of Philippine Ports Authority is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the state of origin of Ruben J. Villote",
    "originStr": "the state of origin of Ruben J. Villote"
   }
  ],
  "question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN successor) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (NN <e1>)) (PP (IN of) (NP (NN <e2>))))) (. ?)))",
  "entityNum": 1,
  "id": 646
 },
 {
  "taggedQuestion": "What awards have been won by the executive producer of Timmy Time ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What awards have been won by #entity1",
    "originStr": "What awards have been won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the executive producer of Timmy Time",
    "originStr": "the executive producer of Timmy Time"
   }
  ],
  "question": "What awards have been won by the executive producer of Timmy Time",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NNP Timmy) (NNP Time))))))))) (. ?)))",
  "entityNum": 2,
  "id": 647
 },
 {
  "taggedQuestion": "Which american football team is owned by Mark davis and is located in O.co Colliseum ?",
  "entityMap": {
   "<e0>": "O.c o Colliseum"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which american football team is owned by Mark davis and",
    "originStr": "Which american football team is owned by Mark davis and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is located in O.co Colliseum",
    "originStr": "is located in O.co Colliseum"
   }
  ],
  "question": "Which american football team is owned by Mark davis and is located in O.co Colliseum",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NN team)) (SQ (VBZ is) (VP (VP (VBN owned) (PP (IN by) (NP (NNP Mark) (NNP davis)))) (CC and) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP O.co) (NNP Colliseum))))))) (. ?)))",
  "entityNum": 1,
  "id": 648
 },
 {
  "taggedQuestion": "The successor of Ulrich II, Count of East Frisia was born in what place?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "The",
    "originStr": "The"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "successor of Ulrich II , Count of East Frisia was born in what place",
    "originStr": "successor of Ulrich II , Count of East Frisia was born in what place"
   }
  ],
  "question": "The successor of Ulrich II, Count of East Frisia was born in what place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (DT The) (NN successor)) (PP (IN of) (NP (NP (NNP Ulrich) (NNP II)) (, ,) (NP (NP (NNP Count)) (PP (IN of) (NP (NNP East) (NNP Frisia))))))) (VP (VBD was) (VP (VBN born) (PP (IN in) (X (WP what)) (NP (NN place))))) (. ?)))",
  "entityNum": 1,
  "id": 649
 },
 {
  "taggedQuestion": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the prime minister of Michael Jeffery who",
    "originStr": "Who is the prime minister of Michael Jeffery who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the minister of Williuam Deane",
    "originStr": "is also the minister of Williuam Deane"
   }
  ],
  "question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ prime) (NN minister)) (PP (IN of) (NP (NP (NNP Michael) (NNP Jeffery)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN minister)) (PP (IN of) (NP (NNP Williuam) (NNP Deane))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 650
 },
 {
  "taggedQuestion": "Who is the owner of the FC which owns the <e0>?",
  "entityMap": {
   "<e0>": "Cobham Training Centre"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of #entity1",
    "originStr": "Who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the FC which owns the Cobham Training Centre",
    "originStr": "the FC which owns the Cobham Training Centre"
   }
  ],
  "question": "Who is the owner of the FC which owns the Cobham Training Centre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NNP FC)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 651
 },
 {
  "taggedQuestion": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is considered to be #entity1",
    "originStr": "Who is considered to be #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the deciding person when it comes to crustaceans from the Balanidae family",
    "originStr": "the deciding person when it comes to crustaceans from the Balanidae family"
   }
  ],
  "question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN considered) (S (VP (TO to) (VP (VB be) (NP (NP (DT the) (VBG deciding) (NN person)) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ comes) (PP (IN to) (NP (NP (NNS crustaceans)) (PP (IN from) (NP (DT the) (NNP Balanidae) (NN family)))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 652
 },
 {
  "taggedQuestion": "What have some US citizens died of?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What have #entity1 of",
    "originStr": "What have #entity1 of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some US citizens died",
    "originStr": "some US citizens died"
   }
  ],
  "question": "What have some US citizens died of",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP have) (NP (NP (DT some)) (SBAR (S (NP (NNP US) (NNS citizens)) (VP (VBD died) (PP (IN of)))))))) (. ?)))",
  "entityNum": 2,
  "id": 653
 },
 {
  "taggedQuestion": "What are some apes?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What #entity1",
    "originStr": "What #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are some apes",
    "originStr": "are some apes"
   }
  ],
  "question": "What are some apes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NNS apes))) (. ?)))",
  "entityNum": 2,
  "id": 654
 },
 {
  "taggedQuestion": "Who is buried at the place governed by <e0>?",
  "entityMap": {
   "<e0>": "National Park Service"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is buried at #entity1",
    "originStr": "Who is buried at #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the place governed by National Park Service",
    "originStr": "the place governed by National Park Service"
   }
  ],
  "question": "Who is buried at the place governed by National Park Service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN buried) (PP (IN at) (NP (NP (DT the) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 655
 },
 {
  "taggedQuestion": "Name the municipality of <e0> .",
  "entityMap": {
   "<e0>": "Roberto Clemente Bridge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the municipality of Roberto Clemente Bridge",
    "originStr": "Name the municipality of Roberto Clemente Bridge"
   }
  ],
  "question": "Name the municipality of Roberto Clemente Bridge",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 656
 },
 {
  "taggedQuestion": "Which past members of the The Conglomerate (American group) also sang <e0>?",
  "entityMap": {
   "<e0>": "Take Me There (Blackstreet & Ma song)"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which past members of the Conglomerate -LRB- American group -RRB- also #entity1 song -RRB-",
    "originStr": "Which past members of the Conglomerate -LRB- American group -RRB- also #entity1 song -RRB-"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "sang Take Me There -LRB- Blackstreet & Ma",
    "originStr": "sang Take Me There -LRB- Blackstreet & Ma"
   }
  ],
  "question": "Which past members of the Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ past) (NNS members)) (PP (IN of) (NP (DT the) (NP (NP (DT The) (NN Conglomerate)) (-LRB- -LRB-) (NP (JJ American) (NN group)) (-RRB- -RRB-)))))) (SQ (VP (ADVP (RB also)) (VBD sang) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 2,
  "id": 657
 },
 {
  "taggedQuestion": "List all the notable works of  <e0>?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "List all"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List all the notable works of Russell T Davies",
    "originStr": "List all the notable works of Russell T Davies"
   }
  ],
  "question": "List all the notable works of Russell T Davies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NN List)) (NP (NP (PDT all) (DT the) (JJ notable) (NNS works)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 658
 },
 {
  "taggedQuestion": "Which military unit garrison is Arlington County, Virginia and The Pentagon?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which military unit garrison is",
    "originStr": "Which military unit garrison is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Arlington County , Virginia and The Pentagon",
    "originStr": "Arlington County , Virginia and The Pentagon"
   }
  ],
  "question": "Which military unit garrison is Arlington County, Virginia and The Pentagon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ military) (NN unit)) (NP (NN garrison)))) (SQ (VBZ is) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia)) (CC and) (NP (DT The) (NNP Pentagon)))) (. ?)))",
  "entityNum": 1,
  "id": 659
 },
 {
  "taggedQuestion": "Name all the products produced by the producer of <e0> .",
  "entityMap": {
   "<e0>": "United States dollar"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name all the products produced by #entity1",
    "originStr": "Name all the products produced by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the producer of United States dollar",
    "originStr": "the producer of United States dollar"
   }
  ],
  "question": "Name all the products produced by the producer of United States dollar",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (PDT all) (DT the) (NNS products)) (VP (VBN produced) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (ADD <e0>)))))))) (. .)))",
  "entityNum": 2,
  "id": 660
 },
 {
  "taggedQuestion": "What is the launch site of Aquarius (rocket) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the launch site of Aquarius (rocket)",
    "originStr": "What is the launch site of Aquarius (rocket)"
   }
  ],
  "question": "What is the launch site of Aquarius (rocket)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (NP (NNP Aquarius)) (-LRB- -LRB-) (NP (NN rocket)) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 661
 },
 {
  "taggedQuestion": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the players whose",
    "originStr": "What are the players whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "former teams are Carolina Panthers and Indianapolis Colts",
    "originStr": "former teams are Carolina Panthers and Indianapolis Colts"
   }
  ],
  "question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ former) (NNS teams)) (S (VP (VBP are) (NP (NP (NNP Carolina) (NNPS Panthers)) (CC and) (NP (NNP Indianapolis) (NNPS Colts)))))))) (. ?)))",
  "entityNum": 1,
  "id": 662
 },
 {
  "taggedQuestion": "Count the mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the total number of mammals whose phylum is Chordate and order",
    "originStr": "Count the total number of mammals whose phylum is Chordate and order"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "-LRB- taxonomy -RRB- is Diprotodontia",
    "originStr": "-LRB- taxonomy -RRB- is Diprotodontia"
   }
  ],
  "question": "Count the total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Count) (NP (NP (DT the) (NNS mammals)) (SBAR (WHNP (WP$ whose) (NML (NN phylum))) (S (VP (VBZ is) (NP (NN Chordate)))))))) (CC and) (S (NP (NN order) (-LRB- -LRB-) (NN taxonomy) (-RRB- -RRB-)) (VP (VBZ is) (NP (NNP Diprotodontia)))) (. .)))",
  "entityNum": 1,
  "id": 663
 },
 {
  "taggedQuestion": "Who is the music composer of Kenny Dies ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the music composer of Kenny Dies",
    "originStr": "Who is the music composer of Kenny Dies"
   }
  ],
  "question": "Who is the music composer of Kenny Dies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN music) (NN composer)) (PP (IN of) (NP (NNP Kenny)))) (VP (VBZ Dies)))) (. ?)))",
  "entityNum": 1,
  "id": 664
 },
 {
  "taggedQuestion": "How many cities are around the sea into which the aegean sea flows?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many cities are around #entity1",
    "originStr": "How many cities are around #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sea into which the aegean sea flows",
    "originStr": "the sea into which the aegean sea flows"
   }
  ],
  "question": "How many cities are around the sea into which the aegean sea flows",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (DT the) (JJ aegean) (NN sea)) (VP (VBZ flows)))))))) (. ?)))",
  "entityNum": 2,
  "id": 665
 },
 {
  "taggedQuestion": "Where did the office holder  who is predecessor to <e0> died ?",
  "entityMap": {
   "<e0>": "Marco Aurelio Robles"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did #entity1 died",
    "originStr": "Where did #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the office holder who is predecessor to Marco Aurelio Robles",
    "originStr": "the office holder who is predecessor to Marco Aurelio Robles"
   }
  ],
  "question": "Where did the office holder who is predecessor to Marco Aurelio Robles died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (SBAR (S (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (NN predecessor)) (TO to) (NP (ADD <e0>))))))) (VP (VBD died)))))) (. ?)))",
  "entityNum": 2,
  "id": 666
 },
 {
  "taggedQuestion": "Who is associated  with the musical artists from Africa '70 (band) and Tony Allen ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is associated with #entity1 Tony Allen",
    "originStr": "Who is associated with #entity1 Tony Allen"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical artists from Africa '70 -LRB- band -RRB- and",
    "originStr": "the musical artists from Africa '70 -LRB- band -RRB- and"
   }
  ],
  "question": "Who is associated with the musical artists from Africa '70 (band) and Tony Allen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN associated) (PP (IN with) (NP (NP (NP (DT the) (JJ musical) (NNS artists)) (PP (IN from) (NP (NNP Africa) (CD '70))) (PRN (-LRB- -LRB-) (NP (NN band)) (-RRB- -RRB-))) (CC and) (NP (NNP Tony) (NNP Allen)))))) (. ?)))",
  "entityNum": 2,
  "id": 667
 },
 {
  "taggedQuestion": "Is the Hyundai Lavita assembled in Kulim?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Hyundai Lavita assembled in Kulim",
    "originStr": "Is the Hyundai Lavita assembled in Kulim"
   }
  ],
  "question": "Is the Hyundai Lavita assembled in Kulim",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Kulim))))))) (. ?)))",
  "entityNum": 1,
  "id": 668
 },
 {
  "taggedQuestion": "What is the programme format of WWTR ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the programme format of WWTR",
    "originStr": "What is the programme format of WWTR"
   }
  ],
  "question": "What is the programme format of WWTR",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN programme) (NN format)) (PP (IN of) (NP (NNP WWTR))))) (. ?)))",
  "entityNum": 1,
  "id": 669
 },
 {
  "taggedQuestion": "List the founders of Bream Bay ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the founders of Bream Bay",
    "originStr": "list the founders of Bream Bay"
   }
  ],
  "question": "list the founders of Bream Bay",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS founders)) (PP (IN of) (NP (NNP Bream) (NNP Bay))))) (. ?)))",
  "entityNum": 1,
  "id": 670
 },
 {
  "taggedQuestion": "Is Essex the Ceremonial County of West Tilbury?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Essex the Ceremonial County of West Tilbury",
    "originStr": "Is Essex the Ceremonial County of West Tilbury"
   }
  ],
  "question": "Is Essex the Ceremonial County of West Tilbury",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Essex)) (NP (NP (DT the) (NNP Ceremonial) (NNP County)) (PP (IN of) (NP (NNP West) (NNP Tilbury)))) (. ?)))",
  "entityNum": 1,
  "id": 671
 },
 {
  "taggedQuestion": "What is the total number of participant in conflict of SFOR?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of #entity1",
    "originStr": "What is the total number of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "participant in conflict of SFOR",
    "originStr": "participant in conflict of SFOR"
   }
  ],
  "question": "What is the total number of participant in conflict of SFOR",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN participant)) (PP (IN in) (NP (NP (NN conflict)) (PP (IN of) (NP (NNP SFOR))))))))) (. ?)))",
  "entityNum": 2,
  "id": 672
 },
 {
  "taggedQuestion": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the people whose academic advisor #entity1",
    "originStr": "Name the people whose academic advisor #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has also mentored the thesis of Alexius Meinong",
    "originStr": "has also mentored the thesis of Alexius Meinong"
   }
  ],
  "question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ has) (ADVP (RB also)) (VP (VBD mentored) (NP (NP (DT the) (NN thesis)) (PP (IN of) (NP (NNP Alexius) (NNP Meinong)))))))))) (. .)))",
  "entityNum": 2,
  "id": 673
 },
 {
  "taggedQuestion": "Where is Denver Broncos located ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is Denver Broncos located",
    "originStr": "Where is Denver Broncos located"
   }
  ],
  "question": "Where is Denver Broncos located",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Denver) (NNPS Broncos)) (VP (VBN located))) (. ?)))",
  "entityNum": 1,
  "id": 674
 },
 {
  "taggedQuestion": "Which serving railway line of the <e0> is the home port of INS Viraat ?",
  "entityMap": {
   "<e0>": "Daund Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which serving railway line of the Daund Junction railway station is",
    "originStr": "Which serving railway line of the Daund Junction railway station is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the home port of INS Viraat",
    "originStr": "the home port of INS Viraat"
   }
  ],
  "question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which)) (SBAR (S (VP (VBG serving) (NP (NP (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>)))))))) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN port)) (PP (IN of) (NP (NNP INS) (NNP Viraat))))) (. ?)))",
  "entityNum": 1,
  "id": 675
 },
 {
  "taggedQuestion": "Which river flows through <e0> and also through Troy, New york ?",
  "entityMap": {
   "<e0>": "Hudson Highlands State park"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which river flows through Hudson Highlands State park and also",
    "originStr": "Which river flows through Hudson Highlands State park and also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "through Troy , New York",
    "originStr": "through Troy , New York"
   }
  ],
  "question": "Which river flows through Hudson Highlands State park and also through Troy, New York",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ flows) (PP (PP (IN through) (NP (ADD <e0>))) (CC and) (PP (ADVP (RB also)) (IN through) (NP (NP (NNP Troy)) (, ,) (NP (NNP New) (NNP york))))))) (. ?)))",
  "entityNum": 1,
  "id": 676
 },
 {
  "taggedQuestion": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the university to which Erica Frank went , and",
    "originStr": "What is the university to which Erica Frank went , and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where Ivan Toplak was a club manager",
    "originStr": "where Ivan Toplak was a club manager"
   }
  ],
  "question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (SBAR (WHPP (TO to) (WHNP (WDT which))) (S (NP (NNP Erica) (NNP Frank)) (VP (VBD went)))) (, ,) (CC and) (SBAR (WHADVP (WRB where)) (S (NP (NNP Ivan) (NNP Toplak)) (VP (VBD was) (NP (DT a) (NN club) (NN manager)))))))) (. ?)))",
  "entityNum": 1,
  "id": 677
 },
 {
  "taggedQuestion": "How many movies have been directed by Orson Welles ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many movies have #entity1",
    "originStr": "How many movies have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been directed by Orson Welles",
    "originStr": "been directed by Orson Welles"
   }
  ],
  "question": "How many movies have been directed by Orson Welles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN directed) (PP (IN by) (NP (NNP Orson) (NNP Welles))))))) (. ?)))",
  "entityNum": 2,
  "id": 678
 },
 {
  "taggedQuestion": "Which borough is common for Duddeston and <e0> ?",
  "entityMap": {
   "<e0>": "Bordesley railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which borough is",
    "originStr": "Which borough is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "common for Duddeston and Bordesley railway station",
    "originStr": "common for Duddeston and Bordesley railway station"
   }
  ],
  "question": "Which borough is common for Duddeston and Bordesley railway station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN borough)) (SQ (VBZ is) (NP (NP (JJ common)) (PP (IN for) (NP (NP (NNP Duddeston)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 679
 },
 {
  "taggedQuestion": "Does Mauritius follow a parliamentary republic?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Mauritius follow a parliamentary republic",
    "originStr": "Does Mauritius follow a parliamentary republic"
   }
  ],
  "question": "Does Mauritius follow a parliamentary republic",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Mauritius)) (VP (VB follow) (NP (DT a) (JJ parliamentary) (NN republic))) (. ?)))",
  "entityNum": 1,
  "id": 680
 },
 {
  "taggedQuestion": "Who is the performer of the album whose subsequent work is <e0> ?",
  "entityMap": {
   "<e0>": "Willie Nelson and Family"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the performer of #entity1",
    "originStr": "Who is the performer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the album whose subsequent work is Willie Nelson and Family",
    "originStr": "the album whose subsequent work is Willie Nelson and Family"
   }
  ],
  "question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN performer)) (PP (IN of) (NP (NP (DT the) (NN album)) (SBAR (WHNP (WP$ whose) (NML (JJ subsequent) (NN work))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 681
 },
 {
  "taggedQuestion": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the birthplace of Ludovic Boi which",
    "originStr": "What is the birthplace of Ludovic Boi which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the residence of Fernando Augustin",
    "originStr": "is also the residence of Fernando Augustin"
   }
  ],
  "question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NP (NNP Ludovic) (NNP Boi)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN residence)) (PP (IN of) (NP (NNP Fernando) (NNP Augustin))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 682
 },
 {
  "taggedQuestion": "Who is the producer of album, which has the song Eclipse ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the producer of album , which",
    "originStr": "Who is the producer of album , which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has the song Eclipse",
    "originStr": "has the song Eclipse"
   }
  ],
  "question": "Who is the producer of album, which has the song Eclipse",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NN album)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN song) (NN Eclipse))))))))) (. ?)))",
  "entityNum": 1,
  "id": 683
 },
 {
  "taggedQuestion": "Which parties have their members live in the PM House, Colombo?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which parties have #entity1 Colombo",
    "originStr": "Which parties have #entity1 Colombo"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "their members live in the PM House ",
    "originStr": "their members live in the PM House "
   }
  ],
  "question": "Which parties have their members live in the PM House, Colombo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (SINV (SBAR (WHNP (WDT Which)) (S (NP (NNS parties)) (VP (VBP have) (NP (PRP$ their) (NNS members))))) (VP (VBP live) (PP (IN in) (NP (DT the) (NN PM)))) (NP (NNP House))) (, ,) (NP (NNP Colombo)) (. ?)))",
  "entityNum": 2,
  "id": 684
 },
 {
  "taggedQuestion": "Which awards have been given to scientists that graduated from NKU athens?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which awards have been given to #entity1",
    "originStr": "Which awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "scientists that graduated from NKU athens",
    "originStr": "scientists that graduated from NKU athens"
   }
  ],
  "question": "Which awards have been given to scientists that graduated from NKU athens",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (NNS scientists)) (SBAR (WHNP (WDT that)) (S (VP (VBD graduated) (PP (IN from) (NP (NNP NKU) (NNS athens)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 685
 },
 {
  "taggedQuestion": "Ricky Gervais is the executive producer of the series having how many fictional characters?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 the series having how many fictional characters",
    "originStr": "#entity1 the series having how many fictional characters"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Ricky Gervais is the executive producer of",
    "originStr": "Ricky Gervais is the executive producer of"
   }
  ],
  "question": "Ricky Gervais is the executive producer of the series having how many fictional characters",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Ricky) (NNP Gervais)) (VP (VBZ is) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN series)) (VP (VBG having) (NP (ADJP (WRB how) (JJ many)) (JJ fictional) (NNS characters))))))) (. ?)))",
  "entityNum": 2,
  "id": 686
 },
 {
  "taggedQuestion": "Did Jerry Rice study in Oktoc Mississippi?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Jerry Rice study in Oktoc Mississippi",
    "originStr": "Did Jerry Rice study in Oktoc Mississippi"
   }
  ],
  "question": "Did Jerry Rice study in Oktoc Mississippi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (VP (VBD Did) (S (NP (NNP Jerry) (NNP Rice))) (NP (NP (NN study)) (PP (IN in) (NP (NNP Oktoc) (NNP Mississippi))))) (. ?)))",
  "entityNum": 1,
  "id": 687
 },
 {
  "taggedQuestion": "Cable stayed bridges have been used to cross over how many things?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Cable stayed bridges #entity1 things",
    "originStr": "Cable stayed bridges #entity1 things"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have been used to cross over how many",
    "originStr": "have been used to cross over how many"
   }
  ],
  "question": "Cable stayed bridges have been used to cross over how many things",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Cable)) (VP (VBD stayed) (SBAR (S (NP (NNS bridges)) (VP (VBP have) (VP (VBN been) (VP (VBN used) (S (VP (TO to) (VP (VB cross) (PP (IN over) (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 688
 },
 {
  "taggedQuestion": "Is <e0> have an islamic government?",
  "entityMap": {
   "<e0>": "north caucasian emirate"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is north caucasian emirate have an islamic government",
    "originStr": "Is north caucasian emirate have an islamic government"
   }
  ],
  "question": "Is north caucasian emirate have an islamic government",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (ADD <e0>)) (VP (VBP have) (NP (DT an) (JJ islamic) (NN government))))) (. ?)))",
  "entityNum": 1,
  "id": 689
 },
 {
  "taggedQuestion": "What are the <e0> whose starting music is composed by Ron Grainer?",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the television shows whose starting music #entity1",
    "originStr": "What are the television shows whose starting music #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is composed by Ron Grainer",
    "originStr": "is composed by Ron Grainer"
   }
  ],
  "question": "What are the television shows whose starting music is composed by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (S (VP (VBG starting)))) (NN music)) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))))))) (. ?)))",
  "entityNum": 2,
  "id": 690
 },
 {
  "taggedQuestion": "Who influenced the author of <e0> ?",
  "entityMap": {
   "<e0>": "The Shooting of Dan McGrew"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who influenced #entity1",
    "originStr": "Who influenced #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the author of The Shooting of Dan McGrew",
    "originStr": "the author of The Shooting of Dan McGrew"
   }
  ],
  "question": "Who influenced the author of The Shooting of Dan McGrew",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD influenced) (NP (NP (DT the) (NN author)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 691
 },
 {
  "taggedQuestion": "Raymond Johansen is the mayor of what city?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Raymond Johansen is the mayor of what",
    "originStr": "Raymond Johansen is the mayor of what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "city",
    "originStr": "city"
   }
  ],
  "question": "Raymond Johansen is the mayor of what city",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (NP (NNP Raymond) (NNP Johansen)) (VBZ is) (NP (DT the) (NN mayor)) (PP (IN of) (WHNP (WP what) (NN city))) (. ?)))",
  "entityNum": 1,
  "id": 692
 },
 {
  "taggedQuestion": "What region was Gloria Schaffer born in, which also contains Newington?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What region was",
    "originStr": "What region was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Gloria Schaffer born in , which also contains Newington",
    "originStr": "Gloria Schaffer born in , which also contains Newington"
   }
  ],
  "question": "What region was Gloria Schaffer born in, which also contains Newington",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN region)) (SQ (VBD was) (NP (NNP Gloria) (NNP Schaffer)) (VP (VBN born) (PP (IN in)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBZ contains) (NP (NNP Newington))))))) (. ?)))",
  "entityNum": 1,
  "id": 693
 },
 {
  "taggedQuestion": "List some teams for which someone who has played as a defender, now plays?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List some teams for which #entity1",
    "originStr": "List some teams for which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "someone who has played as a defender , now plays",
    "originStr": "someone who has played as a defender , now plays"
   }
  ],
  "question": "List some teams for which someone who has played as a defender, now plays",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT some) (NNS teams)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN played) (PP (IN as) (NP (DT a) (NN defender))) (, ,) (ADVP (RB now))))))) (VP (VBZ plays)))))) (. ?)))",
  "entityNum": 2,
  "id": 694
 },
 {
  "taggedQuestion": "Which rivers start from the Provinces of Zambia?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which rivers #entity1",
    "originStr": "Which rivers #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "start from the Provinces of Zambia",
    "originStr": "start from the Provinces of Zambia"
   }
  ],
  "question": "Which rivers start from the Provinces of Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS rivers)) (VP (VBP start) (PP (IN from) (NP (NP (DT the) (NNS Provinces)) (PP (IN of) (NP (NNP Zambia))))))) (. ?)))",
  "entityNum": 2,
  "id": 695
 },
 {
  "taggedQuestion": "Who are the scientists known for the Manhattan Project?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the scientists known",
    "originStr": "Who are the scientists known"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "for the Manhattan Project",
    "originStr": "for the Manhattan Project"
   }
  ],
  "question": "Who are the scientists known for the Manhattan Project",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (DT the) (NNS scientists)) (VP (VBN known) (PP (IN for) (NP (DT the) (NNP Manhattan) (NNP Project))))) (. ?)))",
  "entityNum": 1,
  "id": 696
 },
 {
  "taggedQuestion": "What are some dishes from the family of dishes which primarily use flour?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some dishes from #entity1",
    "originStr": "What are some dishes from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the family of dishes which primarily use flour",
    "originStr": "the family of dishes which primarily use flour"
   }
  ],
  "question": "What are some dishes from the family of dishes which primarily use flour",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS dishes)) (PP (IN from) (NP (NP (DT the) (NN family)) (PP (IN of) (NP (NP (NNS dishes)) (SBAR (WHNP (WDT which)) (S (ADVP (RB primarily)) (VP (VBP use) (NP (NN flour))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 697
 },
 {
  "taggedQuestion": "Which religion do the people follow, whose constituency is Jadavpur?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which religion do the people follow , #entity1",
    "originStr": "Which religion do the people follow , #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose constituency is Jadavpur",
    "originStr": "whose constituency is Jadavpur"
   }
  ],
  "question": "Which religion do the people follow, whose constituency is Jadavpur",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBARQ (WHNP (WDT Which) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS people)) (VP (VBP follow)))) (, ,) (SBARQ (WHNP (WP$ whose) (NN constituency)) (SQ (VBZ is) (NP (NNP Jadavpur)))) (. ?)))",
  "entityNum": 2,
  "id": 698
 },
 {
  "taggedQuestion": "Which region is the rival school of Somerset, Massachusetts located?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which region is #entity1 located",
    "originStr": "In which region is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rival school of Somerset , Massachusetts",
    "originStr": "the rival school of Somerset , Massachusetts"
   }
  ],
  "question": "In which region is the rival school of Somerset, Massachusetts located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN region)) (SQ (VBZ is) (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NNP Somerset) (, ,) (NNP Massachusetts)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 699
 },
 {
  "taggedQuestion": "Which key person of Clinton Foundation is also the president of Jim Sasser ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which key person of Clinton Foundation is",
    "originStr": "Which key person of Clinton Foundation is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the president of Jim Sasser",
    "originStr": "also the president of Jim Sasser"
   }
  ],
  "question": "Which key person of Clinton Foundation is also the president of Jim Sasser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ key) (NN person)) (PP (IN of) (NP (NNP Clinton) (NNP Foundation))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Jim) (NNP Sasser))))) (. ?)))",
  "entityNum": 1,
  "id": 700
 },
 {
  "taggedQuestion": "Where did the athlete start his career, who did his highschool in <e0>?",
  "entityMap": {
   "<e0>": "Red Lion Area School District"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did the athlete start his career #entity1",
    "originStr": "Where did the athlete start his career #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": ", who did his highschool in Red Lion Area School District",
    "originStr": ", who did his highschool in Red Lion Area School District"
   }
  ],
  "question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN athlete)) (VP (VB start) (NP (NP (PRP$ his) (NN career)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD did) (NP (PRP$ his) (NN highschool)) (PP (IN in) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 701
 },
 {
  "taggedQuestion": "Name a person who works in <e0> and has wife named <e1> .",
  "entityMap": {
   "<e1>": "Susan Weber Soros",
   "<e0>": "Open Society Foundation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name a person who works in Open Society Foundation and",
    "originStr": "Name a person who works in Open Society Foundation and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has wife named Susan Weber Soros",
    "originStr": "has wife named Susan Weber Soros"
   }
  ],
  "question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ works) (PP (IN in) (NP (ADD <e0>)))) (CC and) (VP (VBZ has) (NP (NP (NN wife)) (VP (VBN named) (NP (ADD <e1>)))))))))) (. .)))",
  "entityNum": 1,
  "id": 702
 },
 {
  "taggedQuestion": "How many things are crossed over by bridges which can carry cars?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many things are crossed over by #entity1",
    "originStr": "How many things are crossed over by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "bridges which can carry cars",
    "originStr": "bridges which can carry cars"
   }
  ],
  "question": "How many things are crossed over by bridges which can carry cars",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN crossed) (PRT (RP over)) (PP (IN by) (NP (NP (NNS bridges)) (SBAR (WHNP (WDT which)) (S (VP (MD can) (VP (VB carry) (NP (NNS cars)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 703
 },
 {
  "taggedQuestion": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3 ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which fictional character sculpted by Josh Friedmann was",
    "originStr": "Which fictional character sculpted by Josh Friedmann was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "portrayed in Terminator 3",
    "originStr": "portrayed in Terminator 3"
   }
  ],
  "question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ fictional) (NN character)) (SQ (VP (VBN sculpted) (PP (IN by) (NP (NP (NNP Josh) (NNP Friedmann)) (SBAR (S (VP (VBD was) (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 3))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 704
 },
 {
  "taggedQuestion": "Which team won the <e0>?",
  "entityMap": {
   "<e0>": "American Football League"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which team won the American Football League",
    "originStr": "Which team won the American Football League"
   }
  ],
  "question": "Which team won the American Football League",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBD won) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 705
 },
 {
  "taggedQuestion": "Which currency can I use both in Kerguelen islands and <e0>?",
  "entityMap": {
   "<e0>": "French southern and antarctic lands"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which",
    "originStr": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "currency can I use both in Kerguelen islands and French southern and antarctic lands",
    "originStr": "currency can I use both in Kerguelen islands and French southern and antarctic lands"
   }
  ],
  "question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN currency)) (SQ (MD can) (NP (PRP I)) (VP (VB use) (PP (CC both) (IN in) (NP (NP (NNP Kerguelen) (NNS islands)) (CC and) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 706
 },
 {
  "taggedQuestion": "Who is the founder of the trade union which <e1> of Iron and Steel Workers?",
  "entityMap": {
   "<e1>": "affiliates Amalgamated Association",
   "<e0>": "Iron Steel Workers"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the founder of #entity1 Workers",
    "originStr": "Who is the founder of #entity1 Workers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the trade union which affiliates Amalgamated Association of Iron and Steel",
    "originStr": "the trade union which affiliates Amalgamated Association of Iron and Steel"
   }
  ],
  "question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NP (NP (DT the) (NN trade) (NN union)) (SBAR (WHNP (WDT which)) (FRAG (NP (ADD <e1>))))) (PP (IN of) (NP (NML (NNP Iron) (CC and) (NNP Steel)) (NNPS Workers))))))) (. ?)))",
  "entityNum": 2,
  "id": 707
 },
 {
  "taggedQuestion": "Which leader of <e0> was the appinter of ohn Drayton ?",
  "entityMap": {
   "<e0>": "United States House of Representatives"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which leader of United States House of Representatives",
    "originStr": "Which leader of United States House of Representatives"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was the appointer of ohn Drayton",
    "originStr": "was the appointer of ohn Drayton"
   }
  ],
  "question": "Which leader of United States House of Representatives was the appointer of ohn Drayton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN leader)) (PP (IN of) (NP (ADD <e0>)))) (SQ (VBD was) (NP (NP (DT the) (NN appinter)) (PP (IN of) (NP (NNP ohn) (NNP Drayton))))) (. ?)))",
  "entityNum": 1,
  "id": 708
 },
 {
  "taggedQuestion": "Is fox belong to the phylum of Chordate?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is fox belong to the phylum of Chordate",
    "originStr": "Is fox belong to the phylum of Chordate"
   }
  ],
  "question": "Is fox belong to the phylum of Chordate",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (NN fox)) (VP (VB belong) (PP (IN to) (NP (NP (DT the) (NN phylum)) (PP (IN of) (NP (NN Chordate)))))))) (. ?)))",
  "entityNum": 1,
  "id": 709
 },
 {
  "taggedQuestion": "Which researchers received fellowship from Royal Society?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which researchers #entity1",
    "originStr": "Which researchers #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "received fellowship from Royal Society",
    "originStr": "received fellowship from Royal Society"
   }
  ],
  "question": "Which researchers received fellowship from Royal Society",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS researchers)) (SQ (VP (VBD received) (NP (NN fellowship)) (PP (IN from) (NP (NNP Royal) (NNP Society))))) (. ?)))",
  "entityNum": 2,
  "id": 710
 },
 {
  "taggedQuestion": "Which president of United States had vice president as John Adams?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which president of United States had",
    "originStr": "Which president of United States had"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "vice president as John Adams",
    "originStr": "vice president as John Adams"
   }
  ],
  "question": "Which president of United States had vice president as John Adams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN president)) (PP (IN of) (NP (NNP United) (NNP States)))) (SQ (VP (VBD had) (NP (NP (NN vice) (NN president)) (PP (IN as) (NP (NNP John) (NNP Adams)))))) (. ?)))",
  "entityNum": 1,
  "id": 711
 },
 {
  "taggedQuestion": "Where was <e0> buried ?",
  "entityMap": {
   "<e0>": "James H. Fields"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was James H. Fields buried",
    "originStr": "Where was James H. Fields buried"
   }
  ],
  "question": "Where was James H. Fields buried",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADD <e0>)) (VP (VBN buried)))) (. ?)))",
  "entityNum": 1,
  "id": 712
 },
 {
  "taggedQuestion": "Is Henry Knox a commander of <e0>?",
  "entityMap": {
   "<e0>": "Continental Artillery Regiment"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Henry Knox a commander of Continental Artillery Regiment",
    "originStr": "Is Henry Knox a commander of Continental Artillery Regiment"
   }
  ],
  "question": "Is Henry Knox a commander of Continental Artillery Regiment",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Henry) (NNP Knox)) (NP (NP (DT a) (NN commander)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 713
 },
 {
  "taggedQuestion": "What is the commander of <e0> ?",
  "entityMap": {
   "<e0>": "Battle of Brownstown"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the commander of Battle of Brownstown",
    "originStr": "What is the commander of Battle of Brownstown"
   }
  ],
  "question": "What is the commander of Battle of Brownstown",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN commander)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 714
 },
 {
  "taggedQuestion": "Is Baker<e0> in the coffee industry?",
  "entityMap": {
   "<e0>": "'s Dozen Donuts"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Baker's Dozen Donuts in the coffee industry",
    "originStr": "Is Baker's Dozen Donuts in the coffee industry"
   }
  ],
  "question": "Is Baker's Dozen Donuts in the coffee industry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Baker)) (NP (NP (ADD <e0>)) (PP (IN in) (NP (DT the) (NN coffee) (NN industry)))) (. ?)))",
  "entityNum": 1,
  "id": 715
 },
 {
  "taggedQuestion": "What is Jon Speelman famous for?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is Jon Speelman famous for",
    "originStr": "What is Jon Speelman famous for"
   }
  ],
  "question": "What is Jon Speelman famous for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NNP Jon) (NNP Speelman)) (ADJP (JJ famous) (PP (IN for)))) (. ?)))",
  "entityNum": 1,
  "id": 716
 },
 {
  "taggedQuestion": "Who is the fictional character whose family member is Padme Amidala?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the fictional character whose",
    "originStr": "Who is the fictional character whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "family member is Padme Amidala",
    "originStr": "family member is Padme Amidala"
   }
  ],
  "question": "Who is the fictional character whose family member is Padme Amidala",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN family) (NN member)) (S (VP (VBZ is) (NP (NNP Padme) (NNP Amidala))))))) (. ?)))",
  "entityNum": 1,
  "id": 717
 },
 {
  "taggedQuestion": "What company is the one which wrote the <e0> and PlayN?",
  "entityMap": {
   "<e0>": "google web toolkit"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What company is the",
    "originStr": "What company is the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "toolkit one which wrote the google web toolkit and PlayN",
    "originStr": "toolkit one which wrote the google web toolkit and PlayN"
   }
  ],
  "question": "What company is the one which wrote the google web toolkit and PlayN",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN company)) (SQ (VBZ is) (NP (NP (DT the) (CD one)) (SBAR (WHNP (WDT which)) (S (VP (VBD wrote) (NP (DT the) (NN <e0>) (CC and) (NN PlayN))))))) (. ?)))",
  "entityNum": 1,
  "id": 718
 },
 {
  "taggedQuestion": "How many different songwriters have had their songs recorded in London?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many different songwriters have had #entity1",
    "originStr": "How many different songwriters have had #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "their songs recorded in London",
    "originStr": "their songs recorded in London"
   }
  ],
  "question": "How many different songwriters have had their songs recorded in London",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ different) (NNS songwriters)) (VP (VBP have) (VP (VBN had) (NP (NP (PRP$ their) (NNS songs)) (VP (VBN recorded) (PP (IN in) (NP (NNP London)))))))) (. ?)))",
  "entityNum": 2,
  "id": 719
 },
 {
  "taggedQuestion": "Which are the  automobile platform whose one of the automobile platform is Dodge ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which are the automobile platform whose one of #entity1 Dodge",
    "originStr": "Which are the automobile platform whose one of #entity1 Dodge"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the automobile platform is",
    "originStr": "the automobile platform is"
   }
  ],
  "question": "Which are the automobile platform whose one of the automobile platform is Dodge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (VP (VBP are) (NP (DT the) (NN automobile) (NN platform))))) (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN automobile) (NN platform)))) (SQ (VBZ is) (NP (NNP Dodge))) (. ?)))",
  "entityNum": 2,
  "id": 720
 },
 {
  "taggedQuestion": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the total number of #entity1",
    "originStr": "What is the total number of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "other combatant of the military conflicts whose combatant is Choctaw",
    "originStr": "other combatant of the military conflicts whose combatant is Choctaw"
   }
  ],
  "question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN combatant)) (PP (IN of) (NP (NP (DT the) (JJ military) (NNS conflicts)) (SBAR (WHNP (WP$ whose) (NML (NN combatant))) (S (VP (VBZ is) (NP (NNP Choctaw))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 721
 },
 {
  "taggedQuestion": "List some pupils of <e0> winning scientists?",
  "entityMap": {
   "<e0>": "National Science Medal"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List some pupils of #entity1 scientists",
    "originStr": "List some pupils of #entity1 scientists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "National Science Medal winning",
    "originStr": "National Science Medal winning"
   }
  ],
  "question": "List some pupils of National Science Medal winning scientists",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (NP (DT some) (NNS pupils)) (PP (IN of) (NP (NN <e0>)))) (VP (VBG winning) (NP (NNS scientists))))) (. ?)))",
  "entityNum": 2,
  "id": 722
 },
 {
  "taggedQuestion": "Relatives of Moses used to follow which religions?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Relatives",
    "originStr": "Relatives"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "of Moses used to follow which religions",
    "originStr": "of Moses used to follow which religions"
   }
  ],
  "question": "Relatives of Moses used to follow which religions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Relatives)) (PP (IN of) (NP (NNP Moses)))) (VP (VBD used) (S (VP (TO to) (VP (VB follow) (SBAR (WHNP (WDT which))) (NP (NNS religions)))))) (. ?)))",
  "entityNum": 1,
  "id": 723
 },
 {
  "taggedQuestion": "Where was <e0>, Nina first aired ?",
  "entityMap": {
   "<e0>": "Ne daj se"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Ne daj se, Nina first aired",
    "originStr": "Where was Ne daj se, Nina first aired"
   }
  ],
  "question": "Where was Ne daj se, Nina first aired",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADD <e0>)) (, ,) (NP (NNP Nina))) (VP (ADVP (RB first)) (VBN aired))) (. ?)))",
  "entityNum": 1,
  "id": 724
 },
 {
  "taggedQuestion": "Where did the <e0> take place?",
  "entityMap": {
   "<e0>": "2015 MLS All-Star Game"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did the 2015 MLS All-Star Game take place",
    "originStr": "Where did the 2015 MLS All-Star Game take place"
   }
  ],
  "question": "Where did the 2015 MLS All-Star Game take place",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN <e0>)) (VP (VB take) (NP (NN place)))) (. ?)))",
  "entityNum": 1,
  "id": 725
 },
 {
  "taggedQuestion": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Nikolai Morozov the former coach of Stanislav Morozov",
    "originStr": "Is Nikolai Morozov the former coach of Stanislav Morozov"
   }
  ],
  "question": "Is Nikolai Morozov the former coach of Stanislav Morozov",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Nikolai) (NNP Morozov)) (NP (NP (DT the) (JJ former) (NN coach)) (PP (IN of) (NP (NNP Stanislav) (NNP Morozov)))) (. ?)))",
  "entityNum": 1,
  "id": 726
 },
 {
  "taggedQuestion": "Did Alexandre Tichonov study at the Moscow university?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Alexandre Tichonov study at the Moscow university",
    "originStr": "Did Alexandre Tichonov study at the Moscow university"
   }
  ],
  "question": "Did Alexandre Tichonov study at the Moscow university",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (VP (VBD Did) (S (NP (NNP Alexandre) (NNP Tichonov))) (NP (NP (NN study)) (PP (IN at) (NP (DT the) (NNP Moscow) (NN university))))) (. ?)))",
  "entityNum": 1,
  "id": 727
 },
 {
  "taggedQuestion": "What is the name of the homeground of football team Panionios G.S.S.?",
  "entityMap": {
   "<e0>": "Panionios G.S. S."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the name of #entity1",
    "originStr": "What is the name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the homeground of football team Panionios G.S.S",
    "originStr": "the homeground of football team Panionios G.S.S"
   }
  ],
  "question": "What is the name of the homeground of football team Panionios G.S.S",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN homeground)) (PP (IN of) (NP (NML (NN football) (NN team)) (NNP Panionios) (NNP G.S.S.))))))) (. ?)))",
  "entityNum": 2,
  "id": 728
 },
 {
  "taggedQuestion": "List presidents of the school whose one of the president is Charles. Prince of Wales ?",
  "entityMap": {
   "<e0>": "Charles . Prince"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List presidents of the #entity1",
    "originStr": "List presidents of the #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "school whose one of the president is Charles ",
    "originStr": "school whose one of the president is Charles "
   }
  ],
  "question": "List presidents of the school whose one of the president is Charles. Prince of Wales",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (NNS presidents)) (PP (IN of) (NP (NP (DT the) (NN school)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN president)))) (S (VP (VBZ is) (NP (NNP Charles))))))) (. .)))(ROOT (NP (NP (NNP Prince)) (PP (IN of) (NP (NNP Wales))) (. ?)))",
  "entityNum": 2,
  "id": 729
 },
 {
  "taggedQuestion": "Does Timothy Morton study Buddhism?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Timothy Morton study Buddhism",
    "originStr": "Does Timothy Morton study Buddhism"
   }
  ],
  "question": "Does Timothy Morton study Buddhism",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Timothy) (NNP Morton) (NN study) (NNP Buddhism)) (. ?)))",
  "entityNum": 1,
  "id": 730
 },
 {
  "taggedQuestion": "Brian Moriarty designed video games written by whom?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 by whom",
    "originStr": "#entity1 by whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Brian Moriarty designed video games written",
    "originStr": "Brian Moriarty designed video games written"
   }
  ],
  "question": "Brian Moriarty designed video games written by whom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Brian) (NNP Moriarty)) (VP (VBD designed) (NP (NP (NN video) (NNS games)) (VP (VBN written) (PP (IN by) (NP (WP whom)))))) (. ?)))",
  "entityNum": 2,
  "id": 731
 },
 {
  "taggedQuestion": "What are some movies whose distributors are led by Kevin Tsujihara?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some movies whose distributors #entity1",
    "originStr": "What are some movies whose distributors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are led by Kevin Tsujihara",
    "originStr": "are led by Kevin Tsujihara"
   }
  ],
  "question": "What are some movies whose distributors are led by Kevin Tsujihara",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NNS distributors))) (S (VP (VBP are) (VP (VBN led) (PP (IN by) (NP (NNP Kevin) (NNP Tsujihara))))))))) (. ?)))",
  "entityNum": 2,
  "id": 732
 },
 {
  "taggedQuestion": "Name the common associate band of Blayse and Teddy Riley .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the common associate band of Blayse and Teddy Riley",
    "originStr": "the common associate band of Blayse and Teddy Riley"
   }
  ],
  "question": "Name the common associate band of Blayse and Teddy Riley",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN associate) (NN band)) (PP (IN of) (NP (NP (NNP Blayse)) (CC and) (NP (NNP Teddy) (NNP Riley)))))) (. .)))",
  "entityNum": 1,
  "id": 733
 },
 {
  "taggedQuestion": "What did <e0>'s father die from?",
  "entityMap": {
   "<e0>": "Steven T Mason"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What did #entity1 from",
    "originStr": "What did #entity1 from"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Steven T Mason's father die",
    "originStr": "Steven T Mason's father die"
   }
  ],
  "question": "What did Steven T Mason's father die from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NP (ADD <e0>)) (POS 's)) (NN father)) (VP (VB die) (PP (IN from)))) (. ?)))",
  "entityNum": 2,
  "id": 734
 },
 {
  "taggedQuestion": "Whose military units are VMF-218 and VMF-155?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose",
    "originStr": "Whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "military units are VMF-218 and VMF-155",
    "originStr": "military units are VMF-218 and VMF-155"
   }
  ],
  "question": "Whose military units are VMF-218 and VMF-155",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NML (JJ military) (NNS units))) (S (VP (VBP are) (NP (NP (NNP VMF) (HYPH -) (CD 218)) (CC and) (NP (NN VMF) (HYPH -) (CD 155))))) (. ?)))",
  "entityNum": 1,
  "id": 735
 },
 {
  "taggedQuestion": "What automobile engine's successor is BMW M40?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What automobile engine's successor is",
    "originStr": "What automobile engine's successor is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "BMW M40",
    "originStr": "BMW M40"
   }
  ],
  "question": "What automobile engine's successor is BMW M40",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN automobile)) (SQ (NP (NP (NN engine) (POS 's)) (NN successor)) (VP (VBZ is) (NP (NNP BMW) (NN M40)))) (. ?)))",
  "entityNum": 1,
  "id": 736
 },
 {
  "taggedQuestion": "Name the company which produces both  <e0>/<e1> .",
  "entityMap": {
   "<e1>": "F Hornet nad CH-46 Chinook",
   "<e0>": "Boeing F/A-18 E"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the company which",
    "originStr": "Name the company which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "produces both Boeing F/A -18 E/F Hornet and CH-46 Chinook",
    "originStr": "produces both Boeing F/A -18 E/F Hornet and CH-46 Chinook"
   }
  ],
  "question": "Name the company which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ produces) (NP (DT both) (NN <e0>) (HYPH /) (NN <e1>))))))) (. .)))",
  "entityNum": 1,
  "id": 737
 },
 {
  "taggedQuestion": "What is the district of <e0> ?",
  "entityMap": {
   "<e0>": "Methodist Central Hall Westminster"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the district of Methodist Central Hall Westminster",
    "originStr": "What is the district of Methodist Central Hall Westminster"
   }
  ],
  "question": "What is the district of Methodist Central Hall Westminster",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN district)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 738
 },
 {
  "taggedQuestion": "Who develops the computation platform of <e0> ?",
  "entityMap": {
   "<e0>": "Microsoft Expression Encoder"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who develops #entity1",
    "originStr": "Who develops #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the computation platform of Microsoft Expression Encoder",
    "originStr": "the computation platform of Microsoft Expression Encoder"
   }
  ],
  "question": "Who develops the computation platform of Microsoft Expression Encoder",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ develops) (NP (NP (DT the) (JJ computation) (NN platform)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 739
 },
 {
  "taggedQuestion": "What is the official language of Ladonia, which is the target area of Probus Journal?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the official language of Ladonia , which",
    "originStr": "What is the official language of Ladonia , which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the target area of Probus Journal",
    "originStr": "is the target area of Probus Journal"
   }
  ],
  "question": "What is the official language of Ladonia, which is the target area of Probus Journal",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NP (NNP Ladonia)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN target) (NN area)) (PP (IN of) (NP (NNP Probus) (NNP Journal))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 740
 },
 {
  "taggedQuestion": "Where did the conflict take place where <e0> I'Isle was a commander?",
  "entityMap": {
   "<e0>": "Louis Briere de"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did the conflict take place #entity1",
    "originStr": "Where did the conflict take place #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where Louis Briere de I ` Isle was a commander",
    "originStr": "where Louis Briere de I ` Isle was a commander"
   }
  ],
  "question": "Where did the conflict take place where Louis Briere de I'Isle was a commander",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN conflict)) (VP (VB take) (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (ADD <e0>)) (NP (NP (PRP I)) (`` ') (NP (NNP Isle)))) (VP (VBD was) (NP (DT a) (NN commander))))))) (. ?)))",
  "entityNum": 2,
  "id": 741
 },
 {
  "taggedQuestion": "Which team was the person drafted who has studied at the Worcester college, Oxford?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which team was #entity1 Oxford",
    "originStr": "In which team was #entity1 Oxford"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person drafted who has studied at the Worcester college ",
    "originStr": "the person drafted who has studied at the Worcester college "
   }
  ],
  "question": "In which team was the person drafted who has studied at the Worcester college, Oxford",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD was) (NP (DT the) (NN person)) (VP (VBN drafted) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN studied) (PP (IN at) (NP (NP (DT the) (NNP Worcester) (NN college)) (, ,) (NP (NNP Oxford)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 742
 },
 {
  "taggedQuestion": "How many people hold important positions alongwith Donna Shalala?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people hold #entity1",
    "originStr": "How many people hold #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "important positions along with Donna Shalala",
    "originStr": "important positions along with Donna Shalala"
   }
  ],
  "question": "How many people hold important positions along with Donna Shalala",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP hold) (NP (JJ important) (NNS positions)) (S (ADJP (JJ alongwith) (NP (NNP Donna) (NNP Shalala)))))) (. ?)))",
  "entityNum": 2,
  "id": 743
 },
 {
  "taggedQuestion": "What other things are provided by the producer of Office 365?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What other things are provided by #entity1",
    "originStr": "What other things are provided by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the producer of Office 365",
    "originStr": "the producer of Office 365"
   }
  ],
  "question": "What other things are provided by the producer of Office 365",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NNS things)) (SQ (VBP are) (VP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Office) (CD 365))))))) (. ?)))",
  "entityNum": 2,
  "id": 744
 },
 {
  "taggedQuestion": "Who owns the company that made the Edsel Villager?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who owns #entity1",
    "originStr": "Who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company that made the Edsel Villager",
    "originStr": "the company that made the Edsel Villager"
   }
  ],
  "question": "Who owns the company that made the Edsel Villager",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD made) (NP (DT the) (NNP Edsel) (NN Villager)))))))) (. ?)))",
  "entityNum": 2,
  "id": 745
 },
 {
  "taggedQuestion": "Which collaborator of <e0> wrote Same Song ?",
  "entityMap": {
   "<e0>": "Nice and Smooth"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which collaborator of Nice and",
    "originStr": "Which collaborator of Nice and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Smooth wrote Same Song",
    "originStr": "Smooth wrote Same Song"
   }
  ],
  "question": "Which collaborator of Nice and Smooth wrote Same Song",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN collaborator) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (VBD wrote) (NP (JJ Same) (NN Song)))) (. ?)))",
  "entityNum": 1,
  "id": 746
 },
 {
  "taggedQuestion": "Who fought in the battle at Tupelo Mississippi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who fought in #entity1",
    "originStr": "Who fought in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the battle at Tupelo Mississippi",
    "originStr": "the battle at Tupelo Mississippi"
   }
  ],
  "question": "Who fought in the battle at Tupelo Mississippi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD fought) (PP (IN in) (NP (NP (DT the) (NN battle)) (PP (IN at) (NP (NNP Tupelo) (NNP Mississippi))))))) (. ?)))",
  "entityNum": 2,
  "id": 747
 },
 {
  "taggedQuestion": "List the movies whose cast member were born in Scotland.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the movies whose cast member #entity1",
    "originStr": "List the movies whose cast member #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "were born in Scotland",
    "originStr": "were born in Scotland"
   }
  ],
  "question": "List the movies whose cast member were born in Scotland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NN cast)) (NN member)) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Scotland))))))))) (. .)))",
  "entityNum": 2,
  "id": 748
 },
 {
  "taggedQuestion": "List the other nicknames of city which has one of the nickname as <e0> ?",
  "entityMap": {
   "<e0>": "City of Angels"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the other nicknames of #entity1",
    "originStr": "List the other nicknames of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "city which has one of the nickname as City of Angels",
    "originStr": "city which has one of the nickname as City of Angels"
   }
  ],
  "question": "List the other nicknames of city which has one of the nickname as City of Angels",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (JJ other) (NNS nicknames)) (PP (IN of) (NP (NP (NN city)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN nickname)) (PP (IN as) (NP (NN <e0>))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 749
 },
 {
  "taggedQuestion": "Count the writers whose work has been played in NY.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the writers whose work has #entity1",
    "originStr": "Count the writers whose work has #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "been played in NY",
    "originStr": "been played in NY"
   }
  ],
  "question": "Count the writers whose work has been played in NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS writers)) (SBAR (WHNP (WP$ whose) (NN work)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN played) (PP (IN in) (NP (NNP NY)))))))))) (. .)))",
  "entityNum": 2,
  "id": 750
 },
 {
  "taggedQuestion": "Where did the graduates of Memphis, Tenessee continue their education?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did #entity1 continue their education",
    "originStr": "Where did #entity1 continue their education"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the graduates of Memphis , Tennessee",
    "originStr": "the graduates of Memphis , Tennessee"
   }
  ],
  "question": "Where did the graduates of Memphis, Tennessee continue their education",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (SBAR (WHADVP (WRB Where)) (S (VP (VBD did) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NNP Memphis))))))) (, ,) (NP (NNP Tenessee)) (VP (VBP continue) (NP (PRP$ their) (NN education))) (. ?)))",
  "entityNum": 2,
  "id": 751
 },
 {
  "taggedQuestion": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What subsequent work of Moondog Matinee has",
    "originStr": "What subsequent work of Moondog Matinee has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the composer of Motorpsycho Nitemare",
    "originStr": "the composer of Motorpsycho Nitemare"
   }
  ],
  "question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NP (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Moondog) (NNP Matinee))))) (SQ (VP (VBZ has) (NP (NP (DT the) (NN composer)) (PP (IN of) (NP (NNP Motorpsycho) (NNP Nitemare)))))) (. ?)))",
  "entityNum": 1,
  "id": 752
 },
 {
  "taggedQuestion": "What was the language of the single which came before To Know Him Is to Love Him?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What was the language of #entity1",
    "originStr": "What was the language of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the single which came before To Know Him Is to Love Him",
    "originStr": "the single which came before To Know Him Is to Love Him"
   }
  ],
  "question": "What was the language of the single which came before To Know Him Is to Love Him",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN language)) (PP (IN of) (NP (NP (DT the) (JJ single)) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (ADVP (RB before)) (S (VP (TO To) (VP (VB Know) (SBAR (S (NP (PRP Him)) (VP (VBZ Is) (S (VP (TO to) (VP (VB Love) (NP (PRP Him)))))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 753
 },
 {
  "taggedQuestion": "What are the <e0> whose company is owned by Viacom?",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the television shows whose #entity1",
    "originStr": "What are the television shows whose #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "company is owned by Viacom",
    "originStr": "company is owned by Viacom"
   }
  ],
  "question": "What are the television shows whose company is owned by Viacom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NN company)) (S (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (NNP Viacom))))))))) (. ?)))",
  "entityNum": 2,
  "id": 754
 },
 {
  "taggedQuestion": "How many people used to play in the youthclub of FC Barcelona?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people used to play in #entity1",
    "originStr": "How many people used to play in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the youthclub of FC Barcelona",
    "originStr": "the youthclub of FC Barcelona"
   }
  ],
  "question": "How many people used to play in the youthclub of FC Barcelona",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBN used) (S (VP (TO to) (VP (VB play) (PP (IN in) (NP (NP (DT the) (NNP youthclub)) (PP (IN of) (NP (NNP FC) (NNP Barcelona)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 755
 },
 {
  "taggedQuestion": "Quebec born ice hockey players have stopped playing for which teams?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have stopped playing for which teams",
    "originStr": "#entity1 have stopped playing for which teams"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Quebec born ice hockey players",
    "originStr": "Quebec born ice hockey players"
   }
  ],
  "question": "Quebec born ice hockey players have stopped playing for which teams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Quebec)) (VP (VBN born) (NP (NML (NN ice) (NN hockey)) (NNS players)))) (VP (VBP have) (VP (VBN stopped) (S (VP (VBG playing) (WHPP (IN for) (WHNP (WDT which) (NNS teams))))))) (. ?)))",
  "entityNum": 2,
  "id": 756
 },
 {
  "taggedQuestion": "Who is the chancellor of Falmouth University ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the chancellor of Falmouth University",
    "originStr": "Who is the chancellor of Falmouth University"
   }
  ],
  "question": "Who is the chancellor of Falmouth University",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NNP Falmouth) (NNP University))))) (. ?)))",
  "entityNum": 1,
  "id": 757
 },
 {
  "taggedQuestion": "What things play on WBIG FM?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what kind of things play on WBIG FM",
    "originStr": "what kind of things play on WBIG FM"
   }
  ],
  "question": "what kind of things play on WBIG FM",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS things)) (SQ (VP (VBP play) (PP (IN on) (NP (NNP WBIG) (NNP FM))))) (. ?)))",
  "entityNum": 1,
  "id": 758
 },
 {
  "taggedQuestion": "Name the are where <e0> operate and has place of birth as <e1> .",
  "entityMap": {
   "<e1>": "Arthur A. Ross",
   "<e0>": "South side Elevated Railroad"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the are where South side Elevated Railroad operate and",
    "originStr": "Name the are where South side Elevated Railroad operate and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has place of birth as Arthur A. Ross",
    "originStr": "has place of birth as Arthur A. Ross"
   }
  ],
  "question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the)) (VP (VBP are) (SBAR (WHADVP (WRB where)) (S (NP (ADD <e0>)) (VP (VP (VBP operate)) (CC and) (VP (VBZ has) (NP (NP (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN as) (NP (ADD <e1>))))))))))))) (. .)))",
  "entityNum": 1,
  "id": 759
 },
 {
  "taggedQuestion": "Which fields are the graduates of Worcester College, Oxford working?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which fields are the",
    "originStr": "In which fields are the"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "graduates of Worcester College , Oxford working",
    "originStr": "graduates of Worcester College , Oxford working"
   }
  ],
  "question": "In which fields are the graduates of Worcester College, Oxford working",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (SBAR (WHNP (WDT Which)) (S (NP (NNS fields)) (VP (VBP are) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NNP Worcester) (NNP College))))))) (, ,) (NP (NNP Oxford)) (VP (VBG working)) (. ?)))",
  "entityNum": 1,
  "id": 760
 },
 {
  "taggedQuestion": "List the places where the relatives of Mark Donaldson died ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the places where #entity1 died",
    "originStr": "List the places where #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of Mark Donaldson",
    "originStr": "the relatives of Mark Donaldson"
   }
  ],
  "question": "List the places where the relatives of Mark Donaldson died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (DT the) (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mark) (NNP Donaldson)))) (VP (VBD died))))) (. ?)))",
  "entityNum": 2,
  "id": 761
 },
 {
  "taggedQuestion": "What famous politician died in the Petersen House?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What famous politician died",
    "originStr": "What famous politician died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in the Petersen House",
    "originStr": "in the Petersen House"
   }
  ],
  "question": "What famous politician died in the Petersen House",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (JJ famous) (NN politician)) (SQ (VP (VBD died) (PP (IN in) (NP (DT the) (NNP Petersen) (NNP House))))) (. ?)))",
  "entityNum": 1,
  "id": 762
 },
 {
  "taggedQuestion": "What are some artists on the show whose opening theme is <e0>?",
  "entityMap": {
   "<e0>": "Send It On"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some artists on #entity1 On",
    "originStr": "What are some artists on #entity1 On"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the show whose opening theme is Send It",
    "originStr": "the show whose opening theme is Send It"
   }
  ],
  "question": "What are some artists on the show whose opening theme is Send It On",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS artists)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WP$ whose) (NML (NN opening) (NN theme))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 763
 },
 {
  "taggedQuestion": "What is the citizenship of Saima Chowdhury?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the citizenship of Saima Chowdhury",
    "originStr": "What is the citizenship of Saima Chowdhury"
   }
  ],
  "question": "What is the citizenship of Saima Chowdhury",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN citizenship)) (PP (IN of) (NP (NNP Saima) (NNP Chowdhury))))) (. ?)))",
  "entityNum": 1,
  "id": 764
 },
 {
  "taggedQuestion": "What are the musical performances whose label is Celluloid Records?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the musical performances whose",
    "originStr": "What are the musical performances whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "label is Celluloid Records",
    "originStr": "label is Celluloid Records"
   }
  ],
  "question": "What are the musical performances whose label is Celluloid Records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ musical) (NNS performances)) (SBAR (WHNP (WP$ whose) (NN label)) (S (VP (VBZ is) (NP (JJ Celluloid) (NNPS Records))))))) (. ?)))",
  "entityNum": 1,
  "id": 765
 },
 {
  "taggedQuestion": "What is the craft of the Ralph Flanders which is also the profession of  Claiborne Pell ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the craft of the Ralph Flanders which",
    "originStr": "What is the craft of the Ralph Flanders which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the profession of Claiborne Pell",
    "originStr": "is also the profession of Claiborne Pell"
   }
  ],
  "question": "What is the craft of the Ralph Flanders which is also the profession of Claiborne Pell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN craft)) (PP (IN of) (NP (NP (DT the) (NNP Ralph) (NNP Flanders)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN profession)) (PP (IN of) (NP (NNP Claiborne) (NNP Pell))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 766
 },
 {
  "taggedQuestion": "How many people have fought wars where <e0> was a commander?",
  "entityMap": {
   "<e0>": "Arthur St. Clair"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people have fought wars #entity1",
    "originStr": "How many people have fought wars #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where Arthur St. Clair was a commander",
    "originStr": "where Arthur St. Clair was a commander"
   }
  ],
  "question": "How many people have fought wars where Arthur St. Clair was a commander",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN fought) (NP (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (ADD <e0>)) (VP (VBD was) (NP (DT a) (NN commander)))))))) (. ?)))",
  "entityNum": 2,
  "id": 767
 },
 {
  "taggedQuestion": "Does Chicago own the Monroe Station?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Chicago own the Monroe Station",
    "originStr": "Does Chicago own the Monroe Station"
   }
  ],
  "question": "Does Chicago own the Monroe Station",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Chicago)) (VP (VB own) (NP (DT the) (NNP Monroe) (NNP Station))) (. ?)))",
  "entityNum": 1,
  "id": 768
 },
 {
  "taggedQuestion": "Which team has had both Martin prochzka and garry unger as its players ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which team has",
    "originStr": "Which team has"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "had both Martin prochzka and garry unger as its players",
    "originStr": "had both Martin prochzka and garry unger as its players"
   }
  ],
  "question": "Which team has had both Martin prochzka and garry unger as its players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBZ has) (VP (VBN had) (NP (NP (DT both) (NNP Martin) (NML (NN prochzka) (CC and) (NN garry)) (NN unger)) (PP (IN as) (NP (PRP$ its) (NNS players))))))) (. ?)))",
  "entityNum": 1,
  "id": 769
 },
 {
  "taggedQuestion": "What are the awards received by spouse of Ellen Lundstrom?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the awards received by #entity1",
    "originStr": "What are the awards received by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "spouse of Ellen Lundstrom",
    "originStr": "spouse of Ellen Lundstrom"
   }
  ],
  "question": "What are the awards received by spouse of Ellen Lundstrom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN received) (PP (IN by) (NP (NP (NN spouse)) (PP (IN of) (NP (NNP Ellen) (NNP Lundstrom))))))) (. ?)))",
  "entityNum": 2,
  "id": 770
 },
 {
  "taggedQuestion": "Who all have succeeded the kings buried in Rome?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who all have succeeded #entity1",
    "originStr": "Who all have succeeded #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the kings buried in Rome",
    "originStr": "the kings buried in Rome"
   }
  ],
  "question": "Who all have succeeded the kings buried in Rome",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN succeeded) (NP (NP (DT the) (NNS kings)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. ?)))",
  "entityNum": 2,
  "id": 771
 },
 {
  "taggedQuestion": "Which states do the rivers flow which join in the republican river from the left?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Through which states do #entity1",
    "originStr": "Through which states do #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rivers flow which join in the republican river from the left",
    "originStr": "the rivers flow which join in the republican river from the left"
   }
  ],
  "question": "Through which states do the rivers flow which join in the republican river from the left",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBP do) (NP (NP (DT the) (NNS rivers) (NN flow)) (SBAR (WHNP (WDT which)) (S (VP (VBP join) (PP (IN in) (NP (NP (DT the) (JJ republican) (NN river)) (PP (IN from) (NP (NP (DT the)) (VP (VBN left))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 772
 },
 {
  "taggedQuestion": "Give me the home town of all musical artists who uses Guitar as instrument .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me the home town of #entity1",
    "originStr": "Give me the home town of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "all musical artists who uses Guitar as instrument",
    "originStr": "all musical artists who uses Guitar as instrument"
   }
  ],
  "question": "Give me the home town of all musical artists who uses Guitar as instrument",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (NP (NP (DT all) (JJ musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBZ uses) (NP (NP (NNP Guitar)) (PP (IN as) (NP (NN instrument))))))))))) (. .)))",
  "entityNum": 2,
  "id": 773
 },
 {
  "taggedQuestion": "How many religions are followed amongst the people who've worked in the Korean army?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many religions are followed amongst #entity1",
    "originStr": "How many religions are followed amongst #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people who 've worked in the Korean army",
    "originStr": "the people who 've worked in the Korean army"
   }
  ],
  "question": "How many religions are followed amongst the people who've worked in the Korean army",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN amongst) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP 've) (VP (VBN worked) (PP (IN in) (NP (DT the) (JJ Korean) (NN army))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 774
 },
 {
  "taggedQuestion": "Was andy warhol a part of <e0>?",
  "entityMap": {
   "<e0>": "Pop Art movement"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was andy warhol a part of Pop Art movement",
    "originStr": "Was andy warhol a part of Pop Art movement"
   }
  ],
  "question": "Was andy warhol a part of Pop Art movement",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (JJ andy)) (PP (IN warhol) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 775
 },
 {
  "taggedQuestion": "Count the musical work which were sold by Sony Music.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of musical work #entity1",
    "originStr": "Count the number of musical work #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which were sold by Sony Music",
    "originStr": "which were sold by Sony Music"
   }
  ],
  "question": "Count the number of musical work which were sold by Sony Music",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ musical) (NN work)) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (VP (VBN sold) (PP (IN by) (NP (NNP Sony) (NNP Music))))))))) (. .)))",
  "entityNum": 2,
  "id": 776
 },
 {
  "taggedQuestion": "Who is the person whose home town is Fairmount, Indiana?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the person #entity1",
    "originStr": "Who is the person #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose home town is Fairmount , Indiana",
    "originStr": "whose home town is Fairmount , Indiana"
   }
  ],
  "question": "Who is the person whose home town is Fairmount, Indiana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP$ whose) (NN home) (NN town)) (S (VP (VBZ is) (NP (NNP Fairmount) (, ,) (NNP Indiana))))))) (. ?)))",
  "entityNum": 2,
  "id": 777
 },
 {
  "taggedQuestion": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movies directed by Stanley Kubrick and",
    "originStr": "Name the movies directed by Stanley Kubrick and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "edited by Anthony Harvey",
    "originStr": "edited by Anthony Harvey"
   }
  ],
  "question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS movies)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Stanley) (NNP Kubrick)))) (CC and) (VP (VBN edited) (PP (IN by) (NP (NNP Anthony) (NNP Harvey))))))) (. .)))",
  "entityNum": 1,
  "id": 778
 },
 {
  "taggedQuestion": "List all binomial authority of the insects whose one of the  binomial authority is douard Mntries?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all binomial authority of #entity1",
    "originStr": "List all binomial authority of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the insects whose one of the binomial authority is douard Mntries",
    "originStr": "the insects whose one of the binomial authority is douard Mntries"
   }
  ],
  "question": "List all binomial authority of the insects whose one of the binomial authority is douard Mntries",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (DT all) (JJ binomial) (NN authority)) (PP (IN of) (NP (DT the) (NNS insects)))) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ binomial) (NN authority))))) (S (VP (VBZ is) (NP (JJ douard) (NNPS Mntries)))))) (. ?)))",
  "entityNum": 2,
  "id": 779
 },
 {
  "taggedQuestion": "Who is the military general buried in St Mary's Church, Battersea?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the military general #entity1 Battersea",
    "originStr": "Who is the military general #entity1 Battersea"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "buried in St Mary's Church ",
    "originStr": "buried in St Mary's Church "
   }
  ],
  "question": "Who is the military general buried in St Mary's Church, Battersea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (JJ general)) (VP (VBN buried) (PP (IN in) (NP (NP (NNP St) (NNP Mary) (POS 's)) (NNP Church) (, ,) (NNP Battersea)))))) (. ?)))",
  "entityNum": 2,
  "id": 780
 },
 {
  "taggedQuestion": "What is the military unit whose command structures are <e0> and <e1>?",
  "entityMap": {
   "<e1>": "United States Department of Defense",
   "<e0>": "United States Department of the Navy"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the military unit",
    "originStr": "What is the military unit"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose command structures are United States Department of the Navy and United States Department of Defense",
    "originStr": "whose command structures are United States Department of the Navy and United States Department of Defense"
   }
  ],
  "question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN unit)) (SBAR (WHNP (WP$ whose) (NN command) (NNS structures)) (S (VP (VBP are))))))) (NP (ADD <e0>) (CC and) (ADD <e1>)) (. ?)))",
  "entityNum": 1,
  "id": 781
 },
 {
  "taggedQuestion": "What are some other things developed by the company who made the <e0>?",
  "entityMap": {
   "<e0>": "remote desktop protocol"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some other things developed by #entity1",
    "originStr": "What are some other things developed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company who made the remote desktop protocol",
    "originStr": "the company who made the remote desktop protocol"
   }
  ],
  "question": "What are some other things developed by the company who made the remote desktop protocol",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (JJ other) (NNS things)) (VP (VBN developed) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP who)) (S (VP (VBD made) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 782
 },
 {
  "taggedQuestion": "Where was Al-Muzaffar Umar buried ?",
  "entityMap": {
   "<e0>": "Al- Muzaffar Umar"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Al-Muzaffar Umar buried",
    "originStr": "Where was Al-Muzaffar Umar buried"
   }
  ],
  "question": "Where was Al-Muzaffar Umar buried",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Al) (HYPH -) (NNP Muzaffar) (NNP Umar)) (VP (VBN buried))) (. ?)))",
  "entityNum": 1,
  "id": 783
 },
 {
  "taggedQuestion": "List the guests of On Broadway ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the guests of On Broadway",
    "originStr": "List the guests of On Broadway"
   }
  ],
  "question": "List the guests of On Broadway",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS guests)) (PP (IN of) (PP (IN On) (NP (NNP Broadway)))))) (. ?)))",
  "entityNum": 1,
  "id": 784
 },
 {
  "taggedQuestion": "How many universities are there whose country's capital is Oslo?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many universities are there whose country's #entity1",
    "originStr": "How many universities are there whose country's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "capital is Oslo",
    "originStr": "capital is Oslo"
   }
  ],
  "question": "How many universities are there whose country's capital is Oslo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS universities)) (VP (VBP are) (NP (EX there))))) (WHNP (WHNP (WP$ whose) (NN country) (POS 's)) (NN capital)) (SQ (VBZ is) (NP (NNP Oslo))) (. ?)))",
  "entityNum": 2,
  "id": 785
 },
 {
  "taggedQuestion": "Did Bob Dylan write the lyrics of the times they are a changin'?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Bob Dylan write the lyrics of the times they are a changin'",
    "originStr": "Did Bob Dylan write the lyrics of the times they are a changin'"
   }
  ],
  "question": "Did Bob Dylan write the lyrics of the times they are a changin'",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Bob) (NNP Dylan)) (VP (VB write) (NP (NP (DT the) (NNS lyrics)) (PP (IN of) (NP (NP (DT the) (NNS times)) (SBAR (S (NP (PRP they)) (VP (VBP are) (NP (DT a) (NN changin))))))) ('' '))) (. ?)))",
  "entityNum": 1,
  "id": 786
 },
 {
  "taggedQuestion": "What is the religion of the ones in the Kampuchean <e0>?",
  "entityMap": {
   "<e0>": "Union of Salvation"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the religion of #entity1",
    "originStr": "What is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones in the Kampuchean Union of Salvation",
    "originStr": "the ones in the Kampuchean Union of Salvation"
   }
  ],
  "question": "What is the religion of the ones in the Kampuchean Union of Salvation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NNS ones)) (PP (IN in) (NP (NP (DT the) (NNP Kampuchean)) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 787
 },
 {
  "taggedQuestion": "Where did the members of <e0>?",
  "entityMap": {
   "<e0>": "judge advocate general corps study"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did #entity1 study",
    "originStr": "Where did #entity1 study"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of judge advocate general corps",
    "originStr": "the members of judge advocate general corps"
   }
  ],
  "question": "Where did the members of judge advocate general corps study",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 788
 },
 {
  "taggedQuestion": "Name the airlines which have a hub in airport in SF.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the airlines which have #entity1",
    "originStr": "Name the airlines which have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a hub in airport in SF",
    "originStr": "a hub in airport in SF"
   }
  ],
  "question": "Name the airlines which have a hub in airport in SF",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NP (NN airport)) (PP (IN in) (NP (NNP SF))))))))))) (. .)))",
  "entityNum": 2,
  "id": 789
 },
 {
  "taggedQuestion": "Which executive producer of <e0> is also an important person at Trump Productions?",
  "entityMap": {
   "<e0>": "the ultimate merger"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which executive producer of the ultimate merger is",
    "originStr": "Which executive producer of the ultimate merger is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also an important person at Trump Productions",
    "originStr": "also an important person at Trump Productions"
   }
  ],
  "question": "Which executive producer of the ultimate merger is also an important person at Trump Productions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ executive) (NN producer)) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT an) (JJ important) (NN person)) (PP (IN at) (NP (NNP Trump) (NNPS Productions))))) (. ?)))",
  "entityNum": 1,
  "id": 790
 },
 {
  "taggedQuestion": "What is the official name of Colorado wine ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the official name of Colorado wine",
    "originStr": "What is the official name of Colorado wine"
   }
  ],
  "question": "What is the official name of Colorado wine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ official) (NN name)) (PP (IN of) (NP (NNP Colorado) (NN wine))))) (. ?)))",
  "entityNum": 1,
  "id": 791
 },
 {
  "taggedQuestion": "How many states can one find <e0> of bridges?",
  "entityMap": {
   "<e0>": "Burr Tuss kind"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In how many states can one #entity1",
    "originStr": "In how many states can one #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "find Burr Tuss kind of bridges",
    "originStr": "find Burr Tuss kind of bridges"
   }
  ],
  "question": "In how many states can one find Burr Tuss kind of bridges",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS states)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (NP (NN <e0>)) (PP (IN of) (NP (NNS bridges)))))) (. ?)))",
  "entityNum": 2,
  "id": 792
 },
 {
  "taggedQuestion": "Who developed google videos?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who developed google videos",
    "originStr": "who developed google videos"
   }
  ],
  "question": "who developed google videos",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD developed) (NP (NNP google) (NNS videos)))) (. ?)))",
  "entityNum": 1,
  "id": 793
 },
 {
  "taggedQuestion": "Who is the child of John Tyler, Sr.?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the child of John Tyler, Sr",
    "originStr": "Who is the child of John Tyler, Sr"
   }
  ],
  "question": "Who is the child of John Tyler, Sr",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (NP (NNP John) (NNP Tyler)) (, ,) (NP (NNP Sr.)))))) (. .)))(ROOT (. ?))",
  "entityNum": 1,
  "id": 794
 },
 {
  "taggedQuestion": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Brazilian jiu-jitsu the trainer of Nick Diaz",
    "originStr": "Is Brazilian jiu-jitsu the trainer of Nick Diaz"
   }
  ],
  "question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ Brazilian)) (NP (NP (NML (NN jiu) (HYPH -) (NN jitsu)) (DT the) (NN trainer)) (PP (IN of) (NP (NNP Nick) (NNP Diaz)))) (. ?)))",
  "entityNum": 1,
  "id": 795
 },
 {
  "taggedQuestion": "Who is the owner of  Latvian Wikipedia and Wiktionary ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the owner of Latvian Wikipedia and Wiktionary",
    "originStr": "is the owner of Latvian Wikipedia and Wiktionary"
   }
  ],
  "question": "Who is the owner of Latvian Wikipedia and Wiktionary",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (JJ Latvian) (NNP Wikipedia) (CC and) (NNP Wiktionary))))) (. ?)))",
  "entityNum": 1,
  "id": 796
 },
 {
  "taggedQuestion": "Name all those buried in a place governed by a city council.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name all those buried in #entity1",
    "originStr": "Name all those buried in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a place governed by a city council",
    "originStr": "a place governed by a city council"
   }
  ],
  "question": "Name all those buried in a place governed by a city council",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (PDT all) (DT those)) (VP (VBN buried) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (DT a) (NN city) (NN council))))))))) (. .)))",
  "entityNum": 2,
  "id": 797
 },
 {
  "taggedQuestion": "What royalties's sepulchre is <e0>?",
  "entityMap": {
   "<e0>": "Mausoleum of Augustus"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What royalties ' sepulcher is #entity1",
    "originStr": "What royalties ' sepulcher is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Mausoleum of Augustus",
    "originStr": "Mausoleum of Augustus"
   }
  ],
  "question": "What royalties' sepulcher is Mausoleum of Augustus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NP (NNS royalties) (POS 's)) (NN sepulchre)) (VP (VBZ is) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 2,
  "id": 798
 },
 {
  "taggedQuestion": "Name the common university of the Cardinal and Jim Wylie.",
  "entityMap": {
   "<e0>": "Cardinal Jim Wylie"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the common university of the Cardinal and Jim Wylie",
    "originStr": "the common university of the Cardinal and Jim Wylie"
   }
  ],
  "question": "Name the common university of the Cardinal and Jim Wylie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN university)) (PP (IN of) (NP (NP (DT the) (NNP Cardinal)) (CC and) (NP (NNP Jim) (NNP Wylie)))))) (. .)))",
  "entityNum": 1,
  "id": 799
 },
 {
  "taggedQuestion": "What is the automobile platform of Chiva bus ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the automobile platform of Chiva bus",
    "originStr": "What is the automobile platform of Chiva bus"
   }
  ],
  "question": "What is the automobile platform of Chiva bus",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN automobile) (NN platform)) (PP (IN of) (NP (NNP Chiva) (NN bus))))) (. ?)))",
  "entityNum": 1,
  "id": 800
 },
 {
  "taggedQuestion": "Who are the animator of <e0>?",
  "entityMap": {
   "<e0>": "The Skeleton Dance"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the animator of The Skeleton Dance",
    "originStr": "Who are the animator of The Skeleton Dance"
   }
  ],
  "question": "Who are the animator of The Skeleton Dance",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN animator)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 801
 },
 {
  "taggedQuestion": "How many movies have a screenplay located in the States?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many movies have #entity1",
    "originStr": "How many movies have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a screenplay located in the States",
    "originStr": "a screenplay located in the States"
   }
  ],
  "question": "How many movies have a screenplay located in the States",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS movies))) (SQ (VBP have) (NP (DT a) (NN screenplay)) (VP (VBN located) (PP (IN in) (NP (DT the) (NNPS States))))) (. ?)))",
  "entityNum": 2,
  "id": 802
 },
 {
  "taggedQuestion": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which ceremonial County of the East Tilbury is",
    "originStr": "Which ceremonial County of the East Tilbury is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the local authority of the Trinity School , Brentwood",
    "originStr": "also the local authority of the Trinity School , Brentwood"
   }
  ],
  "question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ ceremonial) (NN County)) (PP (IN of) (NP (DT the) (NNP East) (NNP Tilbury)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (DT the) (NML (NNP Trinity) (NNP School)) (, ,) (NNP Brentwood))))) (. ?)))",
  "entityNum": 1,
  "id": 803
 },
 {
  "taggedQuestion": "What system is both a platform where Nord runs and also distributed <e0>?",
  "entityMap": {
   "<e0>": "The beauty inside"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What system is both a platform where Nord runs #entity1 distributed The beauty inside",
    "originStr": "What system is both a platform where Nord runs #entity1 distributed The beauty inside"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "and also",
    "originStr": "and also"
   }
  ],
  "question": "What system is both a platform where Nord runs and also distributed The beauty inside",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN system)) (SQ (VP (VBZ is) (ADVP (CC both)) (NP (NP (DT a) (NN platform)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Nord)) (VP (VP (VBZ runs)) (CC and) (ADVP (RB also)) (VP (VBN distributed) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 804
 },
 {
  "taggedQuestion": "Name the country whose leader's deputy is Piotr Glinski.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the country whose leader's #entity1",
    "originStr": "Name the country whose leader's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "deputy is Piotr Glinski",
    "originStr": "deputy is Piotr Glinski"
   }
  ],
  "question": "Name the country whose leader's deputy is Piotr Glinski",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN country)) (SBARQ (WHNP (WHNP (WP$ whose) (NN leader) (POS 's)) (NP (NN deputy))) (SQ (VBZ is) (NP (NNP Piotr) (NNP Glinski))))) (. .)))",
  "entityNum": 2,
  "id": 805
 },
 {
  "taggedQuestion": "Is Cologny a neighbouring city of Geneva?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Cologny a neighboring city of Geneva",
    "originStr": "Is Cologny a neighboring city of Geneva"
   }
  ],
  "question": "Is Cologny a neighboring city of Geneva",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Cologny)) (NP (NP (DT a) (VBG neighbouring) (NN city)) (PP (IN of) (NP (NNP Geneva)))) (. ?)))",
  "entityNum": 1,
  "id": 806
 },
 {
  "taggedQuestion": "Whose creators are Jerry Seinfeld and Larry David?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose",
    "originStr": "Whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "creators are Jerry Seinfeld and Larry David",
    "originStr": "creators are Jerry Seinfeld and Larry David"
   }
  ],
  "question": "Whose creators are Jerry Seinfeld and Larry David",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS creators))) (SQ (VBP are) (NP (NP (NNP Jerry) (NNP Seinfeld)) (CC and) (NP (NNP Larry) (NNP David)))) (. ?)))",
  "entityNum": 1,
  "id": 807
 },
 {
  "taggedQuestion": "Which TV show is related to <e0> and theme music is composed by  Ron Grainer?",
  "entityMap": {
   "<e0>": "The Sarah Jane Adventures"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which TV show is related to The Sarah Jane Adventures and",
    "originStr": "Which TV show is related to The Sarah Jane Adventures and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "theme music is composed by Ron Grainer",
    "originStr": "theme music is composed by Ron Grainer"
   }
  ],
  "question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (SQ (VBZ is) (VP (VBN related) (PP (IN to) (NP (NP (ADD <e0>)) (CC and) (NP (NP (NN theme) (NN music)) (SBAR (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 808
 },
 {
  "taggedQuestion": "Name the parent company of  <e0> .",
  "entityMap": {
   "<e0>": "Ford Air Transport Service"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the parent company of Ford Air Transport Service",
    "originStr": "Name the parent company of Ford Air Transport Service"
   }
  ],
  "question": "Name the parent company of Ford Air Transport Service",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 809
 },
 {
  "taggedQuestion": "Who  has these major shrines  : Emmitsburg, Maryland and Shrine of St. <e0>?",
  "entityMap": {
   "<e0>": "Elizabeth Ann Bayley Seton"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who has these major shrines : Emmitsburg , Maryland and",
    "originStr": "Who has these major shrines : Emmitsburg , Maryland and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Shrine of St. Elizabeth Ann Bayley Seton",
    "originStr": "Shrine of St. Elizabeth Ann Bayley Seton"
   }
  ],
  "question": "Who has these major shrines : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (NP (NP (DT these) (JJ major) (NNS shrines)) (: :) (NP (NP (NNP Emmitsburg) (, ,) (NNP Maryland) (CC and) (NNP Shrine)) (PP (IN of) (NP (NNP St.) (CD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 810
 },
 {
  "taggedQuestion": "Which region of Bannock is the origin od Spaghetti squash ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which region of Bannock is #entity1",
    "originStr": "Which region of Bannock is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the origin of Spaghetti squash",
    "originStr": "the origin of Spaghetti squash"
   }
  ],
  "question": "Which region of Bannock is the origin of Spaghetti squash",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN region)) (PP (IN of) (NP (NNP Bannock)))) (SQ (VBZ is) (NP (DT the) (NN origin) (NN od) (NN Spaghetti) (NN squash))) (. ?)))",
  "entityNum": 2,
  "id": 811
 },
 {
  "taggedQuestion": "Where in the us military did <e0> and edwin f hunter work?",
  "entityMap": {
   "<e0>": "pierre r graham"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where",
    "originStr": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in the us military did pierre r graham and edwin f hunter work",
    "originStr": "in the us military did pierre r graham and edwin f hunter work"
   }
  ],
  "question": "Where in the us military did pierre r graham and edwin f hunter work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (PP (IN in) (NP (DT the) (ADJP (NP (PRP us)) (JJ military)))) (VBD did) (NP (NP (ADD <e0>)) (CC and) (NP (NML (NN edwin) (NN f)) (NN hunter) (NN work))))) (. ?)))",
  "entityNum": 1,
  "id": 812
 },
 {
  "taggedQuestion": "Count everyone who lives in a place where Indian English is an official language .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count everyone who lives in a #entity1",
    "originStr": "Count everyone who lives in a #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "place where Indian English is an official language",
    "originStr": "place where Indian English is an official language"
   }
  ],
  "question": "Count everyone who lives in a place where Indian English is an official language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBZ lives) (PP (IN in) (NP (NP (DT a) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (JJ Indian) (NNP English)) (VP (VBZ is) (NP (DT an) (JJ official) (NN language)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 813
 },
 {
  "taggedQuestion": "Did Raymond Picard take birth in Paris?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Raymond Picard take birth in Paris",
    "originStr": "Did Raymond Picard take birth in Paris"
   }
  ],
  "question": "Did Raymond Picard take birth in Paris",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Raymond) (NNP Picard)) (VP (VB take) (NP (NN birth)) (PP (IN in) (NP (NNP Paris)))) (. ?)))",
  "entityNum": 1,
  "id": 814
 },
 {
  "taggedQuestion": "How many religions are practiced by diplomats?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many religions #entity1",
    "originStr": "How many religions #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are practiced by diplomats",
    "originStr": "are practiced by diplomats"
   }
  ],
  "question": "How many religions are practiced by diplomats",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN practiced) (PP (IN by) (NP (NNS diplomats))))) (. ?)))",
  "entityNum": 2,
  "id": 815
 },
 {
  "taggedQuestion": "Was Elton John a chairman of a <e0>?",
  "entityMap": {
   "<e0>": "Watford FC Season"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Elton John a chairman of a Watford FC Season",
    "originStr": "Was Elton John a chairman of a Watford FC Season"
   }
  ],
  "question": "Was Elton John a chairman of a Watford FC Season",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Elton) (NNP John)) (NP (NP (DT a) (NN chairman)) (PP (IN of) (NP (DT a) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 816
 },
 {
  "taggedQuestion": "Which publisher of Lucifer's hammer is also known for Jo Garcia ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which publisher of Lucifer's hammer is",
    "originStr": "Which publisher of Lucifer's hammer is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also known for Jo Garcia",
    "originStr": "also known for Jo Garcia"
   }
  ],
  "question": "Which publisher of Lucifer's hammer is also known for Jo Garcia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN publisher) (PP (IN of) (NP (NP (NNP Lucifer) (POS 's)) (NN hammer))))) (SQ (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN for) (NP (NNP Jo) (NNP Garcia))))) (. ?)))",
  "entityNum": 1,
  "id": 817
 },
 {
  "taggedQuestion": "Whom was Tessa Dahl born to?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To whom was Tessa Dahl born to",
    "originStr": "To whom was Tessa Dahl born to"
   }
  ],
  "question": "To whom was Tessa Dahl born to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Whom)) (SQ (VBD was) (NP (NNP Tessa) (NNP Dahl)) (VP (VBN born) (S (VP (TO to))))) (. ?)))",
  "entityNum": 1,
  "id": 818
 },
 {
  "taggedQuestion": "Which sport at <e0> is the field of Jon speelman ?",
  "entityMap": {
   "<e0>": "Polytechnic University of the Philippines Taguig"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which sport at Polytechnic University of",
    "originStr": "Which sport at Polytechnic University of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Philippines Taguig is the field of Jon speelman",
    "originStr": "the Philippines Taguig is the field of Jon speelman"
   }
  ],
  "question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN sport)) (PP (IN at) (NP (NN <e0>)))) (SQ (VBZ is) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NNP Jon) (NNP speelman))))) (. ?)))",
  "entityNum": 1,
  "id": 819
 },
 {
  "taggedQuestion": "Count the things people who know linguistics are known for .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of things #entity1 for",
    "originStr": "Count the number of things #entity1 for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who know linguistics are known",
    "originStr": "people who know linguistics are known"
   }
  ],
  "question": "Count the number of things people who know linguistics are known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS things) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP know) (SBAR (S (NP (NNS linguistics)) (VP (VBP are) (VP (VBN known) (PP (IN for))))))))))) (. .)))",
  "entityNum": 2,
  "id": 820
 },
 {
  "taggedQuestion": "Where were <e0> and <e1> born?",
  "entityMap": {
   "<e1>": "havard vad petersson",
   "<e0>": "sverre krogh sundbo"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where",
    "originStr": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were sverre krogh sundbo and havard vad petersson born",
    "originStr": "were sverre krogh sundbo and havard vad petersson born"
   }
  ],
  "question": "Where were sverre krogh sundbo and havard vad petersson born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (NP (ADD <e0>)) (CC and) (NP (ADD <e1>))) (VP (VBN born))) (. ?)))",
  "entityNum": 1,
  "id": 821
 },
 {
  "taggedQuestion": "Was Cliff Burton in Metallica?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Cliff Burton in Metallica",
    "originStr": "Was Cliff Burton in Metallica"
   }
  ],
  "question": "Was Cliff Burton in Metallica",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Cliff) (NNP Burton)) (PP (IN in) (NP (NNP Metallica))) (. ?)))",
  "entityNum": 1,
  "id": 822
 },
 {
  "taggedQuestion": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many religions are followed by organizations which #entity1",
    "originStr": "How many religions are followed by organizations which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are internationally known as the muslim brotherhood",
    "originStr": "are internationally known as the muslim brotherhood"
   }
  ],
  "question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS organizations)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADVP (RB internationally)) (VP (VBN known) (PP (IN as) (NP (DT the) (JJ muslim) (NN brotherhood))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 823
 },
 {
  "taggedQuestion": "What are some people born in NY known for?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are some people #entity1",
    "originStr": "What are some people #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "born in NY known for",
    "originStr": "born in NY known for"
   }
  ],
  "question": "What are some people born in NY known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NNS people)) (VP (VBN born) (PP (IN in) (NP (NP (NNP NY)) (VP (VBN known) (PP (IN for))))))) (. ?)))",
  "entityNum": 2,
  "id": 824
 },
 {
  "taggedQuestion": "Who is the developer of the software which is produced by Claris ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who is the developer of #entity1",
    "originStr": "Who is the developer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the software which is produced by Claris",
    "originStr": "the software which is produced by Claris"
   }
  ],
  "question": "Who is the developer of the software which is produced by Claris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN developer)) (PP (IN of) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN produced) (PP (IN by) (NP (NNP Claris))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 825
 },
 {
  "taggedQuestion": "What is the river whose source is Cowombat  Flat and has its mouth located in Murray Mouth?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the river whose source is Cowombat Flat and",
    "originStr": "What is the river whose source is Cowombat Flat and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has it's mouth located in Murray Mouth",
    "originStr": "has it's mouth located in Murray Mouth"
   }
  ],
  "question": "What is the river whose source is Cowombat Flat and has it's mouth located in Murray Mouth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (ADJP (JJ Cowombat)))))) (ADJP (JJ Flat))) (CC and) (SQ (VBZ has) (NP (PRP$ its) (NN mouth)) (VP (VBN located) (PP (IN in) (NP (NNP Murray) (NNP Mouth)))))) (. ?)))",
  "entityNum": 1,
  "id": 826
 },
 {
  "taggedQuestion": "Where does the river flow into which begins in Lebrsnik?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where does the river flow into #entity1",
    "originStr": "Where does the river flow into #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which begins in Lebrsnik",
    "originStr": "which begins in Lebrsnik"
   }
  ],
  "question": "Where does the river flow into which begins in Lebrsnik",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ does) (NP (DT the) (NN river) (NN flow)) (PP (IN into) (SBAR (WHNP (WDT which)) (S (VP (VBZ begins) (PP (IN in) (NP (NNP Lebrsnik))))))))) (. ?)))",
  "entityNum": 2,
  "id": 827
 },
 {
  "taggedQuestion": "What is the government type of Ancient Rome ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the government type of Ancient Rome",
    "originStr": "What is the government type of Ancient Rome"
   }
  ],
  "question": "What is the government type of Ancient Rome",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN government) (NN type)) (PP (IN of) (NP (JJ Ancient) (NNP Rome))))) (. ?)))",
  "entityNum": 1,
  "id": 828
 },
 {
  "taggedQuestion": "Which director of <e0> also released Mojo Priest ?",
  "entityMap": {
   "<e0>": "On deadly Ground"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which director of On deadly Ground also",
    "originStr": "Which director of On deadly Ground also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "released Mojo Priest",
    "originStr": "released Mojo Priest"
   }
  ],
  "question": "Which director of On deadly Ground also released Mojo Priest",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN director) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (ADVP (RB also)) (VBD released) (NP (NNP Mojo) (NNP Priest)))) (. ?)))",
  "entityNum": 1,
  "id": 829
 },
 {
  "taggedQuestion": "What is the <e0> whose channel's parent organisation is Fox Sports?",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the television show whose channel's #entity1",
    "originStr": "What is the television show whose channel's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "parent organisation is Fox Sports",
    "originStr": "parent organisation is Fox Sports"
   }
  ],
  "question": "What is the television show whose channel's parent organisation is Fox Sports",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NP (NML (NP (NN channel) (POS 's))) (NN parent) (NN organisation))) (S (VP (VBZ is) (NP (NNP Fox) (NNPS Sports))))))) (. ?)))",
  "entityNum": 2,
  "id": 830
 },
 {
  "taggedQuestion": "Who commanded the <e0> and made <e1>'d famous?",
  "entityMap": {
   "<e1>": "Fatima bint Sa",
   "<e0>": "invasion of Buwat"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who commanded the invasion of Buwat",
    "originStr": "Who commanded the invasion of Buwat"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and made Fatima bint Sa 'd famous",
    "originStr": "and made Fatima bint Sa 'd famous"
   }
  ],
  "question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBD commanded) (NP (DT the) (NN <e0>))) (CC and) (VP (VBN made) (SBAR (S (NP (NN <e1>)) (VP (VBD 'd) (S (ADJP (JJ famous))))))))) (. ?)))",
  "entityNum": 1,
  "id": 831
 },
 {
  "taggedQuestion": "What is the home ground of the clubs managed by Ciao Zanardi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the home ground of #entity1",
    "originStr": "What is the home ground of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the clubs managed by Ciao Zanardi",
    "originStr": "the clubs managed by Ciao Zanardi"
   }
  ],
  "question": "What is the home ground of the clubs managed by Ciao Zanardi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN ground)) (PP (IN of) (NP (DT the) (NNS clubs)))) (VP (VBN managed) (PP (IN by) (NP (NNP Ciao) (NNP Zanardi))))) (. ?)))",
  "entityNum": 2,
  "id": 832
 },
 {
  "taggedQuestion": "What is the country with native language as Languages of Ethiopia?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the country with",
    "originStr": "What is the country with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "native language as Languages of Ethiopia",
    "originStr": "native language as Languages of Ethiopia"
   }
  ],
  "question": "What is the country with native language as Languages of Ethiopia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN country)) (PP (IN with) (NP (NP (JJ native) (NN language)) (PP (IN as) (NP (NP (NNPS Languages)) (PP (IN of) (NP (NNP Ethiopia))))))))) (. ?)))",
  "entityNum": 1,
  "id": 833
 },
 {
  "taggedQuestion": "What is the band with previous members  Kevin Jonas and Joe Jonas?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the band with previous",
    "originStr": "What is the band with previous"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "members Kevin Jonas and Joe Jonas",
    "originStr": "members Kevin Jonas and Joe Jonas"
   }
  ],
  "question": "What is the band with previous members Kevin Jonas and Joe Jonas",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN band)) (PP (IN with) (NP (NP (NP (JJ previous) (NNS members)) (NP (NNP Kevin) (NNP Jonas))) (CC and) (NP (NNP Joe) (NNP Jonas)))))) (. ?)))",
  "entityNum": 1,
  "id": 834
 },
 {
  "taggedQuestion": "List the people with Scientology as their religious belief?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the people with #entity1",
    "originStr": "List the people with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Scientology as their religious belief",
    "originStr": "Scientology as their religious belief"
   }
  ],
  "question": "List the people with Scientology as their religious belief",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NNP Scientology))) (PP (IN as) (NP (PRP$ their) (JJ religious) (NN belief)))) (. ?)))",
  "entityNum": 2,
  "id": 835
 },
 {
  "taggedQuestion": "How many fictional characters were humans?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 fictional characters were humans",
    "originStr": "#entity1 fictional characters were humans"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "How many",
    "originStr": "How many"
   }
  ],
  "question": "How many fictional characters were humans",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ fictional) (NNS characters)) (SQ (VBD were) (NP (NNS humans))) (. ?)))",
  "entityNum": 2,
  "id": 836
 },
 {
  "taggedQuestion": "Where was Girls (The Prodigy song)  recorded ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Girls (The Prodigy song) recorded",
    "originStr": "Where was Girls (The Prodigy song) recorded"
   }
  ],
  "question": "Where was Girls (The Prodigy song) recorded",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (NP (NNS Girls)) (-LRB- -LRB-) (NP (DT The) (NNP Prodigy) (NN song)) (-RRB- -RRB-)) (VP (VBN recorded)))) (. ?)))",
  "entityNum": 1,
  "id": 837
 },
 {
  "taggedQuestion": "How many TV shows' networks are headquarterd in NY?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many TV shows ' networks #entity1",
    "originStr": "How many TV shows ' networks #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are headquartered in NY",
    "originStr": "are headquartered in NY"
   }
  ],
  "question": "How many TV shows' networks are headquartered in NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NN TV)) (SQ (NP (NP (NNS shows) (POS ')) (NNS networks)) (VP (VBP are) (ADJP (JJ headquarterd) (PP (IN in) (NP (NNP NY)))))) (. ?)))",
  "entityNum": 2,
  "id": 838
 },
 {
  "taggedQuestion": "Does StandBy records distribute via Sony?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does standby"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does StandBy records distribute via Sony",
    "originStr": "Does StandBy records distribute via Sony"
   }
  ],
  "question": "Does StandBy records distribute via Sony",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NN StandBy))) (S (NP (NNS records)) (VP (VBP distribute) (PP (IN via) (NP (NNP Sony))))) (. ?)))",
  "entityNum": 1,
  "id": 839
 },
 {
  "taggedQuestion": "Give me some shows owned by BBC one and BBC hd.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me some shows owned",
    "originStr": "Give me some shows owned"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "by BBC one and BBC hd",
    "originStr": "by BBC one and BBC hd"
   }
  ],
  "question": "Give me some shows owned by BBC one and BBC hd",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT some) (NNS shows)) (VP (VBN owned) (PP (IN by) (NP (NP (NNP BBC) (CD one)) (CC and) (NP (NNP BBC) (NNP hd))))))) (. .)))",
  "entityNum": 1,
  "id": 840
 },
 {
  "taggedQuestion": "How many teams have rented stadiums in Canada?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many teams have rented #entity1",
    "originStr": "How many teams have rented #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "stadiums in Canada",
    "originStr": "stadiums in Canada"
   }
  ],
  "question": "How many teams have rented stadiums in Canada",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS teams)) (SQ (VP (VBP have) (NP (VBN rented) (NNS stadiums)) (PP (IN in) (NP (NNP Canada))))) (. ?)))",
  "entityNum": 2,
  "id": 841
 },
 {
  "taggedQuestion": "List the awards won by the film director of Chicken Run?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the awards won by #entity1",
    "originStr": "List the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film director of Chicken Run",
    "originStr": "the film director of Chicken Run"
   }
  ],
  "question": "List the awards won by the film director of Chicken Run",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Chicken) (NNP Run)))))))) (. ?)))",
  "entityNum": 2,
  "id": 842
 },
 {
  "taggedQuestion": "What territory of <e0> was the battle of Raoul Magrin-Vernerey fought ?",
  "entityMap": {
   "<e1>": "Raoul Magrin - Vernerey",
   "<e0>": "Sino French War"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What territory of Sino French War was",
    "originStr": "What territory of Sino French War was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the battle of Raoul Magrin-Vernerey fought",
    "originStr": "the battle of Raoul Magrin-Vernerey fought"
   }
  ],
  "question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN territory) (PP (IN of) (NP (ADD <e0>))))) (SQ (VBD was) (NP (NP (DT the) (NN battle)) (PP (IN of) (NP (NP (NNP Raoul) (NNP Magrin) (HYPH -) (NNP Vernerey)) (SBAR (S (VP (VBD fought)))))))) (. ?)))",
  "entityNum": 1,
  "id": 843
 },
 {
  "taggedQuestion": "List the  outflow of Lake Uniamsi?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the outflow of Lake Uniamsi",
    "originStr": "List the outflow of Lake Uniamsi"
   }
  ],
  "question": "List the outflow of Lake Uniamsi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN outflow)) (PP (IN of) (NP (NNP Lake) (NNP Uniamsi))))) (. ?)))",
  "entityNum": 1,
  "id": 844
 },
 {
  "taggedQuestion": "Did John Byrne create Emma Frost?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did John Byrne create Emma Frost",
    "originStr": "Did John Byrne create Emma Frost"
   }
  ],
  "question": "Did John Byrne create Emma Frost",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP John) (NNP Byrne)) (VP (VB create) (NP (NNP Emma) (NNP Frost))) (. ?)))",
  "entityNum": 1,
  "id": 845
 },
 {
  "taggedQuestion": "Was Heinrich Himmler ever a commanders of <e0>?",
  "entityMap": {
   "<e0>": "Army Group Oberrhein"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
    "originStr": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein"
   }
  ],
  "question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Heinrich) (NNP Himmler)) (NP (NP (RB ever) (DT a) (NNS commanders)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 846
 },
 {
  "taggedQuestion": "List the universities from a country where Norwegian language is officially accepted.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the universities from #entity1",
    "originStr": "List the universities from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a country where Norwegian language is officially accepted",
    "originStr": "a country where Norwegian language is officially accepted"
   }
  ],
  "question": "List the universities from a country where Norwegian language is officially accepted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (DT the) (NNS universities)) (PP (IN from) (NP (DT a) (NN country))) (SBAR (WHADVP (WRB where)) (S (NP (JJ Norwegian) (NN language)) (VP (VBZ is) (ADVP (RB officially)) (VP (VBN accepted)))))) (. .)))",
  "entityNum": 2,
  "id": 847
 },
 {
  "taggedQuestion": "Name the incumbent of Linda Jenness .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the incumbent of Linda Jenness",
    "originStr": "Name the incumbent of Linda Jenness"
   }
  ],
  "question": "Name the incumbent of Linda Jenness",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN incumbent)) (PP (IN of) (NP (NNP Linda) (NNP Jenness))))) (. .)))",
  "entityNum": 1,
  "id": 848
 },
 {
  "taggedQuestion": "Which companies makes cars assembled in Karachi, Pakistan?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which companies makes cars #entity1 Pakistan",
    "originStr": "Which companies makes cars #entity1 Pakistan"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "assembled in Karachi ",
    "originStr": "assembled in Karachi "
   }
  ],
  "question": "Which companies makes cars assembled in Karachi, Pakistan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS companies)) (VP (VBZ makes) (NP (NP (NNS cars)) (VP (VBN assembled) (PP (IN in) (NP (NNP Karachi) (, ,) (NNP Pakistan))))))) (. ?)))",
  "entityNum": 2,
  "id": 849
 },
 {
  "taggedQuestion": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which company founded by Fusajiro Yamauchi also",
    "originStr": "Which company founded by Fusajiro Yamauchi also"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "provides services of Nintendo eShop",
    "originStr": "provides services of Nintendo eShop"
   }
  ],
  "question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN company)) (SBAR (S (VP (VBN founded) (PP (IN by) (NP (NNP Fusajiro) (NNP Yamauchi))))))) (SQ (VP (ADVP (RB also)) (VBZ provides) (NP (NP (NNS services)) (PP (IN of) (NP (NNP Nintendo) (NNP eShop)))))) (. ?)))",
  "entityNum": 1,
  "id": 850
 },
 {
  "taggedQuestion": "Which countries does the sea lie on whose shore is the city of Cumana?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In which countries does #entity1",
    "originStr": "In which countries does #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sea lie on whose shore is the city of Cumana",
    "originStr": "the sea lie on whose shore is the city of Cumana"
   }
  ],
  "question": "In which countries does the sea lie on whose shore is the city of Cumana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VP (VBZ does) (NP (DT the) (NN sea) (NN lie)) (PP (IN on) (SBAR (WHNP (WP$ whose) (NML (NN shore))) (S (VP (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Cumana)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 851
 },
 {
  "taggedQuestion": "Tirana is the largest city of which country?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Tirana",
    "originStr": "Tirana"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the largest city of which country",
    "originStr": "is the largest city of which country"
   }
  ],
  "question": "Tirana is the largest city of which country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Tirana)) (VP (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (WHPP (IN of) (WHNP (WDT which) (NN country))))) (. ?)))",
  "entityNum": 1,
  "id": 852
 },
 {
  "taggedQuestion": "Which countries are the people from who are an academic authority of the <e0> species?",
  "entityMap": {
   "<e0>": "Western pygmy blue"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "From which countries are the people from who #entity1",
    "originStr": "From which countries are the people from who #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are an academic authority of the Western pygmy blue species",
    "originStr": "are an academic authority of the Western pygmy blue species"
   }
  ],
  "question": "From which countries are the people from who are an academic authority of the Western pygmy blue species",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBP are) (NP (NP (DT the) (NNS people)) (PP (IN from) (SBAR (WHNP (WP who)) (S (VP (VBP are) (NP (NP (DT an) (JJ academic) (NN authority)) (PP (IN of) (NP (DT the) (NN <e0>) (NNS species)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 853
 },
 {
  "taggedQuestion": "Where is the headquarters of Sigma TV?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is the headquarters of Sigma TV",
    "originStr": "Where is the headquarters of Sigma TV"
   }
  ],
  "question": "Where is the headquarters of Sigma TV",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Sigma) (NNP TV))))) (. ?)))",
  "entityNum": 1,
  "id": 854
 },
 {
  "taggedQuestion": "Which scientist was advised by <e0>?",
  "entityMap": {
   "<e0>": "John Robert Woodyard"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which scientist was",
    "originStr": "Which scientist was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "advised by John Robert Woodyard",
    "originStr": "advised by John Robert Woodyard"
   }
  ],
  "question": "Which scientist was advised by John Robert Woodyard",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN scientist)) (SQ (VBD was) (VP (VBN advised) (PP (IN by) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 855
 },
 {
  "taggedQuestion": "What is the launch site of the Juno I which was also the ground of 2016 <e0> season ?",
  "entityMap": {
   "<e0>": "Fort Lauderdale Strikers"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the launch site of #entity1",
    "originStr": "What is the launch site of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season",
    "originStr": "the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season"
   }
  ],
  "question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (DT the) (NNP Juno))))) (NP (PRP I)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN ground)) (PP (IN of) (NP (CD 2016)))))))) (FRAG (NP (ADD <e0>)) (NP (NN season))) (. ?)))",
  "entityNum": 2,
  "id": 856
 },
 {
  "taggedQuestion": "Who has been married to both Penny Lancaster and Alana Stewart?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who has been",
    "originStr": "Who has been"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "married to both Penny Lancaster and Alana Stewart",
    "originStr": "married to both Penny Lancaster and Alana Stewart"
   }
  ],
  "question": "Who has been married to both Penny Lancaster and Alana Stewart",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN married) (PP (IN to) (NP (DT both) (NN Penny) (NNP Lancaster) (CC and) (NNP Alana) (NNP Stewart))))))) (. ?)))",
  "entityNum": 1,
  "id": 857
 },
 {
  "taggedQuestion": "Count the affiliations of <e0>.",
  "entityMap": {
   "<e0>": "International Union of Anarchists"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the affiliations of International Union of Anarchists",
    "originStr": "Count the affiliations of International Union of Anarchists"
   }
  ],
  "question": "Count the affiliations of International Union of Anarchists",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS affiliations)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 858
 },
 {
  "taggedQuestion": "What is the alma mater of the scientist  whose PhD advisor is Jean-Claude Latombe ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the alma mater of #entity1",
    "originStr": "What is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist whose PhD advisor is Jean-Claude Latombe",
    "originStr": "the scientist whose PhD advisor is Jean-Claude Latombe"
   }
  ],
  "question": "What is the alma mater of the scientist whose PhD advisor is Jean-Claude Latombe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN PhD)) (S (NP (NN advisor)) (VP (VBZ is) (NP (NNP Jean) (HYPH -) (NNP Claude) (NNP Latombe))))))))) (. ?)))",
  "entityNum": 2,
  "id": 859
 },
 {
  "taggedQuestion": "List the people residing in Wilton, Connecticut?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the people #entity1 Connecticut",
    "originStr": "List the people #entity1 Connecticut"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "residing in Wilton ",
    "originStr": "residing in Wilton "
   }
  ],
  "question": "List the people residing in Wilton, Connecticut",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS people)) (VP (VBG residing) (PP (IN in) (NP (NNP Wilton) (, ,) (NNP Connecticut)))))) (. ?)))",
  "entityNum": 2,
  "id": 860
 },
 {
  "taggedQuestion": "What is the Location of the <e1> which is also the state of <e0> ?",
  "entityMap": {
   "<e1>": "Peetz Table Wind Energy Center",
   "<e0>": "Ben Nighthorse Campbell"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the Location of the Peetz Table Wind Energy Center",
    "originStr": "What is the Location of the Peetz Table Wind Energy Center"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the state of Ben Nighthorse Campbell",
    "originStr": "which is also the state of Ben Nighthorse Campbell"
   }
  ],
  "question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN Location)) (PP (IN of) (NP (NP (DT the) (NN <e1>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NN <e0>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 861
 },
 {
  "taggedQuestion": "Count the water bodies that flow into the North Sea.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the water bodies that #entity1",
    "originStr": "Count the water bodies that #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "flow into the North Sea",
    "originStr": "flow into the North Sea"
   }
  ],
  "question": "Count the water bodies that flow into the North Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN water) (NNS bodies)) (SBAR (WHNP (WDT that)) (S (VP (VBP flow) (PP (IN into) (NP (DT the) (NNP North) (NNP Sea)))))))) (. .)))",
  "entityNum": 2,
  "id": 862
 },
 {
  "taggedQuestion": "Who was the First Driver of <e0> ?",
  "entityMap": {
   "<e0>": "1999 San Marino Grand Prix"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the First Driver of 1999 San Marino Grand Prix",
    "originStr": "Who was the First Driver of 1999 San Marino Grand Prix"
   }
  ],
  "question": "Who was the First Driver of 1999 San Marino Grand Prix",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (JJ First) (NN Driver)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 863
 },
 {
  "taggedQuestion": "Bantam Spectra is the publisher of which series?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Bantam Spectra is the publisher of which",
    "originStr": "Bantam Spectra is the publisher of which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "series",
    "originStr": "series"
   }
  ],
  "question": "Bantam Spectra is the publisher of which series",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Bantam) (NNP Spectra)) (VP (VBZ is) (NP (NP (DT the) (NN publisher)) (PP (IN of) (NP (WDT which) (NN series))))) (. ?)))",
  "entityNum": 1,
  "id": 864
 },
 {
  "taggedQuestion": "Where is the sister station of <e0> located?",
  "entityMap": {
   "<e0>": "Al Arabiya 99"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where is #entity1 located",
    "originStr": "Where is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sister station of Al Arabiya 99",
    "originStr": "the sister station of Al Arabiya 99"
   }
  ],
  "question": "Where is the sister station of Al Arabiya 99 located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 865
 },
 {
  "taggedQuestion": "Which common prime minister did Graham Richardson and Bon McMullan serve ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which common prime minister did",
    "originStr": "Which common prime minister did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Graham Richardson and Bon McMullan serve",
    "originStr": "Graham Richardson and Bon McMullan serve"
   }
  ],
  "question": "Which common prime minister did Graham Richardson and Bon McMullan serve",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ common)) (NP (JJ prime) (NN minister)))) (SQ (VBD did) (NP (NP (NNP Graham) (NNP Richardson)) (CC and) (NP (NNP Bon) (NNP McMullan))) (VP (VB serve))) (. ?)))",
  "entityNum": 1,
  "id": 866
 },
 {
  "taggedQuestion": "How many things are produced by companies located in Tehran?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many things are produced by #entity1",
    "originStr": "How many things are produced by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies located in Tehran",
    "originStr": "companies located in Tehran"
   }
  ],
  "question": "How many things are produced by companies located in Tehran",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN produced) (PP (IN by) (NP (NP (NNS companies)) (VP (VBN located) (PP (IN in) (NP (NNP Tehran)))))))) (. ?)))",
  "entityNum": 2,
  "id": 867
 },
 {
  "taggedQuestion": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which is the common past team of",
    "originStr": "Which is the common past team of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the Charlie Justice -LRB- American football player -RRB- and Bobby Hoppe",
    "originStr": "the Charlie Justice -LRB- American football player -RRB- and Bobby Hoppe"
   }
  ],
  "question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (JJ past) (NN team)) (PP (IN of) (NP (NP (NP (DT the) (NNP Charlie) (NNP Justice)) (-LRB- -LRB-) (NP (JJ American) (NN football) (NN player)) (-RRB- -RRB-)) (CC and) (NP (NNP Bobby) (NNP Hoppe)))))) (. ?)))",
  "entityNum": 1,
  "id": 868
 },
 {
  "taggedQuestion": "Name the officeholder who hasa child named Augustus and has an associate named Marcus Bibulus .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the officeholder who has child named Augustus and",
    "originStr": "Name the officeholder who has child named Augustus and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has an associate named Marcus Bibulus",
    "originStr": "has an associate named Marcus Bibulus"
   }
  ],
  "question": "Name the officeholder who has child named Augustus and has an associate named Marcus Bibulus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SINV (SINV (VP (VB Name) (NP (NP (DT the) (NN officeholder)) (SBAR (WHNP (WP who)) (S (VP (VBP hasa) (NP (NP (NN child)) (VP (VBN named)))))))) (NP (NNP Augustus))) (CC and) (SINV (VBZ has) (NP (DT an) (NN associate)) (VP (VBN named) (NP (NNP Marcus) (NNP Bibulus)))) (. .)))",
  "entityNum": 1,
  "id": 869
 },
 {
  "taggedQuestion": "Which party won both the general electoin and the andhra pradesh election in 2004?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which party won",
    "originStr": "Which party won"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "both the general election and the andhra pradesh election in 2004",
    "originStr": "both the general election and the andhra pradesh election in 2004"
   }
  ],
  "question": "Which party won both the general election and the andhra pradesh election in 2004",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBD won) (NP (CC both) (NP (DT the) (JJ general) (NN electoin)) (CC and) (NP (DT the) (NN andhra) (NN pradesh) (NN election))) (PP (IN in) (NP (CD 2004))))) (. ?)))",
  "entityNum": 1,
  "id": 870
 },
 {
  "taggedQuestion": "Give me someone on the board of trinity house.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me someone on the board of trinity house",
    "originStr": "Give me someone on the board of trinity house"
   }
  ],
  "question": "Give me someone on the board of trinity house",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN someone)) (PP (IN on) (NP (NP (DT the) (NN board)) (PP (IN of) (NP (NN trinity) (NN house))))))) (. .)))",
  "entityNum": 1,
  "id": 871
 },
 {
  "taggedQuestion": "Whose leaders are Willem-Alexander and Fredis Refunjol?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose",
    "originStr": "Whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "leaders are Willem-Alexander and Fredis Refunjol",
    "originStr": "leaders are Willem-Alexander and Fredis Refunjol"
   }
  ],
  "question": "Whose leaders are Willem-Alexander and Fredis Refunjol",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS leaders))) (SQ (VBP are) (NP (NP (NNP Willem) (HYPH -) (NNP Alexander)) (CC and) (NP (NNP Fredis) (NNP Refunjol)))) (. ?)))",
  "entityNum": 1,
  "id": 872
 },
 {
  "taggedQuestion": "Horses grandsired by Sundridge  have won which awards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have won which awards",
    "originStr": "#entity1 have won which awards"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "Horses grandsired by Sundridge",
    "originStr": "Horses grandsired by Sundridge"
   }
  ],
  "question": "Horses grandsired by Sundridge have won which awards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN grandsired) (PP (IN by) (NP (NNP Sundridge))))) (VP (VBP have) (VP (VBN won) (SBAR (WHNP (WDT which)) (S (NP (NNS awards)))))) (. ?)))",
  "entityNum": 2,
  "id": 873
 },
 {
  "taggedQuestion": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the river whose source region is North-Western Province , Zambia and",
    "originStr": "What is the river whose source region is North-Western Province , Zambia and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "river mouth is Indian Ocean",
    "originStr": "river mouth is Indian Ocean"
   }
  ],
  "question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source)) (NN region)) (S (VP (VBZ is) (ADJP (ADJP (JJ North) (HYPH -) (JJ Western)) (SBAR (S (NP (NP (NNP Province)) (, ,) (NP (NNP Zambia)) (CC and) (NP (NN river) (NN mouth))) (VP (VBZ is) (NP (NNP Indian) (NNP Ocean))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 874
 },
 {
  "taggedQuestion": "Who was on the first team in the GPs that were held at Watkins Glen, NY?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who was on the first team in the #entity1 NY",
    "originStr": "Who was on the first team in the #entity1 NY"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "GPs that were held at Watkins Glen ",
    "originStr": "GPs that were held at Watkins Glen "
   }
  ],
  "question": "Who was on the first team in the GPs that were held at Watkins Glen, NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN on) (NP (DT the) (JJ first) (NN team))) (PP (IN in) (NP (NP (DT the) (NNS GPs)) (SBAR (WHNP (WDT that)) (S (VP (VBD were) (VP (VBN held) (PP (IN at) (NP (NP (NNP Watkins) (NNP Glen)) (, ,) (NP (NNP NY)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 875
 },
 {
  "taggedQuestion": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movie whose screenplay is by Akiva Goldsman and",
    "originStr": "Name the movie whose screenplay is by Akiva Goldsman and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "directed by Joel Schumacher",
    "originStr": "directed by Joel Schumacher"
   }
  ],
  "question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VBZ is) (UCP (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))) (CC and) (VP (VBN directed) (PP (IN by) (NP (NNP Joel) (NNP Schumacher)))))))))) (. .)))",
  "entityNum": 1,
  "id": 876
 },
 {
  "taggedQuestion": "What ethinicity of Linda Hogan is also the <e0> of Holmes Colbert ?",
  "entityMap": {
   "<e0>": "state of origin"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What ethnicity of Linda Hogan is",
    "originStr": "What ethnicity of Linda Hogan is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the state of origin of Holmes Colbert",
    "originStr": "also the state of origin of Holmes Colbert"
   }
  ],
  "question": "What ethnicity of Linda Hogan is also the state of origin of Holmes Colbert",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN ethinicity) (PP (IN of) (NP (NNP Linda) (NNP Hogan))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert))))) (. ?)))",
  "entityNum": 1,
  "id": 877
 },
 {
  "taggedQuestion": "What are the track and field events of <e0>?",
  "entityMap": {
   "<e1>": "track field events",
   "<e0>": "Jamiatu Muslim Mindanao"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the track and field events",
    "originStr": "What are the track and field events"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "of Jamiatu Muslim Mindanao",
    "originStr": "of Jamiatu Muslim Mindanao"
   }
  ],
  "question": "What are the track and field events of Jamiatu Muslim Mindanao",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NML (NN track) (CC and) (NN field)) (NNS events)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 878
 },
 {
  "taggedQuestion": "How many cities are close to Lake Victoria?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How many cities are",
    "originStr": "How many cities are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "close to Lake Victoria",
    "originStr": "close to Lake Victoria"
   }
  ],
  "question": "How many cities are close to Lake Victoria",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (ADJP (JJ close) (PP (IN to) (NP (NNP Lake) (NNP Victoria)))))) (. ?)))",
  "entityNum": 1,
  "id": 879
 },
 {
  "taggedQuestion": "Is greasy pop recording the distributor of festival records?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is greasy pop recording the distributor of festival records",
    "originStr": "Is greasy pop recording the distributor of festival records"
   }
  ],
  "question": "Is greasy pop recording the distributor of festival records",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ greasy) (NN pop)) (VP (VBG recording) (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NN festival) (NNS records))))) (. ?)))",
  "entityNum": 1,
  "id": 880
 },
 {
  "taggedQuestion": "What is the baseball team whose club manager's debut team is Houston Astros?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the baseball team whose club manager's debut #entity1 Houston Astros",
    "originStr": "What is the baseball team whose club manager's debut #entity1 Houston Astros"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "team is",
    "originStr": "team is"
   }
  ],
  "question": "What is the baseball team whose club manager's debut team is Houston Astros",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NML (NN club))) (S (NP (NP (NN manager) (POS 's)) (NN debut) (NN team)) (VP (VBZ is) (NP (NNP Houston) (NNPS Astros))))))) (. ?)))",
  "entityNum": 2,
  "id": 881
 },
 {
  "taggedQuestion": "What cities are near to Nihoa which is also known as Bird Island ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What cities are near to Nihoa which",
    "originStr": "What cities are near to Nihoa which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also known as Bird Island",
    "originStr": "is also known as Bird Island"
   }
  ],
  "question": "What cities are near to Nihoa which is also known as Bird Island",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (PP (IN near) (IN to) (NP (NP (NNP Nihoa)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (NNP Bird) (NNP Island))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 882
 },
 {
  "taggedQuestion": "Is Sloth in the Chordate phylum?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Sloth in the Chordate phylum",
    "originStr": "Is Sloth in the Chordate phylum"
   }
  ],
  "question": "Is Sloth in the Chordate phylum",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Sloth)) (PP (IN in) (NP (DT the) (NN Chordate) (NN phylum))) (. ?)))",
  "entityNum": 1,
  "id": 883
 },
 {
  "taggedQuestion": "Which shareholder of <e0> is also the operator of <e1> ?",
  "entityMap": {
   "<e1>": "New Sanno Hotel",
   "<e0>": "Naval Air facility Adak"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which shareholder of Naval Air facility Adak is",
    "originStr": "Which shareholder of Naval Air facility Adak is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the operator of New Sanno Hotel",
    "originStr": "also the operator of New Sanno Hotel"
   }
  ],
  "question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN shareholder) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN operator)) (PP (IN of) (NP (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 884
 },
 {
  "taggedQuestion": "What other awards have been given to <e0>?",
  "entityMap": {
   "<e0>": "Golden Globe winners"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What other awards have been given #entity1",
    "originStr": "What other awards have been given #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "to Golden Globe winners",
    "originStr": "to Golden Globe winners"
   }
  ],
  "question": "What other awards have been given to Golden Globe winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (JJ other) (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 885
 },
 {
  "taggedQuestion": "Which allegiance of the John Kotelawala is also the  sovereign state of the Sanath Weerakoon ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which allegiance of the John Kotelawala is",
    "originStr": "Which allegiance of the John Kotelawala is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the sovereign state of the Sanath Weerakoon",
    "originStr": "also the sovereign state of the Sanath Weerakoon"
   }
  ],
  "question": "Which allegiance of the John Kotelawala is also the sovereign state of the Sanath Weerakoon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN allegiance) (PP (IN of) (NP (DT the) (NNP John) (NNP Kotelawala))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ sovereign) (NN state)) (PP (IN of) (NP (DT the) (NNP Sanath) (NNP Weerakoon))))) (. ?)))",
  "entityNum": 1,
  "id": 886
 },
 {
  "taggedQuestion": "List the <e0> whose network's sister names is N-tv.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the television shows whose network's #entity1",
    "originStr": "List the television shows whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "sister names is N-tv",
    "originStr": "sister names is N-tv"
   }
  ],
  "question": "List the television shows whose network's sister names is N-tv",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (NML (NN network) (POS 's)) (NN sister)) (NNS names)) (S (VP (VBZ is) (NP (NN N) (HYPH -) (NN tv))))))) (. .)))",
  "entityNum": 2,
  "id": 887
 },
 {
  "taggedQuestion": "<e0> is the national anthem of which country?",
  "entityMap": {
   "<e0>": "God Defend New Zealand"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "God Defend New Zealand is",
    "originStr": "God Defend New Zealand is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the national anthem of which country",
    "originStr": "the national anthem of which country"
   }
  ],
  "question": "God Defend New Zealand is the national anthem of which country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (ADD <e0>)) (VP (VBZ is) (NP (NP (DT the) (JJ national) (NN anthem)) (WHPP (IN of) (WHNP (WDT which) (NN country))))) (. ?)))",
  "entityNum": 1,
  "id": 888
 },
 {
  "taggedQuestion": "Where do the rivers starting from Zambia end?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where do the rivers starting #entity1",
    "originStr": "Where do the rivers starting #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "from Zambia end",
    "originStr": "from Zambia end"
   }
  ],
  "question": "Where do the rivers starting from Zambia end",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (DT the) (NNS rivers)) (VP (VBG starting) (PP (IN from) (NP (NNP Zambia) (NN end)))))) (. ?)))",
  "entityNum": 2,
  "id": 889
 },
 {
  "taggedQuestion": "Which political party of kumta had affiliation with <e0>, 2004 (Andhra Pradesh) ?",
  "entityMap": {
   "<e0>": "Indian general election"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which political party of kumta had",
    "originStr": "Which political party of kumta had"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "affiliation with Indian general election , 2004 -LRB- Andhra Pradesh -RRB-",
    "originStr": "affiliation with Indian general election , 2004 -LRB- Andhra Pradesh -RRB-"
   }
  ],
  "question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NN kumta)))) (SQ (VP (VBD had) (NP (NN affiliation)) (PP (IN with) (NP (NP (NN <e0>)) (, ,) (NP (CD 2004)))) (PRN (-LRB- -LRB-) (NP (NNP Andhra) (NNP Pradesh)) (-RRB- -RRB-)))) (. ?)))",
  "entityNum": 1,
  "id": 890
 },
 {
  "taggedQuestion": "Who was member of boards at Royal Society and Trinity House?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was member of boards at Royal Society and Trinity House",
    "originStr": "was member of boards at Royal Society and Trinity House"
   }
  ],
  "question": "Who was member of boards at Royal Society and Trinity House",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NN member)) (PP (IN of) (NP (NP (NNS boards)) (PP (IN at) (NP (NP (NNP Royal) (NNP Society)) (CC and) (NP (NNP Trinity) (NNP House)))))))) (. ?)))",
  "entityNum": 1,
  "id": 891
 },
 {
  "taggedQuestion": "Where is the king buried whose predecessor was Iyasu II?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where is the king buried #entity1",
    "originStr": "Where is the king buried #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose predecessor was Iyasu II",
    "originStr": "whose predecessor was Iyasu II"
   }
  ],
  "question": "Where is the king buried whose predecessor was Iyasu II",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN king)) (SBAR (S (VP (VBD buried) (SBAR (WHNP (WP$ whose) (NN predecessor)) (S (VP (VBD was) (NP (NNP Iyasu) (NNP II)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 892
 },
 {
  "taggedQuestion": "How many different places have people beatified by <e0> died?",
  "entityMap": {
   "<e0>": "Pope Pius X"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "In how many different places have #entity1 died",
    "originStr": "In how many different places have #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people beatified by Pope Pius X",
    "originStr": "people beatified by Pope Pius X"
   }
  ],
  "question": "In how many different places have people beatified by Pope Pius X died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NML (NNS places))) (SQ (VBP have) (NP (NNS people)) (VP (VBN beatified) (PP (IN by) (NP (NP (ADD <e0>)) (SBAR (S (VP (VBD died)))))))) (. ?)))",
  "entityNum": 2,
  "id": 893
 },
 {
  "taggedQuestion": "What faiths are followed by the relatives of Meadow Soprano?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What faiths are followed by #entity1",
    "originStr": "What faiths are followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of Meadow Soprano",
    "originStr": "the relatives of Meadow Soprano"
   }
  ],
  "question": "What faiths are followed by the relatives of Meadow Soprano",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS faiths)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Meadow) (NNP Soprano))))))) (. ?)))",
  "entityNum": 2,
  "id": 894
 },
 {
  "taggedQuestion": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station  ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where is the headquarters of #entity1",
    "originStr": "Where is the headquarters of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the public transit system which owns Target Field , a Metro Transit Station",
    "originStr": "the public transit system which owns Target Field , a Metro Transit Station"
   }
  ],
  "question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NP (NNP Target) (NNP Field)) (, ,) (NP (DT a) (NML (NNP Metro) (NNP Transit)) (NNP Station)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 895
 },
 {
  "taggedQuestion": "What is the nationality of Aishath Saffa ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the nationality of Aishath Saffa",
    "originStr": "What is the nationality of Aishath Saffa"
   }
  ],
  "question": "What is the nationality of Aishath Saffa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN nationality)) (PP (IN of) (NP (NNP Aishath) (NNP Saffa))))) (. ?)))",
  "entityNum": 1,
  "id": 896
 },
 {
  "taggedQuestion": "Who was the president under whom winston bryant served as a lieutenant?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who was the president under #entity1",
    "originStr": "who was the president under #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whom winston bryant served as a lieutenant",
    "originStr": "whom winston bryant served as a lieutenant"
   }
  ],
  "question": "who was the president under whom winston bryant served as a lieutenant",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN president)) (SBAR (WHPP (IN under) (WHNP (WP whom))) (S (NP (NNP winston) (NNP bryant)) (VP (VBD served) (PP (IN as) (NP (DT a) (NN lieutenant)))))))) (. ?)))",
  "entityNum": 2,
  "id": 897
 },
 {
  "taggedQuestion": "What are the bands associated with the artists of <e0>  ?",
  "entityMap": {
   "<e0>": "My Favorite Girl"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the bands associated with #entity1",
    "originStr": "What are the bands associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artists of My Favorite Girl",
    "originStr": "the artists of My Favorite Girl"
   }
  ],
  "question": "What are the bands associated with the artists of My Favorite Girl",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS bands)) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (NNS artists)) (PP (IN of) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 898
 },
 {
  "taggedQuestion": "What subjects was Broca's Brain written?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "On what subjects #entity1 written",
    "originStr": "On what subjects #entity1 written"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "was Broca's Brain",
    "originStr": "was Broca's Brain"
   }
  ],
  "question": "On what subjects was Broca's Brain written",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NNS subjects))) (SQ (VBD was) (NP (NP (NNP Broca) (POS 's)) (NNP Brain)) (VP (VBN written))) (. ?)))",
  "entityNum": 2,
  "id": 899
 },
 {
  "taggedQuestion": "Which parent organization of GetTV is also the label of next thing ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which parent organization of GetTV is",
    "originStr": "Which parent organization of GetTV is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the label of next thing",
    "originStr": "also the label of next thing"
   }
  ],
  "question": "Which parent organization of GetTV is also the label of next thing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN parent) (NN organization)) (PP (IN of) (NP (NNP GetTV))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (JJ next) (NN thing))))) (. ?)))",
  "entityNum": 1,
  "id": 900
 },
 {
  "taggedQuestion": "Which teams have used the stadium whose architect was Populous ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which teams have used #entity1",
    "originStr": "Which teams have used #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium whose architect was Populous",
    "originStr": "the stadium whose architect was Populous"
   }
  ],
  "question": "Which teams have used the stadium whose architect was Populous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS teams)) (SQ (VP (VBP have) (VP (VBN used) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WP$ whose) (NML (NN architect))) (S (VP (VBD was) (ADJP (JJ Populous))))))))) (. ?)))",
  "entityNum": 2,
  "id": 901
 },
 {
  "taggedQuestion": "Name the route end of the <e1> and <e0>.",
  "entityMap": {
   "<e1>": "North-South Transport Corridor",
   "<e0>": "Mumbai Vadodara Expressway"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name",
    "originStr": "Name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
    "originStr": "the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway"
   }
  ],
  "question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NP (DT the) (NN <e1>)) (CC and) (NP (ADD <e0>)))))) (. .)))",
  "entityNum": 1,
  "id": 902
 },
 {
  "taggedQuestion": "Is <e0> buried in Colorado?",
  "entityMap": {
   "<e0>": "Albert P Clark"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Albert P Clark buried in Colorado",
    "originStr": "Is Albert P Clark buried in Colorado"
   }
  ],
  "question": "Is Albert P Clark buried in Colorado",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
  "entityNum": 1,
  "id": 903
 },
 {
  "taggedQuestion": "Which hockey team is head coached by Bill Peters?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which hockey team is head",
    "originStr": "Which hockey team is head"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "coached by Bill Peters",
    "originStr": "coached by Bill Peters"
   }
  ],
  "question": "Which hockey team is head coached by Bill Peters",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN hockey) (NN team)) (SQ (VBZ is) (NP (NN head)) (VP (VBN coached) (PP (IN by) (NP (NNP Bill) (NNP Peters))))) (. ?)))",
  "entityNum": 1,
  "id": 904
 },
 {
  "taggedQuestion": "Count the religions followed by the alumini of Ananda College.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Count the number of religions followed by #entity1",
    "originStr": "Count the number of religions followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the alumni of Ananda College",
    "originStr": "the alumni of Ananda College"
   }
  ],
  "question": "Count the number of religions followed by the alumni of Ananda College",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN alumini)) (PP (IN of) (NP (NNP Ananda) (NNP College)))))))) (. .)))",
  "entityNum": 2,
  "id": 905
 },
 {
  "taggedQuestion": "Which team did Wilfred McDonalds and Cam Plante play for?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which team did",
    "originStr": "Which team did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Wilfred McDonalds and Cam Plante play for",
    "originStr": "Wilfred McDonalds and Cam Plante play for"
   }
  ],
  "question": "Which team did Wilfred McDonalds and Cam Plante play for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD did) (NP (NP (NNP Wilfred) (NNP McDonalds)) (CC and) (NP (NNP Cam) (NNP Plante))) (VP (VB play) (PP (IN for)))) (. ?)))",
  "entityNum": 1,
  "id": 906
 },
 {
  "taggedQuestion": "What are the <e0> whose network's stockholder is <e1>?",
  "entityMap": {
   "<e1>": "Warner Bros. Television",
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What are the television shows whose network's #entity1",
    "originStr": "What are the television shows whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "stockholder is Warner Bros. ",
    "originStr": "stockholder is Warner Bros. "
   }
  ],
  "question": "What are the television shows whose network's stockholder is Warner Bros. Television",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NP (NN network) (POS 's)) (NN stockholder)) (S (VP (VBZ is) (NP (ADD <e1>))))))) (. ?)))",
  "entityNum": 2,
  "id": 907
 },
 {
  "taggedQuestion": "Name the <e0> judged by Rand Jackson .",
  "entityMap": {
   "<e0>": "Fox TV show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the Fox TV show judged",
    "originStr": "Name the Fox TV show judged"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "by Rand Jackson",
    "originStr": "by Rand Jackson"
   }
  ],
  "question": "Name the Fox TV show judged by Rand Jackson",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (VP (VBN judged) (PP (IN by) (NP (NNP Rand) (NNP Jackson)))))) (. .)))",
  "entityNum": 1,
  "id": 908
 },
 {
  "taggedQuestion": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the total number of software whose programming language is C++",
    "originStr": "What is the total number of software whose programming language is C++"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and operating system is Microsoft Windows",
    "originStr": "and operating system is Microsoft Windows"
   }
  ],
  "question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN software)) (SBAR (WHNP (WP$ whose) (NML (NN programming)) (NN language)) (S (VP (VBZ is) (SBAR (S (NP (NP (NNP C++)) (CC and) (NP (VBG operating) (NN system))) (VP (VBZ is) (NP (NNP Microsoft) (NNP Windows)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 909
 },
 {
  "taggedQuestion": "Name the city of Phil-Ellena .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the city of Phil-Ellena",
    "originStr": "Name the city of Phil-Ellena"
   }
  ],
  "question": "Name the city of Phil-Ellena",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Phil) (HYPH -) (NNP Ellena))))) (. .)))",
  "entityNum": 1,
  "id": 910
 },
 {
  "taggedQuestion": "How many companies are located in a <e0>?",
  "entityMap": {
   "<e0>": "spanish speaking region"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many companies are",
    "originStr": "how many companies are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "located in a spanish speaking region",
    "originStr": "located in a spanish speaking region"
   }
  ],
  "question": "how many companies are located in a spanish speaking region",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS companies)) (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (DT a) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 911
 },
 {
  "taggedQuestion": "What is the combatant of the <e0> and also the ethnic group of the Linda Hogan ?",
  "entityMap": {
   "<e0>": "Northwest Indian War"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the combatant of the Northwest Indian War and",
    "originStr": "What is the combatant of the Northwest Indian War and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the ethnic group of the Linda Hogan",
    "originStr": "also the ethnic group of the Linda Hogan"
   }
  ],
  "question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN combatant)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (ADVP (RB also)) (NP (DT the) (JJ ethnic) (NN group)) (PP (IN of) (NP (DT the) (NNP Linda) (NNP Hogan)))))))) (. ?)))",
  "entityNum": 1,
  "id": 912
 },
 {
  "taggedQuestion": "Which airlines fly to <e0>?",
  "entityMap": {
   "<e0>": "Gimhae International Airport"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which airlines fly",
    "originStr": "Which airlines fly"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "to Gimhae International Airport",
    "originStr": "to Gimhae International Airport"
   }
  ],
  "question": "Which airlines fly to Gimhae International Airport",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS airlines)) (VP (VBP fly) (PP (IN to) (NP (ADD <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 913
 },
 {
  "taggedQuestion": "GetTV is owned by which organisation?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "GetTV",
    "originStr": "GetTV"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is owned by which organisation",
    "originStr": "is owned by which organisation"
   }
  ],
  "question": "GetTV is owned by which organisation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP GetTV)) (VP (VBZ is) (VP (VBN owned) (WHPP (IN by) (WHNP (WDT which) (NN organisation))))) (. ?)))",
  "entityNum": 1,
  "id": 914
 },
 {
  "taggedQuestion": "Name the islands that belong to the archipelago whose largest city is Papeete.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Name the islands that belong to #entity1",
    "originStr": "Name the islands that belong to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the archipelago whose largest city is Papeete",
    "originStr": "the archipelago whose largest city is Papeete"
   }
  ],
  "question": "Name the islands that belong to the archipelago whose largest city is Papeete",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS islands)) (SBAR (WHNP (WDT that)) (S (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN archipelago)) (SBAR (WHNP (WP$ whose) (JJS largest) (NN city)) (S (VP (VBZ is) (NP (NNP Papeete)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 915
 },
 {
  "taggedQuestion": "Which team did Dave Bing and Ron Reed started their basketball career?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which team did",
    "originStr": "In which team did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Dave Bing and Ron Reed started their basketball career",
    "originStr": "Dave Bing and Ron Reed started their basketball career"
   }
  ],
  "question": "In which team did Dave Bing and Ron Reed started their basketball career",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBD did) (SBAR (S (NP (NP (NNP Dave) (NNP Bing)) (CC and) (NP (NNP Ron) (NNP Reed))) (VP (VBD started) (NP (PRP$ their) (NN basketball) (NN career))))))) (. ?)))",
  "entityNum": 1,
  "id": 916
 },
 {
  "taggedQuestion": "List the settlements area whose province is Metropolitan City of Venice ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the settlements area #entity1",
    "originStr": "List the settlements area #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose province is Metropolitan City of Venice",
    "originStr": "whose province is Metropolitan City of Venice"
   }
  ],
  "question": "List the settlements area whose province is Metropolitan City of Venice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS settlements) (NN area)) (SBAR (WHNP (WP$ whose) (NN province)) (S (VP (VBZ is) (NP (NP (NNP Metropolitan) (NNP City)) (PP (IN of) (NP (NNP Venice))))))))) (. ?)))",
  "entityNum": 2,
  "id": 917
 },
 {
  "taggedQuestion": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede?",
  "entityMap": {
   "<e0>": "Detroit , MI place"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede",
    "originStr": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede"
   }
  ],
  "question": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (VP (VBN recorded) (PP (IN by) (NP (NP (UCP (ADJP (JJ Live) (PP (IN in) (NP (NNP Detroit) (, ,) (NNP MI)))) (CC and) (ADVP (RB also))) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (DT the) (NNP Bodhin) (NNP Kjolhede))))))))) (. ?)))",
  "entityNum": 1,
  "id": 918
 },
 {
  "taggedQuestion": "How many different institutes have the members of <e0>'s Corps graduated?",
  "entityMap": {
   "<e0>": "Judge Advocate General"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "From how many different institutes have #entity1",
    "originStr": "From how many different institutes have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of Judge Advocate General's Corps graduated",
    "originStr": "the members of Judge Advocate General's Corps graduated"
   }
  ],
  "question": "From how many different institutes have the members of Judge Advocate General's Corps graduated",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ different) (NNS institutes)) (VP (VBP have) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NP (NN <e0>) (POS 's)) (NNP Corps))))))) (VP (VBD graduated)) (. ?)))",
  "entityNum": 2,
  "id": 919
 },
 {
  "taggedQuestion": "Who isa famous relative of anne spielberg?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Whose a famous relative of anne spielberg",
    "originStr": "Whose a famous relative of anne spielberg"
   }
  ],
  "question": "Whose a famous relative of anne spielberg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (FRAG (WHNP (WP Who)) (NP (NNP isa))) (NP (NP (JJ famous) (NN relative)) (PP (IN of) (NP (NN anne) (NNP spielberg)))) (. ?)))",
  "entityNum": 1,
  "id": 920
 },
 {
  "taggedQuestion": "Which city does Northeast Library belong?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which city does Northeast Library belong",
    "originStr": "To which city does Northeast Library belong"
   }
  ],
  "question": "To which city does Northeast Library belong",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ does) (NP (NNP Northeast) (NNP Library)) (VP (VB belong))) (. ?)))",
  "entityNum": 1,
  "id": 921
 },
 {
  "taggedQuestion": "What are the airline hubs of Cascade Airways?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the airline hubs of Cascade Airways",
    "originStr": "What are the airline hubs of Cascade Airways"
   }
  ],
  "question": "What are the airline hubs of Cascade Airways",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN airline) (NNS hubs)) (PP (IN of) (NP (NNP Cascade) (NNPS Airways))))) (. ?)))",
  "entityNum": 1,
  "id": 922
 },
 {
  "taggedQuestion": "Who has manufactured vehicles designed originally by NASA?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who has manufactured vehicles #entity1",
    "originStr": "Who has manufactured vehicles #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "designed originally by NASA",
    "originStr": "designed originally by NASA"
   }
  ],
  "question": "Who has manufactured vehicles designed originally by NASA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN manufactured) (NP (NP (NNS vehicles)) (VP (VBN designed) (ADVP (RB originally)) (PP (IN by) (NP (NNP NASA)))))))) (. ?)))",
  "entityNum": 2,
  "id": 923
 },
 {
  "taggedQuestion": "What is the order of the Henry Clay and profession of the <e0>?",
  "entityMap": {
   "<e0>": "William Luther Hill"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the order of the Henry Clay and",
    "originStr": "What is the order of the Henry Clay and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "profession of the William Luther Hill",
    "originStr": "profession of the William Luther Hill"
   }
  ],
  "question": "What is the order of the Henry Clay and profession of the William Luther Hill",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN order)) (PP (IN of) (NP (DT the) (NNP Henry) (NNP Clay)))) (CC and) (NP (NP (NN profession)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 924
 },
 {
  "taggedQuestion": "What show  has theme music composer as Ron Grainer and at the same time  related to Class (<e0>)?",
  "entityMap": {
   "<e0>": "2016 TV series"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What show has theme music composer as Ron Grainer and",
    "originStr": "What show has theme music composer as Ron Grainer and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "at the same time related to Class -LRB- 2016 TV series -RRB-",
    "originStr": "at the same time related to Class -LRB- 2016 TV series -RRB-"
   }
  ],
  "question": "What show has theme music composer as Ron Grainer and at the same time related to Class (2016 TV series)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN show)) (SQ (VBZ has) (NP (NP (NN theme) (NN music) (NN composer)) (PP (PP (IN as) (NP (NNP Ron) (NNP Grainer))) (CC and) (PP (IN at) (NP (DT the) (JJ same) (NN time))))) (VP (VBN related) (PP (IN to) (NP (NN Class))) (PRN (-LRB- -LRB-) (NP (NN <e0>)) (-RRB- -RRB-)))) (. ?)))",
  "entityNum": 1,
  "id": 925
 },
 {
  "taggedQuestion": "What is the life stance of the ethnic groups related to Micronesia ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the life stance of #entity1",
    "originStr": "What is the life stance of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ethnic groups related to Micronesia",
    "originStr": "the ethnic groups related to Micronesia"
   }
  ],
  "question": "What is the life stance of the ethnic groups related to Micronesia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN life) (NN stance)) (PP (IN of) (NP (DT the) (JJ ethnic) (NNS groups)))) (VP (VBN related) (PP (IN to) (NP (NNP Micronesia))))) (. ?)))",
  "entityNum": 2,
  "id": 926
 },
 {
  "taggedQuestion": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the river whose mouth mountain is Southend-on-Sea and mouth",
    "originStr": "Name the river whose mouth mountain is Southend-on-Sea and mouth"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "place is Essex",
    "originStr": "place is Essex"
   }
  ],
  "question": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WHNP (WP$ whose) (NML (NN mouth)) (NN mountain)) (S (VBZ is) (NP (NML (NML (NNP Southend)) (HYPH -) (PP (IN on) (HYPH -) (NP (NN Sea) (CC and) (NN mouth)))) (NN place)))) (S (VP (VBZ is) (NP (NNP Essex))))))) (. .)))",
  "entityNum": 1,
  "id": 927
 },
 {
  "taggedQuestion": "Which venue of indy PopCon is also the death place of <e0> ?",
  "entityMap": {
   "<e0>": "Louis Le Cocqq"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which venue of indy PopCon is",
    "originStr": "Which venue of indy PopCon is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the death place of Louis Le Cocqq",
    "originStr": "also the death place of Louis Le Cocqq"
   }
  ],
  "question": "Which venue of indy PopCon is also the death place of Louis Le Cocqq",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN venue) (PP (IN of) (NP (JJ indy) (NNP PopCon))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN death) (NN place)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 928
 },
 {
  "taggedQuestion": "What genre's softwares are released with a <e0>?",
  "entityMap": {
   "<e0>": "GNU GPL license"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What genre's softwares #entity1",
    "originStr": "What genre's softwares #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are released with a GNU GPL license",
    "originStr": "are released with a GNU GPL license"
   }
  ],
  "question": "What genre's softwares are released with a GNU GPL license",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NP (NN genre) (POS 's)) (NNS softwares)) (VP (VBP are) (VP (VBN released) (PP (IN with) (NP (DT a) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 929
 },
 {
  "taggedQuestion": "Is Christchurch the largest city of South Island?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Christchurch the largest city of South Island",
    "originStr": "Is Christchurch the largest city of South Island"
   }
  ],
  "question": "Is Christchurch the largest city of South Island",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Christchurch)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP South) (NNP Island)))) (. ?)))",
  "entityNum": 1,
  "id": 930
 },
 {
  "taggedQuestion": "Who is the leader of Allgemeine SS ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the leader of Allgemeine SS",
    "originStr": "Who is the leader of Allgemeine SS"
   }
  ],
  "question": "Who is the leader of Allgemeine SS",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Allgemeine) (NNP SS))))) (. ?)))",
  "entityNum": 1,
  "id": 931
 },
 {
  "taggedQuestion": "Giorgos Kaminis is the mayor of what?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Giorgos Kaminis is the mayor of what",
    "originStr": "Giorgos Kaminis is the mayor of what"
   }
  ],
  "question": "Giorgos Kaminis is the mayor of what",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Giorgos) (NNP Kaminis)) (VP (VBZ is) (NP (NP (DT the) (NN mayor)) (PP (IN of) (NP (WP what))))) (. ?)))",
  "entityNum": 1,
  "id": 932
 },
 {
  "taggedQuestion": "Where is the headquarters of Metro Transit (Minnesota) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is the headquarters of Metro Transit (Minnesota)",
    "originStr": "Where is the headquarters of Metro Transit (Minnesota)"
   }
  ],
  "question": "Where is the headquarters of Metro Transit (Minnesota)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Metro) (NNP Transit) (-LRB- -LRB-) (NNP Minnesota) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 933
 },
 {
  "taggedQuestion": "Give me the count of all the names of characters created by Frank Miller",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Give me the count of all the names of #entity1",
    "originStr": "Give me the count of all the names of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "characters created by Frank Miller",
    "originStr": "characters created by Frank Miller"
   }
  ],
  "question": "Give me the count of all the names of characters created by Frank Miller",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (PDT all) (DT the) (NNS names)) (PP (IN of) (NP (NP (NNS characters)) (VP (VBN created) (PP (IN by) (NP (NNP Frank) (NNP Miller))))))))))))",
  "entityNum": 2,
  "id": 934
 },
 {
  "taggedQuestion": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which fictional character portrayed in Terminator 2 : Judgment Day",
    "originStr": "Which fictional character portrayed in Terminator 2 : Judgment Day"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is painted by Josh Friedman",
    "originStr": "is painted by Josh Friedman"
   }
  ],
  "question": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ fictional) (NN character)) (SQ (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 2))) (: :) (S (NP (NNP Judgment) (NNP Day)) (VP (VBZ is) (VP (VBN painted) (PP (IN by) (NP (NNP Josh) (NNP Friedman)))))))) (. ?)))",
  "entityNum": 1,
  "id": 935
 },
 {
  "taggedQuestion": "Where was the narrator of Spain on the Road Again born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where was #entity1 born",
    "originStr": "Where was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the narrator of Spain on the Road Again",
    "originStr": "the narrator of Spain on the Road Again"
   }
  ],
  "question": "Where was the narrator of Spain on the Road Again born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (NNP Spain)) (PP (IN on) (NP (DT the) (NNP Road) (NNP Again)))))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 936
 },
 {
  "taggedQuestion": "Does AMC Gremlin have the Volkswagen engine?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does amc"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does AMC Gremlin have the Volkswagen engine",
    "originStr": "Does AMC Gremlin have the Volkswagen engine"
   }
  ],
  "question": "Does AMC Gremlin have the Volkswagen engine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP AMC))) (S (NP (NNP Gremlin)) (VP (VBP have) (NP (DT the) (NNP Volkswagen) (NN engine)))) (. ?)))",
  "entityNum": 1,
  "id": 937
 },
 {
  "taggedQuestion": "Name the movie with narrator as Trevor Peacock and music composer  as Christophe Beck.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the movie with narrator as Trevor Peacock and",
    "originStr": "Name the movie with narrator as Trevor Peacock and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "music composer as Christophe Beck",
    "originStr": "music composer as Christophe Beck"
   }
  ],
  "question": "Name the movie with narrator as Trevor Peacock and music composer as Christophe Beck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN movie)) (PP (IN with) (NP (NP (NP (NN narrator)) (PP (IN as) (NP (NNP Trevor) (NN Peacock)))) (CC and) (NP (NP (NN music) (NN composer)) (PP (IN as) (NP (NNP Christophe) (NNP Beck))))))) (. .)))",
  "entityNum": 1,
  "id": 938
 },
 {
  "taggedQuestion": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did the scientist study #entity1",
    "originStr": "Where did the scientist study #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose doctoral thesis was supervised by Leonard Lerman",
    "originStr": "whose doctoral thesis was supervised by Leonard Lerman"
   }
  ],
  "question": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (DT the) (NN scientist) (NN study)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ doctoral) (NN thesis)) (VP (VBD was) (VP (VBN supervised) (PP (IN by) (NP (NNP Leonard) (NNP Lerman))))))))) (. ?)))",
  "entityNum": 2,
  "id": 939
 },
 {
  "taggedQuestion": "Where can one find some quick bread in the world?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where can one find #entity1",
    "originStr": "Where can one find #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some quick bread in the world",
    "originStr": "some quick bread in the world"
   }
  ],
  "question": "Where can one find some quick bread in the world",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (DT some) (JJ quick) (NN bread)) (PP (IN in) (NP (DT the) (NN world))))) (. ?)))",
  "entityNum": 2,
  "id": 940
 },
 {
  "taggedQuestion": "What is the sea whose cities are Gdask and Oulu?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the sea whose",
    "originStr": "What is the sea whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "cities are Gdask and Oulu",
    "originStr": "cities are Gdask and Oulu"
   }
  ],
  "question": "What is the sea whose cities are Gdask and Oulu",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN sea)) (SBAR (WHNP (WP$ whose) (NNS cities)) (S (VP (VBP are) (NP (NNP Gdask) (CC and) (NNP Oulu))))))) (. ?)))",
  "entityNum": 1,
  "id": 941
 },
 {
  "taggedQuestion": "What rivers originate from Australian Alps?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What rivers originate",
    "originStr": "What rivers originate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from Australian Alps",
    "originStr": "from Australian Alps"
   }
  ],
  "question": "What rivers originate from Australian Alps",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NNS rivers))) (SQ (VP (VB originate) (PP (IN from) (NP (NNP Australian) (NNP Alps))))) (. ?)))",
  "entityNum": 1,
  "id": 942
 },
 {
  "taggedQuestion": "Which venues are located at places governed by John Roberts?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which venues are located at #entity1",
    "originStr": "Which venues are located at #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "places governed by John Roberts",
    "originStr": "places governed by John Roberts"
   }
  ],
  "question": "Which venues are located at places governed by John Roberts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS venues)) (SQ (VBP are) (VP (VBN located) (PP (IN at) (NP (NP (NNS places)) (VP (VBN governed) (PP (IN by) (NP (NNP John) (NNP Roberts)))))))) (. ?)))",
  "entityNum": 2,
  "id": 943
 },
 {
  "taggedQuestion": "What is the venue of <e0>-Con International ?",
  "entityMap": {
   "<e0>": "San Diego Comic"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the venue of San Diego Comic-Con International",
    "originStr": "What is the venue of San Diego Comic-Con International"
   }
  ],
  "question": "What is the venue of San Diego Comic-Con International",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN venue)) (PP (IN of) (NP (NML (NN <e0>) (HYPH -) (NN Con)) (NNP International))))) (. ?)))",
  "entityNum": 1,
  "id": 944
 },
 {
  "taggedQuestion": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which office holder owes",
    "originStr": "Which office holder owes"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "its allegiance to a state whose capital town is Jamestown , Virginia",
    "originStr": "its allegiance to a state whose capital town is Jamestown , Virginia"
   }
  ],
  "question": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NN office) (NN holder)) (VP (VBZ owes) (NP (PRP$ its) (NN allegiance)) (PP (IN to) (NP (DT a) (NN state)))))) (WHNP (WP$ whose) (NN capital) (NN town)) (SQ (VBZ is) (NP (NNP Jamestown) (, ,) (NNP Virginia))) (. ?)))",
  "entityNum": 1,
  "id": 945
 },
 {
  "taggedQuestion": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which professional fighter , who",
    "originStr": "Which professional fighter , who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also a politician and was elected to House of Representatives of the Philippines",
    "originStr": "is also a politician and was elected to House of Representatives of the Philippines"
   }
  ],
  "question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (JJ professional) (NN fighter)))) (, ,) (WHNP (WP who)) (SQ (VP (VP (VBZ is) (ADVP (RB also)) (NP (DT a) (NN politician))) (CC and) (VP (VBD was) (VP (VBN elected) (PP (IN to) (NP (NP (NNP House)) (PP (IN of) (NP (NP (NNPS Representatives)) (PP (IN of) (NP (DT the) (NNPS Philippines))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 946
 },
 {
  "taggedQuestion": "List the comic characters created by Joe Shuster ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List the comic characters #entity1",
    "originStr": "List the comic characters #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "created by Joe Shuster",
    "originStr": "created by Joe Shuster"
   }
  ],
  "question": "List the comic characters created by Joe Shuster",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (JJ comic) (NNS characters)) (VP (VBN created) (PP (IN by) (NP (NNP Joe) (NNP Shuster)))))) (. ?)))",
  "entityNum": 2,
  "id": 947
 },
 {
  "taggedQuestion": "What conventions are held in Rosemont, Illinois?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which kind of conventions #entity1",
    "originStr": "Which kind of conventions #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are held in Rosemont , Illinois",
    "originStr": "are held in Rosemont , Illinois"
   }
  ],
  "question": "Which kind of conventions are held in Rosemont, Illinois",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS conventions)) (VP (VBP are) (VP (VBN held) (PP (IN in) (NP (NNP Rosemont) (, ,) (NNP Illinois)))))) (. ?)))",
  "entityNum": 2,
  "id": 948
 },
 {
  "taggedQuestion": "What city is located on the mouth of Duwamish River?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What city is located on #entity1",
    "originStr": "What city is located on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the mouth of Duwamish River",
    "originStr": "the mouth of Duwamish River"
   }
  ],
  "question": "What city is located on the mouth of Duwamish River",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VBZ is) (VP (VBN located) (PP (IN on) (NP (NP (DT the) (NN mouth)) (PP (IN of) (NP (NNP Duwamish) (NNP River))))))) (. ?)))",
  "entityNum": 2,
  "id": 949
 },
 {
  "taggedQuestion": "Which governer of Winston Bryant is the president of Joseph Stiglitz ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which governor of Winston Bryant is",
    "originStr": "Which governor of Winston Bryant is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "the president of Joseph Stiglitz",
    "originStr": "the president of Joseph Stiglitz"
   }
  ],
  "question": "Which governor of Winston Bryant is the president of Joseph Stiglitz",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN governer) (PP (IN of) (NP (NNP Winston) (NNP Bryant))))) (SQ (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Joseph) (NNP Stiglitz))))) (. ?)))",
  "entityNum": 1,
  "id": 950
 },
 {
  "taggedQuestion": "How many people have led agencies in <e0>?",
  "entityMap": {
   "<e0>": "German occupied Europe"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "How many people have led #entity1",
    "originStr": "How many people have led #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "agencies in German occupied Europe",
    "originStr": "agencies in German occupied Europe"
   }
  ],
  "question": "How many people have led agencies in German occupied Europe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN led) (NP (NNS agencies)) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 951
 },
 {
  "taggedQuestion": "Where did the plays written by Robert Schenkkan take place?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Where did #entity1 take place",
    "originStr": "Where did #entity1 take place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the plays written by Robert Schenkkan",
    "originStr": "the plays written by Robert Schenkkan"
   }
  ],
  "question": "Where did the plays written by Robert Schenkkan take place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS plays)) (VP (VBN written) (PP (IN by) (NP (NNP Robert) (NNP Schenkkan))))) (VP (VB take) (NP (NN place)))) (. ?)))",
  "entityNum": 2,
  "id": 952
 },
 {
  "taggedQuestion": "Which president did the predecessor of <e0>?",
  "entityMap": {
   "<e0>": "Simon Ferro work"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Under which president did #entity1 work",
    "originStr": "Under which president did #entity1 work"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of Simon Ferro",
    "originStr": "the predecessor of Simon Ferro"
   }
  ],
  "question": "Under which president did the predecessor of Simon Ferro work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN president)) (SQ (VP (VBD did) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 953
 },
 {
  "taggedQuestion": "Name  some ww1 veterans.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name some ww1 veterans",
    "originStr": "Name some ww1 veterans"
   }
  ],
  "question": "Name some ww1 veterans",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT some) (NN ww1) (NNS veterans))) (. .)))",
  "entityNum": 1,
  "id": 954
 },
 {
  "taggedQuestion": "Who appointed both John Drayton and William Clark to their respective offices?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "appointed both John Drayton and William Clark to their respective offices",
    "originStr": "appointed both John Drayton and William Clark to their respective offices"
   }
  ],
  "question": "Who appointed both John Drayton and William Clark to their respective offices",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD appointed) (NP (CC both) (NP (NNP John) (NNP Drayton)) (CC and) (NP (NNP William) (NNP Clark))) (PP (IN to) (NP (PRP$ their) (JJ respective) (NNS offices))))) (. ?)))",
  "entityNum": 1,
  "id": 955
 },
 {
  "taggedQuestion": "Which operator of <e1> is also the  governing body of the <e0> ?",
  "entityMap": {
   "<e1>": "New Sanno Hotel",
   "<e0>": "Oahu Railway and Land Company"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which operator of New Sanno Hotel is",
    "originStr": "Which operator of New Sanno Hotel is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the governing body of the Oahu Railway and Land Company",
    "originStr": "also the governing body of the Oahu Railway and Land Company"
   }
  ],
  "question": "Which operator of New Sanno Hotel is also the governing body of the Oahu Railway and Land Company",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN operator) (PP (IN of) (NP (NN <e1>))))) (SQ (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 956
 },
 {
  "taggedQuestion": "Which predecessor of Alexander Downer was deputy to Neil Brown ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which predecessor of Alexander Downer was",
    "originStr": "Which predecessor of Alexander Downer was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "deputy to Neil Brown",
    "originStr": "deputy to Neil Brown"
   }
  ],
  "question": "Which predecessor of Alexander Downer was deputy to Neil Brown",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN predecessor) (PP (IN of) (NP (NNP Alexander) (NNP Downer))))) (SQ (VBD was) (NP (NP (NN deputy)) (PP (IN to) (NP (NNP Neil) (NNP Brown))))) (. ?)))",
  "entityNum": 1,
  "id": 957
 },
 {
  "taggedQuestion": "Which are the predecessor of Chevrolet Caprice?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which are the predecessor of Chevrolet",
    "originStr": "Which are the predecessor of Chevrolet"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Caprice",
    "originStr": "Caprice"
   }
  ],
  "question": "Which are the predecessor of Chevrolet Caprice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Chevrolet) (NNP Caprice))))) (. ?)))",
  "entityNum": 1,
  "id": 958
 },
 {
  "taggedQuestion": "Who wrote the album coming right before Dead Man's Chest's OST?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who wrote #entity1",
    "originStr": "Who wrote #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the album coming right before Dead Man's Chest's OST",
    "originStr": "the album coming right before Dead Man's Chest's OST"
   }
  ],
  "question": "Who wrote the album coming right before Dead Man's Chest's OST",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (DT the) (NN album)) (S (VP (VBG coming) (ADVP (RB right)) (PP (IN before) (NP (NP (NP (NNP Dead) (NNP Man) (POS 's)) (NN Chest) (POS 's)) (NN OST))))))) (. ?)))",
  "entityNum": 2,
  "id": 959
 },
 {
  "taggedQuestion": "What is the series of the book which is a subsequent work of <e0>: The Edge of Human ?",
  "entityMap": {
   "<e0>": "Blade Runner 2"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What is the series of #entity1",
    "originStr": "What is the series of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the book which is a subsequent work of Blade Runner 2 : The Edge of Human",
    "originStr": "the book which is a subsequent work of Blade Runner 2 : The Edge of Human"
   }
  ],
  "question": "What is the series of the book which is a subsequent work of Blade Runner 2: The Edge of Human",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (NP (DT the) (NN book)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (NP (DT a) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))) (: :) (NP (NP (DT The) (NNP Edge)) (PP (IN of) (NP (NNP Human)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 960
 },
 {
  "taggedQuestion": "How many cities's teams did David Bowens play?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "For how many cities ' teams #entity1",
    "originStr": "For how many cities ' teams #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "did David Bowens play",
    "originStr": "did David Bowens play"
   }
  ],
  "question": "For how many cities' teams did David Bowens play",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NNS cities) (POS 's)) (NNS teams)) (SQ (VBD did) (NP (NNP David) (NNP Bowens)) (VP (VB play))) (. ?)))",
  "entityNum": 2,
  "id": 961
 },
 {
  "taggedQuestion": "Is Anne Hidalgo the mayor of Paris?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Anne Hidalgo the mayor of Paris",
    "originStr": "Is Anne Hidalgo the mayor of Paris"
   }
  ],
  "question": "Is Anne Hidalgo the mayor of Paris",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Anne) (NNP Hidalgo)) (NP (NP (DT the) (NN mayor)) (PP (IN of) (NP (NNP Paris)))) (. ?)))",
  "entityNum": 1,
  "id": 962
 },
 {
  "taggedQuestion": "Which countries have models hanged themselves?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 models hanged themselves",
    "originStr": "#entity1 models hanged themselves"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "In which countries have",
    "originStr": "In which countries have"
   }
  ],
  "question": "In which countries have models hanged themselves",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBP have) (NP (NNS models)) (VP (VBN hanged) (NP (PRP themselves)))) (. ?)))",
  "entityNum": 2,
  "id": 963
 },
 {
  "taggedQuestion": "Is the Vadodara railway junction onwed by <e0>?",
  "entityMap": {
   "<e0>": "Indian Railway Ministry"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Vadodara railway junction owned by Indian Railway Ministry",
    "originStr": "Is the Vadodara railway junction owned by Indian Railway Ministry"
   }
  ],
  "question": "Is the Vadodara railway junction owned by Indian Railway Ministry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Vadodara) (NN railway) (NN junction)) (VP (VBN onwed) (PP (IN by) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 964
 },
 {
  "taggedQuestion": "What city gave birth to Mishal Raheja and also houses New India Assurance?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What city gave",
    "originStr": "What city gave"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "birth to Mishal Raheja and also houses New India Assurance",
    "originStr": "birth to Mishal Raheja and also houses New India Assurance"
   }
  ],
  "question": "What city gave birth to Mishal Raheja and also houses New India Assurance",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP Mishal) (NNP Raheja)))) (CC and) (ADVP (RB also)) (VP (VBZ houses) (NP (NNP New) (NNP India) (NNP Assurance))))) (. ?)))",
  "entityNum": 1,
  "id": 965
 },
 {
  "taggedQuestion": "Which TV show whose theme is composed by someone signed up with ATO records?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which TV show whose theme is composed by someone",
    "originStr": "Which TV show whose theme is composed by someone"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "signed up with ATO records",
    "originStr": "signed up with ATO records"
   }
  ],
  "question": "Which TV show whose theme is composed by someone signed up with ATO records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV)) (SQ (NP (NP (NN show)) (SBAR (WHNP (WP$ whose) (NML (NN theme))) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NN someone)))))))) (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NN ATO) (NNS records))))) (. ?)))",
  "entityNum": 1,
  "id": 966
 },
 {
  "taggedQuestion": "Which models were featured in <e0>?",
  "entityMap": {
   "<e0>": "Playboy Playmates 1954"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which models were",
    "originStr": "Which models were"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "featured in Playboy Playmates 1954",
    "originStr": "featured in Playboy Playmates 1954"
   }
  ],
  "question": "Which models were featured in Playboy Playmates 1954",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS models)) (VP (VBD were) (VP (VBN featured) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 967
 },
 {
  "taggedQuestion": "What currencies have been prevalent in the country whose national anthem is La Marseillaise?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What currencies have been prevalent #entity1",
    "originStr": "What currencies have been prevalent #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "in the country whose national anthem is La Marseillaise",
    "originStr": "in the country whose national anthem is La Marseillaise"
   }
  ],
  "question": "What currencies have been prevalent in the country whose national anthem is La Marseillaise",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT What)) (S (NP (NNS currencies)) (VP (VBP have) (VP (VBN been) (ADJP (JJ prevalent)) (PP (IN in) (NP (DT the) (NN country))))))) (WHNP (WP$ whose) (JJ national) (NN anthem)) (SQ (VBZ is) (NP (NNP La) (NNP Marseillaise))) (. ?)))",
  "entityNum": 2,
  "id": 968
 },
 {
  "taggedQuestion": "Who is the relative of Jim Farley (businessman) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the relative of Jim Farley (businessman)",
    "originStr": "Who is the relative of Jim Farley (businessman)"
   }
  ],
  "question": "Who is the relative of Jim Farley (businessman)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ relative)) (PP (IN of) (NP (NNP Jim) (NNP Farley) (PRN (-LRB- -LRB-) (NP (NN businessman)) (-RRB- -RRB-)))))) (. ?)))",
  "entityNum": 1,
  "id": 969
 },
 {
  "taggedQuestion": "Is Latin the official language of <e0>?",
  "entityMap": {
   "<e1>": "Latin official language",
   "<e0>": "Sovereign Military Order of Malta"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Latin the official language of Sovereign Military Order of Malta",
    "originStr": "Is Latin the official language of Sovereign Military Order of Malta"
   }
  ],
  "question": "Is Latin the official language of Sovereign Military Order of Malta",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Latin)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 970
 },
 {
  "taggedQuestion": "Where do the politicians, Blanche Bruce and <e0> work?",
  "entityMap": {
   "<e0>": "John Franklin Miller"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where do the politicians",
    "originStr": "Where do the politicians"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": ", Blanche Bruce and John Franklin Miller work",
    "originStr": ", Blanche Bruce and John Franklin Miller work"
   }
  ],
  "question": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (DT the) (NNS politicians)) (, ,) (NP (NNP Blanche) (NNP Bruce)) (CC and) (NP (ADD <e0>))) (VP (VB work))) (. ?)))",
  "entityNum": 1,
  "id": 971
 },
 {
  "taggedQuestion": "Name an American football player whose debuted in Chicago Bears and former team is <e0>",
  "entityMap": {
   "<e0>": "1998 Baltimore Ravens season."
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name an American football player whose debuted in Chicago Bears and",
    "originStr": "Name an American football player whose debuted in Chicago Bears and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "former team is 1998 Baltimore Ravens season",
    "originStr": "former team is 1998 Baltimore Ravens season"
   }
  ],
  "question": "Name an American football player whose debuted in Chicago Bears and former team is 1998 Baltimore Ravens season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT an) (JJ American) (NN football) (NN player)) (SBAR (WHNP (WP$ whose) (NML (S (VP (VBN debuted) (PP (IN in) (NP (NP (NNP Chicago) (NNPS Bears)) (CC and) (NP (JJ former))))))) (NN team)) (S (VP (VBZ is) (NP (ADD <e0>)))))))))",
  "entityNum": 1,
  "id": 972
 },
 {
  "taggedQuestion": "Name a  river with source country as Zambia and source location as Ikelenge  District.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name a river with source country as Zambia and",
    "originStr": "Name a river with source country as Zambia and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "source location as Ikelenge District",
    "originStr": "source location as Ikelenge District"
   }
  ],
  "question": "Name a river with source country as Zambia and source location as Ikelenge District",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT a) (NN river)) (PP (IN with) (NP (NP (NP (NN source) (NN country)) (PP (IN as) (NP (NNP Zambia)))) (CC and) (NP (NP (NN source) (NN location)) (PP (IN as) (NP (NNP Ikelenge) (NNP District))))))) (. .)))",
  "entityNum": 1,
  "id": 973
 },
 {
  "taggedQuestion": "Does Ford own the <e0>?",
  "entityMap": {
   "<e0>": "Ford Kansas Assembly plant"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Ford own the Ford Kansas Assembly plant",
    "originStr": "Does Ford own the Ford Kansas Assembly plant"
   }
  ],
  "question": "Does Ford own the Ford Kansas Assembly plant",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Ford)) (VP (VB own) (NP (DT the) (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 974
 },
 {
  "taggedQuestion": "Which fields of the Paul Demiville is also the faith of <e0> ?",
  "entityMap": {
   "<e0>": "Koay Teng Hai"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which fields of the Paul Demiville is",
    "originStr": "Which fields of the Paul Demiville is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also the faith of Koay Teng Hai",
    "originStr": "also the faith of Koay Teng Hai"
   }
  ],
  "question": "Which fields of the Paul Demiville is also the faith of Koay Teng Hai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NNS fields)) (PP (IN of) (NP (DT the) (NNP Paul) (NNP Demiville))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 975
 },
 {
  "taggedQuestion": "Name the institute of Alton Ochsner .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the institute of Alton Ochsner",
    "originStr": "Name the institute of Alton Ochsner"
   }
  ],
  "question": "Name the institute of Alton Ochsner",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN institute)) (PP (IN of) (NP (NNP Alton) (NNP Ochsner))))) (. .)))",
  "entityNum": 1,
  "id": 976
 },
 {
  "taggedQuestion": "What movies have been written by authors of Monty Python ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "What movies have been written #entity1",
    "originStr": "What movies have been written #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "by authors of Monty Python",
    "originStr": "by authors of Monty Python"
   }
  ],
  "question": "What movies have been written by authors of Monty Python",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN written) (PP (IN by) (NP (NP (NNS authors)) (PP (IN of) (NP (NNP Monty) (NNP Python))))))))) (. ?)))",
  "entityNum": 2,
  "id": 977
 },
 {
  "taggedQuestion": "Who was the cover artist of The Adventure of Tom Sawyer also wrote <e0> ?",
  "entityMap": {
   "<e0>": "mark Twain Tonight"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the cover artist of The",
    "originStr": "Who was the cover artist of The"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Adventure of Tom Sawyer also wrote mark Twain Tonight",
    "originStr": "Adventure of Tom Sawyer also wrote mark Twain Tonight"
   }
  ],
  "question": "Who was the cover artist of The Adventure of Tom Sawyer also wrote mark Twain Tonight",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN cover)) (SBAR (S (NP (NP (NN artist)) (PP (IN of) (NP (NP (DT The) (NN Adventure)) (PP (IN of) (NP (NNP Tom) (NNP Sawyer)))))) (ADVP (RB also)) (VP (VBD wrote) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 978
 },
 {
  "taggedQuestion": "Name the scientist whose academic advisor is <e0> and supervisor is Georg Meissner.",
  "entityMap": {
   "<e0>": "Karl Ewald Hasse"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the scientist whose academic advisor is Karl Ewald Hasse and",
    "originStr": "Name the scientist whose academic advisor is Karl Ewald Hasse and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "supervisor is Georg Meissner",
    "originStr": "supervisor is Georg Meissner"
   }
  ],
  "question": "Name the scientist whose academic advisor is Karl Ewald Hasse and supervisor is Georg Meissner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ is) (NP (NP (ADD <e0>)) (CC and) (NP (NN supervisor))))))))) (VP (VBZ is) (NP (NNP Georg) (NNP Meissner))) (. .)))",
  "entityNum": 1,
  "id": 979
 },
 {
  "taggedQuestion": "Where do <e0> live?",
  "entityMap": {
   "<e0>": "current famous NatGeo photographers"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where do current",
    "originStr": "Where do current"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "famous NatGeo photographers live",
    "originStr": "famous NatGeo photographers live"
   }
  ],
  "question": "Where do current famous NatGeo photographers live",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (ADD <e0>)) (S (VP (VB live))))) (. ?)))",
  "entityNum": 1,
  "id": 980
 },
 {
  "taggedQuestion": "Georg Meissner was doctoral supervisor of which scientist ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Georg Meissner was doctoral supervisor of which",
    "originStr": "Georg Meissner was doctoral supervisor of which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "scientist",
    "originStr": "scientist"
   }
  ],
  "question": "Georg Meissner was doctoral supervisor of which scientist",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NNP Georg) (NNP Meissner)) (VP (VBD was) (NP (NP (JJ doctoral) (NN supervisor)) (PP (IN of) (NP (WDT which) (NN scientist))))) (. ?)))",
  "entityNum": 1,
  "id": 981
 },
 {
  "taggedQuestion": "Did Stanlee write the <e0>?",
  "entityMap": {
   "<e0>": "Tales of Suspense"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Stanlee write the Tales of Suspense",
    "originStr": "Did Stanlee write the Tales of Suspense"
   }
  ],
  "question": "Did Stanlee write the Tales of Suspense",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Stanlee)) (VP (VB write) (NP (DT the) (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 982
 },
 {
  "taggedQuestion": "Name the <e0> of the Trishna (yacht) and INS Viraat (R22).",
  "entityMap": {
   "<e0>": "common home port"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the common home port of the Trishna -LRB- yacht -RRB- and",
    "originStr": "Name the common home port of the Trishna -LRB- yacht -RRB- and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "INS Viraat -LRB- R22 -RRB-",
    "originStr": "INS Viraat -LRB- R22 -RRB-"
   }
  ],
  "question": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NP (NP (DT the) (NNP Trishna)) (-LRB- -LRB-) (NP (NN yacht)) (-RRB- -RRB-)) (CC and) (NP (NNP INS) (NNP Viraat) (PRN (-LRB- -LRB-) (NP (NN R22)) (-RRB- -RRB-))))))) (. .)))",
  "entityNum": 1,
  "id": 983
 },
 {
  "taggedQuestion": "Does the US navy have the structure of command of us department of defence?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does the us"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "does the US navy have the structure of command of us department of defence",
    "originStr": "does the US navy have the structure of command of us department of defence"
   }
  ],
  "question": "does the US navy have the structure of command of us department of defence",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (DT the) (NNP US))) (S (NP (NN navy)) (VP (VBP have) (NP (NP (DT the) (NN structure)) (PP (IN of) (NP (NP (NN command)) (PP (IN of) (NP (NP (PRP us) (NN department)) (PP (IN of) (NP (NN defence)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 984
 },
 {
  "taggedQuestion": "Name books with publisher as Francisco de Robles and writer as <e0> .",
  "entityMap": {
   "<e1>": "Francisco de Robles writer",
   "<e0>": "Miguel de Cervantes"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name books with publisher as Francisco de Robles and",
    "originStr": "Name books with publisher as Francisco de Robles and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "writer as Miguel de Cervantes",
    "originStr": "writer as Miguel de Cervantes"
   }
  ],
  "question": "Name books with publisher as Francisco de Robles and writer as Miguel de Cervantes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NNS books)) (PP (IN with) (NP (NP (NP (NN publisher)) (PP (IN as) (NP (NNP Francisco) (FW de) (NNP Robles)))) (CC and) (NP (NP (NN writer)) (PP (IN as) (NP (ADD <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 985
 },
 {
  "taggedQuestion": "Who owns the schools which have a penguin as its mascot?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Who owns #entity1",
    "originStr": "Who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the schools which have a penguin as its mascot",
    "originStr": "the schools which have a penguin as its mascot"
   }
  ],
  "question": "Who owns the schools which have a penguin as its mascot",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NNS schools)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN penguin)) (PP (IN as) (NP (PRP$ its) (NN mascot)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 986
 },
 {
  "taggedQuestion": "River which flows into the <e0> pass through which states?",
  "entityMap": {
   "<e0>": "eugene mahoney state park"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 pass through which states",
    "originStr": "#entity1 pass through which states"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "River which flows into the eugene mahoney state park",
    "originStr": "River which flows into the eugene mahoney state park"
   }
  ],
  "question": "River which flows into the eugene mahoney state park pass through which states",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (NP (NP (NN River)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN into) (NP (DT the) (NN <e0>))))))) (VP (VB pass) (FRAG (WHPP (IN through) (WHNP (WDT which) (NNS states))))) (. ?)))",
  "entityNum": 2,
  "id": 987
 },
 {
  "taggedQuestion": "What nation is Hornito located in, where Jamie Bateman Cayn died too?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What nation is Hornito",
    "originStr": "What nation is Hornito"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "located in , where Jamie Bateman Cayn died too",
    "originStr": "located in , where Jamie Bateman Cayn died too"
   }
  ],
  "question": "What nation is Hornito located in, where Jamie Bateman Cayn died too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN nation)) (SQ (VBZ is) (NP (NNP Hornito)) (VP (VBN located) (PP (IN in)) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jamie) (NNP Bateman) (NNP Cayn)) (VP (VBD died) (ADVP (RB too))))))) (. ?)))",
  "entityNum": 1,
  "id": 988
 },
 {
  "taggedQuestion": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which TV show had",
    "originStr": "Which TV show had"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "a judge named Harry Connick , Jr. and was presented by Ryan Seacrest",
    "originStr": "a judge named Harry Connick , Jr. and was presented by Ryan Seacrest"
   }
  ],
  "question": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (SQ (VBD had) (NP (DT a) (NN judge)) (VP (VP (VBN named) (NP (NP (NNP Harry) (NNP Connick)) (, ,) (NP (NNP Jr.)))) (CC and) (VP (VBD was) (VP (VBN presented) (PP (IN by) (NP (NNP Ryan) (NNP Seacrest))))))) (. ?)))",
  "entityNum": 1,
  "id": 989
 },
 {
  "taggedQuestion": "Name the resting place of <e0> .",
  "entityMap": {
   "<e0>": "Fazlur Rahman Khan"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the resting place of Fazlur Rahman Khan",
    "originStr": "Name the resting place of Fazlur Rahman Khan"
   }
  ],
  "question": "Name the resting place of Fazlur Rahman Khan",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 990
 },
 {
  "taggedQuestion": "Which arena of <e0> is death location of Tigran Petrosian >?",
  "entityMap": {
   "<e0>": "WPC Dynamo Moscow"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which arena of WPC Dynamo Moscow is",
    "originStr": "Which arena of WPC Dynamo Moscow is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "death location of Tigran Petrosian",
    "originStr": "death location of Tigran Petrosian"
   }
  ],
  "question": "Which arena of WPC Dynamo Moscow is death location of Tigran Petrosian",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN arena) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (NN death) (NN location)) (PP (IN of) (NP (NNP Tigran) (NNP Petrosian) (SYM >))))) (. ?)))",
  "entityNum": 1,
  "id": 991
 },
 {
  "taggedQuestion": "What cities are close by LoDaisKa ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what cities are close by LoDaisKa",
    "originStr": "what cities are close by LoDaisKa"
   }
  ],
  "question": "what cities are close by LoDaisKa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (ADJP (JJ close) (PP (IN by) (NP (NNP LoDaisKa)))))) (. ?)))",
  "entityNum": 1,
  "id": 992
 },
 {
  "taggedQuestion": "Which wars were fought when the commanders involved served under PM Choi Tu Son?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "Which wars were fought when #entity1",
    "originStr": "Which wars were fought when #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the commanders involved served under PM Choi Tu Son",
    "originStr": "the commanders involved served under PM Choi Tu Son"
   }
  ],
  "question": "Which wars were fought when the commanders involved served under PM Choi Tu Son",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS wars)) (VP (VBD were) (VP (VBN fought) (SBAR (WHADVP (WRB when)) (S (NP (NP (DT the) (NNS commanders)) (VP (VBN involved))) (VP (VBD served) (PP (IN under) (NP (NN PM) (NNP Choi) (NNP Tu) (NNP Son))))))))) (. ?)))",
  "entityNum": 2,
  "id": 993
 },
 {
  "taggedQuestion": "Who is the meaning of Isa  ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the meaning of Isa",
    "originStr": "Who is the meaning of Isa"
   }
  ],
  "question": "Who is the meaning of Isa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (NNP Isa))))) (. ?)))",
  "entityNum": 1,
  "id": 994
 },
 {
  "taggedQuestion": "Who is  venerated in  Judaism and Islam?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who",
    "originStr": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is venerated in Judaism and Islam",
    "originStr": "is venerated in Judaism and Islam"
   }
  ],
  "question": "Who is venerated in Judaism and Islam",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN venerated) (PP (IN in) (NP (NNP Judaism) (CC and) (NNP Islam))))) (. ?)))",
  "entityNum": 1,
  "id": 995
 },
 {
  "taggedQuestion": "Count the number teams which have  former ice hockey players which also included <e0> .",
  "entityMap": {
   "<e0>": "American Hockey League"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the number teams which have former ice hockey players which",
    "originStr": "Count the number teams which have former ice hockey players which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also included American Hockey League",
    "originStr": "also included American Hockey League"
   }
  ],
  "question": "Count the number teams which have former ice hockey players which also included American Hockey League",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number) (NNS teams)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (JJ former) (NML (NN ice) (NN hockey)) (NNS players)) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBD included) (NP (ADD <e0>))))))))))) (. .)))",
  "entityNum": 1,
  "id": 996
 },
 {
  "taggedQuestion": "Name the common editor of Easy Street (film) and Work (film).",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the common editor of Easy Street -LRB- film -RRB- and Work",
    "originStr": "Name the common editor of Easy Street -LRB- film -RRB- and Work"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "-LRB- film -RRB-",
    "originStr": "-LRB- film -RRB-"
   }
  ],
  "question": "Name the common editor of Easy Street (film) and Work (film)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN editor)) (PP (IN of) (NP (NP (NNP Easy) (NNP Street) (PRN (-LRB- -LRB-) (NP (NN film)) (-RRB- -RRB-))) (CC and) (NP (NN Work) (PRN (-LRB- -LRB-) (NP (NN film)) (-RRB- -RRB-))))))) (. .)))",
  "entityNum": 1,
  "id": 997
 },
 {
  "taggedQuestion": "List all the schools of the rugby player whose went to school named Pietermaritzburg ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "List all the schools of #entity1 Pietermaritzburg",
    "originStr": "List all the schools of #entity1 Pietermaritzburg"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rugby player whose went to school named",
    "originStr": "the rugby player whose went to school named"
   }
  ],
  "question": "List all the schools of the rugby player whose went to school named Pietermaritzburg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (NNS schools)) (PP (IN of) (NP (DT the) (JJ rugby) (NN player)))) (SBAR (WHNP (WP$ whose)) (S (VP (VBD went) (PP (IN to) (NP (NP (NN school)) (VP (VBN named) (NP (NNP Pietermaritzburg))))))))) (. ?)))",
  "entityNum": 2,
  "id": 998
 },
 {
  "taggedQuestion": "Name the office of Richard Coke .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office of Richard Coke",
    "originStr": "Name the office of Richard Coke"
   }
  ],
  "question": "Name the office of Richard Coke",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NNP Richard) (NNP Coke))))) (. .)))",
  "entityNum": 1,
  "id": 999
 }
]