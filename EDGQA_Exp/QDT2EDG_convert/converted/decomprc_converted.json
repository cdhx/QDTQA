[
 {
  "taggedQuestion": "Which architect of <e0> was also tenant of <e1> ??",
  "entityMap": {
   "<e1>": "New Sanno hotel",
   "<e0>": "Marine Corps Air Station Kaneohe Bay"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which architect of marine corps air station kaneohe bay",
    "originStr": "which architect of marine corps air station kaneohe bay"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was also tenant of new sanno hotel /'",
    "originStr": "was also tenant of new sanno hotel /'"
   }
  ],
  "question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN architect) (PP (IN of) (NP (ADD <e0>))))) (SQ (VBD was) (NP (ADVP (RB also)) (NP (NN tenant)) (PP (IN of) (NP (ADD <e1>))))) (. ??)))",
  "entityNum": 1,
  "id": 0
 },
 {
  "taggedQuestion": "Which sects people are part of <e0> which fall under the International Muslim Brotherhood?",
  "entityMap": {
   "<e0>": "local political parties"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which sects people are part of #entity1",
    "originStr": "which sects people are part of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "local political parties which fall under the international muslim brotherhood",
    "originStr": "local political parties which fall under the international muslim brotherhood"
   }
  ],
  "question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NNS sects)) (NP (NNS people)))) (SQ (VBP are) (NP (NP (NN part)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (DT the) (NNP International) (NNP Muslim) (NNP Brotherhood)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 1
 },
 {
  "taggedQuestion": "List common systems are developed by of the Google Videos and written by of the <e0> ?",
  "entityMap": {
   "<e0>": "Google Web Toolkit"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list common systems are developed by of the google videos",
    "originStr": "list common systems are developed by of the google videos"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and written by of the google web toolkit",
    "originStr": "and written by of the google web toolkit"
   }
  ],
  "question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
  "syntaxTreeText": "(ROOT (S (NP (NN List) (JJ common) (NNS systems)) (VP (VBP are) (VP (VP (VBN developed) (PP (IN by) (PP (IN of) (NP (DT the) (NNP Google) (NNS Videos))))) (CC and) (VP (VBN written) (PP (IN by) (PP (IN of) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 2
 },
 {
  "taggedQuestion": "Which games are Sam Loyd and Eric Schiller both famous?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "for which games",
    "originStr": "for which games"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are sam loyd and eric schiller both famous",
    "originStr": "are sam loyd and eric schiller both famous"
   }
  ],
  "question": "For which games are Sam Loyd and Eric Schiller both famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS games)) (SQ (VBP are) (NP (NP (NNP Sam) (NNP Loyd)) (CC and) (NP (NNP Eric) (NNP Schiller))) (ADJP (DT both) (JJ famous))) (. ?)))",
  "entityNum": 1,
  "id": 3
 },
 {
  "taggedQuestion": "Is <e0> in the pizza industry?",
  "entityMap": {
   "<e0>": "Peter Piper Pizza"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Peter Piper Pizza in the pizza industry",
    "originStr": "Is Peter Piper Pizza in the pizza industry"
   }
  ],
  "question": "Is Peter Piper Pizza in the pizza industry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (IN in) (NP (DT the) (NN pizza)))) (NP (NN industry)) (. ?)))",
  "entityNum": 1,
  "id": 4
 },
 {
  "taggedQuestion": "Name the artist who made Dream Dancing and is often associated with Joe Pass.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the artist who made dream dancing",
    "originStr": "name the artist who made dream dancing"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and is often associated with joe pass",
    "originStr": "and is often associated with joe pass"
   }
  ],
  "question": "Name the artist who made Dream Dancing and is often associated with Joe Pass",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joe_Pass> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Dream_Dancing_(album)> <http://dbpedia.org/property/artist> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD made) (NP (NNP Dream) (NNP Dancing))) (CC and) (VP (VBZ is) (ADVP (RB often)) (VP (VBN associated) (PP (IN with) (NP (NNP Joe) (NNP Pass)))))))))) (. .)))",
  "entityNum": 1,
  "id": 5
 },
 {
  "taggedQuestion": "Who is the office holder with deputies as Neil Brown and Andrew Peacock?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the office holder",
    "originStr": "who is the office holder"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with deputies as neil brown and andrew peacock",
    "originStr": "with deputies as neil brown and andrew peacock"
   }
  ],
  "question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NNS deputies)) (PP (IN as) (NP (NP (NNP Neil) (NNP Brown)) (CC and) (NP (NNP Andrew) (NN Peacock)))))))) (. ?)))",
  "entityNum": 1,
  "id": 6
 },
 {
  "taggedQuestion": "Where did these popular aeroplanes - <e1> and Start+Flug H 101 originate?",
  "entityMap": {
   "<e1>": "Focke Wulf 260",
   "<e0>": "+ Flug H 101"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where did these popular aeroplanes - focke wulf 260 and start+flug h 101",
    "originStr": "where did these popular aeroplanes - focke wulf 260 and start+flug h 101"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "originate",
    "originStr": "originate"
   }
  ],
  "question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT these) (JJ popular) (NNS aeroplanes) (HYPH -) (NN <e1>)) (CC and) (NP (NML (NN Start) (SYM +) (NN Flug)) (NN H) (CD 101))) (VP (VB originate))) (. ?)))",
  "entityNum": 1,
  "id": 7
 },
 {
  "taggedQuestion": "Which <e0> 's producer is <e1> and written by Erik Jendresen?",
  "entityMap": {
   "<e1>": "Stephen E. Ambrose",
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which television show's producer is stephen e. ambrose",
    "originStr": "which television show's producer is stephen e. ambrose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and written by erik jendresen",
    "originStr": "and written by erik jendresen"
   }
  ],
  "question": "Which television show's producer is Stephen E. Ambrose and written by Erik Jendresen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NN <e0>) (POS 's)) (NN producer)) (VP (VP (VBZ is) (NP (ADD <e1>))) (CC and) (VP (VBN written) (PP (IN by) (NP (NNP Erik) (NNP Jendresen)))))) (. ?)))",
  "entityNum": 1,
  "id": 8
 },
 {
  "taggedQuestion": "Who created the <e0> and also the <e1> ?",
  "entityMap": {
   "<e1>": "L'Enfant a la tasse",
   "<e0>": "Women in the Garden"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who created the women in the garden",
    "originStr": "who created the women in the garden"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and also the l'enfant a la tasse",
    "originStr": "and also the l'enfant a la tasse"
   }
  ],
  "question": "Who created the Women in the Garden and also the L'Enfant a la tasse",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD created) (NP (NP (DT the) (NN <e0>)) (CC and) (ADVP (RB also)) (NP (DT the) (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 9
 },
 {
  "taggedQuestion": "Which famous horserace has seen both Fergie sutherland and the illustrious <e0>?",
  "entityMap": {
   "<e0>": "War of Attrition"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which famous horserace",
    "originStr": "which famous horserace"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has seen both fergie sutherland and the illustrious war of attrition",
    "originStr": "has seen both fergie sutherland and the illustrious war of attrition"
   }
  ],
  "question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/War_Of_Attrition_(horse)> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (JJ famous) (NN horserace))) (SQ (VP (VBZ has) (VP (VBN seen) (NP (NP (DT both) (NNP Fergie) (NN sutherland)) (CC and) (NP (DT the) (ADJP (JJ illustrious)) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 10
 },
 {
  "taggedQuestion": "Tell me the name of the <e0>'s TV show whose Artist is Christopher Franke .",
  "entityMap": {
   "<e0>": "Prime Time Entertainment Network"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "tell me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "tell me the name of the prime time entertainment network's tv show",
    "originStr": "tell me the name of the prime time entertainment network's tv show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose artist is christopher franke",
    "originStr": "whose artist is christopher franke"
   }
  ],
  "question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Tell) (NP (PRP me)) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (NP (DT the) (NN <e0>) (POS 's)) (NN TV) (NN show)) (SBAR (WHNP (WP$ whose) (NN Artist)) (S (VP (VBZ is) (NP (NNP Christopher) (NNP Franke))))))))) (. .)))",
  "entityNum": 1,
  "id": 11
 },
 {
  "taggedQuestion": "How many other battles have the military person fought whose one of the battles is <e0> ?",
  "entityMap": {
   "<e0>": "World War II"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many other battles have the military person fought #entity1",
    "originStr": "how many other battles have the military person fought #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose one of the battles is world war ii",
    "originStr": "whose one of the battles is world war ii"
   }
  ],
  "question": "How many other battles have the military person fought whose one of the battles is World War II",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> . ?x <http://dbpedia.org/property/battles> ?uri }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ other) (NNS battles)) (VP (VBP have) (NP (NP (DT the) (JJ military) (NN person)) (SBAR (S (VP (VBD fought) (SBAR (WHNP (WP$ whose)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS battles)))) (VP (VBZ is) (NP (ADD <e0>))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 12
 },
 {
  "taggedQuestion": "Whose network's parent organisation is Comcast?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose network's #entity1",
    "originStr": "whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "parent organisation is comcast",
    "originStr": "parent organisation is comcast"
   }
  ],
  "question": "Whose network's parent organisation is Comcast",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose) (NML (NML (NN network) (POS 's)) (NN parent))) (NN organisation)) (SQ (VBZ is) (NP (NNP Comcast))) (. ?)))",
  "entityNum": 2,
  "id": 13
 },
 {
  "taggedQuestion": "Is <e0> buried in Colorado?",
  "entityMap": {
   "<e0>": "William H Blanchard"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is William H Blanchard buried in Colorado",
    "originStr": "Is William H Blanchard buried in Colorado"
   }
  ],
  "question": "Is William H Blanchard buried in Colorado",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
  "entityNum": 1,
  "id": 14
 },
 {
  "taggedQuestion": "Which cport of <e0> is also the genere of Battle chess ?",
  "entityMap": {
   "<e0>": "Vishwajyot High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which sport of vishwajyot high school",
    "originStr": "which sport of vishwajyot high school"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the genre of battle chess",
    "originStr": "is also the genre of battle chess"
   }
  ],
  "question": "Which sport of Vishwajyot High School is also the genre of Battle chess",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN cport) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN genere)) (PP (IN of) (NP (NNP Battle) (NN chess))))) (. ?)))",
  "entityNum": 1,
  "id": 15
 },
 {
  "taggedQuestion": "Which state is the Channel district?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which state is #entity1",
    "originStr": "in which state is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the channel district",
    "originStr": "the channel district"
   }
  ],
  "question": "In which state is the Channel district",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Channel_District> <http://dbpedia.org/ontology/state> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (DT the) (NNP Channel) (NN district))) (. ?)))",
  "entityNum": 2,
  "id": 16
 },
 {
  "taggedQuestion": "Who was in the missions of Apollo 11 and Gemini 8?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was in the missions of apollo 11 and gemini",
    "originStr": "who was in the missions of apollo 11 and gemini"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "8",
    "originStr": "8"
   }
  ],
  "question": "Who was in the missions of Apollo 11 and Gemini 8",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (DT the) (NNS missions)) (PP (IN of) (NP (NP (NNP Apollo) (CD 11)) (CC and) (NP (NNP Gemini) (CD 8)))))))) (. ?)))",
  "entityNum": 1,
  "id": 17
 },
 {
  "taggedQuestion": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of other tenant of #entity1",
    "originStr": "what is the total number of other tenant of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadia whose one of the tenant is raptors 905",
    "originStr": "the stadia whose one of the tenant is raptors 905"
   }
  ],
  "question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN tenant)) (PP (IN of) (NP (NP (DT the) (NN stadia)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN tenant)))) (S (VP (VBZ is) (NP (NNPS Raptors))))))) (NP-TMP (CD 905)))))) (. ?)))",
  "entityNum": 2,
  "id": 18
 },
 {
  "taggedQuestion": "Where can one find the Dzogchen Ponolop Rinpoche?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where can one find #entity1",
    "originStr": "where can one find #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the dzogchen ponolop rinpoche",
    "originStr": "the dzogchen ponolop rinpoche"
   }
  ],
  "question": "Where can one find the Dzogchen Ponolop Rinpoche",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (DT the) (NNP Dzogchen) (NNP Ponolop) (NNP Rinpoche)))) (. ?)))",
  "entityNum": 2,
  "id": 19
 },
 {
  "taggedQuestion": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the stockholder of #entity1",
    "originStr": "who is the stockholder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the road tunnels operated by the massachusetts department of transportation",
    "originStr": "the road tunnels operated by the massachusetts department of transportation"
   }
  ],
  "question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN stockholder)) (PP (IN of) (NP (DT the) (NN road) (NNS tunnels)))) (VP (VBN operated) (PP (IN by) (NP (NP (DT the) (NNP Massachusetts) (NNP Department)) (PP (IN of) (NP (NNP Transportation))))))) (. ?)))",
  "entityNum": 2,
  "id": 20
 },
 {
  "taggedQuestion": "What are the awards won by the film director of Saraband ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the awards won by #entity1",
    "originStr": "what are the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film director of saraband",
    "originStr": "the film director of saraband"
   }
  ],
  "question": "What are the awards won by the film director of Saraband",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Saraband))))))) (. ?)))",
  "entityNum": 2,
  "id": 21
 },
 {
  "taggedQuestion": "What is the almamater of the president whose vice president was <e0>?",
  "entityMap": {
   "<e0>": "Enrique Jos Varona"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the almamater of #entity1",
    "originStr": "what is the almamater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president whose vice president was enrique jos varona",
    "originStr": "the president whose vice president was enrique jos varona"
   }
  ],
  "question": "What is the almamater of the president whose vice president was Enrique Jos Varona",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN almamater)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NML (NN vice)) (NN president)) (S (VP (VBD was) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 22
 },
 {
  "taggedQuestion": "What is the route end of <e0> ?",
  "entityMap": {
   "<e0>": "Birmingham and Oxford Junction Railway"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the route",
    "originStr": "what is the route"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "end of birmingham and oxford junction railway",
    "originStr": "end of birmingham and oxford junction railway"
   }
  ],
  "question": "What is the route end of Birmingham and Oxford Junction Railway",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 23
 },
 {
  "taggedQuestion": "Where did the <e0> originate?",
  "entityMap": {
   "<e0>": "Vitis Vinifera grapes"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did the Vitis Vinifera grapes originate",
    "originStr": "Where did the Vitis Vinifera grapes originate"
   }
  ],
  "question": "Where did the Vitis Vinifera grapes originate",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN <e0>)) (VP (VB originate))) (. ?)))",
  "entityNum": 1,
  "id": 24
 },
 {
  "taggedQuestion": "How many people are there whose children died in Indiana?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many people are there whose children #entity1",
    "originStr": "how many people are there whose children #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "died in indiana",
    "originStr": "died in indiana"
   }
  ],
  "question": "How many people are there whose children died in Indiana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VBP are) (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBD died) (PP (IN in) (NP (NNP Indiana))))))) (. ?)))",
  "entityNum": 2,
  "id": 25
 },
 {
  "taggedQuestion": "What is the military branch of the <e0> which is also the branch of <e1> ?",
  "entityMap": {
   "<e1>": "Pierre R. Graham",
   "<e0>": "William French Smith"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the military branch of the william french smith",
    "originStr": "what is the military branch of the william french smith"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the branch of pierre r. graham",
    "originStr": "which is also the branch of pierre r. graham"
   }
  ],
  "question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NN <e1>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 26
 },
 {
  "taggedQuestion": "What is the river whose source is Lake Ontario?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the river",
    "originStr": "what is the river"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose source is lake ontario",
    "originStr": "whose source is lake ontario"
   }
  ],
  "question": "What is the river whose source is Lake Ontario",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Lake_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (NP (NNP Lake) (NNP Ontario))))))) (. ?)))",
  "entityNum": 1,
  "id": 27
 },
 {
  "taggedQuestion": "Which location city of the Denver Broncos is the place of birth of Steven Clark Cunningham ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which location city of the denver broncos",
    "originStr": "which location city of the denver broncos"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the place of birth of steven clark cunningham",
    "originStr": "is the place of birth of steven clark cunningham"
   }
  ],
  "question": "Which location city of the Denver Broncos is the place of birth of Steven Clark Cunningham",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN location) (NN city)) (PP (IN of) (NP (DT the) (NNP Denver) (NNPS Broncos)))) (SQ (VBZ is) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Steven) (NNP Clark) (NNP Cunningham))))))) (. ?)))",
  "entityNum": 1,
  "id": 28
 },
 {
  "taggedQuestion": "What is the religion of the person who founded the Emel magazine?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the religion of #entity1",
    "originStr": "what is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who founded the emel magazine",
    "originStr": "the person who founded the emel magazine"
   }
  ],
  "question": "What is the religion of the person who founded the Emel magazine",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD founded) (NP (DT the) (NNP Emel) (NN magazine))))))))) (. ?)))",
  "entityNum": 2,
  "id": 29
 },
 {
  "taggedQuestion": "Give the name of the  managers of <e0> and <e1>",
  "entityMap": {
   "<e1>": "England national under-21 football team.",
   "<e0>": "England national under-20 football team"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give the name of the managers of england national under-20 football team and england national under-21 football",
    "originStr": "give the name of the managers of england national under-20 football team and england national under-21 football"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "team",
    "originStr": "team"
   }
  ],
  "question": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }",
  "syntaxTreeText": "(ROOT (FRAG (S (VP (VB Give) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS managers)) (PP (IN of))))))) (NP (ADD <e0>) (CC and) (ADD <e1>))))",
  "entityNum": 1,
  "id": 30
 },
 {
  "taggedQuestion": "How many cities are around the sea in which the the <e0> meets?",
  "entityMap": {
   "<e0>": "fig tree bay"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many cities are around #entity1",
    "originStr": "how many cities are around #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sea in which the fig tree bay meets",
    "originStr": "the sea in which the fig tree bay meets"
   }
  ],
  "question": "How many cities are around the sea in which the fig tree bay meets",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fig_Tree_Bay> <http://dbpedia.org/ontology/inflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (PP (IN in) (SBAR (WHNP (WDT which) (DT the)) (S (NP (DT the) (NN <e0>)) (VP (VBZ meets))))))))) (. ?)))",
  "entityNum": 2,
  "id": 31
 },
 {
  "taggedQuestion": "Is <e0> a part of the bahamas achipelago?",
  "entityMap": {
   "<e0>": "blue lagoon island"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "is blue lagoon island a part of the bahamas archipelago",
    "originStr": "is blue lagoon island a part of the bahamas archipelago"
   }
  ],
  "question": "is blue lagoon island a part of the bahamas archipelago",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (DT the) (NNS bahamas))))) (NP (NN achipelago)) (. ?)))",
  "entityNum": 1,
  "id": 32
 },
 {
  "taggedQuestion": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movies distributed by rko pictures",
    "originStr": "name the movies distributed by rko pictures"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has music composer as bernard herrmann",
    "originStr": "and has music composer as bernard herrmann"
   }
  ],
  "question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS movies)) (VP (VP (VBN distributed) (PP (IN by) (NP (NN RKO) (NNS Pictures)))) (CC and) (VP (VBZ has) (NP (NP (NN music) (NN composer)) (PP (IN as) (NP (NNP Bernard) (NNP Herrmann)))))))) (. .)))",
  "entityNum": 1,
  "id": 33
 },
 {
  "taggedQuestion": "Did the New Way party merge in the One Israel party?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did the New Way party merge in the One Israel party",
    "originStr": "Did the New Way party merge in the One Israel party"
   }
  ],
  "question": "Did the New Way party merge in the One Israel party",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/New_Way_(Israel)> <http://dbpedia.org/ontology/mergedIntoParty> <http://dbpedia.org/resource/One_Israel> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (DT the) (NNP New) (NNP Way) (NN party)) (VP (VB merge) (PP (IN in) (NP (DT the) (CD One) (NNP Israel) (NN party)))) (. ?)))",
  "entityNum": 1,
  "id": 34
 },
 {
  "taggedQuestion": "How many pole drivers have been there in grand prixes where first driver was Damon Hill?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many pole drivers have been there in #entity1",
    "originStr": "how many pole drivers have been there in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "grand prixes where first driver was damon hill",
    "originStr": "grand prixes where first driver was damon hill"
   }
  ],
  "question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN pole) (NNS drivers)) (VP (VBP have) (VP (VBN been) (ADVP (RB there)) (PP (IN in) (NP (NP (JJ grand) (NNS prixes)) (SBAR (WHADVP (WRB where)) (S (NP (JJ first) (NN driver)) (VP (VBD was) (NP (NNP Damon) (NNP Hill)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 35
 },
 {
  "taggedQuestion": "Where are jockeys in <e0> from?",
  "entityMap": {
   "<e0>": "Dubai World Cup"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where are #entity1 from",
    "originStr": "where are #entity1 from"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "jockeys in dubai world cup",
    "originStr": "jockeys in dubai world cup"
   }
  ],
  "question": "Where are jockeys in Dubai World Cup from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/race> <http://dbpedia.org/resource/Dubai_World_Cup> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NNS jockeys)) (PP (IN in) (PP (NP (NN <e0>)) (IN from)))) (. ?)))",
  "entityNum": 2,
  "id": 36
 },
 {
  "taggedQuestion": "Who owns the newspaper which was founded by Nehru?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who owns #entity1",
    "originStr": "who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the newspaper which was founded by nehru",
    "originStr": "the newspaper which was founded by nehru"
   }
  ],
  "question": "Who owns the newspaper which was founded by Nehru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN newspaper)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Nehru)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 37
 },
 {
  "taggedQuestion": "Which places do the flights go by airlines headquartered in the UK?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "to which places do the flights go by #entity1",
    "originStr": "to which places do the flights go by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "airlines headquartered in the uk",
    "originStr": "airlines headquartered in the uk"
   }
  ],
  "question": "To which places do the flights go by airlines headquartered in the UK",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/United_Kingdom> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS places))) (SQ (VBP do) (NP (DT the) (NNS flights)) (VP (VBP go) (PP (IN by) (NP (NP (NNS airlines)) (VP (VBN headquartered) (PP (IN in) (NP (DT the) (NNP UK)))))))) (. ?)))",
  "entityNum": 2,
  "id": 38
 },
 {
  "taggedQuestion": "What is the magazine which have been  founded by <e0>?",
  "entityMap": {
   "<e0>": "Ralph J. Gleason"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the magazine",
    "originStr": "what is the magazine"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which have been founded by ralph j. gleason",
    "originStr": "which have been founded by ralph j. gleason"
   }
  ],
  "question": "What is the magazine which have been founded by Ralph J. Gleason",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN magazine)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN founded) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 39
 },
 {
  "taggedQuestion": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Seattle the Ship builder of USS Marmora (IX-189)",
    "originStr": "Is Seattle the Ship builder of USS Marmora (IX-189)"
   }
  ],
  "question": "Is Seattle the Ship builder of USS Marmora (IX-189)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Seattle)) (NP (NP (DT the) (NN Ship) (NN builder)) (PP (IN of) (NP (NNP USS) (NNP Marmora) (PRN (-LRB- -LRB-) (NP (CD IX) (SYM -) (CD 189)) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 40
 },
 {
  "taggedQuestion": "Is Tirana the largest city of Albania?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Tirana the largest city of Albania",
    "originStr": "Is Tirana the largest city of Albania"
   }
  ],
  "question": "Is Tirana the largest city of Albania",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Tirana)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Albania)))) (. ?)))",
  "entityNum": 1,
  "id": 41
 },
 {
  "taggedQuestion": "Which cities can the beverage related to Barq's be found?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which cities can #entity1 be found",
    "originStr": "in which cities can #entity1 be found"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the beverage related to barq's",
    "originStr": "the beverage related to barq's"
   }
  ],
  "question": "In which cities can the beverage related to Barq's be found",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS cities)) (SQ (MD can) (NP (NP (DT the) (NN beverage)) (VP (VBN related) (PP (IN to) (NP (NNP Barq) (POS 's))))) (VP (VB be) (VP (VBN found)))) (. ?)))",
  "entityNum": 2,
  "id": 42
 },
 {
  "taggedQuestion": "What is the birth place of the astronaut whose mission was the Vostok programmer?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the birth place of #entity1",
    "originStr": "what is the birth place of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the astronaut whose mission was the vostok programmer",
    "originStr": "the astronaut whose mission was the vostok programmer"
   }
  ],
  "question": "What is the birth place of the astronaut whose mission was the Vostok programmer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Vostok_programme> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birth) (NN place)) (PP (IN of) (NP (NP (DT the) (NN astronaut)) (SBAR (WHNP (WP$ whose) (NN mission)) (S (VP (VBD was) (NP (DT the) (NNP Vostok) (NN programmer))))))))) (. ?)))",
  "entityNum": 2,
  "id": 43
 },
 {
  "taggedQuestion": "Count everyone who studied at an institute which are in Suburbs.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count everyone who studied at #entity1",
    "originStr": "count everyone who studied at #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "an institute which are in suburbs",
    "originStr": "an institute which are in suburbs"
   }
  ],
  "question": "Count everyone who studied at an institute which are in Suburbs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBD studied) (PP (IN at) (NP (NP (DT an) (NN institute)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN in) (NP (NNS Suburbs))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 44
 },
 {
  "taggedQuestion": "Where did <e0>?",
  "entityMap": {
   "<e0>": "Whitney Wistert debut"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did Whitney Wistert debut",
    "originStr": "Where did Whitney Wistert debut"
   }
  ],
  "question": "Where did Whitney Wistert debut",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Whitey_Wistert> <http://dbpedia.org/property/debutteam> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 45
 },
 {
  "taggedQuestion": "What is the major shrine of the monarchs whose successor is <e0>?",
  "entityMap": {
   "<e0>": "Dragimir of Travunia and Zachlumia"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the major shrine of #entity1 zachlumia",
    "originStr": "what is the major shrine of #entity1 zachlumia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the monarchs whose successor is dragimir of travunia and",
    "originStr": "the monarchs whose successor is dragimir of travunia and"
   }
  ],
  "question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ major) (NN shrine)) (PP (IN of) (NP (NP (DT the) (NNS monarchs)) (SBAR (WHNP (WP$ whose) (NML (NN successor))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 46
 },
 {
  "taggedQuestion": "How many <e0> have  <e1> as their channel?",
  "entityMap": {
   "<e1>": "Fox Broadcasting Company",
   "<e0>": "television shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many television shows",
    "originStr": "how many television shows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have fox broadcasting company as their channel",
    "originStr": "have fox broadcasting company as their channel"
   }
  ],
  "question": "How many television shows have Fox Broadcasting Company as their channel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS <e0>)) (VP (VBP have) (NP (NP (ADD <e1>)) (PP (IN as) (NP (PRP$ their) (NN channel)))))) (. ?)))",
  "entityNum": 1,
  "id": 47
 },
 {
  "taggedQuestion": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the river",
    "originStr": "what is the river"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose mouth locations are arctic ocean and laptev sea",
    "originStr": "whose mouth locations are arctic ocean and laptev sea"
   }
  ],
  "question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN mouth) (NNS locations))) (S (VP (VBP are) (NP (NP (NNP Arctic) (NNP Ocean)) (CC and) (NP (NNP Laptev) (NNP Sea)))))))) (. ?)))",
  "entityNum": 1,
  "id": 48
 },
 {
  "taggedQuestion": "What are some wars fought when <e0> as the country's prime minister?",
  "entityMap": {
   "<e0>": "Chung Il Kwon"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some wars fought #entity1",
    "originStr": "what are some wars fought #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "when chung il kwon as the country's prime minister",
    "originStr": "when chung il kwon as the country's prime minister"
   }
  ],
  "question": "What are some wars fought when Chung Il Kwon as the country's prime minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Il-kwon> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS wars)) (SBAR (S (VP (VBD fought) (SBAR (WHADVP (WRB when)) (FRAG (NP (ADD <e0>))))))) (PP (IN as) (NP (NP (DT the) (NN country) (POS 's)) (JJ prime) (NN minister))))) (. ?)))",
  "entityNum": 2,
  "id": 49
 },
 {
  "taggedQuestion": "Where was the person born who died in <e0>?",
  "entityMap": {
   "<e0>": "Bryn Mawr Hospital"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was the person born #entity1",
    "originStr": "where was the person born #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who died in bryn mawr hospital",
    "originStr": "who died in bryn mawr hospital"
   }
  ],
  "question": "Where was the person born who died in Bryn Mawr Hospital",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN person)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 50
 },
 {
  "taggedQuestion": "What is the faith of the Ajith Perera and religious affiliation of the <e0>?",
  "entityMap": {
   "<e0>": "Neungin High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the faith of the ajith perera",
    "originStr": "what is the faith of the ajith perera"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and religious affiliation of the neungin high school",
    "originStr": "and religious affiliation of the neungin high school"
   }
  ],
  "question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (DT the) (NNP Ajith) (NNP Perera)))) (CC and) (NP (NP (JJ religious) (NN affiliation)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 51
 },
 {
  "taggedQuestion": "Who was in military unit which played the role of Air interdiction?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was in military unit",
    "originStr": "who was in military unit"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which played the role of air interdiction",
    "originStr": "which played the role of air interdiction"
   }
  ],
  "question": "Who was in military unit which played the role of Air interdiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN in) (NP (NP (JJ military) (NN unit)) (SBAR (WHNP (WDT which)) (S (VP (VBD played) (NP (NP (DT the) (NN role)) (PP (IN of) (NP (NML (NN Air) (NN interdiction)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 52
 },
 {
  "taggedQuestion": "Who are the current members of <e0>?",
  "entityMap": {
   "<e0>": "Insects vs Robots"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the current members of Insects vs Robots",
    "originStr": "Who are the current members of Insects vs Robots"
   }
  ],
  "question": "Who are the current members of Insects vs Robots",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (JJ current) (NNS members)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 53
 },
 {
  "taggedQuestion": "Is Ombla originate in Croatia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Ombla originate in Croatia",
    "originStr": "Is Ombla originate in Croatia"
   }
  ],
  "question": "Is Ombla originate in Croatia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Croatia> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (NNP Ombla)) (VP (VB originate) (PP (IN in) (NP (NNP Croatia)))))) (. ?)))",
  "entityNum": 1,
  "id": 54
 },
 {
  "taggedQuestion": "Greater Napanee is the home town of what people?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "greater napanee is the home town of",
    "originStr": "greater napanee is the home town of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what people",
    "originStr": "what people"
   }
  ],
  "question": "Greater Napanee is the home town of what people",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Greater) (NNP Napanee)) (VP (VBZ is) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (NP (NP (WP what)) (NP (NNS people)))))) (. ?)))",
  "entityNum": 1,
  "id": 55
 },
 {
  "taggedQuestion": "What place did Edwin Adams die at, which gave birth to William A Purtell?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what place",
    "originStr": "what place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did edwin adams die at, which gave birth to william a purtell",
    "originStr": "did edwin adams die at, which gave birth to william a purtell"
   }
  ],
  "question": "What place did Edwin Adams die at, which gave birth to William A Purtell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN place)) (SQ (VBD did) (NP (NNP Edwin) (NNP Adams)) (VP (VBP die) (ADVP (IN at)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP William) (NNP A) (NNP Purtell)))))))) (. ?)))",
  "entityNum": 1,
  "id": 56
 },
 {
  "taggedQuestion": "Name the nationalteam of <e0> .",
  "entityMap": {
   "<e0>": "Trn Vit Hng"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the nationalteam of Trn Vit Hng",
    "originStr": "Name the nationalteam of Trn Vit Hng"
   }
  ],
  "question": "Name the nationalteam of Trn Vit Hng",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng> <http://dbpedia.org/property/nationalteam> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN nationalteam)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 57
 },
 {
  "taggedQuestion": "Which designer of RENFE also owns Renaissance Center ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which designer of renfe",
    "originStr": "which designer of renfe"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also owns renaissance center",
    "originStr": "also owns renaissance center"
   }
  ],
  "question": "Which designer of RENFE also owns Renaissance Center",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/owner> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN designer)) (PP (IN of) (NP (NNP RENFE)))) (SQ (VP (ADVP (RB also)) (VBZ owns) (NP (NNP Renaissance) (NNP Center)))) (. ?)))",
  "entityNum": 1,
  "id": 58
 },
 {
  "taggedQuestion": "Which uni did <e0> attend ?",
  "entityMap": {
   "<e0>": "Joshua A. Siegel"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which uni did Joshua A. Siegel attend",
    "originStr": "Which uni did Joshua A. Siegel attend"
   }
  ],
  "question": "Which uni did Joshua A. Siegel attend",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN uni)) (SQ (VP (VBD did) (NP (ADD <e0>)) (S (VP (VB attend))))) (. ?)))",
  "entityNum": 1,
  "id": 59
 },
 {
  "taggedQuestion": "How many books are written by the author who is famous for Novelas Ejemplares?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many books are written by #entity1",
    "originStr": "how many books are written by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the author who is famous for novelas ejemplares",
    "originStr": "the author who is famous for novelas ejemplares"
   }
  ],
  "question": "How many books are written by the author who is famous for Novelas Ejemplares",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS books)) (VP (VBP are) (VP (VBN written) (PP (IN by) (NP (NP (DT the) (NN author)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADJP (JJ famous) (PP (IN for) (NP (NNP Novelas) (NNP Ejemplares)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 60
 },
 {
  "taggedQuestion": "Name the rivers who originate from Essex.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the rivers",
    "originStr": "name the rivers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who originate from essex",
    "originStr": "who originate from essex"
   }
  ],
  "question": "Name the rivers who originate from Essex",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (SBAR (WHNP (WP who)) (S (VP (VB originate) (PP (IN from) (NP (NNP Essex)))))))) (. .)))",
  "entityNum": 1,
  "id": 61
 },
 {
  "taggedQuestion": "Companies founded in Taiwan have typically which divisions?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have typically which divisions",
    "originStr": "#entity1 have typically which divisions"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies founded in taiwan",
    "originStr": "companies founded in taiwan"
   }
  ],
  "question": "Companies founded in Taiwan have typically which divisions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Taiwan> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Taiwan))))) (VP (VBP have) (NP (UCP (ADVP (RB typically)) (NP (WDT which))) (NNS divisions))) (. ?)))",
  "entityNum": 2,
  "id": 62
 },
 {
  "taggedQuestion": "Did <e0> in Sunrise (HIMYM)?",
  "entityMap": {
   "<e0>": "Timm Gunn guest"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Timm Gunn guest in Sunrise (HIMYM)",
    "originStr": "Did Timm Gunn guest in Sunrise (HIMYM)"
   }
  ],
  "question": "Did Timm Gunn guest in Sunrise (HIMYM)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
  "syntaxTreeText": "(ROOT (S (VP (VBD Did) (NP (NP (ADD <e0>)) (PP (IN in) (NP (NNP Sunrise)))) (PRN (-LRB- -LRB-) (NP (NNP HIMYM)) (-RRB- -RRB-))) (. ?)))",
  "entityNum": 1,
  "id": 63
 },
 {
  "taggedQuestion": "Which university did both, the Stanford Cardinal and Gerald Reaven go?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "to which university",
    "originStr": "to which university"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did both, the stanford cardinal and gerald reaven go",
    "originStr": "did both, the stanford cardinal and gerald reaven go"
   }
  ],
  "question": "to which university did both, the Stanford Cardinal and Gerald Reaven go",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN university)) (SQ (VBD did) (NP (NP (DT both)) (, ,) (NP (DT the) (NNP Stanford) (NNP Cardinal)) (CC and) (NP (NNP Gerald) (NNP Reaven))) (VP (VB go))) (. ?)))",
  "entityNum": 1,
  "id": 64
 },
 {
  "taggedQuestion": "Name the nearest city to <e0> .",
  "entityMap": {
   "<e0>": "David W. Brown House"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the nearest city to David W. Brown House",
    "originStr": "Name the nearest city to David W. Brown House"
   }
  ],
  "question": "Name the nearest city to David W. Brown House",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJS nearest) (NN city)) (PP (TO to) (NP (ADD <e0>)))) (. .)))",
  "entityNum": 1,
  "id": 65
 },
 {
  "taggedQuestion": "Where did Deion Sanders debut?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where did Deion Sanders debut",
    "originStr": "where did Deion Sanders debut"
   }
  ],
  "question": "where did Deion Sanders debut",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Deion) (NNP Sanders) (NN debut))) (. ?)))",
  "entityNum": 1,
  "id": 66
 },
 {
  "taggedQuestion": "What cities are nearer to <e0>?",
  "entityMap": {
   "<e0>": "Fuountain Lake Farm"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what cities",
    "originStr": "what cities"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are nearer to fountain lake farm",
    "originStr": "are nearer to fountain lake farm"
   }
  ],
  "question": "What cities are nearer to Fountain Lake Farm",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VBP are) (PP (ADVP (RBR nearer)) (IN to) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 67
 },
 {
  "taggedQuestion": "Who are the characters of Batman Live?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the characters of Batman Live",
    "originStr": "Who are the characters of Batman Live"
   }
  ],
  "question": "Who are the characters of Batman Live",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (S (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NNP Batman)))) (VP (VB Live)))) (. ?)))",
  "entityNum": 1,
  "id": 68
 },
 {
  "taggedQuestion": "Which artists trained in <e0>?",
  "entityMap": {
   "<e0>": "San Francisco Art Institute"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which artists",
    "originStr": "which artists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "trained in san francisco art institute",
    "originStr": "trained in san francisco art institute"
   }
  ],
  "question": "Which artists trained in San Francisco Art Institute",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS artists))) (SQ (VP (VBN trained) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 69
 },
 {
  "taggedQuestion": "What is the owning organisation of the <e0> and also the builder of the Ford Y-block engine?",
  "entityMap": {
   "<e1>": "Ford Y - block engine",
   "<e0>": "Ford Kansas City Assembly Plant"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the owning organisation of the ford kansas city assembly plant",
    "originStr": "what is the owning organisation of the ford kansas city assembly plant"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and also the builder of the ford y-block engine",
    "originStr": "and also the builder of the ford y-block engine"
   }
  ],
  "question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (VBG owning)) (NN organisation)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (ADVP (RB also)) (NP (DT the) (NN builder)) (PP (IN of) (NP (DT the) (NNP Ford) (NML (NN Y) (HYPH -) (NN block)) (NN engine)))))))) (. ?)))",
  "entityNum": 1,
  "id": 70
 },
 {
  "taggedQuestion": "Name the country with currency as Aureus .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the country",
    "originStr": "name the country"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with currency as aureus",
    "originStr": "with currency as aureus"
   }
  ],
  "question": "Name the country with currency as Aureus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN country)) (PP (IN with) (NP (NP (NN currency)) (PP (IN as) (NP (NNP Aureus)))))) (. .)))",
  "entityNum": 1,
  "id": 71
 },
 {
  "taggedQuestion": "What awards have been given to A. Peter Dewey?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what awards",
    "originStr": "what awards"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have been given to a. peter dewey",
    "originStr": "have been given to a. peter dewey"
   }
  ],
  "question": "what awards have been given to A. Peter Dewey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/ontology/award> ?uri } ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NNP A.) (NNP Peter) (NNP Dewey))))))) (. ?)))",
  "entityNum": 1,
  "id": 72
 },
 {
  "taggedQuestion": "How many shows belong to the network one of whose sister station is Cartoonite?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many shows belong to the network #entity1",
    "originStr": "how many shows belong to the network #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "one of whose sister station is cartoonite",
    "originStr": "one of whose sister station is cartoonite"
   }
  ],
  "question": "How many shows belong to the network one of whose sister station is Cartoonite",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS shows)) (VP (VBP belong) (PP (IN to) (NP (DT the) (NN network))) (NP (NP (CD one)) (PP (IN of) (SBAR (WHNP (WP$ whose) (NML (NN sister)) (NN station)) (S (VP (VBZ is) (NP (NNP Cartoonite))))))))) (. ?)))",
  "entityNum": 2,
  "id": 73
 },
 {
  "taggedQuestion": "What has been developed by John Fanning?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what has been developed by John Fanning",
    "originStr": "what has been developed by John Fanning"
   }
  ],
  "question": "what has been developed by John Fanning",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN developed) (PP (IN by) (NP (NNP John) (NNP Fanning))))))) (. ?)))",
  "entityNum": 1,
  "id": 74
 },
 {
  "taggedQuestion": "Muhammad Yunus has won how many awards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 many awards",
    "originStr": "#entity1 many awards"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "muhammad yunus has won how",
    "originStr": "muhammad yunus has won how"
   }
  ],
  "question": "Muhammad Yunus has won how many awards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NNP Muhammad) (NNP Yunus)) (VP (VBZ has) (VP (VBN won) (SBAR (WHADJP (WRB how) (JJ many)) (FRAG (NP (NNS awards)))))) (. ?)))",
  "entityNum": 2,
  "id": 75
 },
 {
  "taggedQuestion": "List the associates of bands which have a label by Motown ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the associates of #entity1",
    "originStr": "list the associates of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "bands which have a label by motown",
    "originStr": "bands which have a label by motown"
   }
  ],
  "question": "List the associates of bands which have a label by Motown",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS associates)) (PP (IN of) (NP (NP (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT a) (NN label)) (PP (IN by) (NP (NNP Motown)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 76
 },
 {
  "taggedQuestion": "Who wrote the musical whose composer is <e0>?",
  "entityMap": {
   "<e0>": "Emil Dean Zoghby"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who wrote #entity1",
    "originStr": "who wrote #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical whose composer is emil dean zoghby",
    "originStr": "the musical whose composer is emil dean zoghby"
   }
  ],
  "question": "Who wrote the musical whose composer is Emil Dean Zoghby",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Emil_Dean_Zoghby> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (JJ musical)) (SBAR (WHNP (WP$ whose) (NN composer)) (S (VP (VBZ is) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 77
 },
 {
  "taggedQuestion": "Count the units garrisoned at Arlington County, Virginia.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the units garrisoned at Arlington County, Virginia",
    "originStr": "Count the units garrisoned at Arlington County, Virginia"
   }
  ],
  "question": "Count the units garrisoned at Arlington County, Virginia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS units)) (VP (VBN garrisoned) (PP (IN at) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia))))))) (. .)))",
  "entityNum": 1,
  "id": 78
 },
 {
  "taggedQuestion": "What is the faith of <e0> ?",
  "entityMap": {
   "<e0>": "Kwai Chang Caine"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the faith of Kwai Chang Caine",
    "originStr": "What is the faith of Kwai Chang Caine"
   }
  ],
  "question": "What is the faith of Kwai Chang Caine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 79
 },
 {
  "taggedQuestion": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is related to Kelly Osbourne & Ozzy Osbourne",
    "originStr": "Who is related to Kelly Osbourne & Ozzy Osbourne"
   }
  ],
  "question": "Who is related to Kelly Osbourne & Ozzy Osbourne",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN related) (PP (IN to) (NP (NNP Kelly) (NNP Osbourne) (CC &) (NNP Ozzy) (NNP Osbourne))))) (. ?)))",
  "entityNum": 1,
  "id": 80
 },
 {
  "taggedQuestion": "What are the houses of the legislature where the leader is called Pullaiahgaripalli ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the houses of #entity1",
    "originStr": "what are the houses of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the legislature where the leader is called pullaiahgaripalli",
    "originStr": "the legislature where the leader is called pullaiahgaripalli"
   }
  ],
  "question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pullaiahgaripalli> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS houses)) (PP (IN of) (NP (DT the) (NN legislature)))) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN leader)) (VP (VBZ is) (VP (VBN called) (NP (NNP Pullaiahgaripalli))))))) (. ?)))",
  "entityNum": 2,
  "id": 81
 },
 {
  "taggedQuestion": "Which serving railway line of the <e0> was also the place where 99 (2009 film) was recorded ?",
  "entityMap": {
   "<e0>": "Daund Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which serving railway line of the daund junction railway station",
    "originStr": "which serving railway line of the daund junction railway station"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was also the place where 99 (2009 film) was recorded",
    "originStr": "was also the place where 99 (2009 film) was recorded"
   }
  ],
  "question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?uri} ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (S (VP (VBG serving) (NP (NP (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD 99)) (-LRB- -LRB-) (NP (CD 2009) (NN film)) (-RRB- -RRB-)) (VP (VBD was) (VP (VBN recorded)))))))) (. ?)))",
  "entityNum": 1,
  "id": 82
 },
 {
  "taggedQuestion": "List the ethnicity of Riley Reid?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the ethnicity of Riley Reid",
    "originStr": "List the ethnicity of Riley Reid"
   }
  ],
  "question": "List the ethnicity of Riley Reid",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN ethnicity)) (PP (IN of) (NP (NNP Riley) (NNP Reid))))) (. ?)))",
  "entityNum": 1,
  "id": 83
 },
 {
  "taggedQuestion": "Which shows are from a company whose subsidiary is Viacom Productions?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which shows are from #entity1",
    "originStr": "which shows are from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a company whose subsidiary is viacom productions",
    "originStr": "a company whose subsidiary is viacom productions"
   }
  ],
  "question": "Which shows are from a company whose subsidiary is Viacom Productions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NNS shows)) (VP (VBP are) (PP (IN from) (NP (DT a) (NN company)))))) (WHNP (WHNP (WP$ whose)) (NP (NN subsidiary))) (SQ (VBZ is) (NP (NNP Viacom) (NNPS Productions))) (. ?)))",
  "entityNum": 2,
  "id": 84
 },
 {
  "taggedQuestion": "Giuseppe Bertello and Pietro Parolin are leaders of which place ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "giuseppe bertello and pietro parolin are leaders of which",
    "originStr": "giuseppe bertello and pietro parolin are leaders of which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "place",
    "originStr": "place"
   }
  ],
  "question": "Giuseppe Bertello and Pietro Parolin are leaders of which place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Giuseppe) (NNP Bertello)) (CC and) (NP (NNP Pietro) (NNP Parolin))) (VP (VBP are) (NP (NP (NNS leaders)) (PP (IN of) (NP (WDT which) (NN place))))) (. ?)))",
  "entityNum": 1,
  "id": 85
 },
 {
  "taggedQuestion": "What is the university whose campus is Mount Moosilauke?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the university",
    "originStr": "what is the university"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose campus is mount moosilauke",
    "originStr": "whose campus is mount moosilauke"
   }
  ],
  "question": "What is the university whose campus is Mount Moosilauke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (NP (NNP Mount) (NNP Moosilauke))))))) (. ?)))",
  "entityNum": 1,
  "id": 86
 },
 {
  "taggedQuestion": "How many religions are followed by the group whose architectural style is  seen on Sanggar Agung?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many religions are followed by #entity1",
    "originStr": "how many religions are followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the group whose architectural style can be seen on sanggar agung",
    "originStr": "the group whose architectural style can be seen on sanggar agung"
   }
  ],
  "question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN group)) (SBAR (WHNP (WP$ whose) (NML (JJ architectural) (NN style))) (S (VP (VBZ is) (VP (VBN seen) (PP (IN on) (NP (NNP Sanggar) (NNP Agung))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 87
 },
 {
  "taggedQuestion": "How many things are written in C++?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many things",
    "originStr": "how many things"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are written in c++",
    "originStr": "are written in c++"
   }
  ],
  "question": "How many things are written in C++",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN written) (PP (IN in) (NP (NNP C++))))) (. ?)))",
  "entityNum": 1,
  "id": 88
 },
 {
  "taggedQuestion": "Name the garrison of the <e1> and line of the <e0> .",
  "entityMap": {
   "<e1>": "Western Naval Command",
   "<e0>": "Vadodara Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the garrison of the western naval command",
    "originStr": "name the garrison of the western naval command"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and line of the vadodara junction railway station",
    "originStr": "and line of the vadodara junction railway station"
   }
  ],
  "question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN garrison)) (PP (IN of) (NP (NP (DT the) (NN <e1>) (CC and) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 89
 },
 {
  "taggedQuestion": "Who are the shareholder of the soccer club for whom Steve Holland plays?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are the shareholder of #entity1",
    "originStr": "who are the shareholder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club for whom steve holland plays",
    "originStr": "the soccer club for whom steve holland plays"
   }
  ],
  "question": "Who are the shareholder of the soccer club for whom Steve Holland plays",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN shareholder)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (PP (IN for) (SBAR (WHNP (WP whom)) (S (NP (NNP Steve) (NNP Holland)) (VP (VBZ plays))))))))) (. ?)))",
  "entityNum": 2,
  "id": 90
 },
 {
  "taggedQuestion": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season ?",
  "entityMap": {
   "<e0>": "Panionios G.S. S. season"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which city located on mediterranean sea",
    "originStr": "which city located on mediterranean sea"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the stadium of panionios g.s.s. season",
    "originStr": "is also the stadium of panionios g.s.s. season"
   }
  ],
  "question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBN located) (PP (IN on) (NP (NP (NNP Mediterranean) (NNP Sea)) (SBAR (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN stadium)) (PP (IN of) (NP (NNP Panionios) (NNP G.S.S.)))) (NP-TMP (NN season))))))))) (. ?)))",
  "entityNum": 1,
  "id": 91
 },
 {
  "taggedQuestion": "Was Don't Bring Me Down recorded in West Germany?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Don't Bring Me Down recorded in West Germany",
    "originStr": "Was Don't Bring Me Down recorded in West Germany"
   }
  ],
  "question": "Was Don't Bring Me Down recorded in West Germany",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (S (S (VP (VB Do) (RB n't) (VP (VB Bring)))) (S (NP (PRP Me)) (PP (IN Down) (S (VP (VBN recorded) (PP (IN in) (NP (NNP West) (NNP Germany)))))))) (. ?)))",
  "entityNum": 1,
  "id": 92
 },
 {
  "taggedQuestion": "Which cities do the rivers starting at the <e0> flow?",
  "entityMap": {
   "<e0>": "Montauk State Park"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "through which cities do #entity1 flow",
    "originStr": "through which cities do #entity1 flow"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rivers starting at the montauk state park",
    "originStr": "the rivers starting at the montauk state park"
   }
  ],
  "question": "Through which cities do the rivers starting at the Montauk State Park flow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS cities)) (SQ (VP (VBP do) (NP (DT the) (NNS rivers)) (PP (VBG starting) (PP (IN at) (NP (DT the) (NN <e0>) (NN flow)))))) (. ?)))",
  "entityNum": 2,
  "id": 93
 },
 {
  "taggedQuestion": "How many ideologies do the political party of Boonchu Rojanastien hold?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many ideologies do #entity1 hold",
    "originStr": "how many ideologies do #entity1 hold"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the political party of boonchu rojanastien",
    "originStr": "the political party of boonchu rojanastien"
   }
  ],
  "question": "How many ideologies do the political party of Boonchu Rojanastien hold",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS ideologies)) (SQ (VBP do) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NNP Boonchu) (NNP Rojanastien)))) (VP (VB hold))) (. ?)))",
  "entityNum": 2,
  "id": 94
 },
 {
  "taggedQuestion": "What are the hubs of <e0>, a <e1> of PLUS Expressways?",
  "entityMap": {
   "<e1>": "highway helicopter unit",
   "<e0>": "PLUS Helicopter Services"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are #entity1 a highway helicopter unit of plus expressways",
    "originStr": "what are #entity1 a highway helicopter unit of plus expressways"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the hubs of plus helicopter services",
    "originStr": "the hubs of plus helicopter services"
   }
  ],
  "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PLUS_Expressways> <http://dbpedia.org/property/hubs> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS hubs)) (PP (IN of) (NP (NP (ADD <e0>)) (, ,) (NP (NP (DT a) (NN <e1>)) (PP (IN of) (NP (NNP PLUS) (NNPS Expressways)))))))) (. ?)))",
  "entityNum": 2,
  "id": 95
 },
 {
  "taggedQuestion": "Name the movies for which music was given by  Geoffrey Burgon and distributed by  <e0>.",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movies for which music was given by geoffrey burgon",
    "originStr": "name the movies for which music was given by geoffrey burgon"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and distributed by cinema international corporation",
    "originStr": "and distributed by cinema international corporation"
   }
  ],
  "question": "Name the movies for which music was given by Geoffrey Burgon and distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS movies)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VP (VBN given) (PP (IN by) (NP (NNP Geoffrey) (NNP Burgon)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (ADD <e0>)))))))))) (. .)))",
  "entityNum": 1,
  "id": 96
 },
 {
  "taggedQuestion": "Is <e0> interested in Politics?",
  "entityMap": {
   "<e0>": "Henry David Thoreau"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Henry David Thoreau interested in Politics",
    "originStr": "Is Henry David Thoreau interested in Politics"
   }
  ],
  "question": "Is Henry David Thoreau interested in Politics",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (ADJP (JJ interested) (PP (IN in) (NP (NNS Politics)))) (. ?)))",
  "entityNum": 1,
  "id": 97
 },
 {
  "taggedQuestion": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "among the companies",
    "originStr": "among the companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who has product named chinook who has a key person as dennis muilenburg",
    "originStr": "who has product named chinook who has a key person as dennis muilenburg"
   }
  ],
  "question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (PP (IN Among) (NP (DT the) (NNS companies))) (WHNP (WP who)) (SQ (VBZ has) (NP (NN product)) (VP (VBN named) (NP (NP (NNP Chinook)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (NP (NP (DT a) (JJ key) (NN person)) (PP (IN as) (NP (NNP Dennis) (NNP Muilenburg)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 98
 },
 {
  "taggedQuestion": "Which country's leader  is Giuseppe Bertello?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which country's",
    "originStr": "which country's"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "leader is giuseppe bertello",
    "originStr": "leader is giuseppe bertello"
   }
  ],
  "question": "Which country's leader is Giuseppe Bertello",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN country) (POS 's)) (NN leader)) (SQ (VBZ is) (NP (NNP Giuseppe) (NNP Bertello))) (. ?)))",
  "entityNum": 1,
  "id": 99
 },
 {
  "taggedQuestion": "Who wrote the subsequent work of <e0> ?",
  "entityMap": {
   "<e0>": "One Day at a Time (Em's Version)"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who wrote #entity1",
    "originStr": "who wrote #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the subsequent work of one day at a time (em's version)",
    "originStr": "the subsequent work of one day at a time (em's version)"
   }
  ],
  "question": "Who wrote the subsequent work of One Day at a Time (Em's Version)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 100
 },
 {
  "taggedQuestion": "Name the TV shows with network as NBC and company as Paramount Television .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the tv shows with network as nbc",
    "originStr": "name the tv shows with network as nbc"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and company as paramount television",
    "originStr": "and company as paramount television"
   }
  ],
  "question": "Name the TV shows with network as NBC and company as Paramount Television",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NN TV)) (VP (VBZ shows) (PP (IN with) (NP (NP (NP (NN network)) (PP (IN as) (NP (NNP NBC)))) (CC and) (NP (NP (NN company)) (PP (IN as) (NP (NNP Paramount) (NNP Television))))))))) (. .)))",
  "entityNum": 1,
  "id": 101
 },
 {
  "taggedQuestion": "Name the fictional character whose voice's animator is Hardie Gramatky.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the fictional character whose voice's #entity1",
    "originStr": "name the fictional character whose voice's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "animator is hardie gramatky",
    "originStr": "animator is hardie gramatky"
   }
  ],
  "question": "Name the fictional character whose voice's animator is Hardie Gramatky",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Hardie_Gramatky> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJ fictional) (NN character)) (SBARQ (WHNP (WHNP (WP$ whose) (NN voice) (POS 's)) (NN animator)) (SQ (VBZ is) (NP (NNP Hardie) (NNP Gramatky))))) (. .)))",
  "entityNum": 2,
  "id": 102
 },
 {
  "taggedQuestion": "Which license provider of MSX basic is also the designer of <e0> ?",
  "entityMap": {
   "<e0>": "Language Integrated Query"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which license provider of msx basic",
    "originStr": "which license provider of msx basic"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the designer of language integrated query",
    "originStr": "is also the designer of language integrated query"
   }
  ],
  "question": "Which license provider of MSX basic is also the designer of Language Integrated Query",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN license) (NN provider)) (PP (IN of) (NP (NNP MSX) (JJ basic))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN designer)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 103
 },
 {
  "taggedQuestion": "Who are the architect of the stadium whose one of the architect is <e0> ?",
  "entityMap": {
   "<e0>": "louis D. Astorino"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are the architect of #entity1",
    "originStr": "who are the architect of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium whose one of the architect is louis d. astorino",
    "originStr": "the stadium whose one of the architect is louis d. astorino"
   }
  ],
  "question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN architect)) (PP (IN of) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN architect)))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 104
 },
 {
  "taggedQuestion": "Who are the astronauts associated with NASA?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who are the astronauts",
    "originStr": "who are the astronauts"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "associated with nasa",
    "originStr": "associated with nasa"
   }
  ],
  "question": "Who are the astronauts associated with NASA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (DT the) (NNS astronauts)) (VP (VBN associated) (PP (IN with) (NP (NNP NASA))))) (. ?)))",
  "entityNum": 1,
  "id": 105
 },
 {
  "taggedQuestion": "What is a common ingredient used in boyt Blodpalt and Kaszanka ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is a common ingredient",
    "originStr": "what is a common ingredient"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "used in boyt blodpalt and kaszanka",
    "originStr": "used in boyt blodpalt and kaszanka"
   }
  ],
  "question": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri. <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT a) (JJ common) (NN ingredient)) (VP (VBN used) (PP (IN in) (NP (NP (NN boyt) (NN Blodpalt)) (CC and) (NP (NNP Kaszanka)))))) (. ?)))",
  "entityNum": 1,
  "id": 106
 },
 {
  "taggedQuestion": "Who is the partner of Rob Patterson?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the partner of Rob Patterson",
    "originStr": "Who is the partner of Rob Patterson"
   }
  ],
  "question": "Who is the partner of Rob Patterson",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN partner)) (PP (IN of) (NP (NNP Rob) (NNP Patterson))))) (. ?)))",
  "entityNum": 1,
  "id": 107
 },
 {
  "taggedQuestion": "How many politicians are there from the city of Ganges?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many politicians",
    "originStr": "how many politicians"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are there from the city of ganges",
    "originStr": "are there from the city of ganges"
   }
  ],
  "question": "How many politicians are there from the city of Ganges",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS politicians)) (VP (VBP are) (ADVP (RB there)) (PP (IN from) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNS Ganges))))))) (. ?)))",
  "entityNum": 1,
  "id": 108
 },
 {
  "taggedQuestion": "Which american football teams does the Heinz Field serve as home stadium?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "to which american football teams",
    "originStr": "to which american football teams"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "does the heinz field serve as home stadium",
    "originStr": "does the heinz field serve as home stadium"
   }
  ],
  "question": "To which american football teams does the Heinz Field serve as home stadium",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Field> <http://dbpedia.org/property/tenants> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NNS teams)) (SQ (VBZ does) (NP (DT the) (NNP Heinz) (NNP Field)) (VP (VB serve) (PP (IN as) (NP (NN home) (NN stadium))))) (. ?)))",
  "entityNum": 1,
  "id": 109
 },
 {
  "taggedQuestion": "Which architect of the <e0> is the branch of the <e1>?",
  "entityMap": {
   "<e1>": "Burnet R. Maybank",
   "<e0>": "Marine Corps Air Station Kaneohe Bay"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which architect of the marine corps air station kaneohe bay",
    "originStr": "which architect of the marine corps air station kaneohe bay"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the branch of the burnet r. maybank",
    "originStr": "is the branch of the burnet r. maybank"
   }
  ],
  "question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN architect) (PP (IN of) (NP (DT the) (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (DT the) (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 110
 },
 {
  "taggedQuestion": "Which movies's screenplay is written by Akiva Goldsman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which movies' screenplay #entity1",
    "originStr": "which movies' screenplay #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is written by akiva goldsman",
    "originStr": "is written by akiva goldsman"
   }
  ],
  "question": "Which movies' screenplay is written by Akiva Goldsman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS movies) (POS 's)) (NN screenplay)) (SQ (VBZ is) (VP (VBN written) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))))) (. ?)))",
  "entityNum": 2,
  "id": 111
 },
 {
  "taggedQuestion": "How many TV shows are similar to the ones belonging to fantasy genre?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many tv shows are similar to #entity1",
    "originStr": "how many tv shows are similar to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones belonging to fantasy genre",
    "originStr": "the ones belonging to fantasy genre"
   }
  ],
  "question": "How many TV shows are similar to the ones belonging to fantasy genre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Fantasy_television> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN TV) (NNS shows)) (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBG belonging) (PP (IN to) (NP (NN fantasy) (NN genre))))))))) (. ?)))",
  "entityNum": 2,
  "id": 112
 },
 {
  "taggedQuestion": "Give me all commanders which had an important role in both, the <e1> and <e0>.",
  "entityMap": {
   "<e1>": "Battle of Fort Stephenson",
   "<e0>": "Battle of the Thames"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give me all commanders",
    "originStr": "give me all commanders"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which had an important role in both, the battle of fort stephenson and battle of the thames",
    "originStr": "which had an important role in both, the battle of fort stephenson and battle of the thames"
   }
  ],
  "question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS commanders)) (SBAR (WHNP (WDT which)) (S (VP (VBD had) (NP (NP (DT an) (JJ important) (NN role)) (PP (IN in) (NP (NP (CC both)) (, ,) (NP (DT the) (NN <e1>)) (CC and) (NP (ADD <e0>)))))))))) (. .)))",
  "entityNum": 1,
  "id": 113
 },
 {
  "taggedQuestion": "How many developers were involved in creating games whose score is composed by Gerard Marino?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many developers were involved in creating #entity1",
    "originStr": "how many developers were involved in creating #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games whose score is composed by gerard marino",
    "originStr": "games whose score is composed by gerard marino"
   }
  ],
  "question": "How many developers were involved in creating games whose score is composed by Gerard Marino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS developers)) (VP (VBD were) (VP (VBN involved) (PP (IN in) (S (VP (VBG creating) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NML (NN score))) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Gerard) (NNP Marino)))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 114
 },
 {
  "taggedQuestion": "Which sea is surrounded by Rostock and Kaliningrad?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which sea",
    "originStr": "which sea"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is surrounded by rostock and kaliningrad",
    "originStr": "is surrounded by rostock and kaliningrad"
   }
  ],
  "question": "Which sea is surrounded by Rostock and Kaliningrad",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN sea)) (SQ (VBZ is) (VP (VBN surrounded) (PP (IN by) (NP (NNP Rostock) (CC and) (NNP Kaliningrad))))) (. ?)))",
  "entityNum": 1,
  "id": 115
 },
 {
  "taggedQuestion": "Which <e0>'s developer is Brian Graden and voices to the character is by Isaac Hayes?",
  "entityMap": {
   "<e1>": "Brian Graden voices",
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which television show's developer is brian graden",
    "originStr": "which television show's developer is brian graden"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and voices to the character is by isaac hayes",
    "originStr": "and voices to the character is by isaac hayes"
   }
  ],
  "question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (SBAR (WHNP (WDT Which)) (S (NP (NP (NN <e0>) (POS 's)) (NN developer)) (VP (VBZ is) (NP (NP (NNP Brian) (NNP Graden)) (CC and) (NP (NP (NNS voices)) (PP (IN to) (NP (DT the) (NN character)))))))) (VP (VBZ is) (PP (IN by) (NP (NNP Isaac) (NNP Hayes)))) (. ?)))",
  "entityNum": 1,
  "id": 116
 },
 {
  "taggedQuestion": "How did the child of <e0> die?",
  "entityMap": {
   "<e0>": "Stevens T. Mason"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "EXTENT",
    "trigger": "How"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "How did the child of Stevens T. Mason die",
    "originStr": "How did the child of Stevens T. Mason die"
   }
  ],
  "question": "How did the child of Stevens T. Mason die",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (ADD <e0>)))) (VP (VB die))) (. ?)))",
  "entityNum": 1,
  "id": 117
 },
 {
  "taggedQuestion": "Does the <e0> serve the Inland Empire?",
  "entityMap": {
   "<e0>": "Ontario International Airport"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the Ontario International Airport serve the Inland Empire",
    "originStr": "Does the Ontario International Airport serve the Inland Empire"
   }
  ],
  "question": "Does the Ontario International Airport serve the Inland Empire",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (DT the) (NN <e0>)) (VP (VB serve) (NP (DT the) (NNP Inland) (NNP Empire))) (. ?)))",
  "entityNum": 1,
  "id": 118
 },
 {
  "taggedQuestion": "Is semnani one of the languages spoken in Iran?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is semnani one of the languages spoken in Iran",
    "originStr": "Is semnani one of the languages spoken in Iran"
   }
  ],
  "question": "Is semnani one of the languages spoken in Iran",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Iran> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN semnani)) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS languages)) (VP (VBN spoken) (PP (IN in) (NP (NNP Iran))))))) (. ?)))",
  "entityNum": 1,
  "id": 119
 },
 {
  "taggedQuestion": "What is the nickname of the home stadium of Angels Toru?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the nickname of #entity1",
    "originStr": "what is the nickname of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the home stadium of angels toru",
    "originStr": "the home stadium of angels toru"
   }
  ],
  "question": "What is the nickname of the home stadium of Angels Toru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN nickname)) (PP (IN of) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (NNPS Angels) (NNP Toru))))))) (. ?)))",
  "entityNum": 2,
  "id": 120
 },
 {
  "taggedQuestion": "What is the <e0> whose executive producer is Douglas Netter?",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the television show",
    "originStr": "what is the television show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose executive producer is douglas netter",
    "originStr": "whose executive producer is douglas netter"
   }
  ],
  "question": "What is the television show whose executive producer is Douglas Netter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (JJ executive) (NN producer))) (S (VP (VBZ is) (NP (NNP Douglas) (NNP Netter))))))) (. ?)))",
  "entityNum": 1,
  "id": 121
 },
 {
  "taggedQuestion": "List out the people who are related to the relatives of Jared Kushner ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list out the people who are related to #entity1",
    "originStr": "list out the people who are related to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of jared kushner",
    "originStr": "the relatives of jared kushner"
   }
  ],
  "question": "List out the people who are related to the relatives of Jared Kushner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (PRT (RP out)) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN related) (PP (IN to) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Jared) (NNP Kushner))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 122
 },
 {
  "taggedQuestion": "List all the doctoral student of the scientist who has advised john Bowlby ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all the doctoral student of #entity1",
    "originStr": "list all the doctoral student of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist who has advised john bowlby",
    "originStr": "the scientist who has advised john bowlby"
   }
  ],
  "question": "List all the doctoral student of the scientist who has advised john Bowlby",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (JJ doctoral) (NN student)) (PP (IN of) (NP (DT the) (NN scientist)))) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN advised) (NP (NNP john) (NNP Bowlby))))))) (. ?)))",
  "entityNum": 2,
  "id": 123
 },
 {
  "taggedQuestion": "Which series does the book belong which came after the <e0>?",
  "entityMap": {
   "<e0>": "Blade Runner 2"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "to which series does the book belong #entity1",
    "originStr": "to which series does the book belong #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which came after the blade runner 2",
    "originStr": "which came after the blade runner 2"
   }
  ],
  "question": "To which series does the book belong which came after the Blade Runner 2",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VBZ does) (S (NP (DT the) (NN book)) (VP (VBP belong) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (PP (IN after) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 124
 },
 {
  "taggedQuestion": "Which city did The Ultimate Fighter: <e0> take place ?",
  "entityMap": {
   "<e0>": "Team Rousey vs. Team Tate"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which city did #entity1 take place",
    "originStr": "in which city did #entity1 take place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ultimate fighter: team rousey vs. team tate",
    "originStr": "the ultimate fighter: team rousey vs. team tate"
   }
  ],
  "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VP (VBD did) (NP (DT The) (NNP Ultimate) (NNP Fighter)) (: :) (S (NP (ADD <e0>)) (VP (VB take) (NP (NN place)))))) (. ?)))",
  "entityNum": 2,
  "id": 125
 },
 {
  "taggedQuestion": "Where was Sino-French War fought ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Sino-French War fought",
    "originStr": "Where was Sino-French War fought"
   }
  ],
  "question": "Where was Sino-French War fought",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADJP (JJ Sino) (HYPH -) (JJ French)) (NNP War)) (VP (VBN fought)))) (. ?)))",
  "entityNum": 1,
  "id": 126
 },
 {
  "taggedQuestion": "Who did Daniel Gibson marry?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who did Daniel Gibson marry",
    "originStr": "Who did Daniel Gibson marry"
   }
  ],
  "question": "Who did Daniel Gibson marry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Daniel) (NNP Gibson)) (VP (VB marry))) (. ?)))",
  "entityNum": 1,
  "id": 127
 },
 {
  "taggedQuestion": "What is the political party of the daughter of Jawaharlal Nehru ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the political party of #entity1",
    "originStr": "what is the political party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the daughter of jawaharlal nehru",
    "originStr": "the daughter of jawaharlal nehru"
   }
  ],
  "question": "What is the political party of the daughter of Jawaharlal Nehru",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (DT the) (NN daughter)) (PP (IN of) (NP (NNP Jawaharlal) (NNP Nehru))))))) (. ?)))",
  "entityNum": 2,
  "id": 128
 },
 {
  "taggedQuestion": "Name the river with source as Shannon Pot and its mouth is located in Limerick.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the river with source as shannon pot",
    "originStr": "name the river with source as shannon pot"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and its mouth is located in limerick",
    "originStr": "and its mouth is located in limerick"
   }
  ],
  "question": "Name the river with source as Shannon Pot and its mouth is located in Limerick",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NN source))) (SBAR (IN as) (S (NP (NP (NNP Shannon) (NNP Pot)) (CC and) (NP (PRP$ its) (NN mouth))) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Limerick)))))))) (. .)))",
  "entityNum": 1,
  "id": 129
 },
 {
  "taggedQuestion": "What is the organisation whose purposes are Environmentalism and Peace?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the organisation",
    "originStr": "what is the organisation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose purposes are environmentalism and peace",
    "originStr": "whose purposes are environmentalism and peace"
   }
  ],
  "question": "What is the organisation whose purposes are Environmentalism and Peace",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN organisation)) (SBAR (WHNP (WP$ whose) (NML (NNS purposes))) (S (VP (VBP are) (NP (NNP Environmentalism) (CC and) (NNP Peace))))))) (. ?)))",
  "entityNum": 1,
  "id": 130
 },
 {
  "taggedQuestion": "Count the sports team members  which have player named Matt Williams .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of sports team members which have #entity1",
    "originStr": "count the number of sports team members which have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "player named matt williams",
    "originStr": "player named matt williams"
   }
  ],
  "question": "Count the number of sports team members which have player named Matt Williams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/name> <http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)> . ?x <http://dbpedia.org/property/name> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS sports)) (NP (NP (NN team) (NNS members)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NN player)) (VP (VBN named) (NP (NNP Matt) (NNP Williams)))))))))) (. .)))",
  "entityNum": 2,
  "id": 131
 },
 {
  "taggedQuestion": "How many different people own the Timeform award winners?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many different people own #entity1",
    "originStr": "how many different people own #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the timeform award winners",
    "originStr": "the timeform award winners"
   }
  ],
  "question": "How many different people own the Timeform award winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NNS people)) (SQ (VP (VBP own) (NP (DT the) (NNP Timeform) (NN award) (NNS winners)))) (. ?)))",
  "entityNum": 2,
  "id": 132
 },
 {
  "taggedQuestion": "What religions do diplomats typically follow?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what religions",
    "originStr": "what religions"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "do diplomats typically follow",
    "originStr": "do diplomats typically follow"
   }
  ],
  "question": "What religions do diplomats typically follow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VBP do) (NP (NNS diplomats)) (ADVP (RB typically)) (VP (VB follow))) (. ?)))",
  "entityNum": 1,
  "id": 133
 },
 {
  "taggedQuestion": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "guggenheim family is the cofounder of #entity1",
    "originStr": "guggenheim family is the cofounder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a company that invested stocks in which baseball teams",
    "originStr": "a company that invested stocks in which baseball teams"
   }
  ],
  "question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> . ?uri <http://dbpedia.org/property/owner> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Guggenheim) (NN family)) (VP (VBZ is) (NP (NP (DT the) (NN cofounder)) (PP (IN of) (NP (NP (DT a) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD invested) (NP (NNS stocks)) (PP (IN in) (FRAG (SBARQ (WHNP (WDT which) (NN baseball) (NNS teams)) (. ?)))))))))))))",
  "entityNum": 2,
  "id": 134
 },
 {
  "taggedQuestion": "Was John muir one of the first to ascend a mountain on mountain hoffmann?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John muir one of the first to ascend a mountain on Mt hoffmann",
    "originStr": "Was John muir one of the first to ascend a mountain on Mt hoffmann"
   }
  ],
  "question": "Was John muir one of the first to ascend a mountain on Mt hoffmann",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP muir)) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ first) (S (VP (TO to) (VP (VB ascend) (NP (DT a) (NN mountain)) (PP (IN on) (NP (NN mountain)))))) (NN hoffmann)))) (. ?)))",
  "entityNum": 1,
  "id": 135
 },
 {
  "taggedQuestion": "Which city is known for the people working in the <e0>?",
  "entityMap": {
   "<e0>": "western penn hospital"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which city is known for #entity1",
    "originStr": "which city is known for #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people working in the western penn hospital",
    "originStr": "the people working in the western penn hospital"
   }
  ],
  "question": "Which city is known for the people working in the western penn hospital",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (DT the) (NNS people)) (VP (VBG working) (PP (IN in) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 136
 },
 {
  "taggedQuestion": "Which country does the publishing house exist which was cofounded by Panos Loannides?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which country does the publishing house exist #entity1",
    "originStr": "in which country does the publishing house exist #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which was cofounded by panos loannides",
    "originStr": "which was cofounded by panos loannides"
   }
  ],
  "question": "In which country does the publishing house exist which was cofounded by Panos Loannides",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (DT the) (NN publishing) (NN house)) (VP (VBP exist) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN cofounded) (PP (IN by) (NP (NNP Panos) (NNP Loannides))))))))) (. ?)))",
  "entityNum": 2,
  "id": 137
 },
 {
  "taggedQuestion": "Name the team which is owned by <e1> and stood first in <e0> .",
  "entityMap": {
   "<e1>": "Dafenham wind turbines",
   "<e0>": "1967 mexican Grand Prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the team which is owned by dafenham wind turbines",
    "originStr": "name the team which is owned by dafenham wind turbines"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and stood first in 1967 mexican grand prix",
    "originStr": "and stood first in 1967 mexican grand prix"
   }
  ],
  "question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (ADD <e1>))))) (CC and) (VP (VBD stood) (ADVP (RB first)) (PP (IN in) (NP (ADD <e0>))))))))) (. .)))",
  "entityNum": 1,
  "id": 138
 },
 {
  "taggedQuestion": "Which <e0> attended which was also the alma mater of Lisa Brummel ?",
  "entityMap": {
   "<e0>": "education center Sidney Catlin Partrodge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which education center sidney catlin partrodge attended which was also the alma mater of lisa brummel",
    "originStr": "which education center sidney catlin partrodge attended which was also the alma mater of lisa brummel"
   }
  ],
  "question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?uri} ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NN <e0>)) (VP (VBD attended) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NNP Lisa) (NNP Brummel))))))))) (. ?)))",
  "entityNum": 1,
  "id": 139
 },
 {
  "taggedQuestion": "What sports is  played in Kharghar's schools?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what sports can be played in #entity1",
    "originStr": "what sports can be played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "kharghar's schools",
    "originStr": "kharghar's schools"
   }
  ],
  "question": "What sports can be played in Kharghar's schools",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Kharghar> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VBZ is) (VP (VBN played) (PP (IN in) (NP (NP (NNP Kharghar) (POS 's)) (NNS schools))))) (. ?)))",
  "entityNum": 2,
  "id": 140
 },
 {
  "taggedQuestion": "Which ethinicity of  Riley Reid is the <e0> of Holmes Colbert?",
  "entityMap": {
   "<e0>": "state of origin"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which ethnicity of riley reid",
    "originStr": "which ethnicity of riley reid"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the state of origin of holmes colbert",
    "originStr": "is the state of origin of holmes colbert"
   }
  ],
  "question": "Which ethnicity of Riley Reid is the state of origin of Holmes Colbert",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN ethinicity) (PP (IN of) (NP (NNP Riley) (NNP Reid))))) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert))))) (. ?)))",
  "entityNum": 1,
  "id": 141
 },
 {
  "taggedQuestion": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
    "originStr": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010"
   }
  ],
  "question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> <http://dbpedia.org/resource/John_Boehner> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP Boehner)) (NP (NP (DT the) (NN winner)) (PP (IN of) (NP (NP (DT the) (NNP US) (NNP House)) (PP (IN of) (NP (NP (NNPS Representatives) (NNS elections)) (PP (IN in) (NP (NP (NNP Ohio)) (PP (IN in) (NP (CD 2010)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 142
 },
 {
  "taggedQuestion": "Which american football team  has stadium as O.co Coliseum?",
  "entityMap": {
   "<e0>": "O.c o Coliseum"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which american football team",
    "originStr": "which american football team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has stadium as o.co coliseum",
    "originStr": "has stadium as o.co coliseum"
   }
  ],
  "question": "Which american football team has stadium as O.co Coliseum",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NN team)) (SQ (VP (VBZ has) (NP (NP (NN stadium)) (PP (IN as) (NP (NNP O.co) (NNP Coliseum)))))) (. ?)))",
  "entityNum": 1,
  "id": 143
 },
 {
  "taggedQuestion": "How many subjects are covered in the publications of Doubleday?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many subjects are covered in #entity1",
    "originStr": "how many subjects are covered in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the publications of doubleday",
    "originStr": "the publications of doubleday"
   }
  ],
  "question": "How many subjects are covered in the publications of Doubleday",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS subjects)) (VP (VBP are) (VP (VBN covered) (PP (IN in) (NP (NP (DT the) (NNS publications)) (PP (IN of) (NP (NNP Doubleday)))))))) (. ?)))",
  "entityNum": 2,
  "id": 144
 },
 {
  "taggedQuestion": "Which city of Pittsburg Steelers was the Congress of Inductrial Organization founded ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which city of pittsburg steelers",
    "originStr": "in which city of pittsburg steelers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was the congress of industrial organization founded",
    "originStr": "was the congress of industrial organization founded"
   }
  ],
  "question": "In which city of Pittsburg Steelers was the Congress of Industrial Organization founded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Pittsburgh_Steelers> <http://dbpedia.org/property/city> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN city)) (PP (IN of) (NP (NNP Pittsburg) (NNPS Steelers)))) (SQ (VBD was) (NP (NP (DT the) (NNP Congress)) (PP (IN of) (NP (NNP Inductrial) (NNP Organization)))) (VP (VBN founded))) (. ?)))",
  "entityNum": 1,
  "id": 145
 },
 {
  "taggedQuestion": "What is the hometown of the residents of Martha's vineyards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the hometown of #entity1",
    "originStr": "what is the hometown of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the residents of martha's vineyards",
    "originStr": "the residents of martha's vineyards"
   }
  ],
  "question": "What is the hometown of the residents of Martha's vineyards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Martha's_Vineyard> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN hometown)) (PP (IN of) (NP (NP (DT the) (NNS residents)) (PP (IN of) (NP (NP (NNP Martha) (POS 's)) (NNS vineyards))))))) (. ?)))",
  "entityNum": 2,
  "id": 146
 },
 {
  "taggedQuestion": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the city on the shore .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the sea into which danish straits flows",
    "originStr": "name the sea into which danish straits flows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has kaliningrad as one of the cities on the shore",
    "originStr": "and has kaliningrad as one of the cities on the shore"
   }
  ],
  "question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the cities on the shore",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN sea)) (PP (IN into) (SBAR (WHNP (WDT which)) (S (NP (JJ Danish) (NNPS Straits)) (VP (VP (VBZ flows)) (CC and) (VP (VBZ has) (NP (NP (NNP Kaliningrad)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN city)) (PP (IN on) (NP (DT the) (NN shore)))))))))))))) (. .)))",
  "entityNum": 1,
  "id": 147
 },
 {
  "taggedQuestion": "Name the team manger of Middlebrough F.C season 2006-07 .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the team manager of Middlebrough F.C season 2006-07",
    "originStr": "Name the team manager of Middlebrough F.C season 2006-07"
   }
  ],
  "question": "Name the team manager of Middlebrough F.C season 2006-07",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN team) (NN manger)) (PP (IN of) (NP (NNP Middlebrough) (NNP F.C)))) (PRN (NP (NN season) (CD 2006) (HYPH -) (CD 07)))) (. .)))",
  "entityNum": 1,
  "id": 148
 },
 {
  "taggedQuestion": "What city has the football team in which Lee Robinson debuted?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what city has #entity1",
    "originStr": "what city has #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the football team in which lee robinson debuted",
    "originStr": "the football team in which lee robinson debuted"
   }
  ],
  "question": "What city has the football team in which Lee Robinson debuted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lee_Robinson_(American_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN football) (NN team)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Lee) (NNP Robinson)) (VP (VBD debuted))))))) (. ?)))",
  "entityNum": 2,
  "id": 149
 },
 {
  "taggedQuestion": "Who is the owner of the bank which owns Bloomberg Radio?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the owner of #entity1",
    "originStr": "who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the bank which owns bloomberg radio",
    "originStr": "the bank which owns bloomberg radio"
   }
  ],
  "question": "Who is the owner of the bank which owns Bloomberg Radio",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN bank)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NNP Bloomberg) (NNP Radio))))))))) (. ?)))",
  "entityNum": 2,
  "id": 150
 },
 {
  "taggedQuestion": "Which companies were behind the renovation of McKechnie Field ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which companies were behind #entity1",
    "originStr": "which companies were behind #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the renovation of mckechnie field",
    "originStr": "the renovation of mckechnie field"
   }
  ],
  "question": "Which companies were behind the renovation of McKechnie Field",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McKechnie_Field> <http://dbpedia.org/property/architect> ?uri } ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS companies)) (VP (VBD were) (PP (IN behind) (NP (NP (DT the) (NN renovation)) (PP (IN of) (NP (NNP McKechnie) (NNP Field))))))) (. ?)))",
  "entityNum": 2,
  "id": 151
 },
 {
  "taggedQuestion": "Who was the coach of <e0>'s basketball team-2012,13 season ?",
  "entityMap": {
   "<e0>": "marquette Golden Eagles men"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was the coach of marquette golden eagles men's basketball team-2012,13",
    "originStr": "who was the coach of marquette golden eagles men's basketball team-2012,13"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "season",
    "originStr": "season"
   }
  ],
  "question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN coach)) (PP (IN of) (NP (NP (NN <e0>) (POS 's)) (NN basketball) (NML (NN team) (HYPH -) (CD 2012,13)) (NN season))))) (. ?)))",
  "entityNum": 1,
  "id": 152
 },
 {
  "taggedQuestion": "Miluk and Cayuse are still spoken in which part of the world?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "miluk and cayuse are still spoken in which",
    "originStr": "miluk and cayuse are still spoken in which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "part of the world",
    "originStr": "part of the world"
   }
  ],
  "question": "Miluk and Cayuse are still spoken in which part of the world",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?uri . }",
  "syntaxTreeText": "(ROOT (S (NP (NN Miluk) (CC and) (NN Cayuse)) (VP (VBP are) (ADVP (RB still)) (VP (VBN spoken) (WHPP (IN in) (WHNP (WDT which) (NN part))) (PP (IN of) (NP (DT the) (NN world))))) (. ?)))",
  "entityNum": 1,
  "id": 153
 },
 {
  "taggedQuestion": "Which governer of Winston bryant is also the president of Carl Stokes ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which governor of winston bryant",
    "originStr": "which governor of winston bryant"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the president of carl stokes",
    "originStr": "is also the president of carl stokes"
   }
  ],
  "question": "Which governor of Winston bryant is also the president of Carl Stokes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN governer) (PP (IN of) (NP (NNP Winston) (NN bryant))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Carl) (NNP Stokes))))) (. ?)))",
  "entityNum": 1,
  "id": 154
 },
 {
  "taggedQuestion": "List the sports of <e0> which are of interest of Jon Speelman ?",
  "entityMap": {
   "<e0>": "PATTS College of Aeronautics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the sports of patts college of aeronautics",
    "originStr": "list the sports of patts college of aeronautics"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which are of interest of jon speelman",
    "originStr": "which are of interest of jon speelman"
   }
  ],
  "question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS sports)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN interest)) (PP (IN of) (NP (NNP Jon) (NNP Speelman)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 155
 },
 {
  "taggedQuestion": "What is the home stadium of the club coached by Justine Omojong?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the home stadium of #entity1",
    "originStr": "what is the home stadium of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the club coached by justine omojong",
    "originStr": "the club coached by justine omojong"
   }
  ],
  "question": "What is the home stadium of the club coached by Justine Omojong",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Justine_Omojong> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN stadium)) (PP (IN of) (NP (DT the) (NN club)))) (VP (VBN coached) (PP (IN by) (NP (NNP Justine) (NNP Omojong))))) (. ?)))",
  "entityNum": 2,
  "id": 156
 },
 {
  "taggedQuestion": "Which are the predecessors of the cars which are similar to the Oldsmobile 88?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which are the predecessors of #entity1",
    "originStr": "which are the predecessors of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the cars which are similar to the oldsmobile 88",
    "originStr": "the cars which are similar to the oldsmobile 88"
   }
  ],
  "question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NNS predecessors)) (PP (IN of) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (DT the) (NNP Oldsmobile) (CD 88))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 157
 },
 {
  "taggedQuestion": "Name a queen whose parent is <e0> and consort is <e1>.",
  "entityMap": {
   "<e1>": "Ptolemy XIII Theos Philopator",
   "<e0>": "Ptolemy XII Auletes"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name a queen whose parent is ptolemy xii auletes",
    "originStr": "name a queen whose parent is ptolemy xii auletes"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and consort is ptolemy xiii theos philopator",
    "originStr": "and consort is ptolemy xiii theos philopator"
   }
  ],
  "question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT a) (NN queen)) (SBAR (WHNP (WP$ whose) (NML (NN parent))) (S (VP (VBZ is) (NP (NP (ADD <e0>)) (CC and) (NP (NN consort))))))))) (VP (VBZ is) (NP (ADD <e1>))) (. .)))",
  "entityNum": 1,
  "id": 158
 },
 {
  "taggedQuestion": "Which show's theme music was composed by Primus and voiced by Isaac Hayes?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which show's theme music was composed by primus",
    "originStr": "which show's theme music was composed by primus"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and voiced by isaac hayes",
    "originStr": "and voiced by isaac hayes"
   }
  ],
  "question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN show) (POS 's)) (NN theme) (NN music)) (SQ (VBD was) (VP (VP (VBN composed) (PP (IN by) (NP (NNP Primus)))) (CC and) (VP (VBN voiced) (PP (IN by) (NP (NNP Isaac) (NNP Hayes)))))) (. ?)))",
  "entityNum": 1,
  "id": 159
 },
 {
  "taggedQuestion": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the chancellor of #entity1",
    "originStr": "who is the chancellor of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the university whose campus is in woodlane, new jersey",
    "originStr": "the university whose campus is in woodlane, new jersey"
   }
  ],
  "question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Woodlane,_New_Jersey> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NP (DT the) (NN university)) (SBAR (WHNP (WP$ whose) (NN campus)) (S (VP (VBZ is) (PP (IN in) (NP (NP (NN Woodlane)) (, ,) (NP (NNP New) (NNP Jersey))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 160
 },
 {
  "taggedQuestion": "Name the mountain whose parent peak is located in Mexico.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the mountain whose parent peak #entity1",
    "originStr": "name the mountain whose parent peak #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is located in mexico",
    "originStr": "is located in mexico"
   }
  ],
  "question": "Name the mountain whose parent peak is located in Mexico",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN mountain)) (SBAR (WHNP (WP$ whose) (NML (NN parent) (NN peak))) (S (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP Mexico))))))))) (. .)))",
  "entityNum": 2,
  "id": 161
 },
 {
  "taggedQuestion": "List the ingredient of Blodpalt ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the ingredient of Blodpalt",
    "originStr": "List the ingredient of Blodpalt"
   }
  ],
  "question": "List the ingredient of Blodpalt",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN ingredient)) (PP (IN of) (NP (NNP Blodpalt))))) (. ?)))",
  "entityNum": 1,
  "id": 162
 },
 {
  "taggedQuestion": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the developers",
    "originStr": "list the developers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who has contributed to both gnowsys and gnu texmacs",
    "originStr": "who has contributed to both gnowsys and gnu texmacs"
   }
  ],
  "question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?uri . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS developers)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN contributed) (PP (IN to) (NP (NP (DT both) (NNP GNOWSYS)) (CC and) (NP (NNP GNU) (NNP TeXmacs)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 163
 },
 {
  "taggedQuestion": "List the served region of the organisations of Trade association.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the served region of #entity1",
    "originStr": "list the served region of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the organisations of trade association",
    "originStr": "the organisations of trade association"
   }
  ],
  "question": "List the served region of the organisations of Trade association",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NML (S (VP (VBN served)))) (NN region)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (PP (IN of) (NP (NNP Trade) (NN association))))))) (. .)))",
  "entityNum": 2,
  "id": 164
 },
 {
  "taggedQuestion": "Is Hyundai Lavita assembled in Malaysia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Hyundai Lavita assembled in Malaysia",
    "originStr": "Is Hyundai Lavita assembled in Malaysia"
   }
  ],
  "question": "Is Hyundai Lavita assembled in Malaysia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Malaysia))))))) (. ?)))",
  "entityNum": 1,
  "id": 165
 },
 {
  "taggedQuestion": "Who composed the music for Tonight's the Night ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who composed #entity1",
    "originStr": "who composed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the music for tonight's the night",
    "originStr": "the music for tonight's the night"
   }
  ],
  "question": "Who composed the music for Tonight's the Night",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN composed) (NP (NP (DT the) (NN music)) (PP (IN for) (NP (NP (NN Tonight)) (POS 's)))) (NP-TMP (DT the) (NN Night)))) (. ?)))",
  "entityNum": 2,
  "id": 166
 },
 {
  "taggedQuestion": "How many things are made by companies who produce <e0>?",
  "entityMap": {
   "<e0>": "mass media articles"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many things are made by #entity1",
    "originStr": "how many things are made by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies who produce mass media articles",
    "originStr": "companies who produce mass media articles"
   }
  ],
  "question": "How many things are made by companies who produce mass media articles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Mass_media> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN made) (PP (IN by) (NP (NP (NNS companies)) (SBAR (WHNP (WP who)) (S (VP (VBP produce) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 167
 },
 {
  "taggedQuestion": "What awards have been given to race horses bred by Bert Michell?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what awards have been given to #entity1",
    "originStr": "what awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "race horses bred by bert michell",
    "originStr": "race horses bred by bert michell"
   }
  ],
  "question": "What awards have been given to race horses bred by Bert Michell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Bert_S._Michell> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (NN race) (NNS horses)) (VP (VBN bred) (PP (IN by) (NP (NNP Bert) (NNP Michell)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 168
 },
 {
  "taggedQuestion": "Whose mayors are affiliated with Christen-Democratisch en Vlaams?",
  "entityMap": {
   "<e0>": "Christen - Democratisch"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose mayors #entity1",
    "originStr": "whose mayors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are affiliated with christen-democratisch en vlaams",
    "originStr": "are affiliated with christen-democratisch en vlaams"
   }
  ],
  "question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NML (NNS mayors))) (S (VP (VBP are) (VP (VBN affiliated) (PP (IN with) (NP (NP (NNP Christen) (HYPH -) (NNP Democratisch)) (PP (FW en) (NP (NNP Vlaams)))))))) (. ?)))",
  "entityNum": 2,
  "id": 169
 },
 {
  "taggedQuestion": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
    "originStr": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum"
   }
  ],
  "question": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/nationality> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (NP (NNP Viveka) (NNP Babajee) (NN anad) (NNP Ronny) (NNP Vencatachellum))))) (. ?)))",
  "entityNum": 1,
  "id": 170
 },
 {
  "taggedQuestion": "Is the Hyundai Lavita assembled in Ulsan?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Hyundai Lavita assembled in Ulsan",
    "originStr": "Is the Hyundai Lavita assembled in Ulsan"
   }
  ],
  "question": "Is the Hyundai Lavita assembled in Ulsan",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Ulsan))))))) (. ?)))",
  "entityNum": 1,
  "id": 171
 },
 {
  "taggedQuestion": "Which party won the elections when Y.S. Rajasekhara Reddy was in power?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which party won #entity1",
    "originStr": "which party won #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the elections when y.s. rajasekhara reddy was in power",
    "originStr": "the elections when y.s. rajasekhara reddy was in power"
   }
  ],
  "question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Election>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBD won) (NP (DT the) (NNS elections)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Y.S.) (NNP Rajasekhara) (NNP Reddy)) (VP (VBD was) (PP (IN in) (NP (NN power)))))))) (. ?)))",
  "entityNum": 2,
  "id": 172
 },
 {
  "taggedQuestion": "Where does the river begin whose left tributary is Krapanski Potok?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where does the river begin #entity1",
    "originStr": "where does the river begin #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose left tributary is krapanski potok",
    "originStr": "whose left tributary is krapanski potok"
   }
  ],
  "question": "Where does the river begin whose left tributary is Krapanski Potok",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Krapanski_Potok> . ?x <http://dbpedia.org/ontology/source> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NN river)) (VP (VB begin) (SBAR (WHNP (WP$ whose) (NML (JJ left) (NN tributary))) (S (VP (VBZ is) (NP (NNP Krapanski) (NNP Potok))))))) (. ?)))",
  "entityNum": 2,
  "id": 173
 },
 {
  "taggedQuestion": "What are the notable commanders of the army  whose one of the notable commanders is Paul Hausser?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the notable commanders of #entity1",
    "originStr": "what are the notable commanders of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the army whose one of the notable commanders is paul hausser",
    "originStr": "the army whose one of the notable commanders is paul hausser"
   }
  ],
  "question": "What are the notable commanders of the army whose one of the notable commanders is Paul Hausser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Paul_Hausser> . ?x <http://dbpedia.org/property/notableCommanders> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ notable) (NNS commanders)) (PP (IN of) (NP (NP (DT the) (NN army)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (JJ notable) (NNS commanders)))) (S (VP (VBZ is) (NP (NNP Paul) (NNP Hausser))))))))) (. ?)))",
  "entityNum": 2,
  "id": 174
 },
 {
  "taggedQuestion": "Name the source of Raa .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the source of Raa",
    "originStr": "Name the source of Raa"
   }
  ],
  "question": "Name the source of Raa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN source)) (PP (IN of) (NP (NN Raa))))) (. .)))",
  "entityNum": 1,
  "id": 175
 },
 {
  "taggedQuestion": "Does Fa'a<e0> serve tahiti too?",
  "entityMap": {
   "<e0>": "' International Airport"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does fa'a"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Fa'a' International Airport serve tahiti too",
    "originStr": "Does Fa'a' International Airport serve tahiti too"
   }
  ],
  "question": "Does Fa'a' International Airport serve tahiti too",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fa'a'\u0101_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Tahiti> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP Fa'a))) (S (NP (ADD <e0>)) (VP (VBP serve) (NP (NN tahiti)) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 176
 },
 {
  "taggedQuestion": "Who is the producer of  Frampton's Camel ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the producer of Frampton's Camel",
    "originStr": "Who is the producer of Frampton's Camel"
   }
  ],
  "question": "Who is the producer of Frampton's Camel",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NNP Frampton) (POS 's)) (NNP Camel))))) (. ?)))",
  "entityNum": 1,
  "id": 177
 },
 {
  "taggedQuestion": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)",
    "originStr": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)"
   }
  ],
  "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)> <http://dbpedia.org/ontology/director> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (NNS directors)) (PP (IN of) (NP (NNP Lennon) (NNP Legend)))) (: :) (NP (NP (DT The) (ADJP (RB Very) (JJS Best))) (PP (IN of) (NP (NNP John) (NNP Lennon) (-LRB- -LRB-) (NNP DVD) (-RRB- -RRB-)))))) (. .)))",
  "entityNum": 1,
  "id": 178
 },
 {
  "taggedQuestion": "What is the political party of <e0> and Indira Gandhi?",
  "entityMap": {
   "<e0>": "Arun Chandra Guha"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the political party of arun chandra guha and indira",
    "originStr": "what is the political party of arun chandra guha and indira"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "gandhi",
    "originStr": "gandhi"
   }
  ],
  "question": "What is the political party of Arun Chandra Guha and Indira Gandhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arun_Chandra_Guha> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NP (ADD <e0>)) (CC and) (NP (NNP Indira) (NNP Gandhi)))))) (. ?)))",
  "entityNum": 1,
  "id": 179
 },
 {
  "taggedQuestion": "Which country is Svetlana Navasardyan from?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which country is Svetlana Navasardyan from",
    "originStr": "To which country is Svetlana Navasardyan from"
   }
  ],
  "question": "To which country is Svetlana Navasardyan from",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ is) (NP (NNP Svetlana) (NNP Navasardyan)) (PP (IN from))) (. ?)))",
  "entityNum": 1,
  "id": 180
 },
 {
  "taggedQuestion": "What is the alma mater of the scientist who is known for Rational analysis ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the alma mater of #entity1",
    "originStr": "what is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist who is known for rational analysis",
    "originStr": "the scientist who is known for rational analysis"
   }
  ],
  "question": "What is the alma mater of the scientist who is known for Rational analysis",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (JJ Rational) (NN analysis))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 181
 },
 {
  "taggedQuestion": "Who is the owner of  Chelsea F.C. ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of Chelsea F.C",
    "originStr": "Who is the owner of Chelsea F.C"
   }
  ],
  "question": "Who is the owner of Chelsea F.C.",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Chelsea) (NNP F.C.))))) (. ?)))",
  "entityNum": 1,
  "id": 182
 },
 {
  "taggedQuestion": "How many places has <e0> worked?",
  "entityMap": {
   "<e0>": "Don R. Berlin"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in how many places",
    "originStr": "in how many places"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has don r. berlin worked",
    "originStr": "has don r. berlin worked"
   }
  ],
  "question": "In how many places has Don R. Berlin worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS places)) (VP (VBZ has) (NP (NP (ADD <e0>)) (VP (VBN worked))))) (. ?)))",
  "entityNum": 1,
  "id": 183
 },
 {
  "taggedQuestion": "How many movies are there whose musicians home town is in Volos ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "for how many movies are there #entity1",
    "originStr": "for how many movies are there #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose musicians home town is in volos",
    "originStr": "whose musicians home town is in volos"
   }
  ],
  "question": "For how many movies are there whose musicians home town is in Volos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS movies))) (SQ (VBP are) (NP (EX there)) (SBAR (WHNP (WP$ whose) (NNS musicians)) (S (ADVP (RB home)) (NP (NN town)) (VP (VBZ is) (PP (IN in) (NP (NNP Volos))))))) (. ?)))",
  "entityNum": 2,
  "id": 184
 },
 {
  "taggedQuestion": "In all the places with a stagecoach, where is a <e0> located too?",
  "entityMap": {
   "<e0>": "Peetz Table Wind Energy Center"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too",
    "originStr": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too"
   }
  ],
  "question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stagecoach,_Colorado> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (PP (IN In) (NP (NP (PDT all) (DT the) (NNS places)) (PP (IN with) (NP (DT a) (NN stagecoach))))) (, ,) (WHADVP (WRB where)) (SQ (VBZ is) (NP (DT a) (NN <e0>)) (VP (VBN located) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 185
 },
 {
  "taggedQuestion": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species <e0>.",
  "entityMap": {
   "<e0>": "American Pekin duck"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the fictional character whose relatives are huey, dewey",
    "originStr": "name the fictional character whose relatives are huey, dewey"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and louie and is of species american pekin duck",
    "originStr": "and louie and is of species american pekin duck"
   }
  ],
  "question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NML (NNS relatives))) (S (VP (VP (VBP are) (NP (NNP Huey) (, ,) (NNP Dewey) (, ,) (CC and) (NNP Louie))) (CC and) (VP (VBZ is) (PP (IN of) (NP (NNS species)))))))) (ADD <e0>))) (. .)))",
  "entityNum": 1,
  "id": 186
 },
 {
  "taggedQuestion": "Who is the owner of the website which has the label Seed Eight ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the owner of #entity1",
    "originStr": "who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the website which has the label seed eight",
    "originStr": "the website which has the label seed eight"
   }
  ],
  "question": "Who is the owner of the website which has the label Seed Eight",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seed_Eight> <http://dbpedia.org/property/label> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Website>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NN website)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN label) (NN Seed) (CD Eight))))))))) (. ?)))",
  "entityNum": 2,
  "id": 187
 },
 {
  "taggedQuestion": "Which country is <e0>?",
  "entityMap": {
   "<e0>": "Sierra del Merendin"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which country is Sierra del Merendin",
    "originStr": "In which country is Sierra del Merendin"
   }
  ],
  "question": "In which country is Sierra del Merendin",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VP (VBZ is) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 188
 },
 {
  "taggedQuestion": "What is on the border of the places which fall under crook county municipality, oregon?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is on the border of #entity1",
    "originStr": "what is on the border of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the places which fall under crook county municipality, oregon",
    "originStr": "the places which fall under crook county municipality, oregon"
   }
  ],
  "question": "What is on the border of the places which fall under crook county municipality, oregon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Crook_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (PP (IN on) (NP (NP (DT the) (NN border)) (PP (IN of) (NP (NP (DT the) (NNS places)) (SBAR (WHNP (WDT which)) (S (VP (VBP fall) (PP (IN under) (NP (NP (NN crook) (NN county) (NN municipality)) (, ,) (NP (NNP oregon)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 189
 },
 {
  "taggedQuestion": "Which is the university of Vanderbilt Commodores ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which is the university of Vanderbilt Commodores",
    "originStr": "Which is the university of Vanderbilt Commodores"
   }
  ],
  "question": "Which is the university of Vanderbilt Commodores",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (PP (IN of) (NP (NNP Vanderbilt) (NNPS Commodores))))) (. ?)))",
  "entityNum": 1,
  "id": 190
 },
 {
  "taggedQuestion": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has relatives are clan mcduck and huey, dewey, and",
    "originStr": "has relatives are clan mcduck and huey, dewey, and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose relatives are clan mcduck and huey, dewey, and louie",
    "originStr": "whose relatives are clan mcduck and huey, dewey, and louie"
   }
  ],
  "question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS relatives))) (SQ (VBP are) (NP (NP (NNP Clan) (NNP McDuck)) (CC and) (NP (NNP Huey) (, ,) (NNP Dewey) (, ,) (CC and) (NNP Louie)))) (. ?)))",
  "entityNum": 1,
  "id": 191
 },
 {
  "taggedQuestion": "What musicians are signed up with colpix records?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what musicians",
    "originStr": "what musicians"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are signed up with colpix records",
    "originStr": "are signed up with colpix records"
   }
  ],
  "question": "What musicians are signed up with colpix records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Colpix_Records>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS musicians)) (VP (VBP are) (VP (VBN signed) (PRT (RP up)) (PP (IN with) (NP (NN colpix) (NNS records)))))) (. ?)))",
  "entityNum": 1,
  "id": 192
 },
 {
  "taggedQuestion": "Who is the person that first ascented the Cathedral Peak and Mount Hoffmann?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the person",
    "originStr": "who is the person"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "that first ascended the cathedral peak and mount hoffmann",
    "originStr": "that first ascended the cathedral peak and mount hoffmann"
   }
  ],
  "question": "Who is the person that first ascended the Cathedral Peak and Mount Hoffmann",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri. <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WDT that)) (S (ADVP (RB first)) (VP (VBD ascented) (NP (NP (DT the) (NNP Cathedral) (NN Peak)) (CC and) (NP (NNP Mount) (NNP Hoffmann)))))))) (. ?)))",
  "entityNum": 1,
  "id": 193
 },
 {
  "taggedQuestion": "What currencies are used in the country whose capital is Podgorica?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what currencies are used in #entity1",
    "originStr": "what currencies are used in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country whose capital is podgorica",
    "originStr": "the country whose capital is podgorica"
   }
  ],
  "question": "What currencies are used in the country whose capital is Podgorica",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Podgorica> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT What)) (S (NP (NNS currencies)) (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (DT the) (NN country))))))) (WHNP (WP$ whose) (NN capital)) (SQ (VBZ is) (NP (NNP Podgorica))) (. ?)))",
  "entityNum": 2,
  "id": 194
 },
 {
  "taggedQuestion": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many other home stadium are there of #entity1",
    "originStr": "how many other home stadium are there of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club whose home stadium is luzhniki stadium",
    "originStr": "the soccer club whose home stadium is luzhniki stadium"
   }
  ],
  "question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ other) (NN home) (NN stadium)) (SQ (VBP are) (NP (NP (RB there)) (PP (IN of) (NP (NP (DT the) (NN soccer) (NN club)) (SBAR (WHNP (WP$ whose) (NN home) (NN stadium)) (S (VP (VBZ is) (NP (NNP Luzhniki) (NNP Stadium))))))))) (. ?)))",
  "entityNum": 2,
  "id": 195
 },
 {
  "taggedQuestion": "Where was  William Anthony  trained ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was William Anthony trained",
    "originStr": "Where was William Anthony trained"
   }
  ],
  "question": "Where was William Anthony trained",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP William) (NNP Anthony)) (VP (VBN trained))) (. ?)))",
  "entityNum": 1,
  "id": 196
 },
 {
  "taggedQuestion": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which composer of motorpsycho nitemare",
    "originStr": "which composer of motorpsycho nitemare"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has also composed the time are a-changing",
    "originStr": "has also composed the time are a-changing"
   }
  ],
  "question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN composer)) (PP (IN of) (NP (NNP Motorpsycho) (NNP Nitemare)))) (SQ (VP (VBZ has) (ADVP (RB also)) (VP (VBN composed) (SBAR (S (NP (DT The) (NN time)) (VP (VBP are) (NP (NN A-Changing)))))))) (. ?)))",
  "entityNum": 1,
  "id": 197
 },
 {
  "taggedQuestion": "What river is it whose source is Dowra?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what river is it",
    "originStr": "what river is it"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose source is dowra",
    "originStr": "whose source is dowra"
   }
  ],
  "question": "What river is it whose source is Dowra",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VBZ is) (NP (PRP it)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (NP (NNP Dowra)))))) (. ?)))",
  "entityNum": 1,
  "id": 198
 },
 {
  "taggedQuestion": "What is the religion of the president who won the <e0>, 2004 ?",
  "entityMap": {
   "<e0>": "Mongolian legislative election"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the religion of #entity1",
    "originStr": "what is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president who won the mongolian legislative election, 2004",
    "originStr": "the president who won the mongolian legislative election, 2004"
   }
  ],
  "question": "What is the religion of the president who won the Mongolian legislative election, 2004",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mongolian_legislative_election,_2004> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD won) (NP (NP (DT the) (NN <e0>)) (, ,) (NP (CD 2004)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 199
 },
 {
  "taggedQuestion": "Give me everything owned by networks which is lead by Steve Burke.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me everything owned by #entity1",
    "originStr": "give me everything owned by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "networks which is lead by steve burke",
    "originStr": "networks which is lead by steve burke"
   }
  ],
  "question": "Give me everything owned by networks which is lead by Steve Burke",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN everything)) (VP (VBN owned) (PP (IN by) (NP (NP (NNS networks)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (JJ lead)) (PP (IN by) (NP (NNP Steve) (NNP Burke)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 200
 },
 {
  "taggedQuestion": "What is the municipality of <e0> ?",
  "entityMap": {
   "<e0>": "Homestead Grays Bridge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the municipality of Homestead Grays Bridge",
    "originStr": "What is the municipality of Homestead Grays Bridge"
   }
  ],
  "question": "What is the municipality of Homestead Grays Bridge",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 201
 },
 {
  "taggedQuestion": "What religion do the politicians follow, who graduated from the <e0>?",
  "entityMap": {
   "<e0>": "Yokkohama Nationaal University"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what religion do the politicians follow, #entity1",
    "originStr": "what religion do the politicians follow, #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who graduated from the yokohama national university",
    "originStr": "who graduated from the yokohama national university"
   }
  ],
  "question": "What religion do the politicians follow, who graduated from the Yokohama National University",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS politicians)) (VP (VBP follow)))) (, ,) (SBARQ (WHNP (WP who)) (SQ (VP (VBD graduated) (PP (IN from) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 202
 },
 {
  "taggedQuestion": "Who is the narrator of <e0> , <e1> ?",
  "entityMap": {
   "<e1>": "1982 TV series",
   "<e0>": "The Incredible Hulk"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the narrator of The Incredible Hulk , 1982 TV series",
    "originStr": "Who is the narrator of The Incredible Hulk , 1982 TV series"
   }
  ],
  "question": "Who is the narrator of The Incredible Hulk , 1982 TV series",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (NN <e0>)) (, ,) (NP (NN <e1>)))))) (. ?)))",
  "entityNum": 1,
  "id": 203
 },
 {
  "taggedQuestion": "What sports are played in schools where Swahili is the official language?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what sports are played in #entity1",
    "originStr": "what sports are played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "schools where swahili is the official language",
    "originStr": "schools where swahili is the official language"
   }
  ],
  "question": "What sports are played in schools where Swahili is the official language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swahili_language> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS sports)) (SQ (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Swahili)) (VP (VBZ is) (NP (DT the) (JJ official) (NN language))))))))) (. ?)))",
  "entityNum": 2,
  "id": 204
 },
 {
  "taggedQuestion": "Which interest of Philip Novak is the relegion of Vesak ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which interest of philip novak",
    "originStr": "which interest of philip novak"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the religion of vesak",
    "originStr": "is the religion of vesak"
   }
  ],
  "question": "Which interest of Philip Novak is the religion of Vesak",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN interest)) (PP (IN of) (NP (NNP Philip) (NNP Novak)))) (SQ (VBZ is) (NP (NP (DT the) (NN relegion)) (PP (IN of) (NP (NNP Vesak))))) (. ?)))",
  "entityNum": 1,
  "id": 205
 },
 {
  "taggedQuestion": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family .",
  "entityMap": {
   "<e0>": "Anglo - Frisian language family"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count all the ethinic group who speaks #entity1",
    "originStr": "count all the ethinic group who speaks #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "language which belongs to anglo-frisian language family",
    "originStr": "language which belongs to anglo-frisian language family"
   }
  ],
  "question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Anglo-Frisian_languages> . ?uri <http://dbpedia.org/property/languages> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ ethinic) (NN group)) (SBAR (WHNP (WP who)) (S (VP (VBZ speaks) (NP (NP (NN language)) (SBAR (WHNP (WDT which)) (S (VP (VBZ belongs) (PP (IN to) (NP (ADJP (JJ Anglo) (HYPH -) (JJ Frisian)) (NN language) (NN family)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 206
 },
 {
  "taggedQuestion": "What is the area of the <e0> which is  official residence of the Michael Nichols (photographer) ?",
  "entityMap": {
   "<e0>": "Tar Heel Sports Network"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the area of the tar heel sports network",
    "originStr": "what is the area of the tar heel sports network"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is official residence of the michael nichols (photographer)",
    "originStr": "which is official residence of the michael nichols (photographer)"
   }
  ],
  "question": "What is the area of the Tar Heel Sports Network which is official residence of the Michael Nichols (photographer)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri. <http://dbpedia.org/resource/Michael_Nichols_(photographer)> <http://dbpedia.org/ontology/residence> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (JJ official) (NN residence)) (PP (IN of) (NP (DT the) (NNP Michael) (NNP Nichols)))) (PRN (-LRB- -LRB-) (NP (NN photographer)) (-RRB- -RRB-))))))))) (. ?)))",
  "entityNum": 1,
  "id": 207
 },
 {
  "taggedQuestion": "Cologny and Lancy are the neighboring municipalities of which place ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "cologny and lancy are the neighboring municipalities of",
    "originStr": "cologny and lancy are the neighboring municipalities of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which place",
    "originStr": "which place"
   }
  ],
  "question": "Cologny and Lancy are the neighboring municipalities of which place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Cologny) (CC and) (NNP Lancy)) (VP (VBP are) (NP (NP (DT the) (NN neighboring) (NNS municipalities)) (PP (IN of) (NP (WDT which) (NN place))))) (. ?)))",
  "entityNum": 1,
  "id": 208
 },
 {
  "taggedQuestion": "How many artists have their works in the <e0> of Art?",
  "entityMap": {
   "<e0>": "Sao Paolo Museum"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many artists",
    "originStr": "how many artists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have their works in the sao paolo museum of art",
    "originStr": "have their works in the sao paolo museum of art"
   }
  ],
  "question": "How many artists have their works in the Sao Paolo Museum of Art",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS artists)) (VP (VBP have) (NP (PRP$ their) (NNS works)) (PP (IN in) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NN Art))))))) (. ?)))",
  "entityNum": 1,
  "id": 209
 },
 {
  "taggedQuestion": "VP-8 and VP-10 shares which command structure ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "vp-8 and vp-10 shares which command",
    "originStr": "vp-8 and vp-10 shares which command"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "structure",
    "originStr": "structure"
   }
  ],
  "question": "VP-8 and VP-10 shares which command structure",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/VP-8> <http://dbpedia.org/ontology/commandStructure> ?uri. <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?uri . }",
  "syntaxTreeText": "(ROOT (NP (NP (NML (NML (NN VP) (HYPH -) (CD 8)) (CC and) (NML (NN VP) (HYPH -) (CD 10))) (NNS shares)) (SBAR (WHNP (WDT which)) (S (VP (VBP command) (NP (NN structure))))) (. ?)))",
  "entityNum": 1,
  "id": 210
 },
 {
  "taggedQuestion": "What is used as money for <e0> is also the  product of the Karafarin Bank ?",
  "entityMap": {
   "<e0>": "French Southern and Antarctic Lands"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what",
    "originStr": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is used as money for french southern and antarctic lands is also the product of the karafarin bank",
    "originStr": "is used as money for french southern and antarctic lands is also the product of the karafarin bank"
   }
  ],
  "question": "What is used as money for French Southern and Antarctic Lands is also the product of the Karafarin Bank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN used) (SBAR (IN as) (S (NP (NP (NN money)) (PP (IN for) (NP (NN <e0>)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN product)) (PP (IN of) (NP (DT the) (NNP Karafarin) (NNP Bank))))))))) (. ?)))",
  "entityNum": 1,
  "id": 211
 },
 {
  "taggedQuestion": "Give me the total number of membership of the organisations which have memebers as  Azerbaijan.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me the total number of membership of #entity1",
    "originStr": "give me the total number of membership of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the organisations which have members as azerbaijan",
    "originStr": "the organisations which have members as azerbaijan"
   }
  ],
  "question": "Give me the total number of membership of the organisations which have members as Azerbaijan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> . ?x <http://dbpedia.org/property/membership> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN membership)) (PP (IN of) (NP (NP (DT the) (NNS organisations)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS memebers)) (PP (IN as) (NP (NNP Azerbaijan))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 212
 },
 {
  "taggedQuestion": "What is the content licence of MSX BASIC ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the content license of MSX BASIC",
    "originStr": "What is the content license of MSX BASIC"
   }
  ],
  "question": "What is the content license of MSX BASIC",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN content) (NN licence)) (PP (IN of) (NP (NNP MSX) (NN BASIC))))) (. ?)))",
  "entityNum": 1,
  "id": 213
 },
 {
  "taggedQuestion": "What are the central characters in <e0>?",
  "entityMap": {
   "<e0>": "spy kids series"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the central characters in #entity1",
    "originStr": "what are the central characters in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "spy kids series",
    "originStr": "spy kids series"
   }
  ],
  "question": "What are the central characters in spy kids series",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Spy_Kids_(franchise)>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ central) (NNS characters)) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 214
 },
 {
  "taggedQuestion": "Which comic characters were created by Paul Dini?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which comic characters",
    "originStr": "which comic characters"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were created by paul dini",
    "originStr": "were created by paul dini"
   }
  ],
  "question": "Which comic characters were created by Paul Dini",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ comic) (NNS characters)) (SQ (VP (VBD were) (VP (VBN created) (PP (IN by) (NP (NNP Paul) (NNP Dini)))))) (. ?)))",
  "entityNum": 1,
  "id": 215
 },
 {
  "taggedQuestion": "Who owns the ship Victoria?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who owns the ship Victoria",
    "originStr": "who owns the ship Victoria"
   }
  ],
  "question": "who owns the ship Victoria",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victoria_(ship)> <http://dbpedia.org/ontology/owner> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (DT the) (NN ship)) (S (NP (NNP Victoria))))) (. ?)))",
  "entityNum": 1,
  "id": 216
 },
 {
  "taggedQuestion": "Where was the predecessor of Sevan Ross born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was #entity1 born",
    "originStr": "where was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of sevan ross",
    "originStr": "the predecessor of sevan ross"
   }
  ],
  "question": "Where was the predecessor of Sevan Ross born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Sevan) (NNP Ross)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 217
 },
 {
  "taggedQuestion": "Which city council owns the <e0> and <e1>?",
  "entityMap": {
   "<e1>": "Leonard Memorial ridge",
   "<e0>": "Ted Williams tunnel"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which city council",
    "originStr": "which city council"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "owns the ted williams tunnel and leonard memorial ridge",
    "originStr": "owns the ted williams tunnel and leonard memorial ridge"
   }
  ],
  "question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (NP (NN council)) (VP (VBZ owns) (NP (DT the) (NN <e0>) (CC and) (NN <e1>)))) (. ?)))",
  "entityNum": 1,
  "id": 218
 },
 {
  "taggedQuestion": "Where is the school which is the rival of Somerset Berkley Regional High?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where is #entity1",
    "originStr": "where is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the school which is the rival of somerset berkley regional high",
    "originStr": "the school which is the rival of somerset berkley regional high"
   }
  ],
  "question": "Where is the school which is the rival of Somerset Berkley Regional High",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN school)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN rival)) (PP (IN of) (NP (NNP Somerset) (NNP Berkley) (NNP Regional) (NNP High))))))))) (. ?)))",
  "entityNum": 2,
  "id": 219
 },
 {
  "taggedQuestion": "How many soccer manager have been in the <e0>?",
  "entityMap": {
   "<e0>": "Spain nation football team"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many soccer manager",
    "originStr": "how many soccer manager"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have been in the spain nation football team",
    "originStr": "have been in the spain nation football team"
   }
  ],
  "question": "How many soccer manager have been in the Spain nation football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN soccer) (NN manager)) (VP (VBP have) (VP (VBN been) (PP (IN in) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 220
 },
 {
  "taggedQuestion": "Name the common alma mater of the <e0> and Jack McGregor",
  "entityMap": {
   "<e0>": "Henry Morton Dexter"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common alma mater of the henry morton dexter and jack",
    "originStr": "name the common alma mater of the henry morton dexter and jack"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "mcgregor",
    "originStr": "mcgregor"
   }
  ],
  "question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (NNP Jack) (NNP McGregor))))))))",
  "entityNum": 1,
  "id": 221
 },
 {
  "taggedQuestion": "What are some companies which are founded in Dallas Jurisdiction?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are some companies",
    "originStr": "what are some companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which are founded in dallas jurisdiction",
    "originStr": "which are founded in dallas jurisdiction"
   }
  ],
  "question": "What are some companies which are founded in Dallas Jurisdiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS companies)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN founded) (PP (IN in) (NP (NNP Dallas) (NN Jurisdiction))))))))) (. ?)))",
  "entityNum": 1,
  "id": 222
 },
 {
  "taggedQuestion": "How many bands collaborated with artists who signed up with EMI?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many bands collaborated with #entity1",
    "originStr": "how many bands collaborated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "artists who signed up with emi",
    "originStr": "artists who signed up with emi"
   }
  ],
  "question": "How many bands collaborated with artists who signed up with EMI",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS bands)) (VP (VBD collaborated) (PP (IN with) (NP (NNS artists)))))) (WHNP (WP who)) (SQ (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI))))) (. ?)))",
  "entityNum": 2,
  "id": 223
 },
 {
  "taggedQuestion": "What is the purpose of <e0> ?",
  "entityMap": {
   "<e0>": "New Zealand Chess Federation"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the purpose of New Zealand Chess Federation",
    "originStr": "What is the purpose of New Zealand Chess Federation"
   }
  ],
  "question": "What is the purpose of New Zealand Chess Federation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN purpose)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 224
 },
 {
  "taggedQuestion": "How many TV shows are of the company which are of company which is a subsidiary of <e0> ?",
  "entityMap": {
   "<e0>": "Big  Ticket Entertainment"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many tv shows are of #entity1",
    "originStr": "how many tv shows are of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which are of company which is a subsidiary of big ticket entertainment",
    "originStr": "the company which are of company which is a subsidiary of big ticket entertainment"
   }
  ],
  "question": "How many TV shows are of the company which are of company which is a subsidiary of Big Ticket Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NN TV) (NNS shows)) (VP (VBP are) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN of) (NP (NP (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT a) (NN subsidiary)) (PP (IN of) (NP (NN <e0>)))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 225
 },
 {
  "taggedQuestion": "Who operates <e0> ?",
  "entityMap": {
   "<e0>": "twin Cities 400"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who operates twin Cities 400",
    "originStr": "Who operates twin Cities 400"
   }
  ],
  "question": "Who operates twin Cities 400",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ operates) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 226
 },
 {
  "taggedQuestion": "What is the city of the <e0> is also the resting place of <e1> ?",
  "entityMap": {
   "<e1>": "Charles A. Boutelle",
   "<e0>": "Maine School of Science and Mathematics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what",
    "originStr": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the city of the maine school of science and mathematics is also the resting place of charles a. boutelle",
    "originStr": "is the city of the maine school of science and mathematics is also the resting place of charles a. boutelle"
   }
  ],
  "question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri. <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/property/restingplace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (NN <e1>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 227
 },
 {
  "taggedQuestion": "Give me a count of royalties buried in Rome .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me a count of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give me a count of royalties",
    "originStr": "give me a count of royalties"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "buried in rome",
    "originStr": "buried in rome"
   }
  ],
  "question": "Give me a count of royalties buried in Rome",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT a) (NN count)) (PP (IN of) (NP (NP (NNS royalties)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. .)))",
  "entityNum": 1,
  "id": 228
 },
 {
  "taggedQuestion": "How many places are Marjas found?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in how many places are #entity1 found",
    "originStr": "in how many places are #entity1 found"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "marjas",
    "originStr": "marjas"
   }
  ],
  "question": "In how many places are Marjas found",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Marja'> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS places))) (SQ (VBP are) (NP (NNP Marjas)) (VP (VBN found))) (. ?)))",
  "entityNum": 2,
  "id": 229
 },
 {
  "taggedQuestion": "List the soccer players whose current team has the ground Stoke-on-Trent.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the soccer players whose current team #entity1",
    "originStr": "list the soccer players whose current team #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has the ground stoke-on-trent",
    "originStr": "has the ground stoke-on-trent"
   }
  ],
  "question": "List the soccer players whose current team has the ground Stoke-on-Trent",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP$ whose) (ADJP (JJ current)) (NN team)) (S (VP (VBZ has) (NP (NP (DT the) (NN ground) (NN Stoke)) (HYPH -) (PP (IN on) (HYPH -) (NP (NNP Trent))))))))) (. .)))",
  "entityNum": 2,
  "id": 230
 },
 {
  "taggedQuestion": "Which are the countires where Pioneer Corporation has flourished?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which are the countries",
    "originStr": "which are the countries"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where pioneer corporation has flourished",
    "originStr": "where pioneer corporation has flourished"
   }
  ],
  "question": "Which are the countries where Pioneer Corporation has flourished",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NNS countires)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Pioneer) (NNP Corporation)) (VP (VBZ has) (VP (VBN flourished))))))) (. ?)))",
  "entityNum": 1,
  "id": 231
 },
 {
  "taggedQuestion": "Who is the president of Carl Stokes nad Wyche Fowler ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the president of Carl Stokes and Wyche Fowler",
    "originStr": "Who is the president of Carl Stokes and Wyche Fowler"
   }
  ],
  "question": "Who is the president of Carl Stokes and Wyche Fowler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Carl) (NNP Stokes) (NNP nad) (NNP Wyche) (NNP Fowler))))) (. ?)))",
  "entityNum": 1,
  "id": 232
 },
 {
  "taggedQuestion": "Is <e0> the national anthem of United Kingdom?",
  "entityMap": {
   "<e0>": "God Save the Queen"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is God Save the Queen the national anthem of United Kingdom",
    "originStr": "Is God Save the Queen the national anthem of United Kingdom"
   }
  ],
  "question": "Is God Save the Queen the national anthem of United Kingdom",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (NP (DT the) (JJ national) (NN anthem)) (IN of))) (NP (NNP United) (NNP Kingdom)) (. ?)))",
  "entityNum": 1,
  "id": 233
 },
 {
  "taggedQuestion": "List few <e0> ?",
  "entityMap": {
   "<e0>": "Swedish language movies"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list few swedish language",
    "originStr": "list few swedish language"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "movies",
    "originStr": "movies"
   }
  ],
  "question": "List few Swedish language movies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (JJ few) (NN <e0>)) (. ?)))",
  "entityNum": 1,
  "id": 234
 },
 {
  "taggedQuestion": "Was christina crawford trained by Booker T?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was christina crawford trained by Booker T",
    "originStr": "Was christina crawford trained by Booker T"
   }
  ],
  "question": "Was christina crawford trained by Booker T",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP christina) (NNP crawford)) (VP (VBN trained) (PP (IN by) (NP (NNP Booker) (NNP T)))) (. ?)))",
  "entityNum": 1,
  "id": 235
 },
 {
  "taggedQuestion": "What is the currency of Kerguelen Islands ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the currency of Kerguelen Islands",
    "originStr": "What is the currency of Kerguelen Islands"
   }
  ],
  "question": "What is the currency of Kerguelen Islands",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN currency)) (PP (IN of) (NP (NNP Kerguelen) (NNPS Islands))))) (. ?)))",
  "entityNum": 1,
  "id": 236
 },
 {
  "taggedQuestion": "What are the musicals whose musicians worked under <e0>?",
  "entityMap": {
   "<e0>": "Sony Music Entertainment"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the musicals whose musicians #entity1",
    "originStr": "what are the musicals whose musicians #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "worked under sony music entertainment",
    "originStr": "worked under sony music entertainment"
   }
  ],
  "question": "What are the musicals whose musicians worked under Sony Music Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS musicals)) (SBAR (WHNP (WP$ whose) (NNS musicians)) (S (VP (VBD worked) (PP (IN under) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 237
 },
 {
  "taggedQuestion": "Whose shrines are in a place governed by Justin Trudeau?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose shrines are in #entity1",
    "originStr": "whose shrines are in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a place governed by justin trudeau",
    "originStr": "a place governed by justin trudeau"
   }
  ],
  "question": "Whose shrines are in a place governed by Justin Trudeau",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Justin_Trudeau> . ?uri <http://dbpedia.org/ontology/majorShrine> ?x  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NNS shrines)) (S (VP (VBP are) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NNP Justin) (NNP Trudeau)))))))) (. ?)))",
  "entityNum": 2,
  "id": 238
 },
 {
  "taggedQuestion": "What are the academic interests of the past members of Senser?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the academic interests of #entity1",
    "originStr": "what are the academic interests of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the past members of senser",
    "originStr": "the past members of senser"
   }
  ],
  "question": "What are the academic interests of the past members of Senser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?x . ?x <http://dbpedia.org/property/mainInterests> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ academic) (NNS interests)) (PP (IN of) (NP (NP (DT the) (JJ past) (NNS members)) (PP (IN of) (NP (NNP Senser))))))) (. ?)))",
  "entityNum": 2,
  "id": 239
 },
 {
  "taggedQuestion": "Who is the leader of Hackweiser ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the leader of Hackweiser",
    "originStr": "Who is the leader of Hackweiser"
   }
  ],
  "question": "Who is the leader of Hackweiser",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/property/leaderName> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Hackweiser))))) (. ?)))",
  "entityNum": 1,
  "id": 240
 },
 {
  "taggedQuestion": "Which city is the sister station of KTXY located ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which city is #entity1 located",
    "originStr": "in which city is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sister station of ktxy",
    "originStr": "the sister station of ktxy"
   }
  ],
  "question": "In which city is the sister station of KTXY located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/city> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ is) (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NNP KTXY)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 241
 },
 {
  "taggedQuestion": "Where was the successor of Hank Brown born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was #entity1 born",
    "originStr": "where was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the successor of hank brown",
    "originStr": "the successor of hank brown"
   }
  ],
  "question": "Where was the successor of Hank Brown born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP Hank) (NNP Brown)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 242
 },
 {
  "taggedQuestion": "Name the constituency of Jonas Gahr where Sverre Krogh was born .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the constituency of jonas gahr",
    "originStr": "name the constituency of jonas gahr"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where sverre krogh was born",
    "originStr": "where sverre krogh was born"
   }
  ],
  "question": "Name the constituency of Jonas Gahr where Sverre Krogh was born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN constituency)) (PP (IN of) (NP (NNP Jonas) (NNP Gahr)))) (SBAR (WHADVP (WRB where)) (S (NP (NNP Sverre) (NNP Krogh)) (VP (VBD was) (VP (VBN born)))))) (. .)))",
  "entityNum": 1,
  "id": 243
 },
 {
  "taggedQuestion": "What is the common battle fought by Stephen Urban and <e0> ?",
  "entityMap": {
   "<e0>": "Ali Habib Mahmud"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the common battle fought by stephen urban and ali habib",
    "originStr": "what is the common battle fought by stephen urban and ali habib"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "mahmud",
    "originStr": "mahmud"
   }
  ],
  "question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_Urban> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJ common) (NN battle)) (VP (VBN fought) (PP (IN by) (NP (NP (NNP Stephen) (NNP Urban)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 244
 },
 {
  "taggedQuestion": "What is the relegious affiliations of Katyayana ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the relegious affiliations of Katyayana",
    "originStr": "What is the relegious affiliations of Katyayana"
   }
  ],
  "question": "What is the relegious affiliations of Katyayana",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ relegious) (NNS affiliations)) (PP (IN of) (NP (NNP Katyayana))))) (. ?)))",
  "entityNum": 1,
  "id": 245
 },
 {
  "taggedQuestion": "Where was the engineer born who manufactured EP R.E.P. 1?",
  "entityMap": {
   "<e0>": "EP R.E. P. 1"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was the engineer born #entity1",
    "originStr": "where was the engineer born #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who manufactured ep r.e.p. 1",
    "originStr": "who manufactured ep r.e.p. 1"
   }
  ],
  "question": "Where was the engineer born who manufactured EP R.E.P. 1",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1> <http://dbpedia.org/property/manufacturer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN engineer)) (VP (VBN born) (SBAR (WHNP (WP who)) (S (VP (VBD manufactured) (NP (NNP EP) (NNP R.E.P.) (CD 1))))))) (. ?)))",
  "entityNum": 2,
  "id": 246
 },
 {
  "taggedQuestion": "Who all have been a manager of english under twenty one football team?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who all have been a manager of #entity1",
    "originStr": "who all have been a manager of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "english under twenty one football team",
    "originStr": "english under twenty one football team"
   }
  ],
  "question": "who all have been a manager of english under twenty one football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN been) (NP (NP (DT a) (NN manager)) (PP (IN of) (NP (NNP english)))) (PP (IN under) (NP (QP (CD twenty) (CD one)) (NN football) (NN team)))))) (. ?)))",
  "entityNum": 2,
  "id": 247
 },
 {
  "taggedQuestion": "What is the military conflict whose commanders are John McEwen and <e0>?",
  "entityMap": {
   "<e0>": "Phm Vn ng"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the military conflict",
    "originStr": "what is the military conflict"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose commanders are john mcewen and phm vn ng",
    "originStr": "whose commanders are john mcewen and phm vn ng"
   }
  ],
  "question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN conflict)) (SBAR (WHNP (WP$ whose) (NNS commanders)) (S (VP (VBP are) (NP (NP (NNP John) (NNP McEwen)) (CC and) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 1,
  "id": 248
 },
 {
  "taggedQuestion": "Which party has come in power in Mumbai North?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which party",
    "originStr": "which party"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has come in power in mumbai north",
    "originStr": "has come in power in mumbai north"
   }
  ],
  "question": "Which party has come in power in Mumbai North",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBZ has) (VP (VBN come) (PP (IN in) (NP (NN power))) (PP (IN in) (NP (NNP Mumbai) (NNP North)))))) (. ?)))",
  "entityNum": 1,
  "id": 249
 },
 {
  "taggedQuestion": "Name the tv show with judges Randy Jackson and Jennifer Lopez.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the tv show",
    "originStr": "name the tv show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with judges randy jackson and jennifer lopez",
    "originStr": "with judges randy jackson and jennifer lopez"
   }
  ],
  "question": "Name the tv show with judges Randy Jackson and Jennifer Lopez",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN tv) (NN show)) (PP (IN with) (NP (NP (NP (NNS judges)) (NP (NNP Randy) (NNP Jackson))) (CC and) (NP (NNP Jennifer) (NNP Lopez))))) (. .)))",
  "entityNum": 1,
  "id": 250
 },
 {
  "taggedQuestion": "What is the largest city of the country which hosted the <e0>?",
  "entityMap": {
   "<e0>": "1951 Asian Games"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the largest city of #entity1",
    "originStr": "what is the largest city of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country which hosted the 1951 asian games",
    "originStr": "the country which hosted the 1951 asian games"
   }
  ],
  "question": "What is the largest city of the country which hosted the 1951 Asian Games",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBD hosted) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 251
 },
 {
  "taggedQuestion": "Which royalty was married to <e0> and had mother named Cleopatra V ?",
  "entityMap": {
   "<e0>": "ptolemy XIII Theos Philopator"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which royalty",
    "originStr": "which royalty"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was married to ptolemy xiii theos philopator and had mother named cleopatra v",
    "originStr": "was married to ptolemy xiii theos philopator and had mother named cleopatra v"
   }
  ],
  "question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN royalty)) (SQ (VBD was) (VP (VP (VBN married) (PP (IN to) (NP (ADD <e0>)))) (CC and) (VP (VBD had) (NP (NP (NN mother)) (VP (VBN named) (NP (NNP Cleopatra) (NNP V))))))) (. ?)))",
  "entityNum": 1,
  "id": 252
 },
 {
  "taggedQuestion": "Whose theme music was composed by a band which collaborated with Phish?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose theme music was composed by #entity1",
    "originStr": "whose theme music was composed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a band which collaborated with phish",
    "originStr": "a band which collaborated with phish"
   }
  ],
  "question": "Whose theme music was composed by a band which collaborated with Phish",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose) (NML (NN theme))) (NN music)) (SQ (VBD was) (VP (VBN composed) (PP (IN by) (NP (NP (DT a) (NN band)) (SBAR (WHNP (WDT which)) (S (VP (VBD collaborated) (PP (IN with) (NP (NNP Phish)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 253
 },
 {
  "taggedQuestion": "Is morrissey in the smiths?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is morrissey in the smiths",
    "originStr": "Is morrissey in the smiths"
   }
  ],
  "question": "Is morrissey in the smiths",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN morrissey)) (PP (IN in) (NP (DT the) (NNS smiths))) (. ?)))",
  "entityNum": 1,
  "id": 254
 },
 {
  "taggedQuestion": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which administrative headquarters of the pulau ubin",
    "originStr": "which administrative headquarters of the pulau ubin"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the resting place of the nicole lai",
    "originStr": "is also the resting place of the nicole lai"
   }
  ],
  "question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ administrative) (NN headquarters)) (PP (IN of) (NP (DT the) (NNP Pulau) (NNP Ubin))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (DT the) (NNP Nicole) (NNP Lai))))) (. ?)))",
  "entityNum": 1,
  "id": 255
 },
 {
  "taggedQuestion": "Where did the beverages sold by Refriango originate?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did #entity1 originate",
    "originStr": "where did #entity1 originate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the beverages sold by refriango",
    "originStr": "the beverages sold by refriango"
   }
  ],
  "question": "Where did the beverages sold by Refriango originate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS beverages)) (VP (VBN sold) (PP (IN by) (NP (NNP Refriango))))) (VP (VB originate))) (. ?)))",
  "entityNum": 2,
  "id": 256
 },
 {
  "taggedQuestion": "Who built the stadium which was rented by <e0>?",
  "entityMap": {
   "<e0>": "Costa Rica national football team"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who built #entity1",
    "originStr": "who built #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium which was rented by costa rica national football team",
    "originStr": "the stadium which was rented by costa rica national football team"
   }
  ],
  "question": "Who built the stadium which was rented by Costa Rica national football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD built) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (VP (VBN rented) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 257
 },
 {
  "taggedQuestion": "Which country does the <e0> play  ?",
  "entityMap": {
   "<e0>": "Auckland rugby union team"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which country does #entity1 play",
    "originStr": "in which country does #entity1 play"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the auckland rugby union team",
    "originStr": "the auckland rugby union team"
   }
  ],
  "question": "In which country does the Auckland rugby union team play",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auckland_rugby_union_team> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (DT the) (NN <e0>)) (VP (VB play))) (. ?)))",
  "entityNum": 2,
  "id": 258
 },
 {
  "taggedQuestion": "What is the serving railway line of <e0>, Perth ?",
  "entityMap": {
   "<e0>": "Warwick railway station"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the serving railway line of Warwick railway station, Perth",
    "originStr": "What is the serving railway line of Warwick railway station, Perth"
   }
  ],
  "question": "What is the serving railway line of Warwick railway station, Perth",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (VBG serving) (NN railway) (NN line)) (PP (IN of) (NP (NP (NN <e0>)) (, ,) (NP (NNP Perth)))))) (. ?)))",
  "entityNum": 1,
  "id": 259
 },
 {
  "taggedQuestion": "What is the radio show created by Timoteo Jeffries, about?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is #entity1 about",
    "originStr": "what is #entity1 about"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the radio show created by timoteo jeffries",
    "originStr": "the radio show created by timoteo jeffries"
   }
  ],
  "question": "What is the radio show created by Timoteo Jeffries, about",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> . ?x <http://dbpedia.org/property/format> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioProgram>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN radio) (NN show)) (VP (VBN created) (PP (IN by) (NP (NNP Timoteo) (NNP Jeffries))) (, ,) (ADVP (RB about)))) (. ?)))",
  "entityNum": 2,
  "id": 260
 },
 {
  "taggedQuestion": "Where are all the protected areas near Bend, Oregon?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where are all the protected areas near Bend, Oregon",
    "originStr": "Where are all the protected areas near Bend, Oregon"
   }
  ],
  "question": "Where are all the protected areas near Bend, Oregon",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NP (PDT all) (DT the) (VBN protected) (NNS areas)) (PP (IN near) (NP (NNP Bend) (, ,) (NNP Oregon))))) (. ?)))",
  "entityNum": 1,
  "id": 261
 },
 {
  "taggedQuestion": "Was True Grit a novel of the western genre?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was True Grit a novel of the western genre",
    "originStr": "Was True Grit a novel of the western genre"
   }
  ],
  "question": "Was True Grit a novel of the western genre",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (JJ True) (NN Grit)) (NP (NP (DT a) (NN novel)) (PP (IN of) (NP (DT the) (JJ western) (NN genre)))) (. ?)))",
  "entityNum": 1,
  "id": 262
 },
 {
  "taggedQuestion": "Which notable series of <e0> is also the series of Short Trips: A day in the life ?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which notable series of russell t davies",
    "originStr": "which notable series of russell t davies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the series of short trips: a day in the life",
    "originStr": "is also the series of short trips: a day in the life"
   }
  ],
  "question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
  "syntaxTreeText": "(ROOT (FRAG (S (NP (NP (WDT Which) (JJ notable) (NN series)) (PP (IN of) (NP (NN <e0>)))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (JJ Short) (NNS Trips)))))) (: :) (NP (NP (DT A) (NN day)) (PP (IN in) (NP (DT the) (NN life)))) (. ?)))",
  "entityNum": 1,
  "id": 263
 },
 {
  "taggedQuestion": "Which battles were fought under the president when Chung Won Shik was the prime minister?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which battles were fought under #entity1",
    "originStr": "which battles were fought under #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president when chung won shik was the prime minister",
    "originStr": "the president when chung won shik was the prime minister"
   }
  ],
  "question": "Which battles were fought under the president when Chung Won Shik was the prime minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS battles)) (VP (VBD were) (VP (VBN fought) (PP (IN under) (NP (NP (DT the) (NN president)) (SBAR (WHADVP (WRB when)) (S (NP (NNP Chung) (NNP Won) (NNP Shik)) (VP (VBD was) (NP (DT the) (JJ prime) (NN minister)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 264
 },
 {
  "taggedQuestion": "Which office holder's resting place is in  Palo Alto, California and was succeeded by <e0> ?",
  "entityMap": {
   "<e0>": "Adrian A. Basora"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which office holder's resting place is in palo alto, california",
    "originStr": "which office holder's resting place is in palo alto, california"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and was succeeded by adrian a. basora",
    "originStr": "and was succeeded by adrian a. basora"
   }
  ],
  "question": "Which office holder's resting place is in Palo Alto, California and was succeeded by Adrian A. Basora",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN office)) (SQ (NP (NP (NN holder) (POS 's)) (JJ resting) (NN place)) (VP (VP (VBZ is) (PP (IN in) (NP (NP (NNP Palo) (NNP Alto)) (, ,) (NP (NNP California))))) (CC and) (VP (VBD was) (VP (VBN succeeded) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 265
 },
 {
  "taggedQuestion": "Which movies have been published by <e0>?",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which movies",
    "originStr": "which movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have been published by cinema international corporation",
    "originStr": "have been published by cinema international corporation"
   }
  ],
  "question": "which movies have been published by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> } ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN published) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 266
 },
 {
  "taggedQuestion": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of other destinations of #entity1",
    "originStr": "what is the total number of other destinations of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airlines whose one of the destinations is mediterranean sea",
    "originStr": "the airlines whose one of the destinations is mediterranean sea"
   }
  ],
  "question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NNS destinations)) (PP (IN of) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS destinations))))) (S (VP (VBZ is) (NP (NNP Mediterranean) (NNP Sea))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 267
 },
 {
  "taggedQuestion": "Count the academic discipline of the journals whose one of the academic discipline is Neuroimaging .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the total number of academic discipline of #entity1",
    "originStr": "count the total number of academic discipline of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the journals whose one of the academic discipline is neuroimaging",
    "originStr": "the journals whose one of the academic discipline is neuroimaging"
   }
  ],
  "question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ academic) (NN discipline)) (PP (IN of) (NP (NP (DT the) (NNS journals)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ academic) (NN discipline))))) (S (VP (VBZ is) (NP (NNP Neuroimaging))))))))) (. .)))",
  "entityNum": 2,
  "id": 268
 },
 {
  "taggedQuestion": "List the award which have been won by both Charles LeMaire and Nick Park ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the award",
    "originStr": "list the award"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which have been won by both charles lemaire and nick park",
    "originStr": "which have been won by both charles lemaire and nick park"
   }
  ],
  "question": "List the award which have been won by both Charles LeMaire and Nick Park",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?uri . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN award)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (NP (DT both) (NNP Charles) (NNP LeMaire)) (CC and) (NP (NNP Nick) (NNP Park))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 269
 },
 {
  "taggedQuestion": "What are some cities which have a Ferris wheel?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are some cities",
    "originStr": "what are some cities"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which have a ferris wheel",
    "originStr": "which have a ferris wheel"
   }
  ],
  "question": "What are some cities which have a Ferris wheel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/buildingType> <http://dbpedia.org/resource/Ferris_wheel> . ?x <http://dbpedia.org/property/locationTown> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS cities)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT a) (NNP Ferris) (NN wheel))))))) (. ?)))",
  "entityNum": 1,
  "id": 270
 },
 {
  "taggedQuestion": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movie who has screenplay by akiva goldsman",
    "originStr": "name the movie who has screenplay by akiva goldsman"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and is edited by mark stevens",
    "originStr": "and is edited by mark stevens"
   }
  ],
  "question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ has) (NP (NN screenplay)) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))) (CC and) (VP (VBZ is) (VP (VBN edited) (PP (IN by) (NP (NNP Mark) (NNP Stevens)))))))))) (. .)))",
  "entityNum": 1,
  "id": 271
 },
 {
  "taggedQuestion": "Count the movies in Swedish language.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "count the movies",
    "originStr": "count the movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in swedish language",
    "originStr": "in swedish language"
   }
  ],
  "question": "Count the movies in Swedish language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (DT the) (NNS movies)) (PP (IN in) (NP (JJ Swedish) (NN language)))) (. .)))",
  "entityNum": 1,
  "id": 272
 },
 {
  "taggedQuestion": "Give me the total number of <e0> whose theme music composer is Julian Gingell and created by  Simon Fuller.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give me the total number of television shows whose theme music composer is julian gingell",
    "originStr": "give me the total number of television shows whose theme music composer is julian gingell"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and created by simon fuller",
    "originStr": "and created by simon fuller"
   }
  ],
  "question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by Simon Fuller",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (NN theme) (NN music)) (NN composer)) (S (VP (VBZ is) (UCP (NP (NNP Julian) (NNP Gingell)) (CC and) (VP (VBN created) (PP (IN by) (NP (NNP Simon) (NNP Fuller)))))))))))) (. .)))",
  "entityNum": 1,
  "id": 273
 },
 {
  "taggedQuestion": "Which cloud platform of <e0> also provides services to 21Vianet ?",
  "entityMap": {
   "<e0>": "Google cloud connect"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which cloud platform of google cloud connect",
    "originStr": "which cloud platform of google cloud connect"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also provides services to 21vianet",
    "originStr": "also provides services to 21vianet"
   }
  ],
  "question": "Which cloud platform of Google cloud connect also provides services to 21Vianet",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN cloud) (NN platform)) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (ADVP (RB also)) (VBZ provides) (NP (NNS services)) (PP (IN to) (NP (NN 21Vianet))))) (. ?)))",
  "entityNum": 1,
  "id": 274
 },
 {
  "taggedQuestion": "Name the office holder whose constituency is Haight-Ashbury.",
  "entityMap": {
   "<e0>": "Haight - Ashbury"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the office holder",
    "originStr": "name the office holder"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose constituency is haight-ashbury",
    "originStr": "whose constituency is haight-ashbury"
   }
  ],
  "question": "Name the office holder whose constituency is Haight-Ashbury",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose) (NN constituency)) (S (VP (VBZ is) (NP (NNP Haight) (HYPH -) (NNP Ashbury))))))) (. .)))",
  "entityNum": 1,
  "id": 275
 },
 {
  "taggedQuestion": "Name the loocation of Lekh Castle which is also the location of SamurAbsheron channel .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the location of lekh castle",
    "originStr": "name the location of lekh castle"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the location of samurabsheron channel",
    "originStr": "which is also the location of samurabsheron channel"
   }
  ],
  "question": "Name the location of Lekh Castle which is also the location of SamurAbsheron channel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lekh_Castle> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN loocation)) (PP (IN of) (NP (NP (NNP Lekh) (NNP Castle)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (NNP SamurAbsheron) (NN channel))))))))))) (. .)))",
  "entityNum": 1,
  "id": 276
 },
 {
  "taggedQuestion": "Count the families of the Animal kingdom.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of families of #entity1",
    "originStr": "count the number of families of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the animal kingdom",
    "originStr": "the animal kingdom"
   }
  ],
  "question": "Count the number of families of the Animal kingdom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS families)) (PP (IN of) (NP (DT the) (NN Animal) (NN kingdom))))) (. .)))",
  "entityNum": 2,
  "id": 277
 },
 {
  "taggedQuestion": "What is the political party of the person succeeded by A.K. Singh?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the political party of #entity1",
    "originStr": "what is the political party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person succeeded by a.k. singh",
    "originStr": "the person succeeded by a.k. singh"
   }
  ],
  "question": "What is the political party of the person succeeded by A.K. Singh",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/A._K._Singh> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (DT the) (NN person)))) (VP (VBN succeeded) (PP (IN by) (NP (NNP A.K.) (NNP Singh))))) (. ?)))",
  "entityNum": 2,
  "id": 278
 },
 {
  "taggedQuestion": "Who is the head coach of the teams in Middlesbrough FC?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the head coach of #entity1",
    "originStr": "who is the head coach of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the teams in middlesbrough fc",
    "originStr": "the teams in middlesbrough fc"
   }
  ],
  "question": "Who is the head coach of the teams in Middlesbrough FC",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NP (DT the) (NNS teams)) (PP (IN in) (NP (NNP Middlesbrough) (NNP FC))))))) (. ?)))",
  "entityNum": 2,
  "id": 279
 },
 {
  "taggedQuestion": "Which uni. did  <e0> and cyril hume both once went?",
  "entityMap": {
   "<e0>": "sidney c patridge"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "to which uni",
    "originStr": "to which uni"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did sidney c patridge and cyril hume both once went",
    "originStr": "did sidney c patridge and cyril hume both once went"
   }
  ],
  "question": "To which uni. did sidney c patridge and cyril hume both once went",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri . }",
  "syntaxTreeText": "(ROOT (FRAG (WHNP (WDT Which) (NN uni)) (. .)))(ROOT (S (VP (VBD did) (NP (NP (ADD <e0>)) (CC and) (NP (NP (NNP cyril) (NNP hume)) (VP (ADVP (DT both) (IN once)) (VBN went))))) (. ?)))",
  "entityNum": 1,
  "id": 280
 },
 {
  "taggedQuestion": "People in the <e0> follow which religion?",
  "entityMap": {
   "<e0>": "royal Thai army"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 follow which religion",
    "originStr": "#entity1 follow which religion"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people in the royal thai army",
    "originStr": "people in the royal thai army"
   }
  ],
  "question": "People in the royal Thai army follow which religion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS People)) (PP (IN in) (NP (DT the) (NN <e0>)))) (VP (VB follow) (WHNP (WDT which) (NN religion))) (. ?)))",
  "entityNum": 2,
  "id": 281
 },
 {
  "taggedQuestion": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
    "originStr": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici"
   }
  ],
  "question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Lucrezia) (NNP Tornabuoni)) (NP (NP (DT the) (NN mother)) (PP (IN of) (NP (NP (NNP Lorenzo) (NNP de) (POS ')) (NNP Medici)))) (. ?)))",
  "entityNum": 1,
  "id": 282
 },
 {
  "taggedQuestion": "Who are the producers of the movies  which has music by Gary Chang ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are the producers of #entity1",
    "originStr": "who are the producers of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the movies which has music by gary chang",
    "originStr": "the movies which has music by gary chang"
   }
  ],
  "question": "Who are the producers of the movies which has music by Gary Chang",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Gary_Chang> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NN music)) (PP (IN by) (NP (NNP Gary) (NNP Chang)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 283
 },
 {
  "taggedQuestion": "Where was Special 26 recorded ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Special 26 recorded",
    "originStr": "Where was Special 26 recorded"
   }
  ],
  "question": "Where was Special 26 recorded",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (JJ Special) (NP (CD 26))) (VP (VBN recorded))) (. ?)))",
  "entityNum": 1,
  "id": 284
 },
 {
  "taggedQuestion": "How many movies music composers are associated with Demis Roussos ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many movies music composers",
    "originStr": "how many movies music composers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are associated with demis roussos",
    "originStr": "are associated with demis roussos"
   }
  ],
  "question": "How many movies music composers are associated with Demis Roussos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NP (NNS movies)) (NP (NN music) (NNS composers)))) (SQ (VBP are) (VP (VBN associated) (PP (IN with) (NP (NNP Demis) (NNP Roussos))))) (. ?)))",
  "entityNum": 1,
  "id": 285
 },
 {
  "taggedQuestion": "Which nation did <e0> owe his allegiance?",
  "entityMap": {
   "<e0>": "David Animle Hanses"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "to which nation",
    "originStr": "to which nation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did david animle hanses owe his allegiance",
    "originStr": "did david animle hanses owe his allegiance"
   }
  ],
  "question": "To which nation did David Animle Hanses owe his allegiance",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN nation)) (SQ (VP (VBD did) (NP (ADD <e0>)) (S (VP (VB owe) (NP (PRP$ his) (NN allegiance)))))) (. ?)))",
  "entityNum": 1,
  "id": 286
 },
 {
  "taggedQuestion": "What is the alma mater of the actors of The God Who Wasn't There ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the alma mater of #entity1",
    "originStr": "what is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the actors of the god who wasn't there",
    "originStr": "the actors of the god who wasn't there"
   }
  ],
  "question": "What is the alma mater of the actors of The God Who Wasn't There",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NNS actors)) (PP (IN of) (NP (NP (DT The) (NNP God)) (SBAR (WHNP (WP Who)) (S (VP (VBD Was) (RB n't) (NP (EX There))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 287
 },
 {
  "taggedQuestion": "List some musicians associated with <e0>?",
  "entityMap": {
   "<e0>": "famous guitar players"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list some musicians associated with #entity1",
    "originStr": "list some musicians associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "famous guitar players",
    "originStr": "famous guitar players"
   }
  ],
  "question": "List some musicians associated with famous guitar players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT some) (NNS musicians)) (VP (VBN associated) (PP (IN with) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 288
 },
 {
  "taggedQuestion": "What are the airlines whose hub airport is operated by the <e0>?",
  "entityMap": {
   "<e0>": "Los Angeles World Airports"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the airlines whose hub airport #entity1",
    "originStr": "what are the airlines whose hub airport #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is operated by the los angeles world airports",
    "originStr": "is operated by the los angeles world airports"
   }
  ],
  "question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WP$ whose) (NML (NN hub)) (NN airport)) (S (VP (VBZ is) (VP (VBN operated) (PP (IN by) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 289
 },
 {
  "taggedQuestion": "Which company's cars are assembled in Colombia?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which company's #entity1",
    "originStr": "which company's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "cars are assembled in colombia",
    "originStr": "cars are assembled in colombia"
   }
  ],
  "question": "Which company's cars are assembled in Colombia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Colombia> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN company) (POS 's)) (NNS cars)) (SQ (VBP are) (VP (VBN assembled) (PP (IN in) (NP (NNP Colombia))))) (. ?)))",
  "entityNum": 2,
  "id": 290
 },
 {
  "taggedQuestion": "Who directed The Haunted House ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who directed The Haunted House",
    "originStr": "Who directed The Haunted House"
   }
  ],
  "question": "Who directed The Haunted House",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD directed) (NP (DT The) (NNP Haunted) (NNP House)))) (. ?)))",
  "entityNum": 1,
  "id": 291
 },
 {
  "taggedQuestion": "Count all the different purposes followed by the different NGOs.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count all the different purposes followed by #entity1",
    "originStr": "count all the different purposes followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the different ngos",
    "originStr": "the different ngos"
   }
  ],
  "question": "Count all the different purposes followed by the different NGOs",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (PDT all) (DT the) (JJ different) (NNS purposes)) (VP (VBN followed) (PP (IN by) (NP (DT the) (JJ different) (NNPS NGOs)))))) (. .)))",
  "entityNum": 2,
  "id": 292
 },
 {
  "taggedQuestion": "The players born in Bellaire, Ohio have played for which team?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": 10,
    "entityID": -1,
    "end": 12,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which",
    "str": "which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have played for which team",
    "originStr": "#entity1 have played for which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the players born in bellaire, ohio",
    "originStr": "the players born in bellaire, ohio"
   }
  ],
  "question": "The players born in Bellaire, Ohio have played for which team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (S (NP (DT The) (NNS players)) (VP (VBN born) (PP (IN in) (NP (NNP Bellaire))))) (, ,) (NP (NNP Ohio)) (VP (VBP have) (VP (VBN played) (WHPP (IN for) (WHNP (WDT which) (NN team))))) (. ?)))",
  "entityNum": 2,
  "id": 293
 },
 {
  "taggedQuestion": "What is the common ideology followed by Katyayana and <e0> ?",
  "entityMap": {
   "<e0>": "Palang Dharma Party"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the common ideology",
    "originStr": "what is the common ideology"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "followed by katyayana and palang dharma party",
    "originStr": "followed by katyayana and palang dharma party"
   }
  ],
  "question": "What is the common ideology followed by Katyayana and Palang Dharma Party",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJ common) (NN ideology)) (VP (VBN followed) (PP (IN by) (NP (NP (NNP Katyayana)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 294
 },
 {
  "taggedQuestion": "Count the tenants of MasterCard Centre.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the tenants of MasterCard Centre",
    "originStr": "Count the tenants of MasterCard Centre"
   }
  ],
  "question": "Count the tenants of MasterCard Centre",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MasterCard) (NNP Centre))))) (. .)))",
  "entityNum": 1,
  "id": 295
 },
 {
  "taggedQuestion": "Who are starring in the movies written by Mark Sandrich ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are starring in #entity1",
    "originStr": "who are starring in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the movies written by mark sandrich",
    "originStr": "the movies written by mark sandrich"
   }
  ],
  "question": "who are starring in the movies written by Mark Sandrich",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (VP (VBG starring) (PP (IN in) (NP (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Mark) (NNP Sandrich))))))))) (. ?)))",
  "entityNum": 2,
  "id": 296
 },
 {
  "taggedQuestion": "Count the religions followed by BJP members.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of religions followed by #entity1",
    "originStr": "count the number of religions followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "bjp members",
    "originStr": "bjp members"
   }
  ],
  "question": "Count the number of religions followed by BJP members",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NNP BJP) (NNS members)))))) (. .)))",
  "entityNum": 2,
  "id": 297
 },
 {
  "taggedQuestion": "What is the mascot of the rival school of <e0>?",
  "entityMap": {
   "<e0>": "Sullivan Central High"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the mascot of #entity1",
    "originStr": "what is the mascot of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rival school of sullivan central high",
    "originStr": "the rival school of sullivan central high"
   }
  ],
  "question": "What is the mascot of the rival school of Sullivan Central High",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/property/rival> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 298
 },
 {
  "taggedQuestion": "What award has been awarded to both Dion Beebe and Charles LeMaire?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what award",
    "originStr": "what award"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has been awarded to both dion beebe and charles lemaire",
    "originStr": "has been awarded to both dion beebe and charles lemaire"
   }
  ],
  "question": "What award has been awarded to both Dion Beebe and Charles LeMaire",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (NP (DT both) (NNP Dion) (NNP Beebe)) (CC and) (NP (NNP Charles) (NNP LeMaire)))))))) (. ?)))",
  "entityNum": 1,
  "id": 299
 },
 {
  "taggedQuestion": "What is the birth name  of Putri Raemawasti ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the birth name of Putri Raemawasti",
    "originStr": "What is the birth name of Putri Raemawasti"
   }
  ],
  "question": "What is the birth name of Putri Raemawasti",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/property/birthName> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birth) (NN name)) (PP (IN of) (NP (NNP Putri) (NNP Raemawasti))))) (. ?)))",
  "entityNum": 1,
  "id": 300
 },
 {
  "taggedQuestion": "What is the party of the politicians whose children is Sanjay Gandhi ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the party of #entity1",
    "originStr": "what is the party of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the politicians whose children is sanjay gandhi",
    "originStr": "the politicians whose children is sanjay gandhi"
   }
  ],
  "question": "What is the party of the politicians whose children is Sanjay Gandhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN party)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NNS children)) (S (VP (VBZ is) (NP (NNP Sanjay) (NNP Gandhi))))))))) (. ?)))",
  "entityNum": 2,
  "id": 301
 },
 {
  "taggedQuestion": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the tenants of mastercard center wich",
    "originStr": "name the tenants of mastercard center wich"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the draft team of antoine bibeau",
    "originStr": "is also the draft team of antoine bibeau"
   }
  ],
  "question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri} ",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NNS tenants)) (PP (IN of) (NP (NNP MAsterCard) (NN center) (NN wich)))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN draft) (NN team)) (PP (IN of) (NP (NNP Antoine) (NNP Bibeau))))) (. .)))",
  "entityNum": 1,
  "id": 302
 },
 {
  "taggedQuestion": "What is the number of occupation of the people who died in tampa bay, florida?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the number of occupation of #entity1",
    "originStr": "what is the number of occupation of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people who died in tampa bay, florida",
    "originStr": "the people who died in tampa bay, florida"
   }
  ],
  "question": "What is the number of occupation of the people who died in tampa bay, florida",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NN occupation)) (PP (IN of) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP tampa) (NN bay) (, ,) (NN florida)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 303
 },
 {
  "taggedQuestion": "Who was the <e0> who also served as a governor of Indiana Territory?",
  "entityMap": {
   "<e0>": "United States president"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was the united states president who also served as a governor of indiana territory",
    "originStr": "who was the united states president who also served as a governor of indiana territory"
   }
  ],
  "question": "Who was the United States president who also served as a governor of Indiana Territory",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP who)) (S (ADVP (RB also)) (VP (VBD served) (PP (IN as) (NP (NP (DT a) (NN governor)) (PP (IN of) (NP (NNP Indiana) (NNP Territory)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 304
 },
 {
  "taggedQuestion": "List the people who were born in Gelnhausen and graduated from Pepperdine University?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the people who were born in gelnhausen",
    "originStr": "list the people who were born in gelnhausen"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and graduated from pepperdine university",
    "originStr": "and graduated from pepperdine university"
   }
  ],
  "question": "List the people who were born in Gelnhausen and graduated from Pepperdine University",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> . ?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Pepperdine_University>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Gelnhausen))))) (CC and) (VP (VBD graduated) (PP (IN from) (NP (NNP Pepperdine) (NNP University))))))))) (. ?)))",
  "entityNum": 1,
  "id": 305
 },
 {
  "taggedQuestion": "Musical artists who are associated with <e0> were born where ?",
  "entityMap": {
   "<e0>": "Ren & Angela"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 were born where",
    "originStr": "#entity1 were born where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "musical artists who are associated with ren & angela",
    "originStr": "musical artists who are associated with ren & angela"
   }
  ],
  "question": "Musical artists who are associated with Ren & Angela were born where",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (JJ Musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NN <e0>)))))))) (VP (VBD were) (VP (VBN born) (FRAG (WHADVP (WRB where))))) (. ?)))",
  "entityNum": 2,
  "id": 306
 },
 {
  "taggedQuestion": "What religion do the Wickramabahu Centeral College and Neungin High School both follow?",
  "entityMap": {
   "<e0>": "Wickramabahu Centeral College Neungin High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what religion",
    "originStr": "what religion"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "do the wickramabahu centeral college and neungin high school both follow",
    "originStr": "do the wickramabahu centeral college and neungin high school both follow"
   }
  ],
  "question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP do) (NP (DT the) (NNP Wickramabahu) (NNP Centeral) (NNP College) (CC and) (NNP Neungin) (NNP High) (NNP School)) (VP (ADVP (CC both)) (VB follow))) (. ?)))",
  "entityNum": 1,
  "id": 307
 },
 {
  "taggedQuestion": "Who designed the <e0>?",
  "entityMap": {
   "<e0>": "language integrated query"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who designed the language integrated query",
    "originStr": "Who designed the language integrated query"
   }
  ],
  "question": "Who designed the language integrated query",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 308
 },
 {
  "taggedQuestion": "Name the debut team of Dan Otero .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the debut team of Dan Otero",
    "originStr": "Name the debut team of Dan Otero"
   }
  ],
  "question": "Name the debut team of Dan Otero",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NNP Dan) (NNP Otero))))) (. .)))",
  "entityNum": 1,
  "id": 309
 },
 {
  "taggedQuestion": "Who started at the pole position in both <e0> and the 94 spanish one?",
  "entityMap": {
   "<e0>": "1997 canadian grand prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who started at the pole position in both 1997 canadian grand prix and the 94 spanish",
    "originStr": "who started at the pole position in both 1997 canadian grand prix and the 94 spanish"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "one",
    "originStr": "one"
   }
  ],
  "question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD started) (PP (IN at) (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (CC both) (NP (ADD <e0>)) (CC and) (NP (DT the) (CD 94) (NNP spanish)))) (NP-TMP (CD one)))))) (. ?)))",
  "entityNum": 1,
  "id": 310
 },
 {
  "taggedQuestion": "Who founded the Not on our Watch NGO?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who founded the Not on our Watch NGO",
    "originStr": "Who founded the Not on our Watch NGO"
   }
  ],
  "question": "Who founded the Not on our Watch NGO",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Not_on_Our_Watch_(organization)> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD founded) (NP (DT the) (RB Not)) (PP (IN on) (NP (PRP$ our) (NNP Watch) (NNP NGO))))) (. ?)))",
  "entityNum": 1,
  "id": 311
 },
 {
  "taggedQuestion": "What is the name of the artist which worked on the subsequent work of <e0> ?",
  "entityMap": {
   "<e0>": "Ella Loves Cole"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the name of #entity1",
    "originStr": "what is the name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artist which worked on the subsequent work of ella loves cole",
    "originStr": "the artist which worked on the subsequent work of ella loves cole"
   }
  ],
  "question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WDT which)) (S (VP (VBD worked) (PP (IN on) (NP (NP (DT the) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 312
 },
 {
  "taggedQuestion": "Which company owns Sony bank ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which company owns Sony bank",
    "originStr": "Which company owns Sony bank"
   }
  ],
  "question": "Which company owns Sony bank",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ owns) (NP (NNP Sony) (NN bank)))) (. ?)))",
  "entityNum": 1,
  "id": 313
 },
 {
  "taggedQuestion": "What state was Cyrus Mann born in, and has the famous Downriver ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what state",
    "originStr": "what state"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was cyrus mann born in, and has the famous downriver",
    "originStr": "was cyrus mann born in, and has the famous downriver"
   }
  ],
  "question": "What state was Cyrus Mann born in, and has the famous Downriver",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN state)) (SQ (VBD was) (NP (NNP Cyrus) (NNP Mann)) (VP (VP (VBN born) (PP (IN in))) (, ,) (CC and) (VP (VBZ has) (NP (DT the) (JJ famous) (NNP Downriver))))) (. ?)))",
  "entityNum": 1,
  "id": 314
 },
 {
  "taggedQuestion": "Who is a religious figure titled superior general?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is a religious figure titled superior general",
    "originStr": "Who is a religious figure titled superior general"
   }
  ],
  "question": "Who is a religious figure titled superior general",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Superior_general>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Religious>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (DT a) (JJ religious) (NN figure)) (VP (VBN titled) (S (ADJP (JJ superior) (JJ general))))) (. ?)))",
  "entityNum": 1,
  "id": 315
 },
 {
  "taggedQuestion": "List the employments of people who died in Tampa, Florida.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the employments of #entity1",
    "originStr": "list the employments of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who died in tampa, florida",
    "originStr": "people who died in tampa, florida"
   }
  ],
  "question": "List the employments of people who died in Tampa, Florida",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS employments)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Tampa) (, ,) (NNP Florida)))))))))) (. .)))",
  "entityNum": 2,
  "id": 316
 },
 {
  "taggedQuestion": "What are some <e0> known for?",
  "entityMap": {
   "<e0>": "famous veterinary physicians"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are #entity1 known for",
    "originStr": "what are #entity1 known for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some famous veterinary physicians",
    "originStr": "some famous veterinary physicians"
   }
  ],
  "question": "What are some famous veterinary physicians known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NN <e0>)) (VP (VBN known) (PP (IN for)))) (. ?)))",
  "entityNum": 2,
  "id": 317
 },
 {
  "taggedQuestion": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the movies edited by julian doyle",
    "originStr": "list the movies edited by julian doyle"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which music was composed by geoffrey brugon",
    "originStr": "in which music was composed by geoffrey brugon"
   }
  ],
  "question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS movies)) (VP (VBN edited) (PP (IN by) (NP (NP (NNP Julian) (NNP Doyle)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN music)) (VP (VBD was) (VP (VBN composed) (PP (IN by) (NP (NNP Geoffrey) (NNP Brugon)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 318
 },
 {
  "taggedQuestion": "Name the children of the person who is the star of <e0> .",
  "entityMap": {
   "<e0>": "The Weathered Underground"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the children of #entity1",
    "originStr": "name the children of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who is the star of the weathered underground",
    "originStr": "the person who is the star of the weathered underground"
   }
  ],
  "question": "Name the children of the person who is the star of The Weathered Underground",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Weathered_Underground> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/children> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS children)) (PP (IN of) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT the) (NN star)) (PP (IN of) (NP (ADD <e0>))))))))))) (. .)))",
  "entityNum": 2,
  "id": 319
 },
 {
  "taggedQuestion": "Which owner of Chelsea F.C also owns Evraz ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which owner of chelsea f.c",
    "originStr": "which owner of chelsea f.c"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also owns evraz",
    "originStr": "also owns evraz"
   }
  ],
  "question": "Which owner of Chelsea F.C also owns Evraz",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri. <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN owner) (PP (IN of) (NP (NNP Chelsea) (NNP F.C))))) (SQ (VP (ADVP (RB also)) (VBZ owns) (NP (NNP Evraz)))) (. ?)))",
  "entityNum": 1,
  "id": 320
 },
 {
  "taggedQuestion": "Did <e0> had Nelson Mandela as a commander?",
  "entityMap": {
   "<e0>": "Umkhonto we Sizwe"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
    "originStr": "Did Umkhonto we Sizwe had Nelson Mandela as a commander"
   }
  ],
  "question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Umkhonto_we_Sizwe> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Nelson_Mandela> }",
  "syntaxTreeText": "(ROOT (S (VP (VBD Did) (SBAR (S (NP (ADD <e0>)) (VP (VBD had) (NP (NP (NNP Nelson) (NNP Mandela)) (PP (IN as) (NP (DT a) (NN commander)))))))) (. ?)))",
  "entityNum": 1,
  "id": 321
 },
 {
  "taggedQuestion": "Name the office holder with associate as <e0> and has a kid named Augustus.",
  "entityMap": {
   "<e0>": "Marcus Calpurnius Bibulus"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the office holder with associate as marcus calpurnius bibulus",
    "originStr": "name the office holder with associate as marcus calpurnius bibulus"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has a kid named augustus",
    "originStr": "and has a kid named augustus"
   }
  ],
  "question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NP (NN associate)) (PP (IN as) (NP (ADD <e0>)))))) (CC and) (VP (VBZ has) (NP (NP (DT a) (NN kid)) (VP (VBN named) (NP (NNP Augustus)))))) (. .)))",
  "entityNum": 1,
  "id": 322
 },
 {
  "taggedQuestion": "What are the movies whose screenplay is done by Eric Roth?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the movies",
    "originStr": "what are the movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose screenplay is done by eric roth",
    "originStr": "whose screenplay is done by eric roth"
   }
  ],
  "question": "What are the movies whose screenplay is done by Eric Roth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Eric) (NNP Roth))))))))) (. ?)))",
  "entityNum": 1,
  "id": 323
 },
 {
  "taggedQuestion": "What is the total number of writers whose singles are recorded in Miami?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of writers whose singles #entity1",
    "originStr": "what is the total number of writers whose singles #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are recorded in miami",
    "originStr": "are recorded in miami"
   }
  ],
  "question": "What is the total number of writers whose singles are recorded in Miami",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS writers)) (SBAR (WHNP (WP$ whose) (NNS singles)) (S (VP (VBP are) (VP (VBN recorded) (PP (IN in) (NP (NNP Miami))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 324
 },
 {
  "taggedQuestion": "What religions are followed by members of the societies whose architectural influences is  seen on the Sanggar Agung ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what religions are followed by members of #entity1",
    "originStr": "what religions are followed by members of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the societies whose architectural influences can be seen on the sanggar agung",
    "originStr": "the societies whose architectural influences can be seen on the sanggar agung"
   }
  ],
  "question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS members)) (PP (IN of) (NP (NP (DT the) (NNS societies)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ architectural) (NNS influences)) (VP (VBZ is) (VP (VBN seen) (PP (IN on) (NP (DT the) (NNP Sanggar) (NNP Agung))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 325
 },
 {
  "taggedQuestion": "Who is the producer of album which has the song Money?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the producer of #entity1",
    "originStr": "who is the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "album which has the song money",
    "originStr": "album which has the song money"
   }
  ],
  "question": "Who is the producer of album which has the song Money",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NN album)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN song) (NN Money))))))))) (. ?)))",
  "entityNum": 2,
  "id": 326
 },
 {
  "taggedQuestion": "List the <e0> with theme music given by Ron Grainer?",
  "entityMap": {
   "<e0>": "Sci-fi TV shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the sci-fi tv shows",
    "originStr": "list the sci-fi tv shows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with theme music given by ron grainer",
    "originStr": "with theme music given by ron grainer"
   }
  ],
  "question": "List the Sci-fi TV shows with theme music given by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN <e0>)) (PP (IN with) (NP (NN theme) (NN music)))) (PP (VBN given) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))) (. ?)))",
  "entityNum": 1,
  "id": 327
 },
 {
  "taggedQuestion": "What is the company to which Fusajiro Yamauchi proprietor to ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is #entity1",
    "originStr": "what is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company to which fusajiro yamauchi proprietor to",
    "originStr": "the company to which fusajiro yamauchi proprietor to"
   }
  ],
  "question": "What is the company to which Fusajiro Yamauchi proprietor to",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN company)) (WHPP (TO to) (WHNP (WDT which)))) (PP (NP (NML (NNP Fusajiro) (NNP Yamauchi)) (NN proprietor)) (IN to)))) (. ?)))",
  "entityNum": 2,
  "id": 328
 },
 {
  "taggedQuestion": "Who is the writer of <e0> ?",
  "entityMap": {
   "<e0>": "mark twain Tonight"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the writer of mark twain Tonight",
    "originStr": "Who is the writer of mark twain Tonight"
   }
  ],
  "question": "Who is the writer of mark twain Tonight",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN writer)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 329
 },
 {
  "taggedQuestion": "How many members are there in the <e0>?",
  "entityMap": {
   "<e0>": "European Go Federation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many members",
    "originStr": "how many members"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are there in the european go federation",
    "originStr": "are there in the european go federation"
   }
  ],
  "question": "How many members are there in the European Go Federation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS members)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 330
 },
 {
  "taggedQuestion": "Was Kevin Rudd the PM of Julia Gillard?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Kevin Rudd the PM of Julia Gillard",
    "originStr": "Was Kevin Rudd the PM of Julia Gillard"
   }
  ],
  "question": "Was Kevin Rudd the PM of Julia Gillard",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Kevin_Rudd> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Kevin) (NNP Rudd)) (NP (NP (DT the) (NN PM)) (PP (IN of) (NP (NNP Julia) (NNP Gillard)))) (. ?)))",
  "entityNum": 1,
  "id": 331
 },
 {
  "taggedQuestion": "<e0> and Job Durfee have based their political career in which US state?",
  "entityMap": {
   "<e0>": "Daniel L D Granger"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "daniel l d granger and job durfee have based their political career",
    "originStr": "daniel l d granger and job durfee have based their political career"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which us state",
    "originStr": "in which us state"
   }
  ],
  "question": "Daniel L D Granger and Job Durfee have based their political career in which US state",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?uri . }",
  "syntaxTreeText": "(ROOT (S (NP (NP (ADD <e0>)) (CC and) (NP (NNP Job) (NNP Durfee))) (VP (VBP have) (VP (VBN based) (NP (NP (PRP$ their) (JJ political) (NN career)) (WHPP (IN in) (WHNP (WDT which) (NNP US) (NN state)))))) (. ?)))",
  "entityNum": 1,
  "id": 332
 },
 {
  "taggedQuestion": "What is the mascot of the handball teams in the <e0>?",
  "entityMap": {
   "<e0>": "Turkish Handball Super League"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the mascot of #entity1",
    "originStr": "what is the mascot of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the handball teams in the turkish handball super league",
    "originStr": "the handball teams in the turkish handball super league"
   }
  ],
  "question": "What is the mascot of the handball teams in the Turkish Handball Super League",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HandballTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN mascot)) (PP (IN of) (NP (NP (DT the) (NN handball) (NNS teams)) (PP (IN in) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 333
 },
 {
  "taggedQuestion": "What city was recorded in Live in detroit which is also the official residence of ken Holland ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what city",
    "originStr": "what city"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was recorded in live in detroit which is also the official residence of ken holland",
    "originStr": "was recorded in live in detroit which is also the official residence of ken holland"
   }
  ],
  "question": "What city was recorded in Live in detroit which is also the official residence of ken Holland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VBD was) (VP (VBN recorded) (PP (IN in) (ADJP (JJ Live))) (PP (IN in) (NP (NP (NN detroit)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ official) (NN residence)) (PP (IN of) (NP (NNP ken) (NNP Holland))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 334
 },
 {
  "taggedQuestion": "Marika Gombitov makes songs in which languages?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 in which languages",
    "originStr": "#entity1 in which languages"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "marika gombitov makes songs",
    "originStr": "marika gombitov makes songs"
   }
  ],
  "question": "Marika Gombitov makes songs in which languages",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NNP Marika) (NNP Gombitov)) (VP (VBZ makes) (NP (NP (NNS songs)) (WHPP (IN in) (WHNP (WDT which) (NNS languages))))) (. ?)))",
  "entityNum": 2,
  "id": 335
 },
 {
  "taggedQuestion": "What are some musical artists associated with the ones signed up with EMI?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some musical artists associated with #entity1",
    "originStr": "what are some musical artists associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones signed up with emi",
    "originStr": "the ones signed up with emi"
   }
  ],
  "question": "What are some musical artists associated with the ones signed up with EMI",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (JJ musical) (NNS artists)) (VP (VBN associated) (SBAR (IN with) (S (NP (DT the) (NNS ones)) (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NNP EMI)))))))) (. ?)))",
  "entityNum": 2,
  "id": 336
 },
 {
  "taggedQuestion": "Name the river which flows through the closest city of Mount Raimer .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the river which flows through #entity1",
    "originStr": "name the river which flows through #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the closest city of mount raimer",
    "originStr": "the closest city of mount raimer"
   }
  ],
  "question": "Name the river which flows through the closest city of Mount Raimer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?x . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN through) (NP (NP (DT the) (JJS closest) (NN city)) (PP (IN of) (NP (NNP Mount) (NNP Raimer)))))))))) (. .)))",
  "entityNum": 2,
  "id": 337
 },
 {
  "taggedQuestion": "Name the scientist whose supervisor also supervised Mary Ainsworth.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the scientist whose supervisor #entity1",
    "originStr": "name the scientist whose supervisor #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "also supervised mary ainsworth",
    "originStr": "also supervised mary ainsworth"
   }
  ],
  "question": "Name the scientist whose supervisor also supervised Mary Ainsworth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NML (NN supervisor))) (S (ADVP (RB also)) (VP (VBD supervised) (NP (NNP Mary) (NNP Ainsworth))))))) (. .)))",
  "entityNum": 2,
  "id": 338
 },
 {
  "taggedQuestion": "What are some relatives of armymen who died in Germany?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some relatives of #entity1",
    "originStr": "what are some relatives of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "armymen who died in germany",
    "originStr": "armymen who died in germany"
   }
  ],
  "question": "What are some relatives of armymen who died in Germany",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS relatives)) (PP (IN of) (NP (NP (NNS armymen)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Germany)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 339
 },
 {
  "taggedQuestion": "Deion sanders and Hinkey haines debuted their career with which common team?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "deion sanders and hinkey haines debuted their career with",
    "originStr": "deion sanders and hinkey haines debuted their career with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which common team",
    "originStr": "which common team"
   }
  ],
  "question": "Deion sanders and Hinkey haines debuted their career with which common team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hinkey_Haines> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri . }",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Deion) (NNP sanders)) (CC and) (NP (NNP Hinkey) (NNS haines))) (VP (VBD debuted) (NP (PRP$ their) (NN career)) (PP (IN with) (NP (WDT which) (JJ common) (NN team)))) (. ?)))",
  "entityNum": 1,
  "id": 340
 },
 {
  "taggedQuestion": "Which garrison of <e0> is also the route end of Mumbai Vadodara Express ?",
  "entityMap": {
   "<e0>": "East Indies Station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which garrison of east indies station",
    "originStr": "which garrison of east indies station"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the route end of mumbai vadodara express",
    "originStr": "is also the route end of mumbai vadodara express"
   }
  ],
  "question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN garrison) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NNP Mumbai) (NNP Vadodara) (NNP Express))))) (. ?)))",
  "entityNum": 1,
  "id": 341
 },
 {
  "taggedQuestion": "Which political party does Virendra Kataria belongs ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which political party does Virendra Kataria belongs",
    "originStr": "To which political party does Virendra Kataria belongs"
   }
  ],
  "question": "To which political party does Virendra Kataria belongs",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/property/party> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ political) (NN party)) (SQ (VBZ does) (NP (NNP Virendra) (NNP Kataria)) (VP (VBZ belongs))) (. ?)))",
  "entityNum": 1,
  "id": 342
 },
 {
  "taggedQuestion": "Copley Medal has been awarded to which scientists?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "copley medal has been awarded to",
    "originStr": "copley medal has been awarded to"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which scientists",
    "originStr": "which scientists"
   }
  ],
  "question": "Copley Medal has been awarded to which scientists",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Copley_Medal>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Copley) (NNP Medal)) (VP (VBZ has) (VP (VBN been) (VP (VBN awarded) (PP (IN to) (NP (WDT which) (NNS scientists)))))) (. ?)))",
  "entityNum": 1,
  "id": 343
 },
 {
  "taggedQuestion": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of awards whose presenter's #entity1",
    "originStr": "what is the total number of awards whose presenter's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "headquarters is beverly hills, california",
    "originStr": "headquarters is beverly hills, california"
   }
  ],
  "question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS awards)) (SBAR (WHNP (WP$ whose) (NP (NN presenter) (POS 's)) (NN headquarters)) (S (VP (VBZ is) (NP (NP (NNP Beverly) (NNP Hills)) (, ,) (NP (NNP California)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 344
 },
 {
  "taggedQuestion": "Who is the narrator of <e0> ?",
  "entityMap": {
   "<e0>": "The Price of Beauty"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the narrator of The Price of Beauty",
    "originStr": "Who is the narrator of The Price of Beauty"
   }
  ],
  "question": "Who is the narrator of The Price of Beauty",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 345
 },
 {
  "taggedQuestion": "Does Dan River flow into the Jordan Valley?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Dan River flow into the Jordan Valley",
    "originStr": "Does Dan River flow into the Jordan Valley"
   }
  ],
  "question": "Does Dan River flow into the Jordan Valley",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Dan_River_(Middle_East)> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Dan) (NNP River)) (VP (VB flow) (PP (IN into) (NP (DT the) (NNP Jordan) (NNP Valley)))) (. ?)))",
  "entityNum": 1,
  "id": 346
 },
 {
  "taggedQuestion": "Who is the producer of the device which is the operating system of Now TV  ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the producer of #entity1",
    "originStr": "who is the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the device which is the operating system of now tv",
    "originStr": "the device which is the operating system of now tv"
   }
  ],
  "question": "Who is the producer of the device which is the operating system of Now TV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Now_TV_(UK)> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN device)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN operating) (NN system)) (PP (IN of) (NP (ADVP (RB Now)) (NN TV))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 347
 },
 {
  "taggedQuestion": "How many artists have collaborated with <e0>?",
  "entityMap": {
   "<e0>": "famous guitar players"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many artists have collaborated with #entity1",
    "originStr": "how many artists have collaborated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "famous guitar players",
    "originStr": "famous guitar players"
   }
  ],
  "question": "How many artists have collaborated with famous guitar players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS artists)) (VP (VBP have) (VP (VBN collaborated) (PP (IN with) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 348
 },
 {
  "taggedQuestion": "How many politicians live in India?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many politicians",
    "originStr": "how many politicians"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "live in india",
    "originStr": "live in india"
   }
  ],
  "question": "How many politicians live in India",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS politicians)) (VP (VBP live) (PP (IN in) (NP (NNP India))))) (. ?)))",
  "entityNum": 1,
  "id": 349
 },
 {
  "taggedQuestion": "What is the base currency of the country which operates the Marion Dufresne?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the base currency of #entity1",
    "originStr": "what is the base currency of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country which operates the marion dufresne",
    "originStr": "the country which operates the marion dufresne"
   }
  ],
  "question": "What is the base currency of the country which operates the Marion Dufresne",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marion_Dufresne_(1995)> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (NP (DT the) (NN country)) (SBAR (WHNP (WDT which)) (S (VP (VBZ operates) (NP (DT the) (NNP Marion) (NNP Dufresne))))))))) (. ?)))",
  "entityNum": 2,
  "id": 350
 },
 {
  "taggedQuestion": "What is the region served by the governor of Stephen L.R. McNichols ?",
  "entityMap": {
   "<e0>": "Stephen L. R. McNichols"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the region served by #entity1",
    "originStr": "what is the region served by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the governor of stephen l.r. mcnichols",
    "originStr": "the governor of stephen l.r. mcnichols"
   }
  ],
  "question": "What is the region served by the governor of Stephen L.R. McNichols",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_L.R._McNichols> <http://dbpedia.org/property/governor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN region)) (VP (VBN served) (PP (IN by) (NP (NP (DT the) (NN governor)) (PP (IN of) (NP (NNP Stephen) (NNP L.R.) (NNP McNichols))))))) (. ?)))",
  "entityNum": 2,
  "id": 351
 },
 {
  "taggedQuestion": "Who operates Liverpool Playhouse ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who operates Liverpool Playhouse",
    "originStr": "Who operates Liverpool Playhouse"
   }
  ],
  "question": "Who operates Liverpool Playhouse",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ operates) (NP (NNP Liverpool) (NNP Playhouse)))) (. ?)))",
  "entityNum": 1,
  "id": 352
 },
 {
  "taggedQuestion": "Who has composed songs produced by Terry Melcher?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who has composed #entity1",
    "originStr": "who has composed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "songs produced by terry melcher",
    "originStr": "songs produced by terry melcher"
   }
  ],
  "question": "Who has composed songs produced by Terry Melcher",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN composed) (NP (NP (NNS songs)) (VP (VBN produced) (PP (IN by) (NP (NNP Terry) (NNP Melcher)))))))) (. ?)))",
  "entityNum": 2,
  "id": 353
 },
 {
  "taggedQuestion": "Which series does <e0> to ?",
  "entityMap": {
   "<e0>": "Lost special belong"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which series does Lost special belong to",
    "originStr": "To which series does Lost special belong to"
   }
  ],
  "question": "To which series does Lost special belong to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VP (VBZ does) (NP (ADD <e0>)) (S (VP (TO to))))) (. ?)))",
  "entityNum": 1,
  "id": 354
 },
 {
  "taggedQuestion": "How many albums did the maker of The Band produce?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many albums did #entity1 produce",
    "originStr": "how many albums did #entity1 produce"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the maker of the band",
    "originStr": "the maker of the band"
   }
  ],
  "question": "How many albums did the maker of The Band produce",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/The_Band> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS albums)) (SQ (VBD did) (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (DT The) (NNP Band)))) (VP (VB produce))) (. ?)))",
  "entityNum": 2,
  "id": 355
 },
 {
  "taggedQuestion": "List few musical artist whose notable instruments are Ludwig Drums and  Remo?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list few musical artist",
    "originStr": "list few musical artist"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose notable instruments are ludwig drums and remo",
    "originStr": "whose notable instruments are ludwig drums and remo"
   }
  ],
  "question": "List few musical artist whose notable instruments are Ludwig Drums and Remo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (JJ few) (JJ musical) (NN artist)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ notable) (NNS instruments)) (VP (VBP are) (NP (NP (NNP Ludwig) (NNPS Drums)) (CC and) (NP (NNP Remo)))))) (. ?)))",
  "entityNum": 1,
  "id": 356
 },
 {
  "taggedQuestion": "How many rivers start in an <e0>?",
  "entityMap": {
   "<e0>": "English speaking country"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many rivers start in #entity1",
    "originStr": "how many rivers start in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "an english speaking country",
    "originStr": "an english speaking country"
   }
  ],
  "question": "How many rivers start in an English speaking country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS rivers)) (VP (VBP start) (PP (IN in) (NP (DT an) (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 357
 },
 {
  "taggedQuestion": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "for a position in which institution",
    "originStr": "for a position in which institution"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were both jack ryan and robert sarvis both appointed",
    "originStr": "were both jack ryan and robert sarvis both appointed"
   }
  ],
  "question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
  "syntaxTreeText": "(ROOT (FRAG (S (PP (IN For) (NP (NP (DT a) (NN position)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN institution)) (VP (VBD were) (DT both) (NP (NP (NNP Jack) (NNP Ryan)) (CC and) (NP (NNP Robert) (NNP sarvis))))))))) (NP (DT both)) (ADJP (VBN appointed)) (. ?)))",
  "entityNum": 1,
  "id": 358
 },
 {
  "taggedQuestion": "Where Everybody knows you is the theme album of which show ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where everybody knows you is the theme album of",
    "originStr": "where everybody knows you is the theme album of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which show",
    "originStr": "which show"
   }
  ],
  "question": "Where Everybody knows you is the theme album of which show",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> <http://dbpedia.org/ontology/album> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (NP (NN Everybody)) (VP (VBZ knows) (SBAR (S (NP (PRP you)) (VP (VBZ is) (NP (NP (DT the) (NN theme) (NN album)) (WHPP (IN of) (WHNP (WDT which) (NN show))))))))) (. ?)))",
  "entityNum": 1,
  "id": 359
 },
 {
  "taggedQuestion": "Food in which countries has shallot in it?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "food in which countries #entity1",
    "originStr": "food in which countries #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has shallot in it",
    "originStr": "has shallot in it"
   }
  ],
  "question": "Food in which countries has shallot in it",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
  "syntaxTreeText": "(ROOT (SBARQ (NP (NNP Food)) (WHPP (IN in) (WHNP (WDT which) (NNS countries))) (SQ (VBZ has) (NP (NP (NN shallot)) (PP (IN in) (NP (PRP it))))) (. ?)))",
  "entityNum": 2,
  "id": 360
 },
 {
  "taggedQuestion": "Which rivers have source origins asnorth western, Zambia ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which rivers",
    "originStr": "which rivers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have source origins asnorth western, zambia",
    "originStr": "have source origins asnorth western, zambia"
   }
  ],
  "question": "Which rivers have source origins asnorth western, Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (FRAG (SBAR (WHNP (WDT Which)) (S (NP (NNS rivers)) (VP (VBP have) (NP (NP (NN source) (NNS origins)) (ADJP (JJ asnorth) (JJ western)))))) (, ,) (NP (NNP Zambia)) (. ?)))",
  "entityNum": 1,
  "id": 361
 },
 {
  "taggedQuestion": "Organization holding stocks of  Galician and German wikipedias?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "organization holding stocks of galician and german",
    "originStr": "organization holding stocks of galician and german"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "wikipedias",
    "originStr": "wikipedias"
   }
  ],
  "question": "Organization holding stocks of Galician and German wikipedias",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri . }",
  "syntaxTreeText": "(ROOT (FRAG (SBAR (WHNP (WDT Which)) (S (NP (NNS rivers)) (VP (VBP have) (NP (NP (NN source) (NNS origins)) (ADJP (JJ asnorth) (JJ western)))))) (, ,) (NP (NNP Zambia)) (. ?)))",
  "entityNum": 1,
  "id": 362
 },
 {
  "taggedQuestion": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the river with readin, brekshire in its path",
    "originStr": "name the river with readin, brekshire in its path"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and mouth place is sothend-on-sea",
    "originStr": "and mouth place is sothend-on-sea"
   }
  ],
  "question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NNP Readin))))) (, ,) (NP (NP (NNP Brekshire)) (PP (IN in) (NP (NP (PRP$ its) (NN path)) (CC and) (NP (NN mouth) (NN place))))) (VP (VBZ is) (NP (NP (NNP Sothend)) (HYPH -) (PP (IN on) (HYPH -) (NP (NN sea))))) (. .)))",
  "entityNum": 1,
  "id": 363
 },
 {
  "taggedQuestion": "Alexander Magleby, a rugby player is alma mater to which university?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "alexander magleby, a rugby player is alma mater to",
    "originStr": "alexander magleby, a rugby player is alma mater to"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which university",
    "originStr": "which university"
   }
  ],
  "question": "Alexander Magleby, a rugby player is alma mater to which university",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/property/university> ?uri } ",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Alexander) (NNP Magleby)) (, ,) (NP (DT a) (JJ rugby) (NN player))) (VP (VBZ is) (NP (NP (JJ alma) (NN mater)) (WHPP (TO to) (WHNP (WDT which) (NN university))))) (. ?)))",
  "entityNum": 1,
  "id": 364
 },
 {
  "taggedQuestion": "Is Amharic the official language of Ethiopia?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Amharic the official language of Ethiopia",
    "originStr": "Is Amharic the official language of Ethiopia"
   }
  ],
  "question": "Is Amharic the official language of Ethiopia",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Amharic)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NNP Ethiopia)))) (. ?)))",
  "entityNum": 1,
  "id": 365
 },
 {
  "taggedQuestion": "What sport played at <e1> employes <e0>?",
  "entityMap": {
   "<e1>": "Islamic azad uni",
   "<e0>": "Craig Van Tilbury"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what sport played at islamic azad uni #entity1",
    "originStr": "what sport played at islamic azad uni #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "employes craig van tilbury",
    "originStr": "employes craig van tilbury"
   }
  ],
  "question": "What sport played at Islamic azad uni employes Craig Van Tilbury",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN sport)) (SQ (VP (VBD played) (ADVP (IN at) (NP (CD <e1>) (NNS employes))) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 2,
  "id": 366
 },
 {
  "taggedQuestion": "List the products of the company which published Tweenies: Game Time.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the products of #entity1",
    "originStr": "list the products of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which published tweenies: game time",
    "originStr": "the company which published tweenies: game time"
   }
  ],
  "question": "List the products of the company which published Tweenies: Game Time",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tweenies:_Game_Time> <http://dbpedia.org/property/publisher> ?x . ?x <http://dbpedia.org/property/products> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS products)) (PP (IN of) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBD published) (NP (NP (NNP Tweenies)) (: :) (NP (NN Game) (NN Time)))))))))) (. .)))",
  "entityNum": 2,
  "id": 367
 },
 {
  "taggedQuestion": "List the agencies located someplace lead by Alex Chalk.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the agencies located #entity1",
    "originStr": "list the agencies located #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "someplace lead by alex chalk",
    "originStr": "someplace lead by alex chalk"
   }
  ],
  "question": "List the agencies located someplace lead by Alex Chalk",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Alex_Chalk> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (NP (DT the) (NNS agencies)) (VP (VBN located) (ADVP (RB someplace) (NP (NP (JJ lead)) (PP (IN by) (NP (NNP Alex))))))) (VP (VB Chalk)))) (. .)))",
  "entityNum": 2,
  "id": 368
 },
 {
  "taggedQuestion": "What religion are the characters of Absolutely Fabulous from?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what religion are #entity1 from",
    "originStr": "what religion are #entity1 from"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the characters of absolutely fabulous",
    "originStr": "the characters of absolutely fabulous"
   }
  ],
  "question": "What religion are the characters of Absolutely Fabulous from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Absolutely_Fabulous> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN religion)) (SQ (VBP are) (NP (NP (DT the) (NNS characters)) (PP (IN of) (ADVP (RB Absolutely) (PP (NP (NNP Fabulous)) (IN from)))))) (. ?)))",
  "entityNum": 2,
  "id": 369
 },
 {
  "taggedQuestion": "What are the movies whose music composer uses a Hammond organ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the movies whose music composer #entity1",
    "originStr": "what are the movies whose music composer #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "uses a hammond organ",
    "originStr": "uses a hammond organ"
   }
  ],
  "question": "What are the movies whose music composer uses a Hammond organ",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NN music) (NN composer)) (S (VP (VBZ uses) (NP (DT a) (NNP Hammond) (NN organ))))))) (. ?)))",
  "entityNum": 2,
  "id": 370
 },
 {
  "taggedQuestion": "Was Love Hurts in <e0>?",
  "entityMap": {
   "<e0>": "Short Cut Draw Blood"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Love Hurts in Short Cut Draw Blood",
    "originStr": "Was Love Hurts in Short Cut Draw Blood"
   }
  ],
  "question": "Was Love Hurts in Short Cut Draw Blood",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Love_Hurts> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (S (NP (NNP Love)) (VP (VBZ Hurts) (PP (IN in) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 371
 },
 {
  "taggedQuestion": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "janaka thissakuttiarachchi follows what religion",
    "originStr": "janaka thissakuttiarachchi follows what religion"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which once employed atisa srijnana too",
    "originStr": "which once employed atisa srijnana too"
   }
  ],
  "question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Ati\u015ba> <http://dbpedia.org/ontology/occupation> ?uri . }",
  "syntaxTreeText": "(ROOT (S (NP (NNP Janaka) (NNP Thissakuttiarachchi)) (VP (VBZ follows) (NP (NP (WP what) (NN religion)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB once)) (VP (VBD employed) (NP (NNP Atisa) (NNP Srijnana)) (ADVP (RB too))))))) (. ?)))",
  "entityNum": 1,
  "id": 372
 },
 {
  "taggedQuestion": "Which birthplace of Svetlana Gounkina is also the largest city of Union State ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which birthpalce of svetlana gounkina",
    "originStr": "which birthpalce of svetlana gounkina"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the largest city of union state",
    "originStr": "is also the largest city of union state"
   }
  ],
  "question": "Which birthpalce of Svetlana Gounkina is also the largest city of Union State",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN birthplace) (PP (IN of) (NP (NNP Svetlana) (NNP Gounkina))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Union) (NNP State))))) (. ?)))",
  "entityNum": 1,
  "id": 373
 },
 {
  "taggedQuestion": "Name the TV show with artist Christopher Franke and cast member Jason Carter .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the tv show with artist christopher franke",
    "originStr": "name the tv show with artist christopher franke"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and cast member jason carter",
    "originStr": "and cast member jason carter"
   }
  ],
  "question": "Name the TV show with artist Christopher Franke and cast member Jason Carter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (DT the) (NN TV) (NN show)) (PP (IN with) (NP (NN artist) (NNP Christopher) (NNP Franke)))) (CC and) (VP (VBD cast) (NP (NN member) (NNP Jason) (NNP Carter)))) (. .)))",
  "entityNum": 1,
  "id": 374
 },
 {
  "taggedQuestion": "Which artist married to Lee Krasner?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which artist",
    "originStr": "which artist"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "married to lee krasner",
    "originStr": "married to lee krasner"
   }
  ],
  "question": "Which artist married to Lee Krasner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Lee_Krasner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN artist)) (SQ (VP (VBD married) (PP (IN to) (NP (NNP Lee) (NNP Krasner))))) (. ?)))",
  "entityNum": 1,
  "id": 375
 },
 {
  "taggedQuestion": "What teams did the ex teamplayers of <e0> start their career with?",
  "entityMap": {
   "<e0>": "lighthouse boy club"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what teams did #entity1 start their career with",
    "originStr": "what teams did #entity1 start their career with"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ex teamplayers of lighthouse boy club",
    "originStr": "the ex teamplayers of lighthouse boy club"
   }
  ],
  "question": "What teams did the ex teamplayers of lighthouse boy club start their career with",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS teams)) (SQ (VP (VBD did) (SBAR (S (NP (NP (DT the) (NN ex) (NNS teamplayers)) (PP (IN of) (NP (NN <e0>)))) (VP (VBP start) (NP (PRP$ their) (NN career)) (PP (IN with))))))) (. ?)))",
  "entityNum": 2,
  "id": 376
 },
 {
  "taggedQuestion": "Where was the deadbody discovered of one of the alumni of <e0>?",
  "entityMap": {
   "<e0>": "General Educational Development"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was the deadbody discovered of #entity1",
    "originStr": "where was the deadbody discovered of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "one of the alumni of general educational development",
    "originStr": "one of the alumni of general educational development"
   }
  ],
  "question": "Where was the deadbody discovered of one of the alumni of General Educational Development",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (DT the) (NN deadbody)) (VP (VBN discovered) (PP (IN of) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS alumni)) (PP (IN of) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 377
 },
 {
  "taggedQuestion": "Who designed the bridge in Oddamavadi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who designed #entity1",
    "originStr": "who designed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the bridge in oddamavadi",
    "originStr": "the bridge in oddamavadi"
   }
  ],
  "question": "Who designed the bridge in Oddamavadi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD designed) (NP (DT the) (NN bridge)) (PP (IN in) (NP (NNP Oddamavadi))))) (. ?)))",
  "entityNum": 2,
  "id": 378
 },
 {
  "taggedQuestion": "What is the leader name of the settlements whose governing body is Municipal council?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the leader name of #entity1",
    "originStr": "what is the leader name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the settlements whose governing body is municipal council",
    "originStr": "the settlements whose governing body is municipal council"
   }
  ],
  "question": "What is the leader name of the settlements whose governing body is Municipal council",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/Municipal_council> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN leader) (NN name)) (PP (IN of) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose) (NN governing) (NN body)) (S (VP (VBZ is) (NP (JJ Municipal) (NN council))))))))) (. ?)))",
  "entityNum": 2,
  "id": 379
 },
 {
  "taggedQuestion": "Name the co-founder of the record labels which have one of the founder as Chris DuBois .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the co-founder of #entity1",
    "originStr": "name the co-founder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the record labels which have one of the founder as chris dubois",
    "originStr": "the record labels which have one of the founder as chris dubois"
   }
  ],
  "question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN co-founder)) (PP (IN of) (NP (NP (DT the) (NN record) (NNS labels)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN founder)) (PP (IN as) (NP (NNP Chris) (NNP DuBois))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 380
 },
 {
  "taggedQuestion": "List the companies operating in Australia?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the companies",
    "originStr": "list the companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "operating in australia",
    "originStr": "operating in australia"
   }
  ],
  "question": "List the companies operating in Australia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> } ",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS companies)) (VP (VBG operating) (PP (IN in) (NP (NNP Australia)))))) (. ?)))",
  "entityNum": 1,
  "id": 381
 },
 {
  "taggedQuestion": "Which countries is coconut used as a food ingredient?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which countries #entity1",
    "originStr": "in which countries #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is coconut used as a food ingredient",
    "originStr": "is coconut used as a food ingredient"
   }
  ],
  "question": "In which countries is coconut used as a food ingredient",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBZ is) (NP (NN coconut)) (VP (VBN used) (PP (IN as) (NP (DT a) (NN food) (NN ingredient))))) (. ?)))",
  "entityNum": 2,
  "id": 382
 },
 {
  "taggedQuestion": "How many people have worked for teams chaired by Patricia Amorim?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many people have worked for #entity1",
    "originStr": "how many people have worked for #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "teams chaired by patricia amorim",
    "originStr": "teams chaired by patricia amorim"
   }
  ],
  "question": "How many people have worked for teams chaired by Patricia Amorim",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN worked) (PP (IN for) (NP (NP (NNS teams)) (VP (VBN chaired) (PP (IN by) (NP (NNP Patricia) (NNP Amorim))))))))) (. ?)))",
  "entityNum": 2,
  "id": 383
 },
 {
  "taggedQuestion": "How many kinds of games is  played on the Amiga?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many kinds of #entity1",
    "originStr": "how many kinds of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games can be played on the amiga",
    "originStr": "games can be played on the amiga"
   }
  ],
  "question": "How many kinds of games can be played on the Amiga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WHADJP (WRB How) (JJ many)) (NNS kinds)) (PP (IN of) (NP (NNS games)))) (SQ (VBZ is) (VP (VBN played) (PP (IN on) (NP (DT the) (NNP Amiga))))) (. ?)))",
  "entityNum": 2,
  "id": 384
 },
 {
  "taggedQuestion": "Is the book <e0> a book about Buddhism?",
  "entityMap": {
   "<e0>": "The Buddha and his Dhamma"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the book The Buddha and his Dhamma a book about Buddhism",
    "originStr": "Is the book The Buddha and his Dhamma a book about Buddhism"
   }
  ],
  "question": "Is the book The Buddha and his Dhamma a book about Buddhism",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NN book) (NN <e0>)) (NP (NP (DT a) (NN book)) (PP (IN about) (NP (NNP Buddhism)))) (. ?)))",
  "entityNum": 1,
  "id": 385
 },
 {
  "taggedQuestion": "How many relatives are there of people fought in the <e0>?",
  "entityMap": {
   "<e0>": "Battle of the Bulge"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many relatives are there of #entity1",
    "originStr": "how many relatives are there of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people fought in the battle of the bulge",
    "originStr": "people fought in the battle of the bulge"
   }
  ],
  "question": "How many relatives are there of people fought in the Battle of the Bulge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS relatives)) (VP (VBP are) (ADVP (RB there) (PP (IN of) (NP (NNS people)))) (VP (VBN fought) (PP (IN in) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 386
 },
 {
  "taggedQuestion": "How many genres of games can I find on the commodore CDTV?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many genres of #entity1",
    "originStr": "how many genres of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games can i find on the commodore cdtv",
    "originStr": "games can i find on the commodore cdtv"
   }
  ],
  "question": "How many genres of games can I find on the commodore CDTV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_CDTV> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NP (NNS genres)) (PP (IN of) (NP (NNS games))))) (SQ (MD can) (NP (PRP I)) (VP (VB find) (PP (IN on) (NP (DT the) (NN commodore) (NNP CDTV))))) (. ?)))",
  "entityNum": 2,
  "id": 387
 },
 {
  "taggedQuestion": "Does Jevan Snead play as Quarterback?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Jevan Snead play as Quarterback",
    "originStr": "Does Jevan Snead play as Quarterback"
   }
  ],
  "question": "Does Jevan Snead play as Quarterback",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Jevan) (NNP Snead)) (VP (VB play) (PP (IN as) (NP (NN Quarterback)))) (. ?)))",
  "entityNum": 1,
  "id": 388
 },
 {
  "taggedQuestion": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give me the sitcoms",
    "originStr": "give me the sitcoms"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where eliza schneider and isaac hayes gave voice",
    "originStr": "where eliza schneider and isaac hayes gave voice"
   }
  ],
  "question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (DT the) (NNS sitcoms)) (SBAR (WHADVP (WRB where)) (S (NP (NP (NNP Eliza) (NNP Schneider)) (CC and) (NP (NNP Isaac) (NNP Hayes))) (VP (VBD gave) (NP (NN voice)))))) (. .)))",
  "entityNum": 1,
  "id": 389
 },
 {
  "taggedQuestion": "Directors of which movies are buried in Ronda?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "directors of which movies #entity1",
    "originStr": "directors of which movies #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are buried in ronda",
    "originStr": "are buried in ronda"
   }
  ],
  "question": "Directors of which movies are buried in Ronda",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Ronda> . ?uri <http://dbpedia.org/property/director> ?x  . }",
  "syntaxTreeText": "(ROOT (NP (NP (NNS Directors)) (PP (IN of) (SBAR (WHNP (WDT which)) (S (NP (NNS movies)) (VP (VBP are) (VP (VBN buried) (PP (IN in) (NP (NNP Ronda)))))))) (. ?)))",
  "entityNum": 2,
  "id": 390
 },
 {
  "taggedQuestion": "List the debut team of the baseball player who born in Houston.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the debut team of #entity1",
    "originStr": "list the debut team of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the baseball player who born in houston",
    "originStr": "the baseball player who born in houston"
   }
  ],
  "question": "List the debut team of the baseball player who born in Houston",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN debut) (NN team)) (PP (IN of) (NP (NP (DT the) (NN baseball) (NN player)) (SBAR (WHNP (WP who)) (S (VP (VBN born) (PP (IN in) (NP (NNP Houston)))))))))) (. .)))",
  "entityNum": 2,
  "id": 391
 },
 {
  "taggedQuestion": "Does Cascade Airways have a hub in Seattle?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does cascade"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Cascade Airways have a hub in Seattle",
    "originStr": "Does Cascade Airways have a hub in Seattle"
   }
  ],
  "question": "Does Cascade Airways have a hub in Seattle",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP Cascade))) (S (NP (NNPS Airways)) (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NNP Seattle)))))) (. ?)))",
  "entityNum": 1,
  "id": 392
 },
 {
  "taggedQuestion": "Who edited  British Gazette ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who edited British Gazette",
    "originStr": "Who edited British Gazette"
   }
  ],
  "question": "Who edited British Gazette",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN edited) (NP (JJ British) (NNP Gazette)))) (. ?)))",
  "entityNum": 1,
  "id": 393
 },
 {
  "taggedQuestion": "List the things for which the relatives of Mrunalini Kunte are known?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the things for which #entity1 are known",
    "originStr": "list the things for which #entity1 are known"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of mrunalini kunte",
    "originStr": "the relatives of mrunalini kunte"
   }
  ],
  "question": "List the things for which the relatives of Mrunalini Kunte are known",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS things)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mrunalini) (NNP Kunte)))) (VP (VBP are) (VP (VBN known))))))) (. ?)))",
  "entityNum": 2,
  "id": 394
 },
 {
  "taggedQuestion": "What acts and artists are associated with people who have worked with Divertis?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what acts and artists are associated with #entity1",
    "originStr": "what acts and artists are associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who have worked with divertis",
    "originStr": "people who have worked with divertis"
   }
  ],
  "question": "What acts and artists are associated with people who have worked with Divertis",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Divertis> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (S (NP (WDT What)) (VP (VBZ acts))) (CC and) (S (NP (NNS artists)) (VP (VBP are) (VP (VBN associated) (PP (IN with) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN worked) (PP (IN with) (NP (NNP Divertis)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 395
 },
 {
  "taggedQuestion": "What are the notableworks of <e0>?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the notableworks of Russell T Davies",
    "originStr": "What are the notableworks of Russell T Davies"
   }
  ],
  "question": "What are the notableworks of Russell T Davies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS notableworks)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 396
 },
 {
  "taggedQuestion": "Which company has developed games whose music is done by Gerard Marino?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which company has developed #entity1",
    "originStr": "which company has developed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games whose music is done by gerard marino",
    "originStr": "games whose music is done by gerard marino"
   }
  ],
  "question": "Which company has developed games whose music is done by Gerard Marino",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN company)) (SQ (VP (VBZ has) (VP (VBN developed) (NP (NP (NNS games)) (SBAR (WHNP (WP$ whose) (NN music)) (S (VP (VBZ is) (VP (VBN done) (PP (IN by) (NP (NNP Gerard) (NNP Marino))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 397
 },
 {
  "taggedQuestion": "Who all have developed softwares for Unix Like OSes?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who all have developed #entity1",
    "originStr": "who all have developed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "softwares for unix like oses",
    "originStr": "softwares for unix like oses"
   }
  ],
  "question": "Who all have developed softwares for Unix Like OSes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN developed) (NP (NP (NNS softwares)) (PP (IN for) (NP (NNP Unix)))) (PP (IN Like) (NP (NNPS OSes)))))) (. ?)))",
  "entityNum": 2,
  "id": 398
 },
 {
  "taggedQuestion": "What are some party leaders of the parties which have had a seat in Berlin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some party leaders of #entity1",
    "originStr": "what are some party leaders of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the parties which have had a seat in berlin",
    "originStr": "the parties which have had a seat in berlin"
   }
  ],
  "question": "What are some party leaders of the parties which have had a seat in Berlin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN party) (NNS leaders)) (PP (IN of) (NP (NP (DT the) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (VP (VBN had) (NP (NP (DT a) (NN seat)) (PP (IN in) (NP (NNP Berlin)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 399
 },
 {
  "taggedQuestion": "Was James maker in the band Noko?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was James maker in the band Noko",
    "originStr": "Was James maker in the band Noko"
   }
  ],
  "question": "Was James maker in the band Noko",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Noko> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/James_Maker> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP James)) (NP (NP (NN maker)) (PP (IN in) (NP (DT the) (NN band) (NNP Noko)))) (. ?)))",
  "entityNum": 1,
  "id": 400
 },
 {
  "taggedQuestion": "Was Nick Jonas a member of the Jonas Brothers?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Nick Jonas a member of the Jonas Brothers",
    "originStr": "Was Nick Jonas a member of the Jonas Brothers"
   }
  ],
  "question": "Was Nick Jonas a member of the Jonas Brothers",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Nick) (NNP Jonas)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNP Jonas) (NNPS Brothers)))) (. ?)))",
  "entityNum": 1,
  "id": 401
 },
 {
  "taggedQuestion": "Which tenant of <e0> is the military branch of the Gary Holder-Winfield ?",
  "entityMap": {
   "<e0>": "New Sanno Hotel"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which tenant of new sanno hotel",
    "originStr": "which tenant of new sanno hotel"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the military branch of the gary holder-winfield",
    "originStr": "is the military branch of the gary holder-winfield"
   }
  ],
  "question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri. <http://dbpedia.org/resource/Gary_Holder-Winfield> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN tenant) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN branch)) (PP (IN of) (NP (DT the) (NNP Gary) (NNP Holder) (HYPH -) (NNP Winfield))))) (. ?)))",
  "entityNum": 1,
  "id": 402
 },
 {
  "taggedQuestion": "List the director of The Adventures of mimi ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the director of The Adventures of mimi",
    "originStr": "List the director of The Adventures of mimi"
   }
  ],
  "question": "List the director of The Adventures of mimi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)> <http://dbpedia.org/property/director> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN director)) (PP (IN of) (NP (NP (DT The) (NNS Adventures)) (PP (IN of) (NP (NN mimi))))))) (. ?)))",
  "entityNum": 1,
  "id": 403
 },
 {
  "taggedQuestion": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team?",
  "entityMap": {
   "<e0>": "Middlesbrough F.C. England national under-21 football team"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "List"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list sports managers",
    "originStr": "list sports managers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who managed middlesbrough f.c. and england national under-21 football team",
    "originStr": "who managed middlesbrough f.c. and england national under-21 football team"
   }
  ],
  "question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (NNS sports) (NNS managers)) (SBAR (WHNP (WP who)) (S (VP (VBD managed) (NP (NML (NNP Middlesbrough) (NNP F.C.) (CC and) (NNP England)) (JJ national) (NML (PP (IN under) (HYPH -) (NP (CD 21)))) (NN football) (NN team))))) (. ?)))",
  "entityNum": 1,
  "id": 404
 },
 {
  "taggedQuestion": "Name all the soccer players who played in a under 18 club for La Liga.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name all the soccer players who played in #entity1",
    "originStr": "name all the soccer players who played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a under 18 club for la liga",
    "originStr": "a under 18 club for la liga"
   }
  ],
  "question": "Name all the soccer players who played in a under 18 club for La Liga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NN soccer) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBD played) (PP (IN in) (NP (NP (DT a) (NML (QP (IN under) (CD 18))) (NN club)) (PP (IN for) (NP (NNP La) (NNP Liga)))))))))) (. .)))",
  "entityNum": 2,
  "id": 405
 },
 {
  "taggedQuestion": "Which key perosn of the Elders is also the president of <e0> ?",
  "entityMap": {
   "<e0>": "united World College"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which key perosn of the elders",
    "originStr": "which key perosn of the elders"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the president of united world college",
    "originStr": "is also the president of united world college"
   }
  ],
  "question": "Which key perosn of the Elders is also the president of united World College",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ key) (NN perosn)) (PP (IN of) (NP (DT the) (NNPS Elders))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 406
 },
 {
  "taggedQuestion": "Who are the players whose current clubs have Ferran Soriano as chairman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who are the players whose current clubs #entity1",
    "originStr": "who are the players whose current clubs #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have ferran soriano as chairman",
    "originStr": "have ferran soriano as chairman"
   }
  ],
  "question": "Who are the players whose current clubs have Ferran Soriano as chairman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (NML (JJ current) (NNS clubs))) (S (VP (VBP have) (NP (NP (NNP Ferran) (NNP Soriano)) (PP (IN as) (NP (NN chairman))))))))) (. ?)))",
  "entityNum": 2,
  "id": 407
 },
 {
  "taggedQuestion": "What are some parties which have people from Mangalore as a member?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some parties which have #entity1",
    "originStr": "what are some parties which have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people from mangalore as a member",
    "originStr": "people from mangalore as a member"
   }
  ],
  "question": "What are some parties which have people from Mangalore as a member",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Mangalore> . ?x <http://dbpedia.org/property/party> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS parties)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS people)) (PP (IN from) (NP (NNP Mangalore)))) (PP (IN as) (NP (DT a) (NN member)))))))) (. ?)))",
  "entityNum": 2,
  "id": 408
 },
 {
  "taggedQuestion": "Which employer of <e0> is also the producer of Delta III ?",
  "entityMap": {
   "<e0>": "Michael M. Sears"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which employer of michael m. sears",
    "originStr": "which employer of michael m. sears"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the producer of delta iii",
    "originStr": "is also the producer of delta iii"
   }
  ],
  "question": "Which employer of Michael M. Sears is also the producer of Delta III",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN employer) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Delta) (NNP III))))) (. ?)))",
  "entityNum": 1,
  "id": 409
 },
 {
  "taggedQuestion": "Name the largest city in the county where there is a Cy-<e0>",
  "entityMap": {
   "<e0>": "Fair High School."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the largest city in #entity1",
    "originStr": "name the largest city in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the county where there is a cy-fair high school",
    "originStr": "the county where there is a cy-fair high school"
   }
  ],
  "question": "Name the largest city in the county where there is a Cy-Fair High School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
  "syntaxTreeText": "(ROOT (FRAG (SINV (VP (VB Name)) (NP (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (DT the) (NN county)))) (SBAR (WHADVP (WRB where)) (S (NP (EX there)) (VP (VBZ is) (NP (DT a) (NNP Cy))))))) (HYPH -) (NP (ADD <e0>))))",
  "entityNum": 2,
  "id": 410
 },
 {
  "taggedQuestion": "How many bacterias are there whose division is Firmicutes?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many bacterias are there #entity1",
    "originStr": "how many bacterias are there #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose division is firmicutes",
    "originStr": "whose division is firmicutes"
   }
  ],
  "question": "How many bacterias are there whose division is Firmicutes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS bacterias)) (VP (VBP are) (NP (NP (EX there)) (SBAR (WHNP (WP$ whose) (NML (NN division))) (S (VP (VBZ is) (NP (NNP Firmicutes)))))))) (. ?)))",
  "entityNum": 2,
  "id": 411
 },
 {
  "taggedQuestion": "Which country does Peter Blay owe his allegiance?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which country does Peter Blay owe his allegiance",
    "originStr": "To which country does Peter Blay owe his allegiance"
   }
  ],
  "question": "To which country does Peter Blay owe his allegiance",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN country)) (SQ (VBZ does) (NP (NNP Peter) (NNP Blay)) (VP (VB owe) (NP (PRP$ his) (NN allegiance)))) (. ?)))",
  "entityNum": 1,
  "id": 412
 },
 {
  "taggedQuestion": "Is jim harbaugh currently in the Michigan Wolverines?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is jim harbaugh currently in the Michigan Wolverines",
    "originStr": "Is jim harbaugh currently in the Michigan Wolverines"
   }
  ],
  "question": "Is jim harbaugh currently in the Michigan Wolverines",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jim_Harbaugh> <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP jim) (NNP harbaugh)) (ADVP (RB currently)) (PP (IN in) (NP (DT the) (NNP Michigan) (NNPS Wolverines))) (. ?)))",
  "entityNum": 1,
  "id": 413
 },
 {
  "taggedQuestion": "Name the <e0> whose subsequent work is Crusade and Composer is Stewart Copeland.",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the television show whose subsequent work is crusade",
    "originStr": "name the television show whose subsequent work is crusade"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and composer is stewart copeland",
    "originStr": "and composer is stewart copeland"
   }
  ],
  "question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (JJ subsequent) (NN work))) (S (VP (VBZ is) (NP (NP (NN Crusade) (CC and) (NN Composer)) (SBAR (S (VP (VBZ is) (NP (NNP Stewart) (NNP Copeland))))))))))) (. .)))",
  "entityNum": 1,
  "id": 414
 },
 {
  "taggedQuestion": "What are the current music bands of Chester Bennington?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the current music bands of chester",
    "originStr": "what are the current music bands of chester"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "bennington",
    "originStr": "bennington"
   }
  ],
  "question": "What are the current music bands of Chester Bennington",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ current) (NN music) (NNS bands)) (PP (IN of) (NP (NNP Chester) (NNP Bennington))))) (. ?)))",
  "entityNum": 1,
  "id": 415
 },
 {
  "taggedQuestion": "Who was the prime minister under which the predecessor of <e0> served?",
  "entityMap": {
   "<e0>": "Derick Heathcoat Amory"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who was the prime minister under which #entity1",
    "originStr": "who was the prime minister under which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of derick heathcoat amory served",
    "originStr": "the predecessor of derick heathcoat amory served"
   }
  ],
  "question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (JJ prime) (NN minister)) (SBAR (WHPP (IN under) (WHNP (WDT which))) (S (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN served)))))) (. ?)))",
  "entityNum": 2,
  "id": 416
 },
 {
  "taggedQuestion": "Which person designed the cars which has been designed by <e0>?",
  "entityMap": {
   "<e0>": "ASC Creative Services"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which person designed #entity1",
    "originStr": "which person designed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the cars which has been designed by asc creative services",
    "originStr": "the cars which has been designed by asc creative services"
   }
  ],
  "question": "Which person designed the cars which has been designed by ASC Creative Services",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN person)) (SQ (VP (VBD designed) (NP (NP (DT the) (NNS cars)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN designed) (PP (IN by) (NP (NN <e0>))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 417
 },
 {
  "taggedQuestion": "What are some orthonychidae birds?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are some orthonychidae birds",
    "originStr": "What are some orthonychidae birds"
   }
  ],
  "question": "What are some orthonychidae birds",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS orthonychidae)) (NP (NNS birds)))) (. ?)))",
  "entityNum": 1,
  "id": 418
 },
 {
  "taggedQuestion": "Which driver had the pole position in <e0> ?",
  "entityMap": {
   "<e0>": "1994 Spanish Grand Prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which driver",
    "originStr": "which driver"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "had the pole position in 1994 spanish grand prix",
    "originStr": "had the pole position in 1994 spanish grand prix"
   }
  ],
  "question": "Which driver had the pole position in 1994 Spanish Grand Prix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN driver)) (SQ (VP (VBD had) (NP (NP (DT the) (NN pole) (NN position)) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 419
 },
 {
  "taggedQuestion": "Does the US route 281 have a junction at San Antonio?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does the us route"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the US route 281 have a junction at San Antonio",
    "originStr": "Does the US route 281 have a junction at San Antonio"
   }
  ],
  "question": "Does the US route 281 have a junction at San Antonio",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (DT the) (NNP US) (NN route))) (S (NP (CD 281)) (VP (VBP have) (NP (NP (DT a) (NN junction)) (PP (IN at) (NP (NNP San) (NNP Antonio)))))) (. ?)))",
  "entityNum": 1,
  "id": 420
 },
 {
  "taggedQuestion": "How many awards have been given to the founder of Grameen Bank?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many awards have been given to #entity1",
    "originStr": "how many awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the founder of grameen bank",
    "originStr": "the founder of grameen bank"
   }
  ],
  "question": "How many awards have been given to the founder of Grameen Bank",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NNP Grameen) (NNP Bank))))))))) (. ?)))",
  "entityNum": 2,
  "id": 421
 },
 {
  "taggedQuestion": "Was Queen Latifah in the U.N.I.T.Y. group?",
  "entityMap": {
   "<e0>": "U.N. I.T. Y. group"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Queen Latifah in the U.N.I.T.Y. group",
    "originStr": "Was Queen Latifah in the U.N.I.T.Y. group"
   }
  ],
  "question": "Was Queen Latifah in the U.N.I.T.Y. group",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Queen) (NNP Latifah)) (PP (IN in) (NP (DT the) (NNP U.N.I.T.Y.) (NN group))) (. ?)))",
  "entityNum": 1,
  "id": 422
 },
 {
  "taggedQuestion": "Count the important works done by the writers of The Second Coming.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of important works done by #entity1",
    "originStr": "count the number of important works done by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the writers of the second coming",
    "originStr": "the writers of the second coming"
   }
  ],
  "question": "Count the number of important works done by the writers of The Second Coming",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Count) (NP (DT the) (JJ important)))) (VP (VBZ works) (VP (VBN done) (PP (IN by) (NP (NP (DT the) (NNS writers)) (PP (IN of) (NP (NP (DT The) (JJ Second)) (VP (VBG Coming)))))))) (. .)))",
  "entityNum": 2,
  "id": 423
 },
 {
  "taggedQuestion": "Who all are known to play the <e0>?",
  "entityMap": {
   "<e0>": "Gibson Guitar Corporation"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who all are known to play the Gibson Guitar Corporation",
    "originStr": "Who all are known to play the Gibson Guitar Corporation"
   }
  ],
  "question": "Who all are known to play the Gibson Guitar Corporation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP are) (VP (VBN known) (S (VP (TO to) (VP (VB play) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 1,
  "id": 424
 },
 {
  "taggedQuestion": "Which child of Jack Ferguson became a Prime Minister?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which child of jack ferguson",
    "originStr": "which child of jack ferguson"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "became a prime minister",
    "originStr": "became a prime minister"
   }
  ],
  "question": "Which child of Jack Ferguson became a Prime Minister",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN child)) (PP (IN of) (NP (NNP Jack) (NNP Ferguson)))) (SQ (VP (VBD became) (NP (DT a) (NML (NNP Prime) (NNP Minister))))) (. ?)))",
  "entityNum": 1,
  "id": 425
 },
 {
  "taggedQuestion": "Did Annie Leibovitz do the cover of The Road Ahead?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Annie Leibovitz do the cover of The Road Ahead",
    "originStr": "Did Annie Leibovitz do the cover of The Road Ahead"
   }
  ],
  "question": "Did Annie Leibovitz do the cover of The Road Ahead",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Annie_Leibovitz> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Annie) (NNP Leibovitz)) (VP (VBP do) (NP (NP (DT the) (NN cover)) (PP (IN of) (NP (DT The) (NNP Road)))) (ADVP (RB Ahead))) (. ?)))",
  "entityNum": 1,
  "id": 426
 },
 {
  "taggedQuestion": "What are the things whose mascots are from the class Eutheria?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the things whose mascots #entity1",
    "originStr": "what are the things whose mascots #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are from the class eutheria",
    "originStr": "are from the class eutheria"
   }
  ],
  "question": "What are the things whose mascots are from the class Eutheria",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Eutheria> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS things)) (SBAR (WHNP (WP$ whose) (NNS mascots)) (S (VP (VBP are) (PP (IN from) (NP (DT the) (NN class) (NNP Eutheria)))))))) (. ?)))",
  "entityNum": 2,
  "id": 427
 },
 {
  "taggedQuestion": "Whom did Michael Springer palyed for which is also had a former student named Donald Brooks ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "for whom did michael springer played for",
    "originStr": "for whom did michael springer played for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also had a former student named donald brooks",
    "originStr": "which is also had a former student named donald brooks"
   }
  ],
  "question": "For whom did Michael Springer played for which is also had a former student named Donald Brooks",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Donald_Brooks> <http://dbpedia.org/property/education> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Whom)) (SQ (VBD did) (NP (NNP Michael) (NNP Springer)) (VP (VBD palyed) (PP (IN for) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN had) (NP (NP (DT a) (JJ former) (NN student)) (VP (VBN named) (NP (NNP Donald) (NNP Brooks))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 428
 },
 {
  "taggedQuestion": "Name the common nationality of <e1> and <e0> .",
  "entityMap": {
   "<e1>": "Georgina Theodora Wood",
   "<e0>": "akwasi Oppong Fosu"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common nationality of georgina theodora wood and akwasi oppong",
    "originStr": "name the common nationality of georgina theodora wood and akwasi oppong"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "fosu",
    "originStr": "fosu"
   }
  ],
  "question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (JJ common) (NN nationality)) (PP (IN of) (FRAG (NP (ADD <e1>) (CC and) (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 429
 },
 {
  "taggedQuestion": "Name the movie written by Monty Python and distributed by <e0> .",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movie written by monty python",
    "originStr": "name the movie written by monty python"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and distributed by cinema international corporation",
    "originStr": "and distributed by cinema international corporation"
   }
  ],
  "question": "Name the movie written by Monty Python and distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (VP (VP (VBN written) (PP (IN by) (NP (NNP Monty) (NNP Python)))) (CC and) (VP (VBN distributed) (PP (IN by) (NP (ADD <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 430
 },
 {
  "taggedQuestion": "Is Pittsburgh Steelers the former team of Marv McFadden?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Pittsburgh Steelers the former team of Marv McFadden",
    "originStr": "Is Pittsburgh Steelers the former team of Marv McFadden"
   }
  ],
  "question": "Is Pittsburgh Steelers the former team of Marv McFadden",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Pittsburgh) (NNPS Steelers)) (NP (NP (DT the) (JJ former) (NN team)) (PP (IN of) (NP (NNP Marv) (NNP McFadden)))) (. ?)))",
  "entityNum": 1,
  "id": 431
 },
 {
  "taggedQuestion": "Which series was written by Eric Jendresen and John Orloff?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which series",
    "originStr": "which series"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was written by eric jendresen and john orloff",
    "originStr": "was written by eric jendresen and john orloff"
   }
  ],
  "question": "Which series was written by Eric Jendresen and John Orloff",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN series)) (SQ (VBD was) (VP (VBN written) (PP (IN by) (NP (NP (NNP Eric) (NNP Jendresen)) (CC and) (NP (NNP John) (NNP Orloff)))))) (. ?)))",
  "entityNum": 1,
  "id": 432
 },
 {
  "taggedQuestion": "Which city can I find both the office of Elasticsearch and <e0> DJ?",
  "entityMap": {
   "<e0>": "the Yellow Claw"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which city",
    "originStr": "in which city"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "can i find both the office of elasticsearch and the yellow claw dj",
    "originStr": "can i find both the office of elasticsearch and the yellow claw dj"
   }
  ],
  "question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Elasticsearch> <http://dbpedia.org/property/location> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (MD can) (NP (PRP I)) (VP (VB find) (NP (PDT both) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NNP Elasticsearch)))) (CC and) (NP (NP (ADD <e0>)) (NP (NN DJ)))))) (. ?)))",
  "entityNum": 1,
  "id": 433
 },
 {
  "taggedQuestion": "Name the partners of Kelly Brook.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the partners of Kelly Brook",
    "originStr": "Name the partners of Kelly Brook"
   }
  ],
  "question": "Name the partners of Kelly Brook",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS partners)) (PP (IN of) (NP (NNP Kelly) (NNP Brook))))) (. .)))",
  "entityNum": 1,
  "id": 434
 },
 {
  "taggedQuestion": "What is the area of the broadcast network which has the affiliation with 9TV?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the area of #entity1",
    "originStr": "what is the area of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the broadcast network which has the affiliation with 9tv",
    "originStr": "the broadcast network which has the affiliation with 9tv"
   }
  ],
  "question": "What is the area of the broadcast network which has the affiliation with 9TV",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9TV> <http://dbpedia.org/property/affiliation> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN broadcast) (NN network)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (DT the) (NN affiliation)) (PP (IN with) (NP (NN 9TV))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 435
 },
 {
  "taggedQuestion": "Who is married to Gerard Piqu?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is married to Gerard Piqu",
    "originStr": "Who is married to Gerard Piqu"
   }
  ],
  "question": "Who is married to Gerard Piqu",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN married) (PP (IN to) (NP (NNP Gerard) (NNP Piqu))))) (. ?)))",
  "entityNum": 1,
  "id": 436
 },
 {
  "taggedQuestion": "Which sports are played in schools affiliated with the <e0>?",
  "entityMap": {
   "<e0>": "Harvest Christian Center"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which sports are played in #entity1",
    "originStr": "which sports are played in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "schools affiliated with the harvest christian center",
    "originStr": "schools affiliated with the harvest christian center"
   }
  ],
  "question": "Which sports are played in schools affiliated with the Harvest Christian Center",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS sports)) (SQ (VBP are) (VP (VBN played) (PP (IN in) (NP (NP (NNS schools)) (VP (VBN affiliated) (PP (IN with) (NP (DT the) (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 437
 },
 {
  "taggedQuestion": "Who debuted their career in a team coached by Chip Kelly?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who debuted their career in #entity1",
    "originStr": "who debuted their career in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a team coached by chip kelly",
    "originStr": "a team coached by chip kelly"
   }
  ],
  "question": "Who debuted their career in a team coached by Chip Kelly",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD debuted) (NP (PRP$ their) (NN career)) (PP (IN in) (NP (NP (DT a) (NN team)) (VP (VBN coached) (PP (IN by) (NP (NN Chip) (NNP Kelly)))))))) (. ?)))",
  "entityNum": 2,
  "id": 438
 },
 {
  "taggedQuestion": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the nicknames given to #entity1",
    "originStr": "what are the nicknames given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the characters of the wolves of the mercy falls",
    "originStr": "the characters of the wolves of the mercy falls"
   }
  ],
  "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters> <http://dbpedia.org/property/nickname> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS nicknames)) (VP (VBN given) (PP (IN to) (NP (NP (DT the) (NNS characters)) (PP (IN of) (NP (NP (DT The) (NNS Wolves)) (PP (IN of) (NP (DT the) (NN Mercy) (NNS Falls))))))))) (. ?)))",
  "entityNum": 2,
  "id": 439
 },
 {
  "taggedQuestion": "Name the river with source country in Zambia and source region as North-Western Province, Zambia.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the river with source country in zambia",
    "originStr": "name the river with source country in zambia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and source region as north-western province, zambia",
    "originStr": "and source region as north-western province, zambia"
   }
  ],
  "question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN river)) (PP (IN with) (NP (NP (NP (NN source) (NN country)) (PP (IN in) (NP (NNP Zambia)))) (CC and) (NP (NP (NN source) (NN region)) (PP (IN as) (NP (NNP North) (HYPH -) (NNP Western) (NNP Province) (, ,) (NNP Zambia))))))) (. .)))",
  "entityNum": 1,
  "id": 440
 },
 {
  "taggedQuestion": "Members of how many political parties have died in Delhi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "members of how many political parties #entity1",
    "originStr": "members of how many political parties #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "have died in delhi",
    "originStr": "have died in delhi"
   }
  ],
  "question": "Members of how many political parties have died in Delhi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . }",
  "syntaxTreeText": "(ROOT (NP (NP (NNS Members)) (PP (IN of) (SBAR (WHADJP (WRB how) (JJ many)) (S (NP (JJ political) (NNS parties)) (VP (VBP have) (VP (VBN died) (PP (IN in) (NP (NNP Delhi)))))))) (. ?)))",
  "entityNum": 2,
  "id": 441
 },
 {
  "taggedQuestion": "What is the birthplace of Adugna Deyas and the place where Fiq is located?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the birthplace of adugna deyas",
    "originStr": "what is the birthplace of adugna deyas"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and the place where fiq is located",
    "originStr": "and the place where fiq is located"
   }
  ],
  "question": "What is the birthplace of Adugna Deyas and the place where Fiq is located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fiq,_Ethiopia> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/birthPlace> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NP (NNP Adugna) (NNP Deyas)) (CC and) (NP (NP (DT the) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Fiq)) (VP (VBZ is) (VP (VBN located)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 442
 },
 {
  "taggedQuestion": "What is the headquarters of <e0>?",
  "entityMap": {
   "<e0>": "Juan Dalmau Ramerez"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the headquarters of Juan Dalmau Ramerez",
    "originStr": "what is the headquarters of Juan Dalmau Ramerez"
   }
  ],
  "question": "what is the headquarters of Juan Dalmau Ramerez",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez> <http://dbpedia.org/property/headquarters> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 443
 },
 {
  "taggedQuestion": "The president who was in office when <e0> was the PM followed which religion?",
  "entityMap": {
   "<e0>": "Lee Hyun Jae"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 followed which religion",
    "originStr": "#entity1 followed which religion"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president who was in office when lee hyun jae was the pm",
    "originStr": "the president who was in office when lee hyun jae was the pm"
   }
  ],
  "question": "The president who was in office when Lee Hyun Jae was the PM followed which religion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Lee_Hyun-jae> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (DT The) (NN president)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (PP (IN in) (NP (NN office))) (SBAR (WHADVP (WRB when)) (S (NP (ADD <e0>)) (VP (VBD was) (NP-TMP (DT the) (NN PM))))))))) (VP (VBD followed) (SBARQ (WHNP (WDT which) (NN religion)))) (. ?)))",
  "entityNum": 2,
  "id": 444
 },
 {
  "taggedQuestion": "Who is the maker of the engine of Ford F-Series first generation ?",
  "entityMap": {
   "<e0>": "Ford F-Series generation"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the maker of #entity1",
    "originStr": "who is the maker of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the engine of ford f-series first generation",
    "originStr": "the engine of ford f-series first generation"
   }
  ],
  "question": "Who is the maker of the engine of Ford F-Series first generation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_F-Series_first_generation> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN maker)) (PP (IN of) (NP (NP (DT the) (NN engine)) (PP (IN of) (NP (NML (NNP Ford) (NNP F) (HYPH -) (NNP Series)) (JJ first) (NN generation))))))) (. ?)))",
  "entityNum": 2,
  "id": 445
 },
 {
  "taggedQuestion": "What is the religious affiliation of <e0>?",
  "entityMap": {
   "<e0>": "Neungin High School"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the religious affiliation of Neungin High School",
    "originStr": "What is the religious affiliation of Neungin High School"
   }
  ],
  "question": "What is the religious affiliation of Neungin High School",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ religious) (NN affiliation)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 446
 },
 {
  "taggedQuestion": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
  "entityMap": {
   "<e0>": "2012 Summer Olympics Women"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
    "originStr": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles"
   }
  ],
  "question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Maria) (NNP Sharapova)) (NP (NP (DT the) (NN silver) (NN medalist)) (PP (IN of) (NP (NP (NN Tennis)) (PP (IN at) (NP (NP (DT the) (CD 2012) (NN Summer)) (NP (NP (NNP Olympics) (NNP Women) (POS 's)) (NNS singles))))))) (. ?)))",
  "entityNum": 1,
  "id": 447
 },
 {
  "taggedQuestion": "Name the office holder with successor as Adrian A Basora and child as Lori Black .",
  "entityMap": {
   "<e0>": "Adrian Basora child"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the office holder with successor as adrian a basora",
    "originStr": "name the office holder with successor as adrian a basora"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and child as lori black",
    "originStr": "and child as lori black"
   }
  ],
  "question": "Name the office holder with successor as Adrian A Basora and child as Lori Black",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (PP (IN with) (NP (NN successor))) (PP (IN as) (NP (NP (NNP Adrian) (NNP A) (NNP Basora)) (CC and) (NP (NN child)))) (PP (IN as) (NP (NNP Lori) (NNP Black)))) (. .)))",
  "entityNum": 1,
  "id": 448
 },
 {
  "taggedQuestion": "Who is the owner of the South end ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is #entity1",
    "originStr": "who is #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the owner of the south end",
    "originStr": "the owner of the south end"
   }
  ],
  "question": "Who is the owner of the South end",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_South_End> <http://dbpedia.org/property/owners> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (DT the) (JJ South) (NN end))))) (. ?)))",
  "entityNum": 2,
  "id": 449
 },
 {
  "taggedQuestion": "What is the colour of Xocolatlite ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the colour of Xocolatlite",
    "originStr": "What is the colour of Xocolatlite"
   }
  ],
  "question": "What is the colour of Xocolatlite",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN colour)) (PP (IN of) (NP (NNP Xocolatlite))))) (. ?)))",
  "entityNum": 1,
  "id": 450
 },
 {
  "taggedQuestion": "How many other teams have the members of <e0> played?",
  "entityMap": {
   "<e0>": "Atlant Moscow Oblast"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "for how many other teams have #entity1 played",
    "originStr": "for how many other teams have #entity1 played"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of atlant moscow oblast",
    "originStr": "the members of atlant moscow oblast"
   }
  ],
  "question": "For how many other teams have the members of Atlant Moscow Oblast played",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ other) (NNS teams)) (SQ (VBP have) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN played))) (. ?)))",
  "entityNum": 2,
  "id": 451
 },
 {
  "taggedQuestion": "What is the <e1> of the president whose alma mater is <e0> ?",
  "entityMap": {
   "<e1>": "state of origin",
   "<e0>": "Hellenic Naval Academy"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the state of origin of #entity1",
    "originStr": "what is the state of origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the president whose alma mater is hellenic naval academy",
    "originStr": "the president whose alma mater is hellenic naval academy"
   }
  ],
  "question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Hellenic_Naval_Academy> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e1>)) (PP (IN of) (NP (NP (DT the) (NN president)) (SBAR (WHNP (WP$ whose) (NML (NN alma) (NN mater))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 452
 },
 {
  "taggedQuestion": "What is the common ethnicity of the Maike Evers and Francisco Lachowski ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the common ethnicity of the maike evers and francisco",
    "originStr": "what is the common ethnicity of the maike evers and francisco"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "lachowski",
    "originStr": "lachowski"
   }
  ],
  "question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (NN ethnicity)) (PP (IN of) (NP (NP (DT the) (NNP Maike) (NNP Evers)) (CC and) (NP (NNP Francisco) (NNP Lachowski)))))) (. ?)))",
  "entityNum": 1,
  "id": 453
 },
 {
  "taggedQuestion": "Which places do companies founded in Newcastle operate?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which places do #entity1 operate",
    "originStr": "in which places do #entity1 operate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies founded in newcastle",
    "originStr": "companies founded in newcastle"
   }
  ],
  "question": "In which places do companies founded in Newcastle operate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS places)) (VP (VBP do) (S (NP (NP (NNS companies)) (VP (VBN founded) (PP (IN in) (NP (NNP Newcastle))))) (VP (VB operate))))) (. ?)))",
  "entityNum": 2,
  "id": 454
 },
 {
  "taggedQuestion": "Which senator served in <e0> and VMF-218?",
  "entityMap": {
   "<e0>": "military units VMF-155"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which senator",
    "originStr": "which senator"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "served in military units vmf-155 and vmf-218",
    "originStr": "served in military units vmf-155 and vmf-218"
   }
  ],
  "question": "Which senator served in military units VMF-155 and VMF-218",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN senator)) (SQ (VP (VBD served) (PP (IN in) (NP (NN <e0>) (CC and) (NN VMF) (HYPH -) (CD 218))))) (. ?)))",
  "entityNum": 1,
  "id": 455
 },
 {
  "taggedQuestion": "What games are made by Interplay Entertainment?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what kind of #entity1",
    "originStr": "what kind of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games are made by interplay entertainment",
    "originStr": "games are made by interplay entertainment"
   }
  ],
  "question": "What kind of games are made by Interplay Entertainment",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS games)) (SQ (VBP are) (VP (VBN made) (PP (IN by) (NP (NNP Interplay) (NNP Entertainment))))) (. ?)))",
  "entityNum": 2,
  "id": 456
 },
 {
  "taggedQuestion": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which producer of purvis eureka engine",
    "originStr": "which producer of purvis eureka engine"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the owner of ford theatre",
    "originStr": "is also the owner of ford theatre"
   }
  ],
  "question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN producer) (PP (IN of) (NP (NML (NNP Purvis) (NNP Eureka)) (NN engine))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Ford) (NNP Theatre))))) (. ?)))",
  "entityNum": 1,
  "id": 457
 },
 {
  "taggedQuestion": "What developed EMMS?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What developed EMMS",
    "originStr": "What developed EMMS"
   }
  ],
  "question": "What developed EMMS",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EMMS> <http://dbpedia.org/ontology/developer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (NP (WDT What) (JJ developed) (NN EMMS))) (. ?)))",
  "entityNum": 1,
  "id": 458
 },
 {
  "taggedQuestion": "Which music band made <e0>, and to which Tedd Riley was associated?",
  "entityMap": {
   "<e0>": "Take Me There"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which music band made take me there",
    "originStr": "which music band made take me there"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and to which tedd riley was associated",
    "originStr": "and to which tedd riley was associated"
   }
  ],
  "question": "Which music band made Take Me There, and to which Tedd Riley was associated",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN music) (NN band)) (SQ (VP (VBD made) (NP (NP (ADD <e0>)) (, ,) (CC and) (SBAR (WHPP (TO to) (WHNP (WDT which))) (S (NP (NNP Tedd) (NNP Riley)) (VP (VBD was) (VP (VBN associated)))))))) (. ?)))",
  "entityNum": 1,
  "id": 459
 },
 {
  "taggedQuestion": "Which time zone is Pong Pha?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "In which time zone is Pong Pha",
    "originStr": "In which time zone is Pong Pha"
   }
  ],
  "question": "In which time zone is Pong Pha",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (NP (WDT Which) (NN time) (NN zone))) (SQ (VBZ is) (NP (NNP Pong) (NNP Pha))) (. ?)))",
  "entityNum": 1,
  "id": 460
 },
 {
  "taggedQuestion": "How many fictional characters are there in a series in which Craig Robinson acted?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many fictional characters are there in #entity1",
    "originStr": "how many fictional characters are there in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a series in which craig robinson acted",
    "originStr": "a series in which craig robinson acted"
   }
  ],
  "question": "How many fictional characters are there in a series in which Craig Robinson acted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Craig_Robinson_(actor)> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ fictional) (NNS characters)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (DT a) (NN series))) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NNP Craig) (NNP Robinson)) (VP (VBD acted))))) (. ?)))",
  "entityNum": 2,
  "id": 461
 },
 {
  "taggedQuestion": "Which political party of Chandra Shekhar is also the political party of <e0> ?",
  "entityMap": {
   "<e0>": "Datl Satyanarayana Raju"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which political party of chandra shekhar",
    "originStr": "which political party of chandra shekhar"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the political party of datl satyanarayana raju",
    "originStr": "is also the political party of datl satyanarayana raju"
   }
  ],
  "question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NNP Chandra) (NNP Shekhar)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ political) (NN party)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 462
 },
 {
  "taggedQuestion": "Who owns the airport in Paphos?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who owns #entity1",
    "originStr": "who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airport in paphos",
    "originStr": "the airport in paphos"
   }
  ],
  "question": "Who owns the airport in Paphos",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN airport)) (PP (IN in) (NP (NNP Paphos)))))) (. ?)))",
  "entityNum": 2,
  "id": 463
 },
 {
  "taggedQuestion": "What is the baseball team whose club manager is Chip Hale?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the baseball team",
    "originStr": "what is the baseball team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose club manager is chip hale",
    "originStr": "whose club manager is chip hale"
   }
  ],
  "question": "What is the baseball team whose club manager is Chip Hale",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Chip_Hale>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NML (NN club) (NN manager))) (S (VP (VBZ is) (NP (NNP Chip) (NNP Hale))))))) (. ?)))",
  "entityNum": 1,
  "id": 464
 },
 {
  "taggedQuestion": "Which bacteria's taxonomic class is Bacilli?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which bacteria's taxonomic class is",
    "originStr": "which bacteria's taxonomic class is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "bacilli",
    "originStr": "bacilli"
   }
  ],
  "question": "Which bacteria's taxonomic class is Bacilli",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NNS bacteria) (POS 's)) (JJ taxonomic) (NN class)) (VP (VBZ is) (NP (NNP Bacilli)))) (. ?)))",
  "entityNum": 1,
  "id": 465
 },
 {
  "taggedQuestion": "What honours did Reigh Count receive?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What honours did Reigh Count receive",
    "originStr": "What honours did Reigh Count receive"
   }
  ],
  "question": "What honours did Reigh Count receive",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/honours> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS honours)) (SQ (VBD did) (NP (NNP Reigh) (NNP Count)) (VP (VB receive))) (. ?)))",
  "entityNum": 1,
  "id": 466
 },
 {
  "taggedQuestion": "What are some products of the the company whose subsidiary is Sony Corp shareholders and subsidies?",
  "entityMap": {
   "<e0>": "Sony Corp shareholders subsidies"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some products of #entity1 and subsidies",
    "originStr": "what are some products of #entity1 and subsidies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company whose subsidiary is sony corp shareholders",
    "originStr": "the company whose subsidiary is sony corp shareholders"
   }
  ],
  "question": "What are some products of the company whose subsidiary is Sony Corp shareholders and subsidies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS products)) (PP (IN of) (NP (NP (DT the) (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (NML (NN subsidiary))) (S (VP (VBZ is) (NP (NNP Sony) (NNP Corp) (NNS shareholders) (CC and) (NNS subsidies))))))))) (. ?)))",
  "entityNum": 2,
  "id": 467
 },
 {
  "taggedQuestion": "Who built the stadiums where 2014 FIFA under 17 woman<e0> took place?",
  "entityMap": {
   "<e0>": "'s world cup"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who built #entity1",
    "originStr": "who built #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadiums where 2014 fifa under 17 woman's world cup took place",
    "originStr": "the stadiums where 2014 fifa under 17 woman's world cup took place"
   }
  ],
  "question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD built) (NP (DT the) (NNS stadiums)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD 2014) (NNP FIFA)) (PP (IN under) (NP (NP (CD 17) (NN woman)) (NP (ADD <e0>))))) (VP (VBD took) (NP (NN place))))))) (. ?)))",
  "entityNum": 2,
  "id": 468
 },
 {
  "taggedQuestion": "Which area operataed by the <e0> is also the place of death of the Sakari Suzuki ?",
  "entityMap": {
   "<e0>": "South Side Elevated Railroad"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which area operated by the south side elevated railroad",
    "originStr": "which area operated by the south side elevated railroad"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the place of death of the sakari suzuki",
    "originStr": "is also the place of death of the sakari suzuki"
   }
  ],
  "question": "Which area operated by the South Side Elevated Railroad is also the place of death of the Sakari Suzuki",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN area)) (VBN operataed) (PP (IN by) (NP (DT the) (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN death)) (PP (IN of) (NP (DT the) (NNP Sakari) (NNP Suzuki))))))) (. ?)))",
  "entityNum": 1,
  "id": 469
 },
 {
  "taggedQuestion": "What is the <e0> whose related with  <e1>?",
  "entityMap": {
   "<e1>": "Doctor Who Confidential",
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the television show",
    "originStr": "what is the television show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose related with doctor who confidential",
    "originStr": "whose related with doctor who confidential"
   }
  ],
  "question": "What is the television show whose related with Doctor Who Confidential",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose)) (FRAG (ADJP (JJ related))))) (PP (IN with) (NP (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 470
 },
 {
  "taggedQuestion": "Which <e0>  performed live?",
  "entityMap": {
   "<e0>": "city wasThe Triple Door (The Courage album)"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which city #entity1 performed live",
    "originStr": "in which city #entity1 performed live"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "wasthe triple door (the courage album)",
    "originStr": "wasthe triple door (the courage album)"
   }
  ],
  "question": "In which city wasThe Triple Door (The Courage album) performed live",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN <e0>))) (SQ (VP (VBD performed) (ADVP (RB live)))) (. ?)))",
  "entityNum": 2,
  "id": 471
 },
 {
  "taggedQuestion": "Which nearest city of Jurgens Site is the death plce of Jimmie Heuga ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which nearest city of jurgens site",
    "originStr": "which nearest city of jurgens site"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the death place of jimmie heuga",
    "originStr": "is the death place of jimmie heuga"
   }
  ],
  "question": "Which nearest city of Jurgens Site is the death place of Jimmie Heuga",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/property/deathPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJS nearest) (NN city)) (PP (IN of) (NP (NNP Jurgens) (NNP Site))))) (SQ (VBZ is) (NP (NP (DT the) (NN death) (NN plce)) (PP (IN of) (NP (NNP Jimmie) (NNP Heuga))))) (. ?)))",
  "entityNum": 1,
  "id": 472
 },
 {
  "taggedQuestion": "List the battles fought by  <e0> ?",
  "entityMap": {
   "<e0>": "Ali Habib Mahmud"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the battles fought by Ali Habib Mahmud",
    "originStr": "List the battles fought by Ali Habib Mahmud"
   }
  ],
  "question": "List the battles fought by Ali Habib Mahmud",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 473
 },
 {
  "taggedQuestion": "How many companies were started in the states?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many companies",
    "originStr": "how many companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were started in the states",
    "originStr": "were started in the states"
   }
  ],
  "question": "How many companies were started in the states",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS companies)) (VP (VBD were) (VP (VBN started) (PP (IN in) (NP (DT the) (NNS states)))))) (. ?)))",
  "entityNum": 1,
  "id": 474
 },
 {
  "taggedQuestion": "Is <e0> a doctoral student of James Chadwick?",
  "entityMap": {
   "<e0>": "Charles Drummond Ellis"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Charles Drummond Ellis a doctoral student of James Chadwick",
    "originStr": "Is Charles Drummond Ellis a doctoral student of James Chadwick"
   }
  ],
  "question": "Is Charles Drummond Ellis a doctoral student of James Chadwick",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NP (ADD <e0>)) (PP (NP (DT a) (JJ doctoral) (NN student)) (IN of))) (NP (NNP James) (NNP Chadwick)) (. ?)))",
  "entityNum": 1,
  "id": 475
 },
 {
  "taggedQuestion": "How many movies are distributed by <e0>?",
  "entityMap": {
   "<e0>": "Cinema International Corporation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many movies",
    "originStr": "how many movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are distributed by cinema international corporation",
    "originStr": "are distributed by cinema international corporation"
   }
  ],
  "question": "How many movies are distributed by Cinema International Corporation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS movies)) (VP (VBP are) (VP (VBN distributed) (PP (IN by) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 476
 },
 {
  "taggedQuestion": "Name the local authority of Trinity School, Brentwood .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the local authority of Trinity School, Brentwood",
    "originStr": "Name the local authority of Trinity School, Brentwood"
   }
  ],
  "question": "Name the local authority of Trinity School, Brentwood",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)))))) (. .)))",
  "entityNum": 1,
  "id": 477
 },
 {
  "taggedQuestion": "Name the president of Wyche Fowler .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the president of Wyche Fowler",
    "originStr": "Name the president of Wyche Fowler"
   }
  ],
  "question": "Name the president of Wyche Fowler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Wyche) (NNP Fowler))))) (. .)))",
  "entityNum": 1,
  "id": 478
 },
 {
  "taggedQuestion": "Which fields have people born in Lausanne worked?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which fields have #entity1 worked",
    "originStr": "in which fields have #entity1 worked"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people born in lausanne",
    "originStr": "people born in lausanne"
   }
  ],
  "question": "In which fields have people born in Lausanne worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Lausanne> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NNS fields)) (VP (VBP have) (NP (NP (NNS people)) (VP (VBN born) (PP (IN in) (NP (NNP Lausanne)))))))) (VP (VBD worked)) (. ?)))",
  "entityNum": 2,
  "id": 479
 },
 {
  "taggedQuestion": "Which <e0>  was founded by Jim Harris ?",
  "entityMap": {
   "<e0>": "Texas based company"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which texas based company",
    "originStr": "which texas based company"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was founded by jim harris",
    "originStr": "was founded by jim harris"
   }
  ],
  "question": "Which Texas based company was founded by Jim Harris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (ADD <e0>)) (VP (VBD was) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. ?)))",
  "entityNum": 1,
  "id": 480
 },
 {
  "taggedQuestion": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr..",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name a show hosted by brian dunkleman",
    "originStr": "name a show hosted by brian dunkleman"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and judged by harry connick, jr",
    "originStr": "and judged by harry connick, jr"
   }
  ],
  "question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN show)) (VP (VP (VBN hosted) (PP (IN by) (NP (NNP Brian) (NNP Dunkleman)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NP (NNP Harry) (NNP Connick)) (, ,) (NP (NNP Jr.)))))))) (. .)))(ROOT (. .))",
  "entityNum": 1,
  "id": 481
 },
 {
  "taggedQuestion": "Which educational institute does <e0> belong to?",
  "entityMap": {
   "<e0>": "Cornell University Press"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which educational institute does Cornell University Press belong to",
    "originStr": "To which educational institute does Cornell University Press belong to"
   }
  ],
  "question": "To which educational institute does Cornell University Press belong to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (JJ educational) (NN institute))) (SQ (VBZ does) (S (NP (ADD <e0>)) (VP (VBP belong) (PP (IN to))))) (. ?)))",
  "entityNum": 1,
  "id": 482
 },
 {
  "taggedQuestion": "Which country's cuisine, ham is an important part?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which country's #entity1",
    "originStr": "in which country's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "cuisine, ham is an important part",
    "originStr": "cuisine, ham is an important part"
   }
  ],
  "question": "In which country's cuisine, ham is an important part",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Ham> . ?x <http://dbpedia.org/property/country> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN country) (POS 's)) (NP (NP (NN cuisine)) (, ,) (NP (NN ham))))) (SQ (VBZ is) (NP (DT an) (JJ important) (NN part))) (. ?)))",
  "entityNum": 2,
  "id": 483
 },
 {
  "taggedQuestion": "List the softwares which runs on Microsoft Windows and has license as <e0>?",
  "entityMap": {
   "<e0>": "Software as a service"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the softwares which runs on microsoft windows",
    "originStr": "list the softwares which runs on microsoft windows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has license as software as a service",
    "originStr": "and has license as software as a service"
   }
  ],
  "question": "List the softwares which runs on Microsoft Windows and has license as Software as a service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS softwares)) (SBAR (WHNP (WDT which)) (S (VP (VP (VBZ runs) (PP (IN on) (NP (NNP Microsoft) (NNP Windows)))) (CC and) (VP (VBZ has) (NP (NP (NN license)) (PP (IN as) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 484
 },
 {
  "taggedQuestion": "Which ppolitical party of Yashpal Kapur is also the owner of National Herald ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which political party of yashpal kapur",
    "originStr": "which political party of yashpal kapur"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the owner of national herald",
    "originStr": "is also the owner of national herald"
   }
  ],
  "question": "Which political party of Yashpal Kapur is also the owner of National Herald",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ ppolitical) (NN party)) (PP (IN of) (NP (NNP Yashpal) (NNP Kapur))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP National) (NNP Herald))))) (. ?)))",
  "entityNum": 1,
  "id": 485
 },
 {
  "taggedQuestion": "Who all have been presenters on shows by the NBC?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who all have been presenters on #entity1",
    "originStr": "who all have been presenters on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "shows by the nbc",
    "originStr": "shows by the nbc"
   }
  ],
  "question": "Who all have been presenters on shows by the NBC",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN been) (NP (NP (NNS presenters)) (PP (IN on) (NP (NNS shows)))) (PP (IN by) (NP (DT the) (NNP NBC)))))) (. ?)))",
  "entityNum": 2,
  "id": 486
 },
 {
  "taggedQuestion": "Give me the <e0> which are the predecessor of <e1>.",
  "entityMap": {
   "<e1>": "Full Sized Cars",
   "<e0>": "list of cars"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me the list of cars which are the predecessor of #entity1",
    "originStr": "give me the list of cars which are the predecessor of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "full sized cars",
    "originStr": "full sized cars"
   }
  ],
  "question": "Give me the list of cars which are the predecessor of Full Sized Cars",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Full-size_car> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (ADD <e1>))))))))) (. .)))",
  "entityNum": 2,
  "id": 487
 },
 {
  "taggedQuestion": "List the people with final resting place as Plymouth, Vermont and has <e0> as predecessor?",
  "entityMap": {
   "<e0>": "Samuel W. McCall"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the people with final resting place as plymouth, vermont",
    "originStr": "list the people with final resting place as plymouth, vermont"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has samuel w. mccall as predecessor",
    "originStr": "and has samuel w. mccall as predecessor"
   }
  ],
  "question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NP (JJ final) (JJ resting) (NN place)) (PP (IN as) (NP (NNP Plymouth) (, ,) (NNP Vermont)))))) (CC and) (VP (VBZ has) (NP (NP (ADD <e0>)) (PP (IN as) (NP (NN predecessor)))))) (. ?)))",
  "entityNum": 1,
  "id": 488
 },
 {
  "taggedQuestion": "What disease led to the demise of <e0> and Martino Martini ?",
  "entityMap": {
   "<e0>": "Letitia MacTavish Hargrave"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what disease",
    "originStr": "what disease"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "led to the demise of letitia mactavish hargrave and martino martini",
    "originStr": "led to the demise of letitia mactavish hargrave and martino martini"
   }
  ],
  "question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN disease)) (SQ (VP (VBD led) (PP (IN to) (NP (NP (DT the) (NN demise)) (PP (IN of) (NP (NP (ADD <e0>)) (CC and) (NP (NNP Martino) (NNP Martini)))))))) (. ?)))",
  "entityNum": 1,
  "id": 489
 },
 {
  "taggedQuestion": "What are some software which are written in languages that are run on Unix like OS?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some software which are written in #entity1",
    "originStr": "what are some software which are written in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "languages that are run on unix like os",
    "originStr": "languages that are run on unix like os"
   }
  ],
  "question": "What are some software which are written in languages that are run on Unix like OS",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (VP (VBN written) (PP (IN in) (NP (NP (NNS languages)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (VP (VBN run) (PP (IN on) (NP (NNP Unix))) (PP (IN like) (NP (NNP OS))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 490
 },
 {
  "taggedQuestion": "List all the movies whose directors were born in Kenosha, Wisconsin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all the movies whose directors #entity1",
    "originStr": "list all the movies whose directors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "were born in kenosha, wisconsin",
    "originStr": "were born in kenosha, wisconsin"
   }
  ],
  "question": "List all the movies whose directors were born in Kenosha, Wisconsin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (PDT all) (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NNS directors))) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Kenosha) (, ,) (NNP Wisconsin)))))))) (. ?)))",
  "entityNum": 2,
  "id": 491
 },
 {
  "taggedQuestion": "Does the <e0> in Kingston, Ontario?",
  "entityMap": {
   "<e0>": "St lawrence river start"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does the St lawrence river start in Kingston, Ontario",
    "originStr": "Does the St lawrence river start in Kingston, Ontario"
   }
  ],
  "question": "Does the St lawrence river start in Kingston, Ontario",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Saint_Lawrence_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Kingston,_Ontario> }",
  "syntaxTreeText": "(ROOT (SQ (VP (VBZ Does) (NP (NP (DT the) (NN <e0>)) (PP (IN in) (NP (NNP Kingston) (, ,) (NNP Ontario))))) (. ?)))",
  "entityNum": 1,
  "id": 492
 },
 {
  "taggedQuestion": "What stadium's operator is Stan Kroenke?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What stadium's operator is Stan Kroenke",
    "originStr": "What stadium's operator is Stan Kroenke"
   }
  ],
  "question": "What stadium's operator is Stan Kroenke",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN stadium) (POS 's)) (NP (NN operator))) (SQ (VBZ is) (NP (NNP Stan) (NNP Kroenke))) (. ?)))",
  "entityNum": 1,
  "id": 493
 },
 {
  "taggedQuestion": "Is Mike Babcock the head coach of <e0>?",
  "entityMap": {
   "<e0>": "Toronto Maple Leafs"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Mike Babcock the head coach of Toronto Maple Leafs",
    "originStr": "Is Mike Babcock the head coach of Toronto Maple Leafs"
   }
  ],
  "question": "Is Mike Babcock the head coach of Toronto Maple Leafs",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Mike) (NNP Babcock)) (NP (NP (DT the) (NN head) (NN coach)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 494
 },
 {
  "taggedQuestion": "Whose commanders are John Mc Ewen and Park Chunghee?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has commanders are john mc ewen and park",
    "originStr": "has commanders are john mc ewen and park"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose commanders are john mc ewen and park chunghee",
    "originStr": "whose commanders are john mc ewen and park chunghee"
   }
  ],
  "question": "Whose commanders are John Mc Ewen and Park Chunghee",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NNS commanders)) (SQ (VBP are) (NP (NP (NNP John) (NNP Mc) (NNP Ewen)) (CC and) (NP (NNP Park) (NNP Chunghee)))) (. ?)))",
  "entityNum": 1,
  "id": 495
 },
 {
  "taggedQuestion": "Who gave guest appearances on the show which is the next episode after the Bombshell one?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who gave guest appearances on #entity1",
    "originStr": "who gave guest appearances on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the show which is the next episode after the bombshell one",
    "originStr": "the show which is the next episode after the bombshell one"
   }
  ],
  "question": "Who gave guest appearances on the show which is the next episode after the Bombshell one",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Bombshell_(Smash)> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD gave) (NP (NN guest) (NNS appearances)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (JJ next) (NN episode)) (PP (IN after) (NP (DT the) (NN Bombshell) (CD one))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 496
 },
 {
  "taggedQuestion": "What is manufactured by a company headed by Kazuo Hirai?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is manufactured by #entity1",
    "originStr": "what is manufactured by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a company headed by kazuo hirai",
    "originStr": "a company headed by kazuo hirai"
   }
  ],
  "question": "What is manufactured by a company headed by Kazuo Hirai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN manufactured) (PP (IN by) (NP (NP (DT a) (NN company)) (VP (VBN headed) (PP (IN by) (NP (NNP Kazuo) (NNP Hirai)))))))) (. ?)))",
  "entityNum": 2,
  "id": 497
 },
 {
  "taggedQuestion": "Which presidents have politicians from the Continental army served?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "under which presidents have #entity1 served",
    "originStr": "under which presidents have #entity1 served"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "politicians from the continental army",
    "originStr": "politicians from the continental army"
   }
  ],
  "question": "Under which presidents have politicians from the Continental army served",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS presidents)) (SQ (VP (VBP have) (NP (NP (NP (NNS politicians)) (PP (IN from) (NP (DT the) (NNP Continental) (NN army)))) (SBAR (S (VP (VBD served))))))) (. ?)))",
  "entityNum": 2,
  "id": 498
 },
 {
  "taggedQuestion": "<e0> is the governing body of which city?",
  "entityMap": {
   "<e0>": "Philadelphia City Council"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "philadelphia city council is the governing body of",
    "originStr": "philadelphia city council is the governing body of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which city",
    "originStr": "which city"
   }
  ],
  "question": "Philadelphia City Council is the governing body of which city",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> } ",
  "syntaxTreeText": "(ROOT (S (NP (ADD <e0>)) (VP (VBZ is) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (WDT which) (NN city))))) (. ?)))",
  "entityNum": 1,
  "id": 499
 },
 {
  "taggedQuestion": "What are the binomial authority of Menetries's warbler?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the binomial authority of Menetries's warbler",
    "originStr": "What are the binomial authority of Menetries's warbler"
   }
  ],
  "question": "What are the binomial authority of Menetries's warbler",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ binomial) (NN authority)) (PP (IN of) (NP (NP (NNPS Menetries) (POS 's)) (NN warbler))))) (. ?)))",
  "entityNum": 1,
  "id": 500
 },
 {
  "taggedQuestion": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movie which has music composed by elliot goldenthal",
    "originStr": "name the movie which has music composed by elliot goldenthal"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and screenplay by akiva goldsman",
    "originStr": "and screenplay by akiva goldsman"
   }
  ],
  "question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Elliot_Goldenthal> . ?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NN music)) (VP (VBN composed) (PP (IN by) (NP (NP (NNP Elliot) (NNP Goldenthal)) (CC and) (NP (NN screenplay)))) (PP (IN by) (NP (NNP Akiva) (NNP Goldsman)))))))))) (. .)))",
  "entityNum": 1,
  "id": 501
 },
 {
  "taggedQuestion": "Name the fictional character whose relative are Duck family and Clan McDuck.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the fictional character",
    "originStr": "name the fictional character"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose relative are duck family and clan mcduck",
    "originStr": "whose relative are duck family and clan mcduck"
   }
  ],
  "question": "Name the fictional character whose relative are Duck family and Clan McDuck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN relative)) (S (VP (VBP are) (NP (NP (NN Duck) (NN family)) (CC and) (NP (NNP Clan) (NNP McDuck)))))))) (. .)))",
  "entityNum": 1,
  "id": 502
 },
 {
  "taggedQuestion": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname <e0> ?",
  "entityMap": {
   "<e1>": "NCAA Division Football Bowl Subdivision",
   "<e0>": "Tulane Green Wave"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which university",
    "originStr": "which university"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with athletics department in ncaa division i football bowl subdivision has nickname tulane green wave",
    "originStr": "with athletics department in ncaa division i football bowl subdivision has nickname tulane green wave"
   }
  ],
  "question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/St._Louis> . ?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Madison_River>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN university)) (PP (IN with) (NP (NP (NNS athletics) (NN department)) (PP (IN in) (NP (NML (NNP NCAA) (NNP Division)) (NNP I) (NNP Football) (NNP Bowl) (NNP Subdivision)))))) (SQ (VP (VBZ has) (NP (NN nickname) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 503
 },
 {
  "taggedQuestion": "Which state does <e0> belong ?",
  "entityMap": {
   "<e0>": "Jerome B. Chaffee"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which state does Jerome B. Chaffee belong",
    "originStr": "Which state does Jerome B. Chaffee belong"
   }
  ],
  "question": "Which state does Jerome B. Chaffee belong",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ does) (NP (ADD <e0>)) (VP (VB belong)))) (. ?)))",
  "entityNum": 1,
  "id": 504
 },
 {
  "taggedQuestion": "Which of the parties that have governed over Rishikesh, does Govinda belong too?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which of the parties",
    "originStr": "in which of the parties"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "that have governed over rishikesh, does govinda belong too",
    "originStr": "that have governed over rishikesh, does govinda belong too"
   }
  ],
  "question": "In which of the parties that have governed over Rishikesh, does Govinda belong too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which)) (PP (IN of) (NP (DT the) (NNS parties)))) (SQ (SBAR (WHNP (WDT that)) (S (VP (VBP have) (VP (VBN governed) (PP (IN over) (NP (NNP Rishikesh))))))) (, ,) (VBZ does) (NP (NNP Govinda)) (VP (VB belong) (ADVP (RB too)))) (. ?)))",
  "entityNum": 1,
  "id": 505
 },
 {
  "taggedQuestion": "What awards are won by the screenwriter of Lucky You?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what awards are won by #entity1",
    "originStr": "what awards are won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the screenwriter of lucky you",
    "originStr": "the screenwriter of lucky you"
   }
  ],
  "question": "What awards are won by the screenwriter of Lucky You",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP are) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN screenwriter)) (PP (IN of) (NP (NNP Lucky) (NNP You)))))))) (. ?)))",
  "entityNum": 2,
  "id": 506
 },
 {
  "taggedQuestion": "Name  the Pole driver of <e0> .",
  "entityMap": {
   "<e0>": "1994 Spanish Grand Prix"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the Pole driver of 1994 Spanish Grand Prix",
    "originStr": "Name the Pole driver of 1994 Spanish Grand Prix"
   }
  ],
  "question": "Name the Pole driver of 1994 Spanish Grand Prix",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 507
 },
 {
  "taggedQuestion": "Where did Georges Wolinski and Judson Huss die/?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where did georges wolinski and judson huss",
    "originStr": "where did georges wolinski and judson huss"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "die",
    "originStr": "die"
   }
  ],
  "question": "Where did Georges Wolinski and Judson Huss die",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georges_Wolinski> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (NP (NNP Georges) (NNP Wolinski)) (CC and) (NP (NNP Judson) (NNPS Huss)) (NML (NN die) (HYPH /))))) (. ?)))",
  "entityNum": 1,
  "id": 508
 },
 {
  "taggedQuestion": "What is the parent company of the airline whose hub is in Detroit?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the parent company of #entity1",
    "originStr": "what is the parent company of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the airline whose hub is in detroit",
    "originStr": "the airline whose hub is in detroit"
   }
  ],
  "question": "What is the parent company of the airline whose hub is in Detroit",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (NP (DT the) (NN airline)) (SBAR (WHNP (WP$ whose) (NML (NN hub))) (S (VP (VBZ is) (PP (IN in) (NP (NNP Detroit)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 509
 },
 {
  "taggedQuestion": "What is the appliance which uses the <e1> manufactured by <e0>?",
  "entityMap": {
   "<e1>": "central processing unit",
   "<e0>": "Marvell Technology Group"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the appliance",
    "originStr": "what is the appliance"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which uses the central processing unit manufactured by marvell technology group",
    "originStr": "which uses the central processing unit manufactured by marvell technology group"
   }
  ],
  "question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN appliance)) (SBAR (WHNP (WDT which)) (S (VP (VBZ uses) (NP (NP (DT the) (NN <e1>)) (VP (VBN manufactured) (PP (IN by) (NP (NN <e0>)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 510
 },
 {
  "taggedQuestion": "Give me all magazines whose founder died in Berkeley, California.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me all magazines whose founder #entity1",
    "originStr": "give me all magazines whose founder #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "died in berkeley, california",
    "originStr": "died in berkeley, california"
   }
  ],
  "question": "Give me all magazines whose founder died in Berkeley, California",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT all) (NNS magazines)) (SBAR (WHNP (WP$ whose) (NN founder)) (S (VP (VBD died) (PP (IN in) (NP (NNP Berkeley) (, ,) (NNP California)))))))) (. .)))",
  "entityNum": 2,
  "id": 511
 },
 {
  "taggedQuestion": "Which technological products were manufactured by Foxconn?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which technological products",
    "originStr": "which technological products"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were manufactured by foxconn",
    "originStr": "were manufactured by foxconn"
   }
  ],
  "question": "Which technological products were manufactured by Foxconn",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (JJ technological) (NNS products)) (VP (VBD were) (VP (VBN manufactured) (PP (IN by) (NP (NNP Foxconn)))))) (. ?)))",
  "entityNum": 1,
  "id": 512
 },
 {
  "taggedQuestion": "Is George Lucas the cinematographer of 6-18-67?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is George Lucas the cinematographer of 6-18-67",
    "originStr": "Is George Lucas the cinematographer of 6-18-67"
   }
  ],
  "question": "Is George Lucas the cinematographer of 6-18-67",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP George) (NNP Lucas)) (NP (NP (DT the) (NN cinematographer)) (PP (IN of) (NP (CD 6-18-67)))) (. ?)))",
  "entityNum": 1,
  "id": 513
 },
 {
  "taggedQuestion": "Whose predecessor had Jenny Macklin as a deputy ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose predecessor #entity1",
    "originStr": "whose predecessor #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "had jenny macklin as a deputy",
    "originStr": "had jenny macklin as a deputy"
   }
  ],
  "question": "Whose predecessor had Jenny Macklin as a deputy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP$ Whose) (NN predecessor)) (SQ (VP (VBD had) (NP (NP (NNP Jenny) (NNP Macklin)) (PP (IN as) (NP (DT a) (NN deputy)))))) (. ?)))",
  "entityNum": 2,
  "id": 514
 },
 {
  "taggedQuestion": "How many cars are similar to the ones assembled in the <e0>?",
  "entityMap": {
   "<e0>": "Jefferson North Assembly"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many cars are similar to #entity1",
    "originStr": "how many cars are similar to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones assembled in the jefferson north assembly",
    "originStr": "the ones assembled in the jefferson north assembly"
   }
  ],
  "question": "How many cars are similar to the ones assembled in the Jefferson North Assembly",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cars)) (SQ (VP (VBP are) (ADJP (JJ similar) (PP (IN to) (NP (NP (DT the) (NNS ones)) (VP (VBN assembled) (PP (IN in) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 515
 },
 {
  "taggedQuestion": "Count the region of AN/FSQ-7 Combat Direction Central.",
  "entityMap": {
   "<e0>": "/ FSQ-7 Combat Direction Central"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the number of region of AN/FSQ-7 Combat Direction Central",
    "originStr": "Count the number of region of AN/FSQ-7 Combat Direction Central"
   }
  ],
  "question": "Count the number of region of AN/FSQ-7 Combat Direction Central",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN region)) (PP (IN of) (NP (DT AN) (ADJP (SYM /) (NP (NN FSQ) (HYPH -) (CD 7))) (NNP Combat) (NNP Direction) (NNP Central))))) (. .)))",
  "entityNum": 1,
  "id": 516
 },
 {
  "taggedQuestion": "What are the common houses of US Congress and the Kansas Legislature?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the common houses of us congress and the kansas",
    "originStr": "what are the common houses of us congress and the kansas"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "legislature",
    "originStr": "legislature"
   }
  ],
  "question": "What are the common houses of US Congress and the Kansas Legislature",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ common) (NNS houses)) (PP (IN of) (NP (NP (NNP US) (NNP Congress)) (CC and) (NP (DT the) (NNP Kansas) (NNP Legislature)))))) (. ?)))",
  "entityNum": 1,
  "id": 517
 },
 {
  "taggedQuestion": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was John Muir the first one to ascend one of the peaks in the cathedral peak",
    "originStr": "Was John Muir the first one to ascend one of the peaks in the cathedral peak"
   }
  ],
  "question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP John) (NNP Muir)) (NP (NP (DT the) (JJ first) (CD one)) (S (VP (TO to) (VP (VB ascend) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS peaks)) (PP (IN in) (NP (DT the) (NN cathedral) (NN peak)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 518
 },
 {
  "taggedQuestion": "How many different places have people gone to the <e0>?",
  "entityMap": {
   "<e0>": "Harward Medical School"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from how many different places have #entity1",
    "originStr": "from how many different places have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people gone to the harward medical school",
    "originStr": "people gone to the harward medical school"
   }
  ],
  "question": "From how many different places have people gone to the Harward Medical School",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NML (NNS places))) (SQ (VBP have) (NP (NNS people)) (VP (VBN gone) (PP (IN to) (NP (DT the) (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 519
 },
 {
  "taggedQuestion": "Name the <e0> where Mona Marshall has given voice and is distributed by Comedy Central.",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the television show where mona marshall has given voice",
    "originStr": "name the television show where mona marshall has given voice"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and is distributed by comedy central",
    "originStr": "and is distributed by comedy central"
   }
  ],
  "question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN <e0>)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Mona) (NNP Marshall)) (VP (VP (VBZ has) (VP (VBN given) (NP (NN voice)))) (CC and) (VP (VBZ is) (VP (VBN distributed) (PP (IN by) (NP (NNP Comedy) (NNP Central))))))))) (. .)))",
  "entityNum": 1,
  "id": 520
 },
 {
  "taggedQuestion": "What are Jerry Bock's musicals based upon?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what #entity1 based upon",
    "originStr": "what #entity1 based upon"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are jerry bock's musicals",
    "originStr": "are jerry bock's musicals"
   }
  ],
  "question": "What are Jerry Bock's musicals based upon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (NNP Jerry) (NNP Bock) (POS 's)) (NNS musicals)) (VP (VBN based) (PP (IN upon)))) (. ?)))",
  "entityNum": 2,
  "id": 521
 },
 {
  "taggedQuestion": "Give me list of people who were the first to climb a peak in the Yosemite park.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me list of people who were the first to climb #entity1",
    "originStr": "give me list of people who were the first to climb #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a peak in the yosemite park",
    "originStr": "a peak in the yosemite park"
   }
  ],
  "question": "Give me list of people who were the first to climb a peak in the Yosemite park",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN list)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD were) (NP (DT the) (JJ first) (S (VP (TO to) (VP (VB climb) (NP (DT a) (NN peak)) (PP (IN in) (NP (DT the) (NNP Yosemite) (NN park)))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 522
 },
 {
  "taggedQuestion": "What is <e0> a part of?",
  "entityMap": {
   "<e0>": "Naval Support Activity Naples"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is Naval Support Activity Naples a part of",
    "originStr": "What is Naval Support Activity Naples a part of"
   }
  ],
  "question": "What is Naval Support Activity Naples a part of",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (ADD <e0>)) (PP (NP (DT a) (NN part)) (IN of)))) (. ?)))",
  "entityNum": 1,
  "id": 523
 },
 {
  "taggedQuestion": "Who has allegiance is <e0> and buried in Montpelier?",
  "entityMap": {
   "<e0>": "Colony of Virginia"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who has allegiance is colony of virginia",
    "originStr": "who has allegiance is colony of virginia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and buried in montpelier",
    "originStr": "and buried in montpelier"
   }
  ],
  "question": "Who has allegiance is Colony of Virginia and buried in Montpelier",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ has) (NP (NN allegiance)) (VP (VP (VBZ is) (NP (ADD <e0>))) (CC and) (VP (VBN buried) (PP (IN in) (NP (NNP Montpelier)))))) (. ?)))",
  "entityNum": 1,
  "id": 524
 },
 {
  "taggedQuestion": "Was Tim Gunn a guest on <e0>?",
  "entityMap": {
   "<e0>": "The Broken Code"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Tim Gunn a guest on The Broken Code",
    "originStr": "Was Tim Gunn a guest on The Broken Code"
   }
  ],
  "question": "Was Tim Gunn a guest on The Broken Code",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Broken_Code> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Tim) (NNP Gunn)) (NP (NP (DT a) (NN guest)) (PP (IN on) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 525
 },
 {
  "taggedQuestion": "What is the successor of PlayStation 4?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the successor of playstation",
    "originStr": "what is the successor of playstation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "4",
    "originStr": "4"
   }
  ],
  "question": "What is the successor of PlayStation 4",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NNP PlayStation) (CD 4))))) (. ?)))",
  "entityNum": 1,
  "id": 526
 },
 {
  "taggedQuestion": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the sovereign state of the dafydd benfras",
    "originStr": "what is the sovereign state of the dafydd benfras"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where jasmine lowson is also citizen of",
    "originStr": "where jasmine lowson is also citizen of"
   }
  ],
  "question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ sovereign) (NN state)) (PP (IN of) (NP (NP (DT the) (NNP Dafydd) (NNP Benfras)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jasmine) (NNP Lowson)) (VP (VBZ is) (ADVP (RB also)) (NP (NP (NN citizen)) (PP (IN of)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 527
 },
 {
  "taggedQuestion": "Who did their highschool from a school whose mascot was a fighting tiger?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who did their highschool from #entity1",
    "originStr": "who did their highschool from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a school whose mascot was a fighting tiger",
    "originStr": "a school whose mascot was a fighting tiger"
   }
  ],
  "question": "Who did their highschool from a school whose mascot was a fighting tiger",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Fighting_Tiger> . ?uri <http://dbpedia.org/ontology/highschool> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD did) (NP (PRP$ their) (NN highschool)) (PP (IN from) (NP (NP (DT a) (NN school)) (SBAR (WHNP (WP$ whose) (NN mascot)) (S (VP (VBD was) (NP (DT a) (NN fighting) (NN tiger))))))))) (. ?)))",
  "entityNum": 2,
  "id": 528
 },
 {
  "taggedQuestion": "Which destination of Emerald Air is also the city served by <e0> ?",
  "entityMap": {
   "<e0>": "houston Fort Bend Airport"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which destination of emerald air",
    "originStr": "which destination of emerald air"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the city served by houston fort bend airport",
    "originStr": "is also the city served by houston fort bend airport"
   }
  ],
  "question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/property/cityServed> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN destination) (PP (IN of) (NP (NNP Emerald) (NNP Air))))) (SQ (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN city)) (VP (VBN served) (PP (IN by) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 529
 },
 {
  "taggedQuestion": "Name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the region served by jerusalem institue of justice",
    "originStr": "name the region served by jerusalem institue of justice"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which was also the conflict region in gazaisrael",
    "originStr": "which was also the conflict region in gazaisrael"
   }
  ],
  "question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN region)) (VP (VBN served) (PP (IN by) (NP (NP (NP (NNP Jerusalem) (NNP Institue)) (PP (IN of) (NP (NNP Justice)))) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN conflict) (NN region)) (PP (IN in) (NP (NNP GazaIsrael)))))))))))) (. .)))",
  "entityNum": 1,
  "id": 530
 },
 {
  "taggedQuestion": "Name the company whose key person is Raymond Conner and produces <e0>.",
  "entityMap": {
   "<e0>": "Boeing CH-47 Chinook"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the company whose key person is raymond conner",
    "originStr": "name the company whose key person is raymond conner"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and produces boeing ch-47 chinook",
    "originStr": "and produces boeing ch-47 chinook"
   }
  ],
  "question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP$ whose) (ADJP (JJ key)) (NN person)) (S (VP (VP (VBZ is) (NP (NNP Raymond) (NNP Conner))) (CC and) (VP (VBZ produces) (NP (ADD <e0>)))))))) (. .)))",
  "entityNum": 1,
  "id": 531
 },
 {
  "taggedQuestion": "What is the total number of professions in which someone who has suicided worked?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": " which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of professions in which #entity1",
    "originStr": "what is the total number of professions in which #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "someone who has suicided worked",
    "originStr": "someone who has suicided worked"
   }
  ],
  "question": "What is the total number of professions in which someone who has suicided worked",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NNS professions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN suicided)))))) (VP (VBN worked)))))))) (. ?)))",
  "entityNum": 2,
  "id": 532
 },
 {
  "taggedQuestion": "How many golf players are there in <e0> ?",
  "entityMap": {
   "<e0>": "Arizona State Sun Devils"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many golf players",
    "originStr": "how many golf players"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are there in arizona state sun devils",
    "originStr": "are there in arizona state sun devils"
   }
  ],
  "question": "How many golf players are there in Arizona State Sun Devils",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NN golf)) (NNS players)) (SQ (VBP are) (NP (EX there)) (PP (IN in) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 533
 },
 {
  "taggedQuestion": "Count the characters in Batman Live.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the number of characters in Batman Live",
    "originStr": "Count the number of characters in Batman Live"
   }
  ],
  "question": "Count the number of characters in Batman Live",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (DT the) (NNS characters)) (PP (IN in) (NP (NNP Batman) (NNP Live)))) (. .)))",
  "entityNum": 1,
  "id": 534
 },
 {
  "taggedQuestion": "List the services provided by the company which provides Microsoft azure as one of the service ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the services provided by #entity1",
    "originStr": "list the services provided by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which provides microsoft azure as one of the service",
    "originStr": "the company which provides microsoft azure as one of the service"
   }
  ],
  "question": "List the services provided by the company which provides Microsoft azure as one of the service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (DT the) (NNS services)) (PP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ provides) (NP (NNP Microsoft) (JJ azure)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN service)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 535
 },
 {
  "taggedQuestion": "What are some team members of the team based in Camp Nou?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some team members of #entity1",
    "originStr": "what are some team members of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the team based in camp nou",
    "originStr": "the team based in camp nou"
   }
  ],
  "question": "What are some team members of the team based in Camp Nou",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Camp_Nou> . ?x <http://dbpedia.org/property/name> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NN team) (NNS members)) (PP (IN of) (NP (DT the) (NN team)))) (VP (VBN based) (PP (IN in) (NP (NNP Camp) (NNP Nou))))) (. ?)))",
  "entityNum": 2,
  "id": 536
 },
 {
  "taggedQuestion": "Which universities are also known as the <e0>?",
  "entityMap": {
   "<e0>": "Tulane Green wave"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which universities",
    "originStr": "which universities"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are also known as the tulane green wave",
    "originStr": "are also known as the tulane green wave"
   }
  ],
  "question": "Which universities are also known as the Tulane Green wave",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS universities)) (VP (VBP are) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 537
 },
 {
  "taggedQuestion": "What is the branch of the politicians whose governor is Bill Clements?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the branch of #entity1",
    "originStr": "what is the branch of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the politicians whose governor is bill clements",
    "originStr": "the politicians whose governor is bill clements"
   }
  ],
  "question": "What is the branch of the politicians whose governor is Bill Clements",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Bill_Clements> . ?x <http://dbpedia.org/property/branch> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN branch)) (PP (IN of) (NP (NP (DT the) (NNS politicians)) (SBAR (WHNP (WP$ whose) (NML (NN governor))) (S (VP (VBZ is) (NP (NNP Bill) (NNP Clements))))))))) (. ?)))",
  "entityNum": 2,
  "id": 538
 },
 {
  "taggedQuestion": "Who composed the episode after which came Butter's Very own Episode?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who composed #entity1",
    "originStr": "who composed #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the episode after which came butter's very own episode",
    "originStr": "the episode after which came butter's very own episode"
   }
  ],
  "question": "Who composed the episode after which came Butter's Very own Episode",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> . ?x <http://dbpedia.org/ontology/musicComposer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN composed) (NP (DT the) (NN episode)) (PP (IN after) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (NP (NP (NNP Butter) (POS 's)) (ADJP (RB Very) (JJ own)) (NN Episode)))))))) (. ?)))",
  "entityNum": 2,
  "id": 539
 },
 {
  "taggedQuestion": "What is the location country of Teperberg 1870 ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the location country of Teperberg 1870",
    "originStr": "What is the location country of Teperberg 1870"
   }
  ],
  "question": "What is the location country of Teperberg 1870",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN location) (NN country)) (PP (IN of) (NP (NNP Teperberg) (CD 1870))))) (. ?)))",
  "entityNum": 1,
  "id": 540
 },
 {
  "taggedQuestion": "List the software developed by Shawn Fanning ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the software",
    "originStr": "list the software"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "developed by shawn fanning",
    "originStr": "developed by shawn fanning"
   }
  ],
  "question": "List the software developed by Shawn Fanning",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN software)) (VP (VBN developed) (PP (IN by) (NP (NNP Shawn) (NNP Fanning)))))) (. ?)))",
  "entityNum": 1,
  "id": 541
 },
 {
  "taggedQuestion": "What is the stylistic origin of the music genres where the Bass guitar is important?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the stylistic origin of #entity1",
    "originStr": "what is the stylistic origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the music genres where the bass guitar is important",
    "originStr": "the music genres where the bass guitar is important"
   }
  ],
  "question": "What is the stylistic origin of the music genres where the Bass guitar is important",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ stylistic) (NN origin)) (PP (IN of) (NP (NP (DT the) (NN music) (NNS genres)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NNP Bass) (NN guitar)) (VP (VBZ is) (ADJP (JJ important))))))))) (. ?)))",
  "entityNum": 2,
  "id": 542
 },
 {
  "taggedQuestion": "What are the other notable work of the executive producer of <e0> episode of Doctor Who?",
  "entityMap": {
   "<e0>": "The Runaway Bride"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the other notable work of #entity1",
    "originStr": "what are the other notable work of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the executive producer of the runaway bride episode of doctor who",
    "originStr": "the executive producer of the runaway bride episode of doctor who"
   }
  ],
  "question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ other) (JJ notable) (NN work)) (PP (IN of) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NP (NN <e0>) (NN episode)) (PP (IN of) (NP (NP (NNP Doctor)) (SBAR (WHNP (WP Who))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 543
 },
 {
  "taggedQuestion": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was the voice actor of allen walker",
    "originStr": "who was the voice actor of allen walker"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also gave voice to kimihiro watanuki",
    "originStr": "also gave voice to kimihiro watanuki"
   }
  ],
  "question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri. <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/ontology/voice> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN voice)) (SBAR (S (NP (NP (NN actor)) (PP (IN of) (NP (NN allen) (NN walker)))) (ADVP (RB also)) (VP (VBD gave) (NP (NN voice)) (PP (IN to) (NP (NN kimihiro) (NN watanuki)))))))) (. ?)))",
  "entityNum": 1,
  "id": 544
 },
 {
  "taggedQuestion": "Name the office holder whose final resting place is North Bend and was part of <e0> conflict .",
  "entityMap": {
   "<e0>": "Siege of fort recovery"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the office holder whose final resting place is north bend",
    "originStr": "name the office holder whose final resting place is north bend"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and was part of siege of fort recovery conflict",
    "originStr": "and was part of siege of fort recovery conflict"
   }
  ],
  "question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ final) (JJ resting) (NN place)) (VP (VBZ is) (ADJP (JJ North)) (UCP (NP (NNP Bend)) (CC and) (S (VP (VBD was) (NP (NP (NN part)) (PP (IN of) (NP (NN <e0>) (NN conflict))))))))))) (. .)))",
  "entityNum": 1,
  "id": 545
 },
 {
  "taggedQuestion": "What type of engines are utilised by Purvis Eureka?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what type of #entity1",
    "originStr": "what type of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "engines are utilised by purvis eureka",
    "originStr": "engines are utilised by purvis eureka"
   }
  ],
  "question": "What type of engines are utilised by Purvis Eureka",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NNS engines)))) (SQ (VBP are) (VP (VBN utilised) (PP (IN by) (NP (NNP Purvis) (NNP Eureka))))) (. ?)))",
  "entityNum": 2,
  "id": 546
 },
 {
  "taggedQuestion": "Who edited Easy street ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who edited Easy street",
    "originStr": "Who edited Easy street"
   }
  ],
  "question": "Who edited Easy street",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBN edited) (NP (JJ Easy) (NN street)))) (. ?)))",
  "entityNum": 1,
  "id": 547
 },
 {
  "taggedQuestion": "Who were involved in the wars where Jonathan Haskell battled?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who were involved in #entity1",
    "originStr": "who were involved in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the wars where jonathan haskell battled",
    "originStr": "the wars where jonathan haskell battled"
   }
  ],
  "question": "Who were involved in the wars where Jonathan Haskell battled",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD were) (VP (VBN involved) (PP (IN in) (NP (NP (DT the) (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jonathan) (NNP Haskell)) (VP (VBD battled))))))))) (. ?)))",
  "entityNum": 2,
  "id": 548
 },
 {
  "taggedQuestion": "Which city was the film star of Singhasan Battisi born ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which city was #entity1 born",
    "originStr": "in which city was #entity1 born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film star of singhasan battisi",
    "originStr": "the film star of singhasan battisi"
   }
  ],
  "question": "In which city was the film star of Singhasan Battisi born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBD was) (NP (NP (DT the) (NN film) (NN star)) (PP (IN of) (NP (NNP Singhasan) (NNP Battisi)))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 549
 },
 {
  "taggedQuestion": "What are the reason served by <e0> which is also the country of LPGA ?",
  "entityMap": {
   "<e0>": "Toll Global Express"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the reason served by toll global express",
    "originStr": "what are the reason served by toll global express"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the country of lpga",
    "originStr": "which is also the country of lpga"
   }
  ],
  "question": "What are the reason served by Toll Global Express which is also the country of LPGA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NN reason)) (VP (VBN served) (PP (IN by) (NP (NP (NN <e0>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN country)) (PP (IN of) (NP (NN LPGA))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 550
 },
 {
  "taggedQuestion": "List the territory of Tonkin Campaign ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the territory of Tonkin Campaign",
    "originStr": "List the territory of Tonkin Campaign"
   }
  ],
  "question": "List the territory of Tonkin Campaign",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN territory)) (PP (IN of) (NP (NNP Tonkin) (NNP Campaign))))) (. ?)))",
  "entityNum": 1,
  "id": 551
 },
 {
  "taggedQuestion": "Which teams did Ryan Powell play for?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "for which teams",
    "originStr": "for which teams"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did ryan powell play for",
    "originStr": "did ryan powell play for"
   }
  ],
  "question": "For which teams did Ryan Powell play for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS teams)) (SQ (VBD did) (NP (NNP Ryan) (NNP Powell)) (VP (VB play) (PP (IN for)))) (. ?)))",
  "entityNum": 1,
  "id": 552
 },
 {
  "taggedQuestion": "What are the awards won by the person who wrote the screen play for Lost in Rio ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the awards won by #entity1",
    "originStr": "what are the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the person who wrote the screen play for lost in rio",
    "originStr": "the person who wrote the screen play for lost in rio"
   }
  ],
  "question": "What are the awards won by the person who wrote the screen play for Lost in Rio",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/OSS_117:_Lost_in_Rio> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VBD wrote) (NP (DT the) (NN screen) (NN play)) (PP (IN for) (S (VP (VBN Lost) (PP (IN in) (NP (NNP Rio))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 553
 },
 {
  "taggedQuestion": "Total number of places where people drafted in the detroit pistons have died.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "total number of places where #entity1 have died",
    "originStr": "total number of places where #entity1 have died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people drafted in the detroit pistons",
    "originStr": "people drafted in the detroit pistons"
   }
  ],
  "question": "Total number of places where people drafted in the detroit pistons have died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (JJ Total) (NN number)) (PP (IN of) (NP (NP (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NNS people)) (VP (VBD drafted) (PP (IN in) (NP (DT the) (NN detroit) (NNS pistons))))))))) (VP (VBP have) (VP (VBN died))) (. .)))",
  "entityNum": 2,
  "id": 554
 },
 {
  "taggedQuestion": "What band made The trial and One of these days song?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what band",
    "originStr": "what band"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "made the trial and one of these days song",
    "originStr": "made the trial and one of these days song"
   }
  ],
  "question": "What band made The trial and One of these days song",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN band)) (SQ (VP (VBD made) (NP (NP (DT The) (NN trial)) (CC and) (NP (NP (CD One)) (PP (IN of) (NP (DT these) (NNS days) (NN song))))))) (. ?)))",
  "entityNum": 1,
  "id": 555
 },
 {
  "taggedQuestion": "Name the club of Julie Hastings .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the club of Julie Hastings",
    "originStr": "Name the club of Julie Hastings"
   }
  ],
  "question": "Name the club of Julie Hastings",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN club)) (PP (IN of) (NP (NNP Julie) (NNP Hastings))))) (. .)))",
  "entityNum": 1,
  "id": 556
 },
 {
  "taggedQuestion": "Where does the river Upper Neretva start flowing?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from where does #entity1 start flowing",
    "originStr": "from where does #entity1 start flowing"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the river upper neretva",
    "originStr": "the river upper neretva"
   }
  ],
  "question": "From where does the river Upper Neretva start flowing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (S (NP (DT the) (NN river)) (NP (NP (NML (NNP Upper) (NNP Neretva)) (NN start)) (VP (VBG flowing))))) (. ?)))",
  "entityNum": 2,
  "id": 557
 },
 {
  "taggedQuestion": "Name the university located in Indiana and has affiliations with Kaplan, Inc..",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the university located in indiana",
    "originStr": "name the university located in indiana"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has affiliations with kaplan, inc",
    "originStr": "and has affiliations with kaplan, inc"
   }
  ],
  "question": "Name the university located in Indiana and has affiliations with Kaplan, Inc",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NN university)) (VP (VBN located) (PP (IN in) (NP (NNP Indiana)))))) (CC and) (VP (VBZ has) (NP (NP (NNS affiliations)) (PP (IN with) (NP (NNP Kaplan) (, ,) (NNP Inc.)))))) (. .)))(ROOT (. .))",
  "entityNum": 1,
  "id": 558
 },
 {
  "taggedQuestion": "List the newspapers whose offices are situated in <e0>?",
  "entityMap": {
   "<e0>": "1211 Avenue of the Americas"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the newspapers whose offices #entity1",
    "originStr": "list the newspapers whose offices #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are situated in 1211 avenue of the americas",
    "originStr": "are situated in 1211 avenue of the americas"
   }
  ],
  "question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS newspapers)) (SBAR (WHNP (WP$ whose) (NNS offices)) (S (VP (VBP are) (VP (VBN situated) (PP (IN in) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 559
 },
 {
  "taggedQuestion": "Was Morrissey a member of the Smiths?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Morrissey a member of the Smiths",
    "originStr": "Was Morrissey a member of the Smiths"
   }
  ],
  "question": "Was Morrissey a member of the Smiths",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Morrissey)) (NP (NP (DT a) (NN member)) (PP (IN of) (NP (DT the) (NNP Smiths)))) (. ?)))",
  "entityNum": 1,
  "id": 560
 },
 {
  "taggedQuestion": "Did Phillippe Cabot go to Columbia for studying?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Phillippe Cabot go to Columbia for studying",
    "originStr": "Did Phillippe Cabot go to Columbia for studying"
   }
  ],
  "question": "Did Phillippe Cabot go to Columbia for studying",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Phillippe) (NNP Cabot)) (VP (VB go) (PP (IN to) (NP (NNP Columbia))) (PP (IN for) (S (VP (VBG studying))))) (. ?)))",
  "entityNum": 1,
  "id": 561
 },
 {
  "taggedQuestion": "What river originates in Kingston Ontario?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what river",
    "originStr": "what river"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "originates in kingston ontario",
    "originStr": "originates in kingston ontario"
   }
  ],
  "question": "What river originates in Kingston Ontario",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN river)) (SQ (VP (VBZ originates) (PP (IN in) (NP (NNP Kingston) (NNP Ontario))))) (. ?)))",
  "entityNum": 1,
  "id": 562
 },
 {
  "taggedQuestion": "What style was Providence Chapel, Charlwood made?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "By what style was Providence Chapel, Charlwood made",
    "originStr": "By what style was Providence Chapel, Charlwood made"
   }
  ],
  "question": "By what style was Providence Chapel, Charlwood made",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN style))) (SQ (VBD was) (NP (NP (NNP Providence) (NN Chapel)) (, ,) (NP (NNP Charlwood))) (VP (VBN made))) (. ?)))",
  "entityNum": 1,
  "id": 563
 },
 {
  "taggedQuestion": "How many PMs did the politician work, whose successor was Kingsley Wood?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "for how many pms did the politician work, #entity1",
    "originStr": "for how many pms did the politician work, #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose successor was kingsley wood",
    "originStr": "whose successor was kingsley wood"
   }
  ],
  "question": "For how many PMs did the politician work, whose successor was Kingsley Wood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNPS PMs)) (VP (VBD did) (NP (DT the) (NN politician) (NN work))))) (, ,) (WHNP (WP$ whose) (NN successor)) (SQ (VBD was) (NP (NNP Kingsley) (NNP Wood))) (. ?)))",
  "entityNum": 2,
  "id": 564
 },
 {
  "taggedQuestion": "List some companies founded by Jim Harris.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list some companies",
    "originStr": "list some companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "founded by jim harris",
    "originStr": "founded by jim harris"
   }
  ],
  "question": "list some companies founded by Jim Harris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT some) (NNS companies)) (VP (VBN founded) (PP (IN by) (NP (NNP Jim) (NNP Harris)))))) (. .)))",
  "entityNum": 1,
  "id": 565
 },
 {
  "taggedQuestion": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me the total number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me the total number of employer of #entity1",
    "originStr": "give me the total number of employer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the engineers whose one of the employer is mcdonnell aircraft",
    "originStr": "the engineers whose one of the employer is mcdonnell aircraft"
   }
  ],
  "question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> . ?x <http://dbpedia.org/ontology/employer> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN employer)) (PP (IN of) (NP (NP (DT the) (NNS engineers)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN employer))))) (S (VP (VBZ is) (NP (NNP McDonnell) (NNP Aircraft))))))))))) (. .)))",
  "entityNum": 2,
  "id": 566
 },
 {
  "taggedQuestion": "How many developers have games where I can hear Lightning McQueen?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many developers have #entity1",
    "originStr": "how many developers have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "games where i can hear lightning mcqueen",
    "originStr": "games where i can hear lightning mcqueen"
   }
  ],
  "question": "How many developers have games where I can hear Lightning McQueen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS developers)) (VP (VBP have) (NP (NP (NNS games)) (SBAR (WHADVP (WRB where)) (S (NP (PRP I)) (VP (MD can) (VP (VB hear) (NP (NNP Lightning) (NNP McQueen))))))))) (. ?)))",
  "entityNum": 2,
  "id": 567
 },
 {
  "taggedQuestion": "Which universit's affiliation is with Kalpan, Inc. and has campus at Iowa ?",
  "entityMap": {
   "<e0>": "Kalpan , Inc."
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which university's affiliation is with kalpan, inc",
    "originStr": "which university's affiliation is with kalpan, inc"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has campus at iowa",
    "originStr": "and has campus at iowa"
   }
  ],
  "question": "Which university's affiliation is with Kalpan, Inc. and has campus at Iowa",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NP (NN universit) (POS 's)) (NN affiliation)) (VP (VP (VBZ is) (PP (IN with) (NP (NNP Kalpan) (, ,) (NNP Inc.)))) (CC and) (VP (VBZ has) (NP (NP (NN campus)) (PP (IN at) (NP (NNP Iowa))))))) (. ?)))",
  "entityNum": 1,
  "id": 568
 },
 {
  "taggedQuestion": "How many record labels publish works of Jazz fusion?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many record labels publish #entity1",
    "originStr": "how many record labels publish #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "works of jazz fusion",
    "originStr": "works of jazz fusion"
   }
  ],
  "question": "How many record labels publish works of Jazz fusion",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADJP (WRB How) (JJ many)) (SQ (NP (NN record) (NNS labels)) (VP (VB publish) (NP (NP (NNS works)) (PP (IN of) (NP (NN Jazz) (NN fusion)))))) (. ?)))",
  "entityNum": 2,
  "id": 569
 },
 {
  "taggedQuestion": "What are the regions in which the distributor of Secrets and Lies serves ? ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the regions in which #entity1 serves",
    "originStr": "what are the regions in which #entity1 serves"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the distributor of secrets and lies",
    "originStr": "the distributor of secrets and lies"
   }
  ],
  "question": "What are the regions in which the distributor of Secrets and Lies serves",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)> <http://dbpedia.org/ontology/distributor> ?x . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS regions)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NNS Secrets)))) (VP (VP (CC and) (VP (VBZ Lies))) (VP (VBZ serves))))))) (. ?)))(ROOT (. ?))",
  "entityNum": 2,
  "id": 570
 },
 {
  "taggedQuestion": "List all the writers of the comics which has Robert Bernstein as one of the writer ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all the writers of #entity1",
    "originStr": "list all the writers of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the comics which has robert bernstein as one of the writer",
    "originStr": "the comics which has robert bernstein as one of the writer"
   }
  ],
  "question": "List all the writers of the comics which has Robert Bernstein as one of the writer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (NNS writers)) (PP (IN of) (NP (DT the) (NNS comics)))) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (NNP Robert) (NNP Bernstein)) (PP (IN as) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN writer)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 571
 },
 {
  "taggedQuestion": "What are the settlements whose neighboring municipalities is Lancy?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the settlements",
    "originStr": "what are the settlements"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose neighboring municipalities is lancy",
    "originStr": "whose neighboring municipalities is lancy"
   }
  ],
  "question": "What are the settlements whose neighboring municipalities is Lancy",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS settlements)) (SBAR (WHNP (WP$ whose)) (S (NP (NN neighboring) (NNS municipalities)) (VP (VBZ is) (NP (NNP Lancy))))))) (. ?)))",
  "entityNum": 1,
  "id": 572
 },
 {
  "taggedQuestion": "Count the total number  of hometown of the gymnasts whose one of the hometown in Russia .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the total number of hometown of #entity1",
    "originStr": "count the total number of hometown of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the gymnasts whose one of the hometown in russia",
    "originStr": "the gymnasts whose one of the hometown in russia"
   }
  ],
  "question": "Count the total number of hometown of the gymnasts whose one of the hometown in Russia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hometown> <http://dbpedia.org/resource/Russia> . ?x <http://dbpedia.org/property/hometown> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN hometown)) (PP (IN of) (NP (NP (DT the) (NNS gymnasts)) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN hometown)) (PP (IN in) (NP (NNP Russia)))))))))))))) (. .)))",
  "entityNum": 2,
  "id": 573
 },
 {
  "taggedQuestion": "Which states does the river flow whose left tributary is Toms Creek?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which states does the river flow #entity1",
    "originStr": "in which states does the river flow #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose left tributary is toms creek",
    "originStr": "whose left tributary is toms creek"
   }
  ],
  "question": "In which states does the river flow whose left tributary is Toms Creek",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBZ does) (NP (NP (DT the) (NN river) (NN flow)) (SBAR (WHNP (WP$ whose) (NML (JJ left) (NN tributary))) (S (VP (VBZ is) (NP (NNP Toms) (NNP Creek)))))))) (. ?)))",
  "entityNum": 2,
  "id": 574
 },
 {
  "taggedQuestion": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the river whose source mountain is baikal mountains",
    "originStr": "name the river whose source mountain is baikal mountains"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and mouth location is arctic ocean",
    "originStr": "and mouth location is arctic ocean"
   }
  ],
  "question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source)) (NN mountain)) (S (VP (VBZ is) (NP (JJ Baikal) (NNS Mountains)))))))) (CC and) (S (NP (NN mouth) (NN location)) (VP (VBZ is) (NP (NNP Arctic) (NNP Ocean)))) (. .)))",
  "entityNum": 1,
  "id": 575
 },
 {
  "taggedQuestion": "Count the PhD students whose thesis are supervised by <e0> winners.",
  "entityMap": {
   "<e0>": "National Medal of Science"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the phd students whose thesis #entity1",
    "originStr": "count the phd students whose thesis #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are supervised by national medal of science winners",
    "originStr": "are supervised by national medal of science winners"
   }
  ],
  "question": "Count the PhD students whose thesis are supervised by National Medal of Science winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN PhD) (NNS students)) (SBAR (WHNP (WP$ whose) (NN thesis)) (S (VP (VBP are) (VP (VBN supervised) (PP (IN by) (NP (NN <e0>) (NNS winners))))))))) (. .)))",
  "entityNum": 2,
  "id": 576
 },
 {
  "taggedQuestion": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which broadcast area of cfrx",
    "originStr": "which broadcast area of cfrx"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the place of birth of anthony raymond",
    "originStr": "is also the place of birth of anthony raymond"
   }
  ],
  "question": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/Anthony_Raymond_Ceresko> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN broadcast) (NN area)) (PP (IN of) (NP (NNP CFRX))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (NNP Anthony) (NNP Raymond))))))) (. ?)))",
  "entityNum": 1,
  "id": 577
 },
 {
  "taggedQuestion": "Count the cast member of the <e0> whose actress is Joey McIntyre.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the total number of cast member of #entity1",
    "originStr": "count the total number of cast member of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the television shows whose actress is joey mcintyre",
    "originStr": "the television shows whose actress is joey mcintyre"
   }
  ],
  "question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Joey_McIntyre> . ?x <http://dbpedia.org/property/starring> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN cast) (NN member)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NN actress)) (S (VP (VBZ is) (NP (NNP Joey) (NNP McIntyre))))))))) (. .)))",
  "entityNum": 2,
  "id": 578
 },
 {
  "taggedQuestion": "List all the awards won by the artist who has won SIGGRAPH ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all the awards won by #entity1",
    "originStr": "list all the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artist who has won siggraph",
    "originStr": "the artist who has won siggraph"
   }
  ],
  "question": "List all the awards won by the artist who has won SIGGRAPH",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (PDT all) (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN artist)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN won) (NP (NNP SIGGRAPH)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 579
 },
 {
  "taggedQuestion": "Where was david Scherman trained ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was david Scherman trained",
    "originStr": "Where was david Scherman trained"
   }
  ],
  "question": "Where was david Scherman trained",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/property/training> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (JJ david) (NNP Scherman)) (VP (VBN trained))) (. ?)))",
  "entityNum": 1,
  "id": 580
 },
 {
  "taggedQuestion": "Count the battles fought by Raoul Magrin-Vernerey.",
  "entityMap": {
   "<e0>": "Raoul Magrin - Vernerey"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the battles fought by Raoul Magrin-Vernerey",
    "originStr": "Count the battles fought by Raoul Magrin-Vernerey"
   }
  ],
  "question": "Count the battles fought by Raoul Magrin-Vernerey",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NNP Raoul) (NNP Magrin) (HYPH -) (NNP Vernerey)))))) (. .)))",
  "entityNum": 1,
  "id": 581
 },
 {
  "taggedQuestion": "Which athlete was the flag bearer for Switzerland in 2004 and <e0> ?",
  "entityMap": {
   "<e0>": "2008 summer Olympics"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which athlete",
    "originStr": "which athlete"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was the flag bearer for switzerland in 2004 and 2008 summer olympics",
    "originStr": "was the flag bearer for switzerland in 2004 and 2008 summer olympics"
   }
  ],
  "question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN athlete)) (SQ (VBD was) (NP (NP (DT the) (NN flag) (NN bearer)) (PP (IN for) (NP (NP (NNP Switzerland)) (PP (IN in) (NP (CD 2004) (CC and) (CD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 582
 },
 {
  "taggedQuestion": "Which nationalist group was responsible for foundation of Young Lords?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which nationalist group",
    "originStr": "which nationalist group"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was responsible for foundation of young lords",
    "originStr": "was responsible for foundation of young lords"
   }
  ],
  "question": "Which nationalist group was responsible for foundation of Young Lords",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Lords> <http://dbpedia.org/property/international> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (ADJP (JJ nationalist)) (NN group)) (SQ (VP (VBD was) (ADJP (JJ responsible) (PP (IN for) (NP (NP (NN foundation)) (PP (IN of) (NP (NNP Young) (NNPS Lords)))))))) (. ?)))",
  "entityNum": 1,
  "id": 583
 },
 {
  "taggedQuestion": "What award was won by the father of Angelina Jolie?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what award was won by #entity1",
    "originStr": "what award was won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the father of angelina jolie",
    "originStr": "the father of angelina jolie"
   }
  ],
  "question": "What award was won by the father of Angelina Jolie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN award)) (SQ (VBD was) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN father)) (PP (IN of) (NP (NNP Angelina) (NNP Jolie))))))) (. ?)))",
  "entityNum": 2,
  "id": 584
 },
 {
  "taggedQuestion": "What are the software whose programming language are Multilingual?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the software",
    "originStr": "what are the software"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose programming language are multilingual",
    "originStr": "whose programming language are multilingual"
   }
  ],
  "question": "What are the software whose programming language are Multilingual",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Multilingualism> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WP$ whose) (NML (NN programming)) (NN language)) (S (VP (VBP are) (ADJP (JJ Multilingual))))))) (. ?)))",
  "entityNum": 1,
  "id": 585
 },
 {
  "taggedQuestion": "Was Marshall Arisman the cover artist in american psycho?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Marshall Arisman the cover artist in american psycho",
    "originStr": "Was Marshall Arisman the cover artist in american psycho"
   }
  ],
  "question": "Was Marshall Arisman the cover artist in american psycho",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Marshall) (NNP Arisman)) (NP (NP (DT the) (NN cover) (NN artist)) (PP (IN in) (NP (JJ american) (NN psycho)))) (. ?)))",
  "entityNum": 1,
  "id": 586
 },
 {
  "taggedQuestion": "Which birthplace of Liliya Lobanova is also the location of the Snake Island ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which birthplace of liliya lobanova",
    "originStr": "which birthplace of liliya lobanova"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the location of the snake island",
    "originStr": "is also the location of the snake island"
   }
  ],
  "question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN birthplace) (PP (IN of) (NP (NNP Liliya) (NNP Lobanova))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN location)) (PP (IN of) (NP (DT the) (NNP Snake) (NNP Island))))) (. ?)))",
  "entityNum": 1,
  "id": 587
 },
 {
  "taggedQuestion": "Count all the stateless people",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count all the stateless people",
    "originStr": "Count all the stateless people"
   }
  ],
  "question": "Count all the stateless people",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (PDT all) (DT the) (JJ stateless) (NNS people)))))",
  "entityNum": 1,
  "id": 588
 },
 {
  "taggedQuestion": "Josef Bhler belongs to which political party?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "josef bhler belongs to",
    "originStr": "josef bhler belongs to"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which political party",
    "originStr": "which political party"
   }
  ],
  "question": "Josef Bhler belongs to which political party",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_B\u00fchler> <http://dbpedia.org/ontology/occupation> ?uri } ",
  "syntaxTreeText": "(ROOT (S (NP (NNP Josef) (NNP Bhler)) (VP (VBZ belongs) (PP (IN to) (NP (WDT which) (JJ political) (NN party)))) (. ?)))",
  "entityNum": 1,
  "id": 589
 },
 {
  "taggedQuestion": "Where did the war take place where one of the commander was Zuo Zongtang?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did the war take place #entity1",
    "originStr": "where did the war take place #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where one of the commander was zuo zongtang",
    "originStr": "where one of the commander was zuo zongtang"
   }
  ],
  "question": "Where did the war take place where one of the commander was Zuo Zongtang",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN war)) (VP (VB take) (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN commander)))) (VP (VBD was) (NP (NNP Zuo) (NNP Zongtang))))))) (. ?)))",
  "entityNum": 2,
  "id": 590
 },
 {
  "taggedQuestion": "Which place is the company which is known for Barbara bestor located ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which place is #entity1 located",
    "originStr": "in which place is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company which is known for barbara bestor",
    "originStr": "the company which is known for barbara bestor"
   }
  ],
  "question": "In which place is the company which is known for Barbara bestor located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/property/knownFor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN place)) (SQ (VBZ is) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN known) (PP (IN for) (NP (NP (NNP Barbara) (NNP bestor)) (VP (VBN located)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 591
 },
 {
  "taggedQuestion": "What novels are belong to the genre of Utopian and dystopian fiction?",
  "entityMap": {
   "<e0>": "Utopian dystopian fiction"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what novels",
    "originStr": "what novels"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are belong to the genre of utopian and dystopian fiction",
    "originStr": "are belong to the genre of utopian and dystopian fiction"
   }
  ],
  "question": "What novels are belong to the genre of Utopian and dystopian fiction",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS novels)) (SQ (VP (VP (VBP are)) (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN genre)) (PP (IN of) (NP (ADJP (JJ Utopian) (CC and) (JJ dystopian)) (NN fiction)))))))) (. ?)))",
  "entityNum": 1,
  "id": 592
 },
 {
  "taggedQuestion": "What are the movies written by Nick Castle?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the movies",
    "originStr": "what are the movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "written by nick castle",
    "originStr": "written by nick castle"
   }
  ],
  "question": "What are the movies written by Nick Castle",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS movies)) (VP (VBN written) (PP (IN by) (NP (NNP Nick) (NNP Castle))))) (. ?)))",
  "entityNum": 1,
  "id": 593
 },
 {
  "taggedQuestion": "Which river are there things belonging to <e0>?",
  "entityMap": {
   "<e0>": "zambezi river authority"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "on which river are there #entity1",
    "originStr": "on which river are there #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "things belonging to zambezi river authority",
    "originStr": "things belonging to zambezi river authority"
   }
  ],
  "question": "On which river are there things belonging to zambezi river authority",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Zambezi_River_Authority> . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VBP are) (S (NP (EX there)) (NP (NP (NNS things)) (VP (VBG belonging) (PP (IN to) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 594
 },
 {
  "taggedQuestion": "Is Egyptian Arabic belong to the <e0>?",
  "entityMap": {
   "<e0>": "Central Semitic Languages family"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Egyptian Arabic belong to the Central Semitic Languages family",
    "originStr": "Is Egyptian Arabic belong to the Central Semitic Languages family"
   }
  ],
  "question": "Is Egyptian Arabic belong to the Central Semitic Languages family",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ Egyptian)) (NP (NP (NNP Arabic)) (SBAR (S (VP (VBP belong) (PP (IN to) (NP (DT the) (NN <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 595
 },
 {
  "taggedQuestion": "Who is the artist of Sings Kristofferson and also performed <e0> atleast once?",
  "entityMap": {
   "<e0>": "Milk Cow Blues"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the artist of sings kristofferson",
    "originStr": "who is the artist of sings kristofferson"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and also performed milk cow blues at least once",
    "originStr": "and also performed milk cow blues at least once"
   }
  ],
  "question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues at least once",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN artist)) (PP (IN of) (NP (NNP Sings) (NNP Kristofferson))))) (CC and) (ADVP (RB also)) (VP (VBD performed) (NP (NN <e0>)) (ADVP (RB atleast) (RB once))))) (. ?)))",
  "entityNum": 1,
  "id": 596
 },
 {
  "taggedQuestion": "Who has fought in wars under <e0>?",
  "entityMap": {
   "<e0>": "commander Arthur St Clair"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who has fought in #entity1",
    "originStr": "who has fought in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "wars under commander arthur st clair",
    "originStr": "wars under commander arthur st clair"
   }
  ],
  "question": "Who has fought in wars under commander Arthur St Clair",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN fought) (PP (IN in) (NP (NNS wars))) (PP (IN under) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 597
 },
 {
  "taggedQuestion": "Which Paramount TV show was produced by <e0> ?",
  "entityMap": {
   "<e0>": "Glen and Les Charles"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which paramount tv show",
    "originStr": "which paramount tv show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was produced by glen and les charles",
    "originStr": "was produced by glen and les charles"
   }
  ],
  "question": "Which Paramount TV show was produced by Glen and Les Charles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNP Paramount) (NN TV) (NN show)) (SQ (VBD was) (VP (VBN produced) (PP (IN by) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 598
 },
 {
  "taggedQuestion": "Name some basketball players who  have played for chicago bulls.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name some basketball players",
    "originStr": "name some basketball players"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who have played for chicago bulls",
    "originStr": "who have played for chicago bulls"
   }
  ],
  "question": "Name some basketball players who have played for chicago bulls",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT some) (NN basketball) (NNS players)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN played) (PP (IN for) (NP (NN chicago) (NNS bulls))))))))) (. .)))",
  "entityNum": 1,
  "id": 599
 },
 {
  "taggedQuestion": "Which owner of the national Herald india is the leader of Kumta ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which owner of the national herald india",
    "originStr": "which owner of the national herald india"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the leader of kumta",
    "originStr": "is the leader of kumta"
   }
  ],
  "question": "Which owner of the national Herald india is the leader of Kumta",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN owner) (PP (IN of) (NP (DT the) (JJ national) (NNP Herald) (NNP india))))) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Kumta))))) (. ?)))",
  "entityNum": 1,
  "id": 600
 },
 {
  "taggedQuestion": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire",
    "originStr": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire"
   }
  ],
  "question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Francisco)) (NP (NP (NNP Pizarro)) (PP (IN of) (NP (NP (DT the) (NN monarch)) (PP (IN of) (NP (NNP Charles) (CD 5))) (, ,) (PP (IN of) (NP (DT the) (JJ roman) (NN empire)))))) (. ?)))",
  "entityNum": 1,
  "id": 601
 },
 {
  "taggedQuestion": "What is the largest city of Pulau Ubin ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the largest city of Pulau Ubin",
    "originStr": "What is the largest city of Pulau Ubin"
   }
  ],
  "question": "What is the largest city of Pulau Ubin",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Pulau) (NNP Ubin))))) (. ?)))",
  "entityNum": 1,
  "id": 602
 },
 {
  "taggedQuestion": "What is the origin of the musical artist of A <e0> ?",
  "entityMap": {
   "<e0>": "Todo Romantic Style"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the origin of #entity1",
    "originStr": "what is the origin of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical artist of a todo romantic style",
    "originStr": "the musical artist of a todo romantic style"
   }
  ],
  "question": "What is the origin of the musical artist of A Todo Romantic Style",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Todo_Romantic_Style> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/property/origin> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NP (DT the) (JJ musical) (NN artist)) (PP (IN of) (NP (DT A) (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 603
 },
 {
  "taggedQuestion": "Horses sired by Karinga Bay have participated in which races?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have participated in which races",
    "originStr": "#entity1 have participated in which races"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "horses sired by karinga bay",
    "originStr": "horses sired by karinga bay"
   }
  ],
  "question": "Horses sired by Karinga Bay have participated in which races",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Karinga_Bay> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN sired) (PP (IN by) (NP (NNP Karinga) (NNP Bay))))) (VP (VBP have) (VP (VBN participated) (PP (IN in) (NP (WDT which) (NNS races))))) (. ?)))",
  "entityNum": 2,
  "id": 604
 },
 {
  "taggedQuestion": "What is the alma mater of the scientists  known for  String theory?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the alma mater of #entity1",
    "originStr": "what is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientists known for string theory",
    "originStr": "the scientists known for string theory"
   }
  ],
  "question": "What is the alma mater of the scientists known for String theory",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (DT the) (NNS scientists)))) (VP (VBN known) (PP (IN for) (NP (NN String) (NN theory))))) (. ?)))",
  "entityNum": 2,
  "id": 605
 },
 {
  "taggedQuestion": "How many apes are there?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many apes are",
    "originStr": "how many apes are"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "there",
    "originStr": "there"
   }
  ],
  "question": "How many apes are there",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS apes)) (SQ (VBP are) (NP (EX there))) (. ?)))",
  "entityNum": 1,
  "id": 606
 },
 {
  "taggedQuestion": "What is a common nickname given to both <e0> and the wheaton college in massachusetts?",
  "entityMap": {
   "<e0>": "Lyons Township high school"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is a common nickname given to both lyons township high school and the wheaton college in",
    "originStr": "what is a common nickname given to both lyons township high school and the wheaton college in"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "massachusetts",
    "originStr": "massachusetts"
   }
  ],
  "question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT a) (JJ common) (NN nickname)) (VP (VBN given) (PP (IN to) (NP (NP (DT both) (NN <e0>)) (CC and) (NP (DT the) (NN wheaton) (NN college)))) (PP (IN in) (NP (NNS massachusetts))))) (. ?)))",
  "entityNum": 1,
  "id": 607
 },
 {
  "taggedQuestion": "Where do beauty queens with brown hair reside?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where do #entity1 reside",
    "originStr": "where do #entity1 reside"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "beauty queens with brown hair",
    "originStr": "beauty queens with brown hair"
   }
  ],
  "question": "Where do beauty queens with brown hair reside",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (NN beauty) (NNS queens)) (PP (IN with) (NP (NP (JJ brown) (NN hair)) (SBAR (S (VP (VBP reside)))))))) (. ?)))",
  "entityNum": 2,
  "id": 608
 },
 {
  "taggedQuestion": "List the <e0> one of whose distributor's divisions is <e1>.",
  "entityMap": {
   "<e1>": "Warner Bros. Animation",
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the television shows one of whose distributor's #entity1",
    "originStr": "list the television shows one of whose distributor's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "divisions is warner bros. animation",
    "originStr": "divisions is warner bros. animation"
   }
  ],
  "question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._Animation> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN <e0>)) (NP-TMP (CD one)) (PP (IN of) (SBAR (WHNP (WP$ whose)) (S (NP (NP (NN distributor) (POS 's)) (NNS divisions)) (VP (VBZ is) (NP (ADD <e1>)))))))) (. .)))",
  "entityNum": 2,
  "id": 609
 },
 {
  "taggedQuestion": "Name the <e0> directed by Simon Fuller and judged by Jennifier Lopez .",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the television show directed by simon fuller",
    "originStr": "name the television show directed by simon fuller"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and judged by jennifier lopez",
    "originStr": "and judged by jennifier lopez"
   }
  ],
  "question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Simon) (NNP Fuller)))) (CC and) (VP (VBN judged) (PP (IN by) (NP (NNP Jennifier) (NNP Lopez))))))) (. .)))",
  "entityNum": 1,
  "id": 610
 },
 {
  "taggedQuestion": "Name the appointer of William Clark .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the appointer of William Clark",
    "originStr": "Name the appointer of William Clark"
   }
  ],
  "question": "Name the appointer of William Clark",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN appointer)) (PP (IN of) (NP (NNP William) (NNP Clark))))) (. .)))",
  "entityNum": 1,
  "id": 611
 },
 {
  "taggedQuestion": "Which movies have momoki kochi acted?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which movies",
    "originStr": "in which movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have momoki kochi acted",
    "originStr": "have momoki kochi acted"
   }
  ],
  "question": "in which movies have momoki kochi acted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS movies))) (SQ (VBP have) (NP (NN momoki) (NNS kochi)) (VP (VBN acted))) (. ?)))",
  "entityNum": 1,
  "id": 612
 },
 {
  "taggedQuestion": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the base currency of the benelux",
    "originStr": "what is the base currency of the benelux"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and is also used as money in kerguelen islands",
    "originStr": "and is also used as money in kerguelen islands"
   }
  ],
  "question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VP (VBZ is) (NP (NP (DT the) (NN base) (NN currency)) (PP (IN of) (NP (DT the) (NNP Benelux))))) (CC and) (VP (VBZ is) (ADVP (RB also)) (VP (VBN used) (PP (IN as) (NP (NN money))) (PP (IN in) (NP (NNP Kerguelen) (NNPS Islands))))))) (. ?)))",
  "entityNum": 1,
  "id": 613
 },
 {
  "taggedQuestion": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the mammals whose taxonomy is diprotodontia",
    "originStr": "list the mammals whose taxonomy is diprotodontia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and phylum is chordate",
    "originStr": "and phylum is chordate"
   }
  ],
  "question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> . ?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
  "syntaxTreeText": "(ROOT (S (S (VP (VB List) (NP (NP (DT the) (NNS mammals)) (SBAR (WHNP (WP$ whose) (NML (NN taxonomy))) (S (VP (VBZ is) (NP (NP (NNP Diprotodontia)) (CC and) (NP (NN phylum))))))))) (VP (VBZ is) (NP (NN Chordate))) (. ?)))",
  "entityNum": 1,
  "id": 614
 },
 {
  "taggedQuestion": "Count the key people of the Clinton Foundation.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the key people of the Clinton Foundation",
    "originStr": "Count the key people of the Clinton Foundation"
   }
  ],
  "question": "Count the key people of the Clinton Foundation",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ key) (NNS people)) (PP (IN of) (NP (DT the) (NNP Clinton) (NNP Foundation))))) (. .)))",
  "entityNum": 1,
  "id": 615
 },
 {
  "taggedQuestion": "Name the company founded in New Mexico and provides Outlook.com as services .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the company founded in new mexico",
    "originStr": "name the company founded in new mexico"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and provides outlook.com as services",
    "originStr": "and provides outlook.com as services"
   }
  ],
  "question": "Name the company founded in New Mexico and provides Outlook.com as services",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (S (VP (VP (VB Name) (NP (NP (DT the) (NN company)) (VP (VBN founded) (PP (IN in) (NP (NNP New) (NNP Mexico)))))) (CC and) (VP (VBZ provides) (NP (NP (ADD Outlook.com)) (PP (IN as) (NP (NNS services)))))) (. .)))",
  "entityNum": 1,
  "id": 616
 },
 {
  "taggedQuestion": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which tv show was preceded by the spirit of christmas",
    "originStr": "which tv show was preceded by the spirit of christmas"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and voice to the character was given by mona marshall",
    "originStr": "and voice to the character was given by mona marshall"
   }
  ],
  "question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NML (NN tv)) (NN show)) (SQ (VBD was) (VP (VBN preceded) (PP (IN by) (NP (NP (DT The) (NN spirit)) (PP (IN of) (NP (NP (NNP Christmas)) (CC and) (NP (NN voice)))))) (PP (IN to) (NP (NP (DT the) (NN character)) (SBAR (S (VP (VBD was) (VP (VBN given) (PP (IN by) (NP (NNP Mona) (NNP Marshall))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 617
 },
 {
  "taggedQuestion": "Which common jurisdiction do Trinity School, Brentwood and <e0> fall?",
  "entityMap": {
   "<e0>": "Buckhurst Hill County High School"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "under which common jurisdiction",
    "originStr": "under which common jurisdiction"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "do trinity school, brentwood and buckhurst hill county high school fall",
    "originStr": "do trinity school, brentwood and buckhurst hill county high school fall"
   }
  ],
  "question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ common) (NN jurisdiction)) (SQ (VBP do) (NP (NP (NNP Trinity) (NNP School)) (, ,) (NP (NNP Brentwood)) (CC and) (NP (ADD <e0>))) (VP (VB fall))) (. ?)))",
  "entityNum": 1,
  "id": 618
 },
 {
  "taggedQuestion": "Music of how many things has been given by Akira Ifukube?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "music of how many things #entity1",
    "originStr": "music of how many things #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has been given by akira ifukube",
    "originStr": "has been given by akira ifukube"
   }
  ],
  "question": "Music of how many things has been given by Akira Ifukube",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . }",
  "syntaxTreeText": "(ROOT (NP (NP (NN Music)) (PP (IN of) (SBAR (WHADJP (WRB how) (JJ many)) (S (NP (NNS things)) (VP (VBZ has) (VP (VBN been) (VP (VBN given) (PP (IN by) (NP (NNP Akira) (NNP Ifukube))))))))) (. ?)))",
  "entityNum": 2,
  "id": 619
 },
 {
  "taggedQuestion": "What made jo garcia and merritt cabal both famous?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what made jo garcia and merritt cabal both",
    "originStr": "what made jo garcia and merritt cabal both"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "famous",
    "originStr": "famous"
   }
  ],
  "question": "What made jo garcia and merritt cabal both famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD made) (S (NP (NP (NNP jo) (NNP garcia)) (CC and) (NP (NN merritt) (NN cabal) (CC both))) (ADJP (JJ famous))))) (. ?)))",
  "entityNum": 1,
  "id": 620
 },
 {
  "taggedQuestion": "What was the career of some people who have committed suicide?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what was the career of #entity1",
    "originStr": "what was the career of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some people who have committed suicide",
    "originStr": "some people who have committed suicide"
   }
  ],
  "question": "What was the career of some people who have committed suicide",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN career)) (PP (IN of) (NP (NP (DT some) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN committed) (NP (NN suicide)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 621
 },
 {
  "taggedQuestion": "How many places are the tombs of people who died in Connecticut Colony?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in how many places are the tombs of #entity1",
    "originStr": "in how many places are the tombs of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who died in connecticut colony",
    "originStr": "people who died in connecticut colony"
   }
  ],
  "question": "In how many places are the tombs of people who died in Connecticut Colony",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Connecticut_Colony> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS places)) (VP (VBP are) (NP (NP (DT the) (NNS tombs)) (PP (IN of) (NP (NP (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD died) (PP (IN in) (NP (NNP Connecticut) (NN Colony))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 622
 },
 {
  "taggedQuestion": "List the producer of the <e0> distributed by FremantleMedia.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the producer of #entity1",
    "originStr": "list the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the television shows distributed by fremantlemedia",
    "originStr": "the television shows distributed by fremantlemedia"
   }
  ],
  "question": "List the producer of the television shows distributed by FremantleMedia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (VP (VBN distributed) (PP (IN by) (NP (NNP FremantleMedia)))))))) (. .)))",
  "entityNum": 2,
  "id": 623
 },
 {
  "taggedQuestion": "Name the awards won by Elie Wiesel .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the awards won by Elie Wiesel",
    "originStr": "Name the awards won by Elie Wiesel"
   }
  ],
  "question": "Name the awards won by Elie Wiesel",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NNP Elie) (NNP Wiesel)))))) (. .)))",
  "entityNum": 1,
  "id": 624
 },
 {
  "taggedQuestion": "Who are the producers of Marie Sisters?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the producers of Marie Sisters",
    "originStr": "Who are the producers of Marie Sisters"
   }
  ],
  "question": "Who are the producers of Marie Sisters",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NNS producers)) (PP (IN of) (NP (NNP Marie) (NNPS Sisters))))) (. ?)))",
  "entityNum": 1,
  "id": 625
 },
 {
  "taggedQuestion": "Who won the silver medal when the bronze was won by Yang Yilin?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who won the silver medal #entity1",
    "originStr": "who won the silver medal #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "when the bronze was won by yang yilin",
    "originStr": "when the bronze was won by yang yilin"
   }
  ],
  "question": "Who won the silver medal when the bronze was won by Yang Yilin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> . ?x <http://dbpedia.org/ontology/silverMedalist> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD won) (NP (DT the) (NN silver) (NN medal)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN bronze)) (VP (VBD was) (VP (VBN won) (PP (IN by) (NP (NNP Yang) (NNP Yilin))))))))) (. ?)))",
  "entityNum": 2,
  "id": 626
 },
 {
  "taggedQuestion": "List the successor of successor of Hayden, Stone & Co.",
  "entityMap": {
   "<e0>": "Hayden , Stone & Co."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the successor of #entity1",
    "originStr": "list the successor of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "successor of hayden, stone & co",
    "originStr": "successor of hayden, stone & co"
   }
  ],
  "question": "List the successor of successor of Hayden, Stone & Co",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/successor> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN successor)) (PP (IN of) (NP (NP (NN successor)) (PP (IN of) (NP (NNP Hayden) (, ,) (NNP Stone) (CC &) (NNP Co.))))))) (. .)))",
  "entityNum": 2,
  "id": 627
 },
 {
  "taggedQuestion": "Count the battles fought by the military person involved in Morocco .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of battles fought by #entity1",
    "originStr": "count the number of battles fought by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the military person involved in morocco",
    "originStr": "the military person involved in morocco"
   }
  ],
  "question": "Count the number of battles fought by the military person involved in Morocco",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Morocco> . ?x <http://dbpedia.org/property/battles> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS battles)) (VP (VBN fought) (PP (IN by) (NP (NP (DT the) (JJ military) (NN person)) (VP (VBN involved) (PP (IN in) (NP (NNP Morocco))))))))) (. .)))",
  "entityNum": 2,
  "id": 628
 },
 {
  "taggedQuestion": "What is the origin of Xynisteri?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the origin of Xynisteri",
    "originStr": "What is the origin of Xynisteri"
   }
  ],
  "question": "What is the origin of Xynisteri",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN origin)) (PP (IN of) (NP (NNP Xynisteri))))) (. ?)))",
  "entityNum": 1,
  "id": 629
 },
 {
  "taggedQuestion": "How many important works have been done by Russel Davies?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many important works",
    "originStr": "how many important works"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have been done by russel davies",
    "originStr": "have been done by russel davies"
   }
  ],
  "question": "How many important works have been done by Russel Davies",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ important) (NNS works)) (SQ (VP (VBP have) (VP (VBN been) (VP (VBN done) (PP (IN by) (NP (NNP Russel) (NNP Davies))))))) (. ?)))",
  "entityNum": 1,
  "id": 630
 },
 {
  "taggedQuestion": "Who are currently playing for Barcelona FC?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are currently playing for Barcelona FC",
    "originStr": "Who are currently playing for Barcelona FC"
   }
  ],
  "question": "Who are currently playing for Barcelona FC",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP are) (ADVP (RB currently)) (VP (VBG playing) (PP (IN for) (NP (NNP Barcelona) (NNP FC)))))) (. ?)))",
  "entityNum": 1,
  "id": 631
 },
 {
  "taggedQuestion": "Is Andrew Lincoln the narrator of <e0>?",
  "entityMap": {
   "<e0>": "Million Dollar Traders"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Andrew Lincoln the narrator of Million Dollar Traders",
    "originStr": "Is Andrew Lincoln the narrator of Million Dollar Traders"
   }
  ],
  "question": "Is Andrew Lincoln the narrator of Million Dollar Traders",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Andrew) (NNP Lincoln)) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 632
 },
 {
  "taggedQuestion": "Who is the owner of Saumarez ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the owner of Saumarez",
    "originStr": "Who is the owner of Saumarez"
   }
  ],
  "question": "Who is the owner of Saumarez",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saumarez_(horse)> <http://dbpedia.org/ontology/owner> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NNP Saumarez))))) (. ?)))",
  "entityNum": 1,
  "id": 633
 },
 {
  "taggedQuestion": "What is telecasted on the network where Deborah Turness holds important position?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is telecasted on #entity1",
    "originStr": "what is telecasted on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the network where deborah turness holds important position",
    "originStr": "the network where deborah turness holds important position"
   }
  ],
  "question": "What is telecasted on the network where Deborah Turness holds important position",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (VP (VBN telecasted) (PP (IN on) (NP (NP (DT the) (NN network)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Deborah) (NNP Turness)) (VP (VBZ holds) (NP (JJ important) (NN position))))))))) (. ?)))",
  "entityNum": 2,
  "id": 634
 },
 {
  "taggedQuestion": "Who is the fictional character whose relative is Vestigial Peter?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the fictional character",
    "originStr": "who is the fictional character"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose relative is vestigial peter",
    "originStr": "whose relative is vestigial peter"
   }
  ],
  "question": "Who is the fictional character whose relative is Vestigial Peter",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose)) (S (ADVP (JJ relative)) (VP (VBZ is) (NP (JJ Vestigial) (NNP Peter))))))) (. ?)))",
  "entityNum": 1,
  "id": 635
 },
 {
  "taggedQuestion": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many home stadium are there, of #entity1",
    "originStr": "how many home stadium are there, of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club seasons whose chairman is merritt paulson",
    "originStr": "the soccer club seasons whose chairman is merritt paulson"
   }
  ],
  "question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NN home) (NN stadium)) (SQ (VBP are) (NP (NP (NP (RB there)) (, ,) (PP (IN of) (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)))) (SBAR (WHNP (WP$ whose) (NML (NN chairman))) (S (VP (VBZ is) (NP (NNP Merritt) (NNP Paulson))))))) (. ?)))",
  "entityNum": 2,
  "id": 636
 },
 {
  "taggedQuestion": "Name the alma mater of <e0> .",
  "entityMap": {
   "<e0>": "Ernest de Saisset"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the alma mater of Ernest de Saisset",
    "originStr": "Name the alma mater of Ernest de Saisset"
   }
  ],
  "question": "Name the alma mater of Ernest de Saisset",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 637
 },
 {
  "taggedQuestion": "What magazine companies are of <e0>?",
  "entityMap": {
   "<e0>": "form Limited liability company"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what magazine companies",
    "originStr": "what magazine companies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are of form limited liability company",
    "originStr": "are of form limited liability company"
   }
  ],
  "question": "What magazine companies are of form Limited liability company",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Limited_liability_company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NN magazine) (NNS companies)) (VP (VBP are) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 638
 },
 {
  "taggedQuestion": "List the driver of <e0> is also the Pole driver of Canadian Grand Proix ?",
  "entityMap": {
   "<e0>": "SA MArino Grand Prix"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the driver of sa marino grand prix",
    "originStr": "list the driver of sa marino grand prix"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the pole driver of canadian grand proix",
    "originStr": "is also the pole driver of canadian grand proix"
   }
  ],
  "question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri} ",
  "syntaxTreeText": "(ROOT (S (S (VP (VB List) (NP (NP (DT the) (NN driver)) (PP (IN of) (NP (NN <e0>)))))) (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NNP Pole) (NN driver)) (PP (IN of) (NP (JJ Canadian) (NNP Grand) (NNP Proix))))) (. ?)))",
  "entityNum": 1,
  "id": 639
 },
 {
  "taggedQuestion": "Where does John A Danaher III work?",
  "entityMap": {
   "<e0>": "John Danaher III work"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where does John A Danaher III work",
    "originStr": "Where does John A Danaher III work"
   }
  ],
  "question": "Where does John A Danaher III work",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (NNP John) (NNP A) (NNP Danaher) (NNP III) (NN work))) (. ?)))",
  "entityNum": 1,
  "id": 640
 },
 {
  "taggedQuestion": "Name few movies directed by Tim Burton .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name few movies",
    "originStr": "name few movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "directed by tim burton",
    "originStr": "directed by tim burton"
   }
  ],
  "question": "Name few movies directed by Tim Burton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (JJ few) (NNS movies)) (VP (VBN directed) (PP (IN by) (NP (NNP Tim) (NNP Burton)))))) (. .)))",
  "entityNum": 1,
  "id": 641
 },
 {
  "taggedQuestion": "Where was Live in Detroit, MI recorded ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was #entity1 recorded",
    "originStr": "where was #entity1 recorded"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "live in detroit, mi",
    "originStr": "live in detroit, mi"
   }
  ],
  "question": "Where was Live in Detroit, MI recorded",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (JJ Live)) (PP (IN in) (NP (NNP Detroit) (, ,) (NNP MI)))) (VP (VBN recorded))) (. ?)))",
  "entityNum": 2,
  "id": 642
 },
 {
  "taggedQuestion": "Name all the bands which have members of QDT in them.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name all the bands which have #entity1 in them",
    "originStr": "name all the bands which have #entity1 in them"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "members of qdt",
    "originStr": "members of qdt"
   }
  ],
  "question": "Name all the bands which have members of QDT in them",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS bands)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS members)) (PP (IN of) (NP (NP (NN QDT)) (PP (IN in) (NP (PRP them))))))))))) (. .)))",
  "entityNum": 2,
  "id": 643
 },
 {
  "taggedQuestion": "Which footballers did their high school in west Sacramento california? ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which footballers",
    "originStr": "which footballers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did their high school in west sacramento california",
    "originStr": "did their high school in west sacramento california"
   }
  ],
  "question": "Which footballers did their high school in west Sacramento california",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/West_Sacramento,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NNS footballers))) (SQ (VP (VBD did) (NP (PRP$ their) (JJ high) (NN school)) (PP (IN in) (NP (NN west) (NNP Sacramento) (NNP california))))) (. ?)))(ROOT (. ?))",
  "entityNum": 1,
  "id": 644
 },
 {
  "taggedQuestion": "List the names of the soccer club seasons whose division is <e0>",
  "entityMap": {
   "<e0>": "2012 Campeonato Brasileiro Srie A."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the names of #entity1",
    "originStr": "list the names of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the soccer club seasons whose division is 2012 campeonato brasileiro srie a",
    "originStr": "the soccer club seasons whose division is 2012 campeonato brasileiro srie a"
   }
  ],
  "question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (NP (DT the) (NNS names)) (PP (IN of) (NP (DT the) (NML (NN soccer) (NN club)) (NNS seasons)))) (SBAR (WHNP (WP$ whose) (NML (NN division))) (S (VP (VBZ is) (NP (ADD <e0>)))))))))",
  "entityNum": 2,
  "id": 645
 },
 {
  "taggedQuestion": "Which successor of <e0> is the <e1> of <e2> ?",
  "entityMap": {
   "<e2>": "Ruben J. Villote",
   "<e1>": "state of origin",
   "<e0>": "Philippine Ports Authority"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which successor of philippine ports authority",
    "originStr": "which successor of philippine ports authority"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the state of origin of ruben j. villote",
    "originStr": "is the state of origin of ruben j. villote"
   }
  ],
  "question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?uri. <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN successor) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (DT the) (NN <e1>)) (PP (IN of) (NP (NN <e2>))))) (. ?)))",
  "entityNum": 1,
  "id": 646
 },
 {
  "taggedQuestion": "What awards have been won by the executive producer of Timmy Time ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what awards have been won by #entity1",
    "originStr": "what awards have been won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the executive producer of timmy time",
    "originStr": "the executive producer of timmy time"
   }
  ],
  "question": "What awards have been won by the executive producer of Timmy Time",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NNP Timmy) (NNP Time))))))))) (. ?)))",
  "entityNum": 2,
  "id": 647
 },
 {
  "taggedQuestion": "Which american football team is owned by Mark davis and is located in O.co Colliseum ?",
  "entityMap": {
   "<e0>": "O.c o Colliseum"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which american football team",
    "originStr": "which american football team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is owned by mark davis and is located in o.co colliseum",
    "originStr": "is owned by mark davis and is located in o.co colliseum"
   }
  ],
  "question": "Which american football team is owned by Mark davis and is located in O.co Colliseum",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Mark_Davis_(American_football)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ american) (NN football) (NN team)) (SQ (VBZ is) (VP (VP (VBN owned) (PP (IN by) (NP (NNP Mark) (NNP davis)))) (CC and) (VP (VBZ is) (VP (VBN located) (PP (IN in) (NP (NNP O.co) (NNP Colliseum))))))) (. ?)))",
  "entityNum": 1,
  "id": 648
 },
 {
  "taggedQuestion": "The successor of Ulrich II, Count of East Frisia was born in what place?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 was born in what place",
    "originStr": "#entity1 was born in what place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the successor of ulrich ii, count of east frisia",
    "originStr": "the successor of ulrich ii, count of east frisia"
   }
  ],
  "question": "The successor of Ulrich II, Count of East Frisia was born in what place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NP (DT The) (NN successor)) (PP (IN of) (NP (NP (NNP Ulrich) (NNP II)) (, ,) (NP (NP (NNP Count)) (PP (IN of) (NP (NNP East) (NNP Frisia))))))) (VP (VBD was) (VP (VBN born) (PP (IN in) (X (WP what)) (NP (NN place))))) (. ?)))",
  "entityNum": 2,
  "id": 649
 },
 {
  "taggedQuestion": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the prime minister of michael jeffery who is also the minister of williuam deane",
    "originStr": "who is the prime minister of michael jeffery who is also the minister of williuam deane"
   }
  ],
  "question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ prime) (NN minister)) (PP (IN of) (NP (NP (NNP Michael) (NNP Jeffery)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN minister)) (PP (IN of) (NP (NNP Williuam) (NNP Deane))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 650
 },
 {
  "taggedQuestion": "Who is the owner of the FC which owns the <e0>?",
  "entityMap": {
   "<e0>": "Cobham Training Centre"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the owner of #entity1",
    "originStr": "who is the owner of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the fc which owns the cobham training centre",
    "originStr": "the fc which owns the cobham training centre"
   }
  ],
  "question": "Who is the owner of the FC which owns the Cobham Training Centre",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (NP (DT the) (NNP FC)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 651
 },
 {
  "taggedQuestion": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is considered to be the deciding person when it comes to crustaceans",
    "originStr": "who is considered to be the deciding person when it comes to crustaceans"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from the balanidae family",
    "originStr": "from the balanidae family"
   }
  ],
  "question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN considered) (S (VP (TO to) (VP (VB be) (NP (NP (DT the) (VBG deciding) (NN person)) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ comes) (PP (IN to) (NP (NP (NNS crustaceans)) (PP (IN from) (NP (DT the) (NNP Balanidae) (NN family)))))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 652
 },
 {
  "taggedQuestion": "What have some US citizens died of?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what have #entity1 died of",
    "originStr": "what have #entity1 died of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some us citizens",
    "originStr": "some us citizens"
   }
  ],
  "question": "What have some US citizens died of",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBP have) (NP (NP (DT some)) (SBAR (S (NP (NNP US) (NNS citizens)) (VP (VBD died) (PP (IN of)))))))) (. ?)))",
  "entityNum": 2,
  "id": 653
 },
 {
  "taggedQuestion": "What are some apes?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are some",
    "originStr": "what are some"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "apes",
    "originStr": "apes"
   }
  ],
  "question": "What are some apes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NNS apes))) (. ?)))",
  "entityNum": 1,
  "id": 654
 },
 {
  "taggedQuestion": "Who is buried at the place governed by <e0>?",
  "entityMap": {
   "<e0>": "National Park Service"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is buried at #entity1",
    "originStr": "who is buried at #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the place governed by national park service",
    "originStr": "the place governed by national park service"
   }
  ],
  "question": "Who is buried at the place governed by National Park Service",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> . ?uri <http://dbpedia.org/property/restingplace> ?x  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN buried) (PP (IN at) (NP (NP (DT the) (NN place)) (VP (VBN governed) (PP (IN by) (NP (NN <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 655
 },
 {
  "taggedQuestion": "Name the municipality of <e0> .",
  "entityMap": {
   "<e0>": "Roberto Clemente Bridge"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the municipality of Roberto Clemente Bridge",
    "originStr": "Name the municipality of Roberto Clemente Bridge"
   }
  ],
  "question": "Name the municipality of Roberto Clemente Bridge",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN municipality)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 656
 },
 {
  "taggedQuestion": "Which past members of the The Conglomerate (American group) also sang <e0>?",
  "entityMap": {
   "<e0>": "Take Me There (Blackstreet & Ma song)"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which past members of the conglomerate (american group)",
    "originStr": "which past members of the conglomerate (american group)"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also sang take me there (blackstreet & ma song)",
    "originStr": "also sang take me there (blackstreet & ma song)"
   }
  ],
  "question": "Which past members of the Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ past) (NNS members)) (PP (IN of) (NP (DT the) (NP (NP (DT The) (NN Conglomerate)) (-LRB- -LRB-) (NP (JJ American) (NN group)) (-RRB- -RRB-)))))) (SQ (VP (ADVP (RB also)) (VBD sang) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 657
 },
 {
  "taggedQuestion": "List all the notable works of  <e0>?",
  "entityMap": {
   "<e0>": "Russell T Davies"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "List all"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List all the notable works of Russell T Davies",
    "originStr": "List all the notable works of Russell T Davies"
   }
  ],
  "question": "List all the notable works of Russell T Davies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri } ",
  "syntaxTreeText": "(ROOT (NP (NP (NN List)) (NP (NP (PDT all) (DT the) (JJ notable) (NNS works)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 658
 },
 {
  "taggedQuestion": "Which military unit garrison is Arlington County, Virginia and The Pentagon?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which military unit garrison",
    "originStr": "which military unit garrison"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is arlington county, virginia and the pentagon",
    "originStr": "is arlington county, virginia and the pentagon"
   }
  ],
  "question": "Which military unit garrison is Arlington County, Virginia and The Pentagon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ military) (NN unit)) (NP (NN garrison)))) (SQ (VBZ is) (NP (NP (NNP Arlington) (NNP County)) (, ,) (NP (NNP Virginia)) (CC and) (NP (DT The) (NNP Pentagon)))) (. ?)))",
  "entityNum": 1,
  "id": 659
 },
 {
  "taggedQuestion": "Name all the products produced by the producer of <e0> .",
  "entityMap": {
   "<e0>": "United States dollar"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name all the products produced by #entity1",
    "originStr": "name all the products produced by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the producer of united states dollar",
    "originStr": "the producer of united states dollar"
   }
  ],
  "question": "Name all the products produced by the producer of United States dollar",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/United_States_dollar> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (PDT all) (DT the) (NNS products)) (VP (VBN produced) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (ADD <e0>)))))))) (. .)))",
  "entityNum": 2,
  "id": 660
 },
 {
  "taggedQuestion": "What is the launch site of Aquarius (rocket) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the launch site of Aquarius (rocket)",
    "originStr": "What is the launch site of Aquarius (rocket)"
   }
  ],
  "question": "What is the launch site of Aquarius (rocket)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (NP (NNP Aquarius)) (-LRB- -LRB-) (NP (NN rocket)) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 661
 },
 {
  "taggedQuestion": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the players",
    "originStr": "what are the players"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose former teams are carolina panthers and indianapolis colts",
    "originStr": "whose former teams are carolina panthers and indianapolis colts"
   }
  ],
  "question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS players)) (SBAR (WHNP (WP$ whose) (JJ former) (NNS teams)) (S (VP (VBP are) (NP (NP (NNP Carolina) (NNPS Panthers)) (CC and) (NP (NNP Indianapolis) (NNPS Colts)))))))) (. ?)))",
  "entityNum": 1,
  "id": 662
 },
 {
  "taggedQuestion": "Count the mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "count the total number of mammals whose phylum is chordate",
    "originStr": "count the total number of mammals whose phylum is chordate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and order (taxonomy) is diprotodontia",
    "originStr": "and order (taxonomy) is diprotodontia"
   }
  ],
  "question": "Count the total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> } ",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Count) (NP (NP (DT the) (NNS mammals)) (SBAR (WHNP (WP$ whose) (NML (NN phylum))) (S (VP (VBZ is) (NP (NN Chordate)))))))) (CC and) (S (NP (NN order) (-LRB- -LRB-) (NN taxonomy) (-RRB- -RRB-)) (VP (VBZ is) (NP (NNP Diprotodontia)))) (. .)))",
  "entityNum": 1,
  "id": 663
 },
 {
  "taggedQuestion": "Who is the music composer of Kenny Dies ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the music composer of Kenny Dies",
    "originStr": "Who is the music composer of Kenny Dies"
   }
  ],
  "question": "Who is the music composer of Kenny Dies",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN music) (NN composer)) (PP (IN of) (NP (NNP Kenny)))) (VP (VBZ Dies)))) (. ?)))",
  "entityNum": 1,
  "id": 664
 },
 {
  "taggedQuestion": "How many cities are around the sea into which the aegean sea flows?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many cities are around #entity1",
    "originStr": "how many cities are around #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sea into which the aegean sea flows",
    "originStr": "the sea into which the aegean sea flows"
   }
  ],
  "question": "How many cities are around the sea into which the aegean sea flows",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (PP (IN around) (NP (NP (DT the) (NN sea)) (SBAR (WHPP (IN into) (WHNP (WDT which))) (S (NP (DT the) (JJ aegean) (NN sea)) (VP (VBZ flows)))))))) (. ?)))",
  "entityNum": 2,
  "id": 665
 },
 {
  "taggedQuestion": "Where did the office holder  who is predecessor to <e0> died ?",
  "entityMap": {
   "<e0>": "Marco Aurelio Robles"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did #entity1 died",
    "originStr": "where did #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the office holder who is predecessor to marco aurelio robles",
    "originStr": "the office holder who is predecessor to marco aurelio robles"
   }
  ],
  "question": "Where did the office holder who is predecessor to Marco Aurelio Robles died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (SBAR (S (NP (NP (DT the) (NN office) (NN holder)) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (NN predecessor)) (TO to) (NP (ADD <e0>))))))) (VP (VBD died)))))) (. ?)))",
  "entityNum": 2,
  "id": 666
 },
 {
  "taggedQuestion": "Who is associated  with the musical artists from Africa '70 (band) and Tony Allen ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is associated with #entity1 tony allen",
    "originStr": "who is associated with #entity1 tony allen"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the musical artists from africa '70 (band) and",
    "originStr": "the musical artists from africa '70 (band) and"
   }
  ],
  "question": "Who is associated with the musical artists from Africa '70 (band) and Tony Allen",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN associated) (PP (IN with) (NP (NP (NP (DT the) (JJ musical) (NNS artists)) (PP (IN from) (NP (NNP Africa) (CD '70))) (PRN (-LRB- -LRB-) (NP (NN band)) (-RRB- -RRB-))) (CC and) (NP (NNP Tony) (NNP Allen)))))) (. ?)))",
  "entityNum": 2,
  "id": 667
 },
 {
  "taggedQuestion": "Is the Hyundai Lavita assembled in Kulim?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Hyundai Lavita assembled in Kulim",
    "originStr": "Is the Hyundai Lavita assembled in Kulim"
   }
  ],
  "question": "Is the Hyundai Lavita assembled in Kulim",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Hyundai)) (NP (NP (NNP Lavita)) (SBAR (S (VP (VBD assembled) (PP (IN in) (NP (NNP Kulim))))))) (. ?)))",
  "entityNum": 1,
  "id": 668
 },
 {
  "taggedQuestion": "What is the programme format of WWTR ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the programme format of WWTR",
    "originStr": "What is the programme format of WWTR"
   }
  ],
  "question": "What is the programme format of WWTR",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WWTR> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN programme) (NN format)) (PP (IN of) (NP (NNP WWTR))))) (. ?)))",
  "entityNum": 1,
  "id": 669
 },
 {
  "taggedQuestion": "List the founders of Bream Bay ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the founders of Bream Bay",
    "originStr": "list the founders of Bream Bay"
   }
  ],
  "question": "list the founders of Bream Bay",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/property/founder> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS founders)) (PP (IN of) (NP (NNP Bream) (NNP Bay))))) (. ?)))",
  "entityNum": 1,
  "id": 670
 },
 {
  "taggedQuestion": "Is Essex the Ceremonial County of West Tilbury?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Essex the Ceremonial County of West Tilbury",
    "originStr": "Is Essex the Ceremonial County of West Tilbury"
   }
  ],
  "question": "Is Essex the Ceremonial County of West Tilbury",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Essex)) (NP (NP (DT the) (NNP Ceremonial) (NNP County)) (PP (IN of) (NP (NNP West) (NNP Tilbury)))) (. ?)))",
  "entityNum": 1,
  "id": 671
 },
 {
  "taggedQuestion": "What is the total number of participant in conflict of SFOR?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of participant in #entity1",
    "originStr": "what is the total number of participant in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "conflict of sfor",
    "originStr": "conflict of sfor"
   }
  ],
  "question": "What is the total number of participant in conflict of SFOR",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN participant)) (PP (IN in) (NP (NP (NN conflict)) (PP (IN of) (NP (NNP SFOR))))))))) (. ?)))",
  "entityNum": 2,
  "id": 672
 },
 {
  "taggedQuestion": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the people whose academic advisor has also mentored #entity1",
    "originStr": "name the people whose academic advisor has also mentored #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the thesis of alexius meinong",
    "originStr": "the thesis of alexius meinong"
   }
  ],
  "question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Alexius_Meinong> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ has) (ADVP (RB also)) (VP (VBD mentored) (NP (NP (DT the) (NN thesis)) (PP (IN of) (NP (NNP Alexius) (NNP Meinong)))))))))) (. .)))",
  "entityNum": 2,
  "id": 673
 },
 {
  "taggedQuestion": "Where is Denver Broncos located ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is Denver Broncos located",
    "originStr": "Where is Denver Broncos located"
   }
  ],
  "question": "Where is Denver Broncos located",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Denver) (NNPS Broncos)) (VP (VBN located))) (. ?)))",
  "entityNum": 1,
  "id": 674
 },
 {
  "taggedQuestion": "Which serving railway line of the <e0> is the home port of INS Viraat ?",
  "entityMap": {
   "<e0>": "Daund Junction railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which serving railway line of the daund junction railway station",
    "originStr": "which serving railway line of the daund junction railway station"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the home port of ins viraat",
    "originStr": "is the home port of ins viraat"
   }
  ],
  "question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which)) (SBAR (S (VP (VBG serving) (NP (NP (NN railway) (NN line)) (PP (IN of) (NP (DT the) (NN <e0>)))))))) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN port)) (PP (IN of) (NP (NNP INS) (NNP Viraat))))) (. ?)))",
  "entityNum": 1,
  "id": 675
 },
 {
  "taggedQuestion": "Which river flows through <e0> and also through Troy, New york ?",
  "entityMap": {
   "<e0>": "Hudson Highlands State park"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which river",
    "originStr": "which river"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "flows through hudson highlands state park and also through troy, new york",
    "originStr": "flows through hudson highlands state park and also through troy, new york"
   }
  ],
  "question": "Which river flows through Hudson Highlands State park and also through Troy, New York",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri. <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/ontology/river> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ flows) (PP (PP (IN through) (NP (ADD <e0>))) (CC and) (PP (ADVP (RB also)) (IN through) (NP (NP (NNP Troy)) (, ,) (NP (NNP New) (NNP york))))))) (. ?)))",
  "entityNum": 1,
  "id": 676
 },
 {
  "taggedQuestion": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the university to which erica frank went",
    "originStr": "what is the university to which erica frank went"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and where ivan toplak was a club manager",
    "originStr": "and where ivan toplak was a club manager"
   }
  ],
  "question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN university)) (SBAR (SBAR (WHPP (TO to) (WHNP (WDT which))) (S (NP (NNP Erica) (NNP Frank)) (VP (VBD went)))) (, ,) (CC and) (SBAR (WHADVP (WRB where)) (S (NP (NNP Ivan) (NNP Toplak)) (VP (VBD was) (NP (DT a) (NN club) (NN manager)))))))) (. ?)))",
  "entityNum": 1,
  "id": 677
 },
 {
  "taggedQuestion": "How many movies have been directed by Orson Welles ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many movies",
    "originStr": "how many movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have been directed by orson welles",
    "originStr": "have been directed by orson welles"
   }
  ],
  "question": "How many movies have been directed by Orson Welles",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN directed) (PP (IN by) (NP (NNP Orson) (NNP Welles))))))) (. ?)))",
  "entityNum": 1,
  "id": 678
 },
 {
  "taggedQuestion": "Which borough is common for Duddeston and <e0> ?",
  "entityMap": {
   "<e0>": "Bordesley railway station"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which borough",
    "originStr": "which borough"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is common for duddeston and bordesley railway station",
    "originStr": "is common for duddeston and bordesley railway station"
   }
  ],
  "question": "Which borough is common for Duddeston and Bordesley railway station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN borough)) (SQ (VBZ is) (NP (NP (JJ common)) (PP (IN for) (NP (NP (NNP Duddeston)) (CC and) (NP (ADD <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 679
 },
 {
  "taggedQuestion": "Does Mauritius follow a parliamentary republic?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Mauritius follow a parliamentary republic",
    "originStr": "Does Mauritius follow a parliamentary republic"
   }
  ],
  "question": "Does Mauritius follow a parliamentary republic",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Mauritius)) (VP (VB follow) (NP (DT a) (JJ parliamentary) (NN republic))) (. ?)))",
  "entityNum": 1,
  "id": 680
 },
 {
  "taggedQuestion": "Who is the performer of the album whose subsequent work is <e0> ?",
  "entityMap": {
   "<e0>": "Willie Nelson and Family"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the performer of #entity1",
    "originStr": "who is the performer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the album whose subsequent work is willie nelson and family",
    "originStr": "the album whose subsequent work is willie nelson and family"
   }
  ],
  "question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN performer)) (PP (IN of) (NP (NP (DT the) (NN album)) (SBAR (WHNP (WP$ whose) (NML (JJ subsequent) (NN work))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 681
 },
 {
  "taggedQuestion": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the birthplace of ludovic boi",
    "originStr": "what is the birthplace of ludovic boi"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the residence of fernando augustin",
    "originStr": "which is also the residence of fernando augustin"
   }
  ],
  "question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Fernando_Augustin> <http://dbpedia.org/property/residence> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN birthplace)) (PP (IN of) (NP (NP (NNP Ludovic) (NNP Boi)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN residence)) (PP (IN of) (NP (NNP Fernando) (NNP Augustin))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 682
 },
 {
  "taggedQuestion": "Who is the producer of album, which has the song Eclipse ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the producer of #entity1",
    "originStr": "who is the producer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "album, which has the song eclipse",
    "originStr": "album, which has the song eclipse"
   }
  ],
  "question": "Who is the producer of album, which has the song Eclipse",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eclipse_(song)> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NP (NN album)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (DT the) (NN song) (NN Eclipse))))))))) (. ?)))",
  "entityNum": 2,
  "id": 683
 },
 {
  "taggedQuestion": "Which parties have their members live in the PM House, Colombo?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which parties have their members #entity1",
    "originStr": "which parties have their members #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "live in the pm house, colombo",
    "originStr": "live in the pm house, colombo"
   }
  ],
  "question": "Which parties have their members live in the PM House, Colombo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
  "syntaxTreeText": "(ROOT (FRAG (SINV (SBAR (WHNP (WDT Which)) (S (NP (NNS parties)) (VP (VBP have) (NP (PRP$ their) (NNS members))))) (VP (VBP live) (PP (IN in) (NP (DT the) (NN PM)))) (NP (NNP House))) (, ,) (NP (NNP Colombo)) (. ?)))",
  "entityNum": 2,
  "id": 684
 },
 {
  "taggedQuestion": "Which awards have been given to scientists that graduated from NKU athens?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which awards have been given to #entity1",
    "originStr": "which awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "scientists that graduated from nku athens",
    "originStr": "scientists that graduated from nku athens"
   }
  ],
  "question": "Which awards have been given to scientists that graduated from NKU athens",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (NP (NNS scientists)) (SBAR (WHNP (WDT that)) (S (VP (VBD graduated) (PP (IN from) (NP (NNP NKU) (NNS athens)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 685
 },
 {
  "taggedQuestion": "Ricky Gervais is the executive producer of the series having how many fictional characters?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 having how many fictional characters",
    "originStr": "#entity1 having how many fictional characters"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "ricky gervais is the executive producer of the series",
    "originStr": "ricky gervais is the executive producer of the series"
   }
  ],
  "question": "Ricky Gervais is the executive producer of the series having how many fictional characters",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Ricky) (NNP Gervais)) (VP (VBZ is) (NP (NP (DT the) (JJ executive) (NN producer)) (PP (IN of) (NP (NP (DT the) (NN series)) (VP (VBG having) (NP (ADJP (WRB how) (JJ many)) (JJ fictional) (NNS characters))))))) (. ?)))",
  "entityNum": 2,
  "id": 686
 },
 {
  "taggedQuestion": "Did Jerry Rice study in Oktoc Mississippi?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Jerry Rice study in Oktoc Mississippi",
    "originStr": "Did Jerry Rice study in Oktoc Mississippi"
   }
  ],
  "question": "Did Jerry Rice study in Oktoc Mississippi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi> }",
  "syntaxTreeText": "(ROOT (FRAG (VP (VBD Did) (S (NP (NNP Jerry) (NNP Rice))) (NP (NP (NN study)) (PP (IN in) (NP (NNP Oktoc) (NNP Mississippi))))) (. ?)))",
  "entityNum": 1,
  "id": 687
 },
 {
  "taggedQuestion": "Cable stayed bridges have been used to cross over how many things?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have been used to cross over how many things",
    "originStr": "#entity1 have been used to cross over how many things"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "cable stayed bridges",
    "originStr": "cable stayed bridges"
   }
  ],
  "question": "Cable stayed bridges have been used to cross over how many things",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NNP Cable)) (VP (VBD stayed) (SBAR (S (NP (NNS bridges)) (VP (VBP have) (VP (VBN been) (VP (VBN used) (S (VP (TO to) (VP (VB cross) (PP (IN over) (WHNP (WHADJP (WRB how) (JJ many)) (NNS things)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 688
 },
 {
  "taggedQuestion": "Is <e0> have an islamic government?",
  "entityMap": {
   "<e0>": "north caucasian emirate"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is north caucasian emirate have an islamic government",
    "originStr": "Is north caucasian emirate have an islamic government"
   }
  ],
  "question": "Is north caucasian emirate have an islamic government",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Islam> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (ADD <e0>)) (VP (VBP have) (NP (DT an) (JJ islamic) (NN government))))) (. ?)))",
  "entityNum": 1,
  "id": 689
 },
 {
  "taggedQuestion": "What are the <e0> whose starting music is composed by Ron Grainer?",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the television shows",
    "originStr": "what are the television shows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose starting music is composed by ron grainer",
    "originStr": "whose starting music is composed by ron grainer"
   }
  ],
  "question": "What are the television shows whose starting music is composed by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (S (VP (VBG starting)))) (NN music)) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer))))))))) (. ?)))",
  "entityNum": 1,
  "id": 690
 },
 {
  "taggedQuestion": "Who influenced the author of <e0> ?",
  "entityMap": {
   "<e0>": "The Shooting of Dan McGrew"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who influenced #entity1",
    "originStr": "who influenced #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the author of the shooting of dan mcgrew",
    "originStr": "the author of the shooting of dan mcgrew"
   }
  ],
  "question": "Who influenced the author of The Shooting of Dan McGrew",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/influences> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD influenced) (NP (NP (DT the) (NN author)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 691
 },
 {
  "taggedQuestion": "Raymond Johansen is the mayor of what city?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "raymond johansen is the mayor of",
    "originStr": "raymond johansen is the mayor of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what city",
    "originStr": "what city"
   }
  ],
  "question": "Raymond Johansen is the mayor of what city",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen>  . }",
  "syntaxTreeText": "(ROOT (SQ (NP (NNP Raymond) (NNP Johansen)) (VBZ is) (NP (DT the) (NN mayor)) (PP (IN of) (WHNP (WP what) (NN city))) (. ?)))",
  "entityNum": 1,
  "id": 692
 },
 {
  "taggedQuestion": "What region was Gloria Schaffer born in, which also contains Newington?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what region",
    "originStr": "what region"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was gloria schaffer born in, which also contains newington",
    "originStr": "was gloria schaffer born in, which also contains newington"
   }
  ],
  "question": "What region was Gloria Schaffer born in, which also contains Newington",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Newington,_Connecticut> <http://dbpedia.org/ontology/isPartOf> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN region)) (SQ (VBD was) (NP (NNP Gloria) (NNP Schaffer)) (VP (VBN born) (PP (IN in)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBZ contains) (NP (NNP Newington))))))) (. ?)))",
  "entityNum": 1,
  "id": 693
 },
 {
  "taggedQuestion": "List some teams for which someone who has played as a defender, now plays?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list some teams for which #entity1 now plays",
    "originStr": "list some teams for which #entity1 now plays"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "someone who has played as a defender",
    "originStr": "someone who has played as a defender"
   }
  ],
  "question": "List some teams for which someone who has played as a defender, now plays",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT some) (NNS teams)) (SBAR (WHPP (IN for) (WHNP (WDT which))) (S (NP (NP (NN someone)) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN played) (PP (IN as) (NP (DT a) (NN defender))) (, ,) (ADVP (RB now))))))) (VP (VBZ plays)))))) (. ?)))",
  "entityNum": 2,
  "id": 694
 },
 {
  "taggedQuestion": "Which rivers start from the Provinces of Zambia?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which rivers start from #entity1",
    "originStr": "which rivers start from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the provinces of zambia",
    "originStr": "the provinces of zambia"
   }
  ],
  "question": "Which rivers start from the Provinces of Zambia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS rivers)) (VP (VBP start) (PP (IN from) (NP (NP (DT the) (NNS Provinces)) (PP (IN of) (NP (NNP Zambia))))))) (. ?)))",
  "entityNum": 2,
  "id": 695
 },
 {
  "taggedQuestion": "Who are the scientists known for the Manhattan Project?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who are the scientists",
    "originStr": "who are the scientists"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "known for the manhattan project",
    "originStr": "known for the manhattan project"
   }
  ],
  "question": "Who are the scientists known for the Manhattan Project",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (DT the) (NNS scientists)) (VP (VBN known) (PP (IN for) (NP (DT the) (NNP Manhattan) (NNP Project))))) (. ?)))",
  "entityNum": 1,
  "id": 696
 },
 {
  "taggedQuestion": "What are some dishes from the family of dishes which primarily use flour?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some dishes from #entity1",
    "originStr": "what are some dishes from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the family of dishes which primarily use flour",
    "originStr": "the family of dishes which primarily use flour"
   }
  ],
  "question": "What are some dishes from the family of dishes which primarily use flour",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> . ?uri <http://dbpedia.org/ontology/type> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS dishes)) (PP (IN from) (NP (NP (DT the) (NN family)) (PP (IN of) (NP (NP (NNS dishes)) (SBAR (WHNP (WDT which)) (S (ADVP (RB primarily)) (VP (VBP use) (NP (NN flour))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 697
 },
 {
  "taggedQuestion": "Which religion do the people follow, whose constituency is Jadavpur?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which religion do the people follow, #entity1",
    "originStr": "which religion do the people follow, #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose constituency is jadavpur",
    "originStr": "whose constituency is jadavpur"
   }
  ],
  "question": "Which religion do the people follow, whose constituency is Jadavpur",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBARQ (WHNP (WDT Which) (NN religion)) (SQ (VBP do) (NP (DT the) (NNS people)) (VP (VBP follow)))) (, ,) (SBARQ (WHNP (WP$ whose) (NN constituency)) (SQ (VBZ is) (NP (NNP Jadavpur)))) (. ?)))",
  "entityNum": 2,
  "id": 698
 },
 {
  "taggedQuestion": "Which region is the rival school of Somerset, Massachusetts located?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which region is #entity1 located",
    "originStr": "in which region is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rival school of somerset, massachusetts",
    "originStr": "the rival school of somerset, massachusetts"
   }
  ],
  "question": "In which region is the rival school of Somerset, Massachusetts located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN region)) (SQ (VBZ is) (NP (NP (DT the) (JJ rival) (NN school)) (PP (IN of) (NP (NNP Somerset) (, ,) (NNP Massachusetts)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 699
 },
 {
  "taggedQuestion": "Which key person of Clinton Foundation is also the president of Jim Sasser ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which key person of clinton foundation",
    "originStr": "which key person of clinton foundation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the president of jim sasser",
    "originStr": "is also the president of jim sasser"
   }
  ],
  "question": "Which key person of Clinton Foundation is also the president of Jim Sasser",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ key) (NN person)) (PP (IN of) (NP (NNP Clinton) (NNP Foundation))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Jim) (NNP Sasser))))) (. ?)))",
  "entityNum": 1,
  "id": 700
 },
 {
  "taggedQuestion": "Where did the athlete start his career, who did his highschool in <e0>?",
  "entityMap": {
   "<e0>": "Red Lion Area School District"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did the athlete start his career, #entity1",
    "originStr": "where did the athlete start his career, #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who did his highschool in red lion area school district",
    "originStr": "who did his highschool in red lion area school district"
   }
  ],
  "question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN athlete)) (VP (VB start) (NP (NP (PRP$ his) (NN career)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD did) (NP (PRP$ his) (NN highschool)) (PP (IN in) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 701
 },
 {
  "taggedQuestion": "Name a person who works in <e0> and has wife named <e1> .",
  "entityMap": {
   "<e1>": "Susan Weber Soros",
   "<e0>": "Open Society Foundation"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name a person who works in open society foundation",
    "originStr": "name a person who works in open society foundation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has wife named susan weber soros",
    "originStr": "and has wife named susan weber soros"
   }
  ],
  "question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT a) (NN person)) (SBAR (WHNP (WP who)) (S (VP (VP (VBZ works) (PP (IN in) (NP (ADD <e0>)))) (CC and) (VP (VBZ has) (NP (NP (NN wife)) (VP (VBN named) (NP (ADD <e1>)))))))))) (. .)))",
  "entityNum": 1,
  "id": 702
 },
 {
  "taggedQuestion": "How many things are crossed over by bridges which can carry cars?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many things are crossed over by #entity1",
    "originStr": "how many things are crossed over by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "bridges which can carry cars",
    "originStr": "bridges which can carry cars"
   }
  ],
  "question": "How many things are crossed over by bridges which can carry cars",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN crossed) (PRT (RP over)) (PP (IN by) (NP (NP (NNS bridges)) (SBAR (WHNP (WDT which)) (S (VP (MD can) (VP (VB carry) (NP (NNS cars)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 703
 },
 {
  "taggedQuestion": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3 ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which fictional character",
    "originStr": "which fictional character"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "sculpted by josh friedmann was portrayed in terminator 3",
    "originStr": "sculpted by josh friedmann was portrayed in terminator 3"
   }
  ],
  "question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ fictional) (NN character)) (SQ (VP (VBN sculpted) (PP (IN by) (NP (NP (NNP Josh) (NNP Friedmann)) (SBAR (S (VP (VBD was) (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 3))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 704
 },
 {
  "taggedQuestion": "Which team won the <e0>?",
  "entityMap": {
   "<e0>": "American Football League"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Which team won the American Football League",
    "originStr": "Which team won the American Football League"
   }
  ],
  "question": "Which team won the American Football League",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBD won) (NP (DT the) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 705
 },
 {
  "taggedQuestion": "Which currency can I use both in Kerguelen islands and <e0>?",
  "entityMap": {
   "<e0>": "French southern and antarctic lands"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which currency",
    "originStr": "which currency"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "can i use both in kerguelen islands and french southern and antarctic lands",
    "originStr": "can i use both in kerguelen islands and french southern and antarctic lands"
   }
  ],
  "question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN currency)) (SQ (MD can) (NP (PRP I)) (VP (VB use) (PP (CC both) (IN in) (NP (NP (NNP Kerguelen) (NNS islands)) (CC and) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 706
 },
 {
  "taggedQuestion": "Who is the founder of the trade union which <e1> of Iron and Steel Workers?",
  "entityMap": {
   "<e1>": "affiliates Amalgamated Association",
   "<e0>": "Iron Steel Workers"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the founder of #entity1",
    "originStr": "who is the founder of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the trade union which affiliates amalgamated association of iron and steel workers",
    "originStr": "the trade union which affiliates amalgamated association of iron and steel workers"
   }
  ],
  "question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TradeUnion>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN founder)) (PP (IN of) (NP (NP (NP (DT the) (NN trade) (NN union)) (SBAR (WHNP (WDT which)) (FRAG (NP (ADD <e1>))))) (PP (IN of) (NP (NML (NNP Iron) (CC and) (NNP Steel)) (NNPS Workers))))))) (. ?)))",
  "entityNum": 2,
  "id": 707
 },
 {
  "taggedQuestion": "Which leader of <e0> was the appinter of ohn Drayton ?",
  "entityMap": {
   "<e0>": "United States House of Representatives"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which leader of united states house of representatives",
    "originStr": "which leader of united states house of representatives"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was the appointer of ohn drayton",
    "originStr": "was the appointer of ohn drayton"
   }
  ],
  "question": "Which leader of United States House of Representatives was the appointer of ohn Drayton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN leader)) (PP (IN of) (NP (ADD <e0>)))) (SQ (VBD was) (NP (NP (DT the) (NN appinter)) (PP (IN of) (NP (NNP ohn) (NNP Drayton))))) (. ?)))",
  "entityNum": 1,
  "id": 708
 },
 {
  "taggedQuestion": "Is fox belong to the phylum of Chordate?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is fox belong to the phylum of Chordate",
    "originStr": "Is fox belong to the phylum of Chordate"
   }
  ],
  "question": "Is fox belong to the phylum of Chordate",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Is) (S (NP (NN fox)) (VP (VB belong) (PP (IN to) (NP (NP (DT the) (NN phylum)) (PP (IN of) (NP (NN Chordate)))))))) (. ?)))",
  "entityNum": 1,
  "id": 709
 },
 {
  "taggedQuestion": "Which researchers received fellowship from Royal Society?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which researchers",
    "originStr": "which researchers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "received fellowship from royal society",
    "originStr": "received fellowship from royal society"
   }
  ],
  "question": "Which researchers received fellowship from Royal Society",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS researchers)) (SQ (VP (VBD received) (NP (NN fellowship)) (PP (IN from) (NP (NNP Royal) (NNP Society))))) (. ?)))",
  "entityNum": 1,
  "id": 710
 },
 {
  "taggedQuestion": "Which president of United States had vice president as John Adams?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which president of united states",
    "originStr": "which president of united states"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "had vice president as john adams",
    "originStr": "had vice president as john adams"
   }
  ],
  "question": "Which president of United States had vice president as John Adams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN president)) (PP (IN of) (NP (NNP United) (NNP States)))) (SQ (VP (VBD had) (NP (NP (NN vice) (NN president)) (PP (IN as) (NP (NNP John) (NNP Adams)))))) (. ?)))",
  "entityNum": 1,
  "id": 711
 },
 {
  "taggedQuestion": "Where was <e0> buried ?",
  "entityMap": {
   "<e0>": "James H. Fields"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was James H. Fields buried",
    "originStr": "Where was James H. Fields buried"
   }
  ],
  "question": "Where was James H. Fields buried",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADD <e0>)) (VP (VBN buried)))) (. ?)))",
  "entityNum": 1,
  "id": 712
 },
 {
  "taggedQuestion": "Is Henry Knox a commander of <e0>?",
  "entityMap": {
   "<e0>": "Continental Artillery Regiment"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Henry Knox a commander of Continental Artillery Regiment",
    "originStr": "Is Henry Knox a commander of Continental Artillery Regiment"
   }
  ],
  "question": "Is Henry Knox a commander of Continental Artillery Regiment",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Henry) (NNP Knox)) (NP (NP (DT a) (NN commander)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 713
 },
 {
  "taggedQuestion": "What is the commander of <e0> ?",
  "entityMap": {
   "<e0>": "Battle of Brownstown"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the commander of Battle of Brownstown",
    "originStr": "What is the commander of Battle of Brownstown"
   }
  ],
  "question": "What is the commander of Battle of Brownstown",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN commander)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 714
 },
 {
  "taggedQuestion": "Is Baker<e0> in the coffee industry?",
  "entityMap": {
   "<e0>": "'s Dozen Donuts"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Baker's Dozen Donuts in the coffee industry",
    "originStr": "Is Baker's Dozen Donuts in the coffee industry"
   }
  ],
  "question": "Is Baker's Dozen Donuts in the coffee industry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Baker)) (NP (NP (ADD <e0>)) (PP (IN in) (NP (DT the) (NN coffee) (NN industry)))) (. ?)))",
  "entityNum": 1,
  "id": 715
 },
 {
  "taggedQuestion": "What is Jon Speelman famous for?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what #entity1 famous for",
    "originStr": "what #entity1 famous for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is jon speelman",
    "originStr": "is jon speelman"
   }
  ],
  "question": "What is Jon Speelman famous for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NNP Jon) (NNP Speelman)) (ADJP (JJ famous) (PP (IN for)))) (. ?)))",
  "entityNum": 2,
  "id": 716
 },
 {
  "taggedQuestion": "Who is the fictional character whose family member is Padme Amidala?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the fictional character",
    "originStr": "who is the fictional character"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose family member is padme amidala",
    "originStr": "whose family member is padme amidala"
   }
  ],
  "question": "Who is the fictional character whose family member is Padme Amidala",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ fictional) (NN character)) (SBAR (WHNP (WP$ whose) (NN family) (NN member)) (S (VP (VBZ is) (NP (NNP Padme) (NNP Amidala))))))) (. ?)))",
  "entityNum": 1,
  "id": 717
 },
 {
  "taggedQuestion": "What company is the one which wrote the <e0> and PlayN?",
  "entityMap": {
   "<e0>": "google web toolkit"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what company",
    "originStr": "what company"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the one which wrote the google web toolkit and playn",
    "originStr": "is the one which wrote the google web toolkit and playn"
   }
  ],
  "question": "What company is the one which wrote the google web toolkit and PlayN",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN company)) (SQ (VBZ is) (NP (NP (DT the) (CD one)) (SBAR (WHNP (WDT which)) (S (VP (VBD wrote) (NP (DT the) (NN <e0>) (CC and) (NN PlayN))))))) (. ?)))",
  "entityNum": 1,
  "id": 718
 },
 {
  "taggedQuestion": "How many different songwriters have had their songs recorded in London?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many different songwriters have had their songs #entity1",
    "originStr": "how many different songwriters have had their songs #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "recorded in london",
    "originStr": "recorded in london"
   }
  ],
  "question": "How many different songwriters have had their songs recorded in London",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ different) (NNS songwriters)) (VP (VBP have) (VP (VBN had) (NP (NP (PRP$ their) (NNS songs)) (VP (VBN recorded) (PP (IN in) (NP (NNP London)))))))) (. ?)))",
  "entityNum": 2,
  "id": 719
 },
 {
  "taggedQuestion": "Which are the  automobile platform whose one of the automobile platform is Dodge ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which are the automobile platform #entity1",
    "originStr": "which are the automobile platform #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose one of the automobile platform is dodge",
    "originStr": "whose one of the automobile platform is dodge"
   }
  ],
  "question": "Which are the automobile platform whose one of the automobile platform is Dodge",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (VP (VBP are) (NP (DT the) (NN automobile) (NN platform))))) (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN automobile) (NN platform)))) (SQ (VBZ is) (NP (NNP Dodge))) (. ?)))",
  "entityNum": 2,
  "id": 720
 },
 {
  "taggedQuestion": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the total number of other combatant of #entity1",
    "originStr": "what is the total number of other combatant of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the military conflicts whose combatant is choctaw",
    "originStr": "the military conflicts whose combatant is choctaw"
   }
  ],
  "question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> . ?x <http://dbpedia.org/property/combatant> ?uri }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (JJ other) (NN combatant)) (PP (IN of) (NP (NP (DT the) (JJ military) (NNS conflicts)) (SBAR (WHNP (WP$ whose) (NML (NN combatant))) (S (VP (VBZ is) (NP (NNP Choctaw))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 721
 },
 {
  "taggedQuestion": "List some pupils of <e0> winning scientists?",
  "entityMap": {
   "<e0>": "National Science Medal"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list some pupils of #entity1",
    "originStr": "list some pupils of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "national science medal winning scientists",
    "originStr": "national science medal winning scientists"
   }
  ],
  "question": "List some pupils of National Science Medal winning scientists",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (NP (DT some) (NNS pupils)) (PP (IN of) (NP (NN <e0>)))) (VP (VBG winning) (NP (NNS scientists))))) (. ?)))",
  "entityNum": 2,
  "id": 722
 },
 {
  "taggedQuestion": "Relatives of Moses used to follow which religions?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 used to follow which religions",
    "originStr": "#entity1 used to follow which religions"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "relatives of moses",
    "originStr": "relatives of moses"
   }
  ],
  "question": "Relatives of Moses used to follow which religions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/veneratedIn> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Relatives)) (PP (IN of) (NP (NNP Moses)))) (VP (VBD used) (S (VP (TO to) (VP (VB follow) (SBAR (WHNP (WDT which))) (NP (NNS religions)))))) (. ?)))",
  "entityNum": 2,
  "id": 723
 },
 {
  "taggedQuestion": "Where was <e0>, Nina first aired ?",
  "entityMap": {
   "<e0>": "Ne daj se"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Ne daj se, Nina first aired",
    "originStr": "Where was Ne daj se, Nina first aired"
   }
  ],
  "question": "Where was Ne daj se, Nina first aired",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (ADD <e0>)) (, ,) (NP (NNP Nina))) (VP (ADVP (RB first)) (VBN aired))) (. ?)))",
  "entityNum": 1,
  "id": 724
 },
 {
  "taggedQuestion": "Where did the <e0> take place?",
  "entityMap": {
   "<e0>": "2015 MLS All-Star Game"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where did the 2015 MLS All-Star Game take place",
    "originStr": "Where did the 2015 MLS All-Star Game take place"
   }
  ],
  "question": "Where did the 2015 MLS All-Star Game take place",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN <e0>)) (VP (VB take) (NP (NN place)))) (. ?)))",
  "entityNum": 1,
  "id": 725
 },
 {
  "taggedQuestion": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Nikolai Morozov the former coach of Stanislav Morozov",
    "originStr": "Is Nikolai Morozov the former coach of Stanislav Morozov"
   }
  ],
  "question": "Is Nikolai Morozov the former coach of Stanislav Morozov",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Nikolai) (NNP Morozov)) (NP (NP (DT the) (JJ former) (NN coach)) (PP (IN of) (NP (NNP Stanislav) (NNP Morozov)))) (. ?)))",
  "entityNum": 1,
  "id": 726
 },
 {
  "taggedQuestion": "Did Alexandre Tichonov study at the Moscow university?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Alexandre Tichonov study at the Moscow university",
    "originStr": "Did Alexandre Tichonov study at the Moscow university"
   }
  ],
  "question": "Did Alexandre Tichonov study at the Moscow university",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Moscow> }",
  "syntaxTreeText": "(ROOT (FRAG (VP (VBD Did) (S (NP (NNP Alexandre) (NNP Tichonov))) (NP (NP (NN study)) (PP (IN at) (NP (DT the) (NNP Moscow) (NN university))))) (. ?)))",
  "entityNum": 1,
  "id": 727
 },
 {
  "taggedQuestion": "What is the name of the homeground of football team Panionios G.S.S.?",
  "entityMap": {
   "<e0>": "Panionios G.S. S."
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the name of #entity1",
    "originStr": "what is the name of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the homeground of football team panionios g.s.s",
    "originStr": "the homeground of football team panionios g.s.s"
   }
  ],
  "question": "What is the name of the homeground of football team Panionios G.S.S",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN homeground)) (PP (IN of) (NP (NML (NN football) (NN team)) (NNP Panionios) (NNP G.S.S.))))))) (. ?)))",
  "entityNum": 2,
  "id": 728
 },
 {
  "taggedQuestion": "List presidents of the school whose one of the president is Charles. Prince of Wales ?",
  "entityMap": {
   "<e0>": "Charles . Prince"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list presidents of #entity1",
    "originStr": "list presidents of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the school whose one of the president is charles. prince of wales",
    "originStr": "the school whose one of the president is charles. prince of wales"
   }
  ],
  "question": "List presidents of the school whose one of the president is Charles. Prince of Wales",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (NP (NP (NN List) (NNS presidents)) (PP (IN of) (NP (NP (DT the) (NN school)) (SBAR (WHNP (WHNP (WP$ whose) (NN one)) (PP (IN of) (NP (DT the) (NN president)))) (S (VP (VBZ is) (NP (NNP Charles))))))) (. .)))(ROOT (NP (NP (NNP Prince)) (PP (IN of) (NP (NNP Wales))) (. ?)))",
  "entityNum": 2,
  "id": 729
 },
 {
  "taggedQuestion": "Does Timothy Morton study Buddhism?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Timothy Morton study Buddhism",
    "originStr": "Does Timothy Morton study Buddhism"
   }
  ],
  "question": "Does Timothy Morton study Buddhism",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Timothy) (NNP Morton) (NN study) (NNP Buddhism)) (. ?)))",
  "entityNum": 1,
  "id": 730
 },
 {
  "taggedQuestion": "Brian Moriarty designed video games written by whom?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 written by whom",
    "originStr": "#entity1 written by whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "brian moriarty designed video games",
    "originStr": "brian moriarty designed video games"
   }
  ],
  "question": "Brian Moriarty designed video games written by whom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Brian) (NNP Moriarty)) (VP (VBD designed) (NP (NP (NN video) (NNS games)) (VP (VBN written) (PP (IN by) (NP (WP whom)))))) (. ?)))",
  "entityNum": 2,
  "id": 731
 },
 {
  "taggedQuestion": "What are some movies whose distributors are led by Kevin Tsujihara?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some movies whose distributors #entity1",
    "originStr": "what are some movies whose distributors #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are led by kevin tsujihara",
    "originStr": "are led by kevin tsujihara"
   }
  ],
  "question": "What are some movies whose distributors are led by Kevin Tsujihara",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NNS distributors))) (S (VP (VBP are) (VP (VBN led) (PP (IN by) (NP (NNP Kevin) (NNP Tsujihara))))))))) (. ?)))",
  "entityNum": 2,
  "id": 732
 },
 {
  "taggedQuestion": "Name the common associate band of Blayse and Teddy Riley .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common associate band of blayse and teddy",
    "originStr": "name the common associate band of blayse and teddy"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "riley",
    "originStr": "riley"
   }
  ],
  "question": "Name the common associate band of Blayse and Teddy Riley",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN associate) (NN band)) (PP (IN of) (NP (NP (NNP Blayse)) (CC and) (NP (NNP Teddy) (NNP Riley)))))) (. .)))",
  "entityNum": 1,
  "id": 733
 },
 {
  "taggedQuestion": "What did <e0>'s father die from?",
  "entityMap": {
   "<e0>": "Steven T Mason"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what did #entity1 die from",
    "originStr": "what did #entity1 die from"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "steven t mason's father",
    "originStr": "steven t mason's father"
   }
  ],
  "question": "What did Steven T Mason's father die from",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NP (ADD <e0>)) (POS 's)) (NN father)) (VP (VB die) (PP (IN from)))) (. ?)))",
  "entityNum": 2,
  "id": 734
 },
 {
  "taggedQuestion": "Whose military units are VMF-218 and VMF-155?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has military units are vmf-218 and",
    "originStr": "has military units are vmf-218 and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose military units are vmf-218 and vmf-155",
    "originStr": "whose military units are vmf-218 and vmf-155"
   }
  ],
  "question": "Whose military units are VMF-218 and VMF-155",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WP$ Whose) (NML (JJ military) (NNS units))) (S (VP (VBP are) (NP (NP (NNP VMF) (HYPH -) (CD 218)) (CC and) (NP (NN VMF) (HYPH -) (CD 155))))) (. ?)))",
  "entityNum": 1,
  "id": 735
 },
 {
  "taggedQuestion": "What automobile engine's successor is BMW M40?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what automobile engine's",
    "originStr": "what automobile engine's"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "successor is bmw m40",
    "originStr": "successor is bmw m40"
   }
  ],
  "question": "What automobile engine's successor is BMW M40",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/BMW_M40>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AutomobileEngine>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN automobile)) (SQ (NP (NP (NN engine) (POS 's)) (NN successor)) (VP (VBZ is) (NP (NNP BMW) (NN M40)))) (. ?)))",
  "entityNum": 1,
  "id": 736
 },
 {
  "taggedQuestion": "Name the company which produces both  <e0>/<e1> .",
  "entityMap": {
   "<e1>": "F Hornet nad CH-46 Chinook",
   "<e0>": "Boeing F/A-18 E"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the company",
    "originStr": "name the company"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which produces both boeing f/a-18 e/f hornet and ch-46 chinook",
    "originStr": "which produces both boeing f/a-18 e/f hornet and ch-46 chinook"
   }
  ],
  "question": "Name the company which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT which)) (S (VP (VBZ produces) (NP (DT both) (NN <e0>) (HYPH /) (NN <e1>))))))) (. .)))",
  "entityNum": 1,
  "id": 737
 },
 {
  "taggedQuestion": "What is the district of <e0> ?",
  "entityMap": {
   "<e0>": "Methodist Central Hall Westminster"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the district of Methodist Central Hall Westminster",
    "originStr": "What is the district of Methodist Central Hall Westminster"
   }
  ],
  "question": "What is the district of Methodist Central Hall Westminster",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Methodist_Central_Hall_Westminster> <http://dbpedia.org/ontology/district> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN district)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 738
 },
 {
  "taggedQuestion": "Who develops the computation platform of <e0> ?",
  "entityMap": {
   "<e0>": "Microsoft Expression Encoder"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who develops #entity1",
    "originStr": "who develops #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the computation platform of microsoft expression encoder",
    "originStr": "the computation platform of microsoft expression encoder"
   }
  ],
  "question": "Who develops the computation platform of Microsoft Expression Encoder",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ develops) (NP (NP (DT the) (JJ computation) (NN platform)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 739
 },
 {
  "taggedQuestion": "What is the official language of Ladonia, which is the target area of Probus Journal?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the official language of ladonia",
    "originStr": "what is the official language of ladonia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is the target area of probus journal",
    "originStr": "which is the target area of probus journal"
   }
  ],
  "question": "What is the official language of Ladonia, which is the target area of Probus Journal",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NP (NNP Ladonia)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (DT the) (NN target) (NN area)) (PP (IN of) (NP (NNP Probus) (NNP Journal))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 740
 },
 {
  "taggedQuestion": "Where did the conflict take place where <e0> I'Isle was a commander?",
  "entityMap": {
   "<e0>": "Louis Briere de"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did the conflict take place #entity1",
    "originStr": "where did the conflict take place #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "where louis briere de i'isle was a commander",
    "originStr": "where louis briere de i'isle was a commander"
   }
  ],
  "question": "Where did the conflict take place where Louis Briere de I'Isle was a commander",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN conflict)) (VP (VB take) (NP (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (NP (ADD <e0>)) (NP (NP (PRP I)) (`` ') (NP (NNP Isle)))) (VP (VBD was) (NP (DT a) (NN commander))))))) (. ?)))",
  "entityNum": 2,
  "id": 741
 },
 {
  "taggedQuestion": "Which team was the person drafted who has studied at the Worcester college, Oxford?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which team was the person drafted #entity1",
    "originStr": "in which team was the person drafted #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who has studied at the worcester college, oxford",
    "originStr": "who has studied at the worcester college, oxford"
   }
  ],
  "question": "In which team was the person drafted who has studied at the Worcester college, Oxford",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD was) (NP (DT the) (NN person)) (VP (VBN drafted) (SBAR (WHNP (WP who)) (S (VP (VBZ has) (VP (VBN studied) (PP (IN at) (NP (NP (DT the) (NNP Worcester) (NN college)) (, ,) (NP (NNP Oxford)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 742
 },
 {
  "taggedQuestion": "How many people hold important positions alongwith Donna Shalala?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many people",
    "originStr": "how many people"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "hold important positions along with donna shalala",
    "originStr": "hold important positions along with donna shalala"
   }
  ],
  "question": "How many people hold important positions along with Donna Shalala",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP hold) (NP (JJ important) (NNS positions)) (S (ADJP (JJ alongwith) (NP (NNP Donna) (NNP Shalala)))))) (. ?)))",
  "entityNum": 1,
  "id": 743
 },
 {
  "taggedQuestion": "What other things are provided by the producer of Office 365?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what other things are provided by #entity1",
    "originStr": "what other things are provided by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the producer of office 365",
    "originStr": "the producer of office 365"
   }
  ],
  "question": "What other things are provided by the producer of Office 365",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Office_365> . ?x <http://dbpedia.org/property/services> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NNS things)) (SQ (VBP are) (VP (VBN provided) (PP (IN by) (NP (NP (DT the) (NN producer)) (PP (IN of) (NP (NNP Office) (CD 365))))))) (. ?)))",
  "entityNum": 2,
  "id": 744
 },
 {
  "taggedQuestion": "Who owns the company that made the Edsel Villager?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who owns #entity1",
    "originStr": "who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company that made the edsel villager",
    "originStr": "the company that made the edsel villager"
   }
  ],
  "question": "Who owns the company that made the Edsel Villager",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WDT that)) (S (VP (VBD made) (NP (DT the) (NNP Edsel) (NN Villager)))))))) (. ?)))",
  "entityNum": 2,
  "id": 745
 },
 {
  "taggedQuestion": "Which collaborator of <e0> wrote Same Song ?",
  "entityMap": {
   "<e0>": "Nice and Smooth"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which collaborator of nice and smooth",
    "originStr": "which collaborator of nice and smooth"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "wrote same song",
    "originStr": "wrote same song"
   }
  ],
  "question": "Which collaborator of Nice and Smooth wrote Same Song",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nice_&_Smooth> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN collaborator) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (VBD wrote) (NP (JJ Same) (NN Song)))) (. ?)))",
  "entityNum": 1,
  "id": 746
 },
 {
  "taggedQuestion": "Who fought in the battle at Tupelo Mississippi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who fought in #entity1",
    "originStr": "who fought in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the battle at tupelo mississippi",
    "originStr": "the battle at tupelo mississippi"
   }
  ],
  "question": "Who fought in the battle at Tupelo Mississippi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Tupelo,_Mississippi> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD fought) (PP (IN in) (NP (NP (DT the) (NN battle)) (PP (IN at) (NP (NNP Tupelo) (NNP Mississippi))))))) (. ?)))",
  "entityNum": 2,
  "id": 747
 },
 {
  "taggedQuestion": "List the movies whose cast member were born in Scotland.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the movies whose cast member #entity1",
    "originStr": "list the movies whose cast member #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "were born in scotland",
    "originStr": "were born in scotland"
   }
  ],
  "question": "List the movies whose cast member were born in Scotland",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> . ?uri <http://dbpedia.org/ontology/starring> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NNS movies)) (SBAR (WHNP (WP$ whose) (NML (NN cast)) (NN member)) (S (VP (VBD were) (VP (VBN born) (PP (IN in) (NP (NNP Scotland))))))))) (. .)))",
  "entityNum": 2,
  "id": 748
 },
 {
  "taggedQuestion": "List the other nicknames of city which has one of the nickname as <e0> ?",
  "entityMap": {
   "<e0>": "City of Angels"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the other nicknames of #entity1",
    "originStr": "list the other nicknames of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "city which has one of the nickname as city of angels",
    "originStr": "city which has one of the nickname as city of angels"
   }
  ],
  "question": "List the other nicknames of city which has one of the nickname as City of Angels",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/City_of_Angels> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (JJ other) (NNS nicknames)) (PP (IN of) (NP (NP (NN city)) (SBAR (WHNP (WDT which)) (S (VP (VBZ has) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NN nickname)) (PP (IN as) (NP (NN <e0>))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 749
 },
 {
  "taggedQuestion": "Count the writers whose work has been played in NY.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the writers whose work #entity1",
    "originStr": "count the writers whose work #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "has been played in ny",
    "originStr": "has been played in ny"
   }
  ],
  "question": "Count the writers whose work has been played in NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS writers)) (SBAR (WHNP (WP$ whose) (NN work)) (S (VP (VBZ has) (VP (VBN been) (VP (VBN played) (PP (IN in) (NP (NNP NY)))))))))) (. .)))",
  "entityNum": 2,
  "id": 750
 },
 {
  "taggedQuestion": "Where did the graduates of Memphis, Tenessee continue their education?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did #entity1 continue their education",
    "originStr": "where did #entity1 continue their education"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the graduates of memphis, tennessee",
    "originStr": "the graduates of memphis, tennessee"
   }
  ],
  "question": "Where did the graduates of Memphis, Tennessee continue their education",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Memphis,_Tennessee> . ?x <http://dbpedia.org/ontology/school> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (SBAR (WHADVP (WRB Where)) (S (VP (VBD did) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NNP Memphis))))))) (, ,) (NP (NNP Tenessee)) (VP (VBP continue) (NP (PRP$ their) (NN education))) (. ?)))",
  "entityNum": 2,
  "id": 751
 },
 {
  "taggedQuestion": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what subsequent work of moondog matinee",
    "originStr": "what subsequent work of moondog matinee"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has the composer of motorpsycho nitemare",
    "originStr": "has the composer of motorpsycho nitemare"
   }
  ],
  "question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NP (JJ subsequent) (NN work)) (PP (IN of) (NP (NNP Moondog) (NNP Matinee))))) (SQ (VP (VBZ has) (NP (NP (DT the) (NN composer)) (PP (IN of) (NP (NNP Motorpsycho) (NNP Nitemare)))))) (. ?)))",
  "entityNum": 1,
  "id": 752
 },
 {
  "taggedQuestion": "What was the language of the single which came before To Know Him Is to Love Him?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what was the language of #entity1",
    "originStr": "what was the language of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the single which came before to know him is to love him",
    "originStr": "the single which came before to know him is to love him"
   }
  ],
  "question": "What was the language of the single which came before To Know Him Is to Love Him",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/language> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN language)) (PP (IN of) (NP (NP (DT the) (JJ single)) (SBAR (WHNP (WDT which)) (S (VP (VBD came) (ADVP (RB before)) (S (VP (TO To) (VP (VB Know) (SBAR (S (NP (PRP Him)) (VP (VBZ Is) (S (VP (TO to) (VP (VB Love) (NP (PRP Him)))))))))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 753
 },
 {
  "taggedQuestion": "What are the <e0> whose company is owned by Viacom?",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the television shows whose company #entity1",
    "originStr": "what are the television shows whose company #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "is owned by viacom",
    "originStr": "is owned by viacom"
   }
  ],
  "question": "What are the television shows whose company is owned by Viacom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NN company)) (S (VP (VBZ is) (VP (VBN owned) (PP (IN by) (NP (NNP Viacom))))))))) (. ?)))",
  "entityNum": 2,
  "id": 754
 },
 {
  "taggedQuestion": "How many people used to play in the youthclub of FC Barcelona?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many people used to #entity1",
    "originStr": "how many people used to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "play in the youthclub of fc barcelona",
    "originStr": "play in the youthclub of fc barcelona"
   }
  ],
  "question": "How many people used to play in the youthclub of FC Barcelona",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBN used) (S (VP (TO to) (VP (VB play) (PP (IN in) (NP (NP (DT the) (NNP youthclub)) (PP (IN of) (NP (NNP FC) (NNP Barcelona)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 755
 },
 {
  "taggedQuestion": "Quebec born ice hockey players have stopped playing for which teams?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have stopped playing for which teams",
    "originStr": "#entity1 have stopped playing for which teams"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "quebec born ice hockey players",
    "originStr": "quebec born ice hockey players"
   }
  ],
  "question": "Quebec born ice hockey players have stopped playing for which teams",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNP Quebec)) (VP (VBN born) (NP (NML (NN ice) (NN hockey)) (NNS players)))) (VP (VBP have) (VP (VBN stopped) (S (VP (VBG playing) (WHPP (IN for) (WHNP (WDT which) (NNS teams))))))) (. ?)))",
  "entityNum": 2,
  "id": 756
 },
 {
  "taggedQuestion": "Who is the chancellor of Falmouth University ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the chancellor of Falmouth University",
    "originStr": "Who is the chancellor of Falmouth University"
   }
  ],
  "question": "Who is the chancellor of Falmouth University",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/property/chancellor> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN chancellor)) (PP (IN of) (NP (NNP Falmouth) (NNP University))))) (. ?)))",
  "entityNum": 1,
  "id": 757
 },
 {
  "taggedQuestion": "What things play on WBIG FM?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what kind of things play on WBIG FM",
    "originStr": "what kind of things play on WBIG FM"
   }
  ],
  "question": "what kind of things play on WBIG FM",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS things)) (SQ (VP (VBP play) (PP (IN on) (NP (NNP WBIG) (NNP FM))))) (. ?)))",
  "entityNum": 1,
  "id": 758
 },
 {
  "taggedQuestion": "Name the are where <e0> operate and has place of birth as <e1> .",
  "entityMap": {
   "<e1>": "Arthur A. Ross",
   "<e0>": "South side Elevated Railroad"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the are where south side elevated railroad operate",
    "originStr": "name the are where south side elevated railroad operate"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has place of birth as arthur a. ross",
    "originStr": "and has place of birth as arthur a. ross"
   }
  ],
  "question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the)) (VP (VBP are) (SBAR (WHADVP (WRB where)) (S (NP (ADD <e0>)) (VP (VP (VBP operate)) (CC and) (VP (VBZ has) (NP (NP (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN as) (NP (ADD <e1>))))))))))))) (. .)))",
  "entityNum": 1,
  "id": 759
 },
 {
  "taggedQuestion": "Which fields are the graduates of Worcester College, Oxford working?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which fields are #entity1 working",
    "originStr": "in which fields are #entity1 working"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the graduates of worcester college, oxford",
    "originStr": "the graduates of worcester college, oxford"
   }
  ],
  "question": "In which fields are the graduates of Worcester College, Oxford working",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
  "syntaxTreeText": "(ROOT (FRAG (SBAR (WHNP (WDT Which)) (S (NP (NNS fields)) (VP (VBP are) (NP (NP (DT the) (NNS graduates)) (PP (IN of) (NP (NNP Worcester) (NNP College))))))) (, ,) (NP (NNP Oxford)) (VP (VBG working)) (. ?)))",
  "entityNum": 2,
  "id": 760
 },
 {
  "taggedQuestion": "List the places where the relatives of Mark Donaldson died ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the places where #entity1 died",
    "originStr": "list the places where #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of mark donaldson",
    "originStr": "the relatives of mark donaldson"
   }
  ],
  "question": "List the places where the relatives of Mark Donaldson died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (DT the) (NNS places)) (SBAR (WHADVP (WRB where)) (S (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Mark) (NNP Donaldson)))) (VP (VBD died))))) (. ?)))",
  "entityNum": 2,
  "id": 761
 },
 {
  "taggedQuestion": "What famous politician died in the Petersen House?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what famous politician",
    "originStr": "what famous politician"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "died in the petersen house",
    "originStr": "died in the petersen house"
   }
  ],
  "question": "What famous politician died in the Petersen House",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Petersen_House>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (JJ famous) (NN politician)) (SQ (VP (VBD died) (PP (IN in) (NP (DT the) (NNP Petersen) (NNP House))))) (. ?)))",
  "entityNum": 1,
  "id": 762
 },
 {
  "taggedQuestion": "What are some artists on the show whose opening theme is <e0>?",
  "entityMap": {
   "<e0>": "Send It On"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some artists on #entity1 is send it on",
    "originStr": "what are some artists on #entity1 is send it on"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the show whose opening theme",
    "originStr": "the show whose opening theme"
   }
  ],
  "question": "What are some artists on the show whose opening theme is Send It On",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS artists)) (PP (IN on) (NP (NP (DT the) (NN show)) (SBAR (WHNP (WP$ whose) (NML (NN opening) (NN theme))) (S (VP (VBZ is) (NP (ADD <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 763
 },
 {
  "taggedQuestion": "What is the citizenship of Saima Chowdhury?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the citizenship of Saima Chowdhury",
    "originStr": "What is the citizenship of Saima Chowdhury"
   }
  ],
  "question": "What is the citizenship of Saima Chowdhury",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN citizenship)) (PP (IN of) (NP (NNP Saima) (NNP Chowdhury))))) (. ?)))",
  "entityNum": 1,
  "id": 764
 },
 {
  "taggedQuestion": "What are the musical performances whose label is Celluloid Records?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what are the musical performances",
    "originStr": "what are the musical performances"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose label is celluloid records",
    "originStr": "whose label is celluloid records"
   }
  ],
  "question": "What are the musical performances whose label is Celluloid Records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ musical) (NNS performances)) (SBAR (WHNP (WP$ whose) (NN label)) (S (VP (VBZ is) (NP (JJ Celluloid) (NNPS Records))))))) (. ?)))",
  "entityNum": 1,
  "id": 765
 },
 {
  "taggedQuestion": "What is the craft of the Ralph Flanders which is also the profession of  Claiborne Pell ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the craft of the ralph flanders",
    "originStr": "what is the craft of the ralph flanders"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the profession of claiborne pell",
    "originStr": "which is also the profession of claiborne pell"
   }
  ],
  "question": "What is the craft of the Ralph Flanders which is also the profession of Claiborne Pell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN craft)) (PP (IN of) (NP (NP (DT the) (NNP Ralph) (NNP Flanders)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN profession)) (PP (IN of) (NP (NNP Claiborne) (NNP Pell))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 766
 },
 {
  "taggedQuestion": "How many people have fought wars where <e0> was a commander?",
  "entityMap": {
   "<e0>": "Arthur St. Clair"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many people have fought #entity1",
    "originStr": "how many people have fought #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "wars where arthur st. clair was a commander",
    "originStr": "wars where arthur st. clair was a commander"
   }
  ],
  "question": "How many people have fought wars where Arthur St. Clair was a commander",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN fought) (NP (NNS wars)) (SBAR (WHADVP (WRB where)) (S (NP (ADD <e0>)) (VP (VBD was) (NP (DT a) (NN commander)))))))) (. ?)))",
  "entityNum": 2,
  "id": 767
 },
 {
  "taggedQuestion": "Does Chicago own the Monroe Station?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Chicago own the Monroe Station",
    "originStr": "Does Chicago own the Monroe Station"
   }
  ],
  "question": "Does Chicago own the Monroe Station",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Chicago)) (VP (VB own) (NP (DT the) (NNP Monroe) (NNP Station))) (. ?)))",
  "entityNum": 1,
  "id": 768
 },
 {
  "taggedQuestion": "Which team has had both Martin prochzka and garry unger as its players ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which team",
    "originStr": "which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "has had both martin prochzka and garry unger as its players",
    "originStr": "has had both martin prochzka and garry unger as its players"
   }
  ],
  "question": "Which team has had both Martin prochzka and garry unger as its players",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBZ has) (VP (VBN had) (NP (NP (DT both) (NNP Martin) (NML (NN prochzka) (CC and) (NN garry)) (NN unger)) (PP (IN as) (NP (PRP$ its) (NNS players))))))) (. ?)))",
  "entityNum": 1,
  "id": 769
 },
 {
  "taggedQuestion": "What are the awards received by spouse of Ellen Lundstrom?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the awards received by #entity1",
    "originStr": "what are the awards received by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "spouse of ellen lundstrom",
    "originStr": "spouse of ellen lundstrom"
   }
  ],
  "question": "What are the awards received by spouse of Ellen Lundstrom",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ellen_Lundstr\u00f6m> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS awards)) (VP (VBN received) (PP (IN by) (NP (NP (NN spouse)) (PP (IN of) (NP (NNP Ellen) (NNP Lundstrom))))))) (. ?)))",
  "entityNum": 2,
  "id": 770
 },
 {
  "taggedQuestion": "Who all have succeeded the kings buried in Rome?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who all have succeeded #entity1",
    "originStr": "who all have succeeded #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the kings buried in rome",
    "originStr": "the kings buried in rome"
   }
  ],
  "question": "Who all have succeeded the kings buried in Rome",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (NP (DT all)) (VP (VBP have) (VP (VBN succeeded) (NP (NP (DT the) (NNS kings)) (VP (VBN buried) (PP (IN in) (NP (NNP Rome)))))))) (. ?)))",
  "entityNum": 2,
  "id": 771
 },
 {
  "taggedQuestion": "Which states do the rivers flow which join in the republican river from the left?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "through which states do the rivers flow #entity1",
    "originStr": "through which states do the rivers flow #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which join in the republican river from the left",
    "originStr": "which join in the republican river from the left"
   }
  ],
  "question": "Through which states do the rivers flow which join in the republican river from the left",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republican_River> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBP do) (NP (NP (DT the) (NNS rivers) (NN flow)) (SBAR (WHNP (WDT which)) (S (VP (VBP join) (PP (IN in) (NP (NP (DT the) (JJ republican) (NN river)) (PP (IN from) (NP (NP (DT the)) (VP (VBN left))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 772
 },
 {
  "taggedQuestion": "Give me the home town of all musical artists who uses Guitar as instrument .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me the home town of #entity1",
    "originStr": "give me the home town of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "all musical artists who uses guitar as instrument",
    "originStr": "all musical artists who uses guitar as instrument"
   }
  ],
  "question": "Give me the home town of all musical artists who uses Guitar as instrument",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN home) (NN town)) (PP (IN of) (NP (NP (DT all) (JJ musical) (NNS artists)) (SBAR (WHNP (WP who)) (S (VP (VBZ uses) (NP (NP (NNP Guitar)) (PP (IN as) (NP (NN instrument))))))))))) (. .)))",
  "entityNum": 2,
  "id": 773
 },
 {
  "taggedQuestion": "How many religions are followed amongst the people who've worked in the Korean army?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many religions are followed amongst #entity1",
    "originStr": "how many religions are followed amongst #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the people who've worked in the korean army",
    "originStr": "the people who've worked in the korean army"
   }
  ],
  "question": "How many religions are followed amongst the people who've worked in the Korean army",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Republic_of_Korea_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN amongst) (NP (NP (DT the) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP 've) (VP (VBN worked) (PP (IN in) (NP (DT the) (JJ Korean) (NN army))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 774
 },
 {
  "taggedQuestion": "Was andy warhol a part of <e0>?",
  "entityMap": {
   "<e0>": "Pop Art movement"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was andy warhol a part of Pop Art movement",
    "originStr": "Was andy warhol a part of Pop Art movement"
   }
  ],
  "question": "Was andy warhol a part of Pop Art movement",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (JJ andy)) (PP (IN warhol) (NP (NP (DT a) (NN part)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 775
 },
 {
  "taggedQuestion": "Count the musical work which were sold by Sony Music.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "count the number of musical work",
    "originStr": "count the number of musical work"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which were sold by sony music",
    "originStr": "which were sold by sony music"
   }
  ],
  "question": "Count the number of musical work which were sold by Sony Music",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (JJ musical) (NN work)) (SBAR (WHNP (WDT which)) (S (VP (VBD were) (VP (VBN sold) (PP (IN by) (NP (NNP Sony) (NNP Music))))))))) (. .)))",
  "entityNum": 1,
  "id": 776
 },
 {
  "taggedQuestion": "Who is the person whose home town is Fairmount, Indiana?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the person",
    "originStr": "who is the person"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose home town is fairmount, indiana",
    "originStr": "whose home town is fairmount, indiana"
   }
  ],
  "question": "Who is the person whose home town is Fairmount, Indiana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN person)) (SBAR (WHNP (WP$ whose) (NN home) (NN town)) (S (VP (VBZ is) (NP (NNP Fairmount) (, ,) (NNP Indiana))))))) (. ?)))",
  "entityNum": 1,
  "id": 777
 },
 {
  "taggedQuestion": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movies directed by stanley kubrick",
    "originStr": "name the movies directed by stanley kubrick"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and edited by anthony harvey",
    "originStr": "and edited by anthony harvey"
   }
  ],
  "question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (DT the) (NNS movies)) (VP (VP (VBN directed) (PP (IN by) (NP (NNP Stanley) (NNP Kubrick)))) (CC and) (VP (VBN edited) (PP (IN by) (NP (NNP Anthony) (NNP Harvey))))))) (. .)))",
  "entityNum": 1,
  "id": 778
 },
 {
  "taggedQuestion": "List all binomial authority of the insects whose one of the  binomial authority is douard Mntries?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all binomial authority of #entity1",
    "originStr": "list all binomial authority of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the insects whose one of the binomial authority is douard mntries",
    "originStr": "the insects whose one of the binomial authority is douard mntries"
   }
  ],
  "question": "List all binomial authority of the insects whose one of the binomial authority is douard Mntries",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (DT all) (JJ binomial) (NN authority)) (PP (IN of) (NP (DT the) (NNS insects)))) (SBAR (WHNP (WP$ whose) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ binomial) (NN authority))))) (S (VP (VBZ is) (NP (JJ douard) (NNPS Mntries)))))) (. ?)))",
  "entityNum": 2,
  "id": 779
 },
 {
  "taggedQuestion": "Who is the military general buried in St Mary's Church, Battersea?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the military general",
    "originStr": "who is the military general"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "buried in st mary's church, battersea",
    "originStr": "buried in st mary's church, battersea"
   }
  ],
  "question": "Who is the military general buried in St Mary's Church, Battersea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (JJ general)) (VP (VBN buried) (PP (IN in) (NP (NP (NNP St) (NNP Mary) (POS 's)) (NNP Church) (, ,) (NNP Battersea)))))) (. ?)))",
  "entityNum": 1,
  "id": 780
 },
 {
  "taggedQuestion": "What is the military unit whose command structures are <e0> and <e1>?",
  "entityMap": {
   "<e1>": "United States Department of Defense",
   "<e0>": "United States Department of the Navy"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "What"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the military unit",
    "originStr": "what is the military unit"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose command structures are united states department of the navy and united states department of defense",
    "originStr": "whose command structures are united states department of the navy and united states department of defense"
   }
  ],
  "question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
  "syntaxTreeText": "(ROOT (FRAG (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ military) (NN unit)) (SBAR (WHNP (WP$ whose) (NN command) (NNS structures)) (S (VP (VBP are))))))) (NP (ADD <e0>) (CC and) (ADD <e1>)) (. ?)))",
  "entityNum": 1,
  "id": 781
 },
 {
  "taggedQuestion": "What are some other things developed by the company who made the <e0>?",
  "entityMap": {
   "<e0>": "remote desktop protocol"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are some other things developed by #entity1",
    "originStr": "what are some other things developed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the company who made the remote desktop protocol",
    "originStr": "the company who made the remote desktop protocol"
   }
  ],
  "question": "What are some other things developed by the company who made the remote desktop protocol",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Remote_Desktop_Protocol> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (JJ other) (NNS things)) (VP (VBN developed) (PP (IN by) (NP (NP (DT the) (NN company)) (SBAR (WHNP (WP who)) (S (VP (VBD made) (NP (DT the) (NN <e0>))))))))) (. ?)))",
  "entityNum": 2,
  "id": 782
 },
 {
  "taggedQuestion": "Where was Al-Muzaffar Umar buried ?",
  "entityMap": {
   "<e0>": "Al- Muzaffar Umar"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Al-Muzaffar Umar buried",
    "originStr": "Where was Al-Muzaffar Umar buried"
   }
  ],
  "question": "Where was Al-Muzaffar Umar buried",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Muzaffar_Umar> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Al) (HYPH -) (NNP Muzaffar) (NNP Umar)) (VP (VBN buried))) (. ?)))",
  "entityNum": 1,
  "id": 783
 },
 {
  "taggedQuestion": "List the guests of On Broadway ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the guests of On Broadway",
    "originStr": "List the guests of On Broadway"
   }
  ],
  "question": "List the guests of On Broadway",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS guests)) (PP (IN of) (PP (IN On) (NP (NNP Broadway)))))) (. ?)))",
  "entityNum": 1,
  "id": 784
 },
 {
  "taggedQuestion": "How many universities are there whose country's capital is Oslo?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many universities are there whose country's #entity1",
    "originStr": "how many universities are there whose country's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "capital is oslo",
    "originStr": "capital is oslo"
   }
  ],
  "question": "How many universities are there whose country's capital is Oslo",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS universities)) (VP (VBP are) (NP (EX there))))) (WHNP (WHNP (WP$ whose) (NN country) (POS 's)) (NN capital)) (SQ (VBZ is) (NP (NNP Oslo))) (. ?)))",
  "entityNum": 2,
  "id": 785
 },
 {
  "taggedQuestion": "Did Bob Dylan write the lyrics of the times they are a changin'?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Bob Dylan write the lyrics of the times they are a changin'",
    "originStr": "Did Bob Dylan write the lyrics of the times they are a changin'"
   }
  ],
  "question": "Did Bob Dylan write the lyrics of the times they are a changin'",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Bob) (NNP Dylan)) (VP (VB write) (NP (NP (DT the) (NNS lyrics)) (PP (IN of) (NP (NP (DT the) (NNS times)) (SBAR (S (NP (PRP they)) (VP (VBP are) (NP (DT a) (NN changin))))))) ('' '))) (. ?)))",
  "entityNum": 1,
  "id": 786
 },
 {
  "taggedQuestion": "What is the religion of the ones in the Kampuchean <e0>?",
  "entityMap": {
   "<e0>": "Union of Salvation"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the religion of #entity1",
    "originStr": "what is the religion of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ones in the kampuchean union of salvation",
    "originStr": "the ones in the kampuchean union of salvation"
   }
  ],
  "question": "What is the religion of the ones in the Kampuchean Union of Salvation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN religion)) (PP (IN of) (NP (NP (DT the) (NNS ones)) (PP (IN in) (NP (NP (DT the) (NNP Kampuchean)) (NP (ADD <e0>)))))))) (. ?)))",
  "entityNum": 2,
  "id": 787
 },
 {
  "taggedQuestion": "Where did the members of <e0>?",
  "entityMap": {
   "<e0>": "judge advocate general corps study"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did #entity1 study",
    "originStr": "where did #entity1 study"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of judge advocate general corps",
    "originStr": "the members of judge advocate general corps"
   }
  ],
  "question": "Where did the members of judge advocate general corps study",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 788
 },
 {
  "taggedQuestion": "Name the airlines which have a hub in airport in SF.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the airlines which have a hub in #entity1",
    "originStr": "name the airlines which have a hub in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "airport in sf",
    "originStr": "airport in sf"
   }
  ],
  "question": "Name the airlines which have a hub in airport in SF",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/San_Francisco> . ?uri <http://dbpedia.org/property/hubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS airlines)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN hub)) (PP (IN in) (NP (NP (NN airport)) (PP (IN in) (NP (NNP SF))))))))))) (. .)))",
  "entityNum": 2,
  "id": 789
 },
 {
  "taggedQuestion": "Which executive producer of <e0> is also an important person at Trump Productions?",
  "entityMap": {
   "<e0>": "the ultimate merger"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which executive producer of the ultimate merger",
    "originStr": "which executive producer of the ultimate merger"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also an important person at trump productions",
    "originStr": "is also an important person at trump productions"
   }
  ],
  "question": "Which executive producer of the ultimate merger is also an important person at Trump Productions",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ executive) (NN producer)) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT an) (JJ important) (NN person)) (PP (IN at) (NP (NNP Trump) (NNPS Productions))))) (. ?)))",
  "entityNum": 1,
  "id": 790
 },
 {
  "taggedQuestion": "What is the official name of Colorado wine ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the official name of Colorado wine",
    "originStr": "What is the official name of Colorado wine"
   }
  ],
  "question": "What is the official name of Colorado wine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ official) (NN name)) (PP (IN of) (NP (NNP Colorado) (NN wine))))) (. ?)))",
  "entityNum": 1,
  "id": 791
 },
 {
  "taggedQuestion": "How many states can one find <e0> of bridges?",
  "entityMap": {
   "<e0>": "Burr Tuss kind"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in how many states can one find #entity1",
    "originStr": "in how many states can one find #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "burr tuss kind of bridges",
    "originStr": "burr tuss kind of bridges"
   }
  ],
  "question": "In how many states can one find Burr Tuss kind of bridges",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS states)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (NP (NN <e0>)) (PP (IN of) (NP (NNS bridges)))))) (. ?)))",
  "entityNum": 2,
  "id": 792
 },
 {
  "taggedQuestion": "Who developed google videos?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who developed google videos",
    "originStr": "who developed google videos"
   }
  ],
  "question": "who developed google videos",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD developed) (NP (NNP google) (NNS videos)))) (. ?)))",
  "entityNum": 1,
  "id": 793
 },
 {
  "taggedQuestion": "Who is the child of John Tyler, Sr.?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the child of John Tyler, Sr",
    "originStr": "Who is the child of John Tyler, Sr"
   }
  ],
  "question": "Who is the child of John Tyler, Sr",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN child)) (PP (IN of) (NP (NP (NNP John) (NNP Tyler)) (, ,) (NP (NNP Sr.)))))) (. .)))(ROOT (. ?))",
  "entityNum": 1,
  "id": 794
 },
 {
  "taggedQuestion": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Brazilian jiu-jitsu the trainer of Nick Diaz",
    "originStr": "Is Brazilian jiu-jitsu the trainer of Nick Diaz"
   }
  ],
  "question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ Brazilian)) (NP (NP (NML (NN jiu) (HYPH -) (NN jitsu)) (DT the) (NN trainer)) (PP (IN of) (NP (NNP Nick) (NNP Diaz)))) (. ?)))",
  "entityNum": 1,
  "id": 795
 },
 {
  "taggedQuestion": "Who is the owner of  Latvian Wikipedia and Wiktionary ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is the owner of latvian wikipedia and",
    "originStr": "who is the owner of latvian wikipedia and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "wiktionary",
    "originStr": "wiktionary"
   }
  ],
  "question": "Who is the owner of Latvian Wikipedia and Wiktionary",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN owner)) (PP (IN of) (NP (JJ Latvian) (NNP Wikipedia) (CC and) (NNP Wiktionary))))) (. ?)))",
  "entityNum": 1,
  "id": 796
 },
 {
  "taggedQuestion": "Name all those buried in a place governed by a city council.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name all those buried in #entity1",
    "originStr": "name all those buried in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a place governed by a city council",
    "originStr": "a place governed by a city council"
   }
  ],
  "question": "Name all those buried in a place governed by a city council",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/City_council> . ?uri <http://dbpedia.org/property/restingPlace> ?x  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (S (NP (PDT all) (DT those)) (VP (VBN buried) (PP (IN in) (NP (NP (DT a) (NN place)) (VP (VBN governed) (PP (IN by) (NP (DT a) (NN city) (NN council))))))))) (. .)))",
  "entityNum": 2,
  "id": 797
 },
 {
  "taggedQuestion": "What royalties's sepulchre is <e0>?",
  "entityMap": {
   "<e0>": "Mausoleum of Augustus"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what royalties' sepulcher",
    "originStr": "what royalties' sepulcher"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is mausoleum of augustus",
    "originStr": "is mausoleum of augustus"
   }
  ],
  "question": "What royalties' sepulcher is Mausoleum of Augustus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> } ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NP (NNS royalties) (POS 's)) (NN sepulchre)) (VP (VBZ is) (NP (ADD <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 798
 },
 {
  "taggedQuestion": "Name the common university of the Cardinal and Jim Wylie.",
  "entityMap": {
   "<e0>": "Cardinal Jim Wylie"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common university of the cardinal and jim",
    "originStr": "name the common university of the cardinal and jim"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "wylie",
    "originStr": "wylie"
   }
  ],
  "question": "Name the common university of the Cardinal and Jim Wylie",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN university)) (PP (IN of) (NP (NP (DT the) (NNP Cardinal)) (CC and) (NP (NNP Jim) (NNP Wylie)))))) (. .)))",
  "entityNum": 1,
  "id": 799
 },
 {
  "taggedQuestion": "What is the automobile platform of Chiva bus ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the automobile platform of Chiva bus",
    "originStr": "What is the automobile platform of Chiva bus"
   }
  ],
  "question": "What is the automobile platform of Chiva bus",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN automobile) (NN platform)) (PP (IN of) (NP (NNP Chiva) (NN bus))))) (. ?)))",
  "entityNum": 1,
  "id": 800
 },
 {
  "taggedQuestion": "Who are the animator of <e0>?",
  "entityMap": {
   "<e0>": "The Skeleton Dance"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who are the animator of The Skeleton Dance",
    "originStr": "Who are the animator of The Skeleton Dance"
   }
  ],
  "question": "Who are the animator of The Skeleton Dance",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBP are) (NP (NP (DT the) (NN animator)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 801
 },
 {
  "taggedQuestion": "How many movies have a screenplay located in the States?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many movies",
    "originStr": "how many movies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "have a screenplay located in the states",
    "originStr": "have a screenplay located in the states"
   }
  ],
  "question": "How many movies have a screenplay located in the States",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NML (NNS movies))) (SQ (VBP have) (NP (DT a) (NN screenplay)) (VP (VBN located) (PP (IN in) (NP (DT the) (NNPS States))))) (. ?)))",
  "entityNum": 1,
  "id": 802
 },
 {
  "taggedQuestion": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which ceremonial county of the east tilbury",
    "originStr": "which ceremonial county of the east tilbury"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the local authority of the trinity school, brentwood",
    "originStr": "is also the local authority of the trinity school, brentwood"
   }
  ],
  "question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ ceremonial) (NN County)) (PP (IN of) (NP (DT the) (NNP East) (NNP Tilbury)))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ local) (NN authority)) (PP (IN of) (NP (DT the) (NML (NNP Trinity) (NNP School)) (, ,) (NNP Brentwood))))) (. ?)))",
  "entityNum": 1,
  "id": 803
 },
 {
  "taggedQuestion": "What system is both a platform where Nord runs and also distributed <e0>?",
  "entityMap": {
   "<e0>": "The beauty inside"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what system",
    "originStr": "what system"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is both a platform where nord runs and also distributed the beauty inside",
    "originStr": "is both a platform where nord runs and also distributed the beauty inside"
   }
  ],
  "question": "What system is both a platform where Nord runs and also distributed The beauty inside",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN system)) (SQ (VP (VBZ is) (ADVP (CC both)) (NP (NP (DT a) (NN platform)) (SBAR (WHADVP (WRB where)) (S (NP (NNP Nord)) (VP (VP (VBZ runs)) (CC and) (ADVP (RB also)) (VP (VBN distributed) (NP (NN <e0>))))))))) (. ?)))",
  "entityNum": 1,
  "id": 804
 },
 {
  "taggedQuestion": "Name the country whose leader's deputy is Piotr Glinski.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the country whose leader's #entity1",
    "originStr": "name the country whose leader's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "deputy is piotr glinski",
    "originStr": "deputy is piotr glinski"
   }
  ],
  "question": "Name the country whose leader's deputy is Piotr Glinski",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> . ?uri <http://dbpedia.org/property/leaderName> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN country)) (SBARQ (WHNP (WHNP (WP$ whose) (NN leader) (POS 's)) (NP (NN deputy))) (SQ (VBZ is) (NP (NNP Piotr) (NNP Glinski))))) (. .)))",
  "entityNum": 2,
  "id": 805
 },
 {
  "taggedQuestion": "Is Cologny a neighbouring city of Geneva?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Cologny a neighboring city of Geneva",
    "originStr": "Is Cologny a neighboring city of Geneva"
   }
  ],
  "question": "Is Cologny a neighboring city of Geneva",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Cologny)) (NP (NP (DT a) (VBG neighbouring) (NN city)) (PP (IN of) (NP (NNP Geneva)))) (. ?)))",
  "entityNum": 1,
  "id": 806
 },
 {
  "taggedQuestion": "Whose creators are Jerry Seinfeld and Larry David?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has creators are jerry seinfeld and larry",
    "originStr": "has creators are jerry seinfeld and larry"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose creators are jerry seinfeld and larry david",
    "originStr": "whose creators are jerry seinfeld and larry david"
   }
  ],
  "question": "Whose creators are Jerry Seinfeld and Larry David",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS creators))) (SQ (VBP are) (NP (NP (NNP Jerry) (NNP Seinfeld)) (CC and) (NP (NNP Larry) (NNP David)))) (. ?)))",
  "entityNum": 1,
  "id": 807
 },
 {
  "taggedQuestion": "Which TV show is related to <e0> and theme music is composed by  Ron Grainer?",
  "entityMap": {
   "<e0>": "The Sarah Jane Adventures"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which tv show is related to the sarah jane adventures",
    "originStr": "which tv show is related to the sarah jane adventures"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and theme music is composed by ron grainer",
    "originStr": "and theme music is composed by ron grainer"
   }
  ],
  "question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by Ron Grainer",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (SQ (VBZ is) (VP (VBN related) (PP (IN to) (NP (NP (ADD <e0>)) (CC and) (NP (NP (NN theme) (NN music)) (SBAR (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NNP Ron) (NNP Grainer)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 808
 },
 {
  "taggedQuestion": "Name the parent company of  <e0> .",
  "entityMap": {
   "<e0>": "Ford Air Transport Service"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the parent company of Ford Air Transport Service",
    "originStr": "Name the parent company of Ford Air Transport Service"
   }
  ],
  "question": "Name the parent company of Ford Air Transport Service",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN parent) (NN company)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 809
 },
 {
  "taggedQuestion": "Who  has these major shrines  : Emmitsburg, Maryland and Shrine of St. <e0>?",
  "entityMap": {
   "<e0>": "Elizabeth Ann Bayley Seton"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who has these major shrines : emmitsburg, maryland",
    "originStr": "who has these major shrines : emmitsburg, maryland"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and shrine of st. elizabeth ann bayley seton",
    "originStr": "and shrine of st. elizabeth ann bayley seton"
   }
  ],
  "question": "Who has these major shrines : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Emmitsburg,_Maryland> . ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (NP (NP (DT these) (JJ major) (NNS shrines)) (: :) (NP (NP (NNP Emmitsburg) (, ,) (NNP Maryland) (CC and) (NNP Shrine)) (PP (IN of) (NP (NNP St.) (CD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 810
 },
 {
  "taggedQuestion": "Which region of Bannock is the origin od Spaghetti squash ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which region of bannock",
    "originStr": "which region of bannock"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the origin of spaghetti squash",
    "originStr": "is the origin of spaghetti squash"
   }
  ],
  "question": "Which region of Bannock is the origin of Spaghetti squash",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN region)) (PP (IN of) (NP (NNP Bannock)))) (SQ (VBZ is) (NP (DT the) (NN origin) (NN od) (NN Spaghetti) (NN squash))) (. ?)))",
  "entityNum": 1,
  "id": 811
 },
 {
  "taggedQuestion": "Where in the us military did <e0> and edwin f hunter work?",
  "entityMap": {
   "<e0>": "pierre r graham"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where in the us military",
    "originStr": "where in the us military"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did pierre r graham and edwin f hunter work",
    "originStr": "did pierre r graham and edwin f hunter work"
   }
  ],
  "question": "Where in the us military did pierre r graham and edwin f hunter work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (PP (IN in) (NP (DT the) (ADJP (NP (PRP us)) (JJ military)))) (VBD did) (NP (NP (ADD <e0>)) (CC and) (NP (NML (NN edwin) (NN f)) (NN hunter) (NN work))))) (. ?)))",
  "entityNum": 1,
  "id": 812
 },
 {
  "taggedQuestion": "Count everyone who lives in a place where Indian English is an official language .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count everyone who lives in #entity1",
    "originStr": "count everyone who lives in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a place where indian english is an official language",
    "originStr": "a place where indian english is an official language"
   }
  ],
  "question": "Count everyone who lives in a place where Indian English is an official language",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (NN everyone)) (SBAR (WHNP (WP who)) (S (VP (VBZ lives) (PP (IN in) (NP (NP (DT a) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (JJ Indian) (NNP English)) (VP (VBZ is) (NP (DT an) (JJ official) (NN language)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 813
 },
 {
  "taggedQuestion": "Did Raymond Picard take birth in Paris?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Raymond Picard take birth in Paris",
    "originStr": "Did Raymond Picard take birth in Paris"
   }
  ],
  "question": "Did Raymond Picard take birth in Paris",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Raymond) (NNP Picard)) (VP (VB take) (NP (NN birth)) (PP (IN in) (NP (NNP Paris)))) (. ?)))",
  "entityNum": 1,
  "id": 814
 },
 {
  "taggedQuestion": "How many religions are practiced by diplomats?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many religions are practiced by",
    "originStr": "how many religions are practiced by"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "diplomats",
    "originStr": "diplomats"
   }
  ],
  "question": "How many religions are practiced by diplomats",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN practiced) (PP (IN by) (NP (NNS diplomats))))) (. ?)))",
  "entityNum": 1,
  "id": 815
 },
 {
  "taggedQuestion": "Was Elton John a chairman of a <e0>?",
  "entityMap": {
   "<e0>": "Watford FC Season"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Elton John a chairman of a Watford FC Season",
    "originStr": "Was Elton John a chairman of a Watford FC Season"
   }
  ],
  "question": "Was Elton John a chairman of a Watford FC Season",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Elton) (NNP John)) (NP (NP (DT a) (NN chairman)) (PP (IN of) (NP (DT a) (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 816
 },
 {
  "taggedQuestion": "Which publisher of Lucifer's hammer is also known for Jo Garcia ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which publisher of lucifer's hammer",
    "originStr": "which publisher of lucifer's hammer"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also known for jo garcia",
    "originStr": "is also known for jo garcia"
   }
  ],
  "question": "Which publisher of Lucifer's hammer is also known for Jo Garcia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN publisher) (PP (IN of) (NP (NP (NNP Lucifer) (POS 's)) (NN hammer))))) (SQ (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN for) (NP (NNP Jo) (NNP Garcia))))) (. ?)))",
  "entityNum": 1,
  "id": 817
 },
 {
  "taggedQuestion": "Whom was Tessa Dahl born to?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whom"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To whom was Tessa Dahl born to",
    "originStr": "To whom was Tessa Dahl born to"
   }
  ],
  "question": "To whom was Tessa Dahl born to",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tessa_Dahl> <http://dbpedia.org/ontology/parent> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Whom)) (SQ (VBD was) (NP (NNP Tessa) (NNP Dahl)) (VP (VBN born) (S (VP (TO to))))) (. ?)))",
  "entityNum": 1,
  "id": 818
 },
 {
  "taggedQuestion": "Which sport at <e0> is the field of Jon speelman ?",
  "entityMap": {
   "<e0>": "Polytechnic University of the Philippines Taguig"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which sport at polytechnic university of the philippines taguig",
    "originStr": "which sport at polytechnic university of the philippines taguig"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the field of jon speelman",
    "originStr": "is the field of jon speelman"
   }
  ],
  "question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN sport)) (PP (IN at) (NP (NN <e0>)))) (SQ (VBZ is) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NNP Jon) (NNP speelman))))) (. ?)))",
  "entityNum": 1,
  "id": 819
 },
 {
  "taggedQuestion": "Count the things people who know linguistics are known for .",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of things #entity1 are known for",
    "originStr": "count the number of things #entity1 are known for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people who know linguistics",
    "originStr": "people who know linguistics"
   }
  ],
  "question": "Count the number of things people who know linguistics are known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Linguistics> . ?x <http://dbpedia.org/ontology/knownFor> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS things) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBP know) (SBAR (S (NP (NNS linguistics)) (VP (VBP are) (VP (VBN known) (PP (IN for))))))))))) (. .)))",
  "entityNum": 2,
  "id": 820
 },
 {
  "taggedQuestion": "Where were <e0> and <e1> born?",
  "entityMap": {
   "<e1>": "havard vad petersson",
   "<e0>": "sverre krogh sundbo"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where were sverre krogh sundbo and havard vad petersson",
    "originStr": "where were sverre krogh sundbo and havard vad petersson"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "born",
    "originStr": "born"
   }
  ],
  "question": "Where were sverre krogh sundbo and havard vad petersson born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (NP (ADD <e0>)) (CC and) (NP (ADD <e1>))) (VP (VBN born))) (. ?)))",
  "entityNum": 1,
  "id": 821
 },
 {
  "taggedQuestion": "Was Cliff Burton in Metallica?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Cliff Burton in Metallica",
    "originStr": "Was Cliff Burton in Metallica"
   }
  ],
  "question": "Was Cliff Burton in Metallica",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Cliff) (NNP Burton)) (PP (IN in) (NP (NNP Metallica))) (. ?)))",
  "entityNum": 1,
  "id": 822
 },
 {
  "taggedQuestion": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many religions are followed by #entity1",
    "originStr": "how many religions are followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "organizations which are internationally known as the muslim brotherhood",
    "originStr": "organizations which are internationally known as the muslim brotherhood"
   }
  ],
  "question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS religions)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (NNS organizations)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (ADVP (RB internationally)) (VP (VBN known) (PP (IN as) (NP (DT the) (JJ muslim) (NN brotherhood))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 823
 },
 {
  "taggedQuestion": "What are some people born in NY known for?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are #entity1 known for",
    "originStr": "what are #entity1 known for"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some people born in ny",
    "originStr": "some people born in ny"
   }
  ],
  "question": "What are some people born in NY known for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT some) (NNS people)) (VP (VBN born) (PP (IN in) (NP (NP (NNP NY)) (VP (VBN known) (PP (IN for))))))) (. ?)))",
  "entityNum": 2,
  "id": 824
 },
 {
  "taggedQuestion": "Who is the developer of the software which is produced by Claris ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is the developer of #entity1",
    "originStr": "who is the developer of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the software which is produced by claris",
    "originStr": "the software which is produced by claris"
   }
  ],
  "question": "Who is the developer of the software which is produced by Claris",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN developer)) (PP (IN of) (NP (NP (DT the) (NN software)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN produced) (PP (IN by) (NP (NNP Claris))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 825
 },
 {
  "taggedQuestion": "What is the river whose source is Cowombat  Flat and has its mouth located in Murray Mouth?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the river whose source is cowombat flat",
    "originStr": "what is the river whose source is cowombat flat"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has it's mouth located in murray mouth",
    "originStr": "and has it's mouth located in murray mouth"
   }
  ],
  "question": "What is the river whose source is Cowombat Flat and has it's mouth located in Murray Mouth",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Cowombat_Flat> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source))) (S (VP (VBZ is) (ADJP (JJ Cowombat)))))) (ADJP (JJ Flat))) (CC and) (SQ (VBZ has) (NP (PRP$ its) (NN mouth)) (VP (VBN located) (PP (IN in) (NP (NNP Murray) (NNP Mouth)))))) (. ?)))",
  "entityNum": 1,
  "id": 826
 },
 {
  "taggedQuestion": "Where does the river flow into which begins in Lebrsnik?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where does the river flow into #entity1",
    "originStr": "where does the river flow into #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which begins in lebrsnik",
    "originStr": "which begins in lebrsnik"
   }
  ],
  "question": "Where does the river flow into which begins in Lebrsnik",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBZ does) (NP (DT the) (NN river) (NN flow)) (PP (IN into) (SBAR (WHNP (WDT which)) (S (VP (VBZ begins) (PP (IN in) (NP (NNP Lebrsnik))))))))) (. ?)))",
  "entityNum": 2,
  "id": 827
 },
 {
  "taggedQuestion": "What is the government type of Ancient Rome ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the government type of Ancient Rome",
    "originStr": "What is the government type of Ancient Rome"
   }
  ],
  "question": "What is the government type of Ancient Rome",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN government) (NN type)) (PP (IN of) (NP (JJ Ancient) (NNP Rome))))) (. ?)))",
  "entityNum": 1,
  "id": 828
 },
 {
  "taggedQuestion": "Which director of <e0> also released Mojo Priest ?",
  "entityMap": {
   "<e0>": "On deadly Ground"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which director of on deadly ground",
    "originStr": "which director of on deadly ground"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also released mojo priest",
    "originStr": "also released mojo priest"
   }
  ],
  "question": "Which director of On deadly Ground also released Mojo Priest",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/property/director> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN director) (PP (IN of) (NP (NN <e0>))))) (SQ (VP (ADVP (RB also)) (VBD released) (NP (NNP Mojo) (NNP Priest)))) (. ?)))",
  "entityNum": 1,
  "id": 829
 },
 {
  "taggedQuestion": "What is the <e0> whose channel's parent organisation is Fox Sports?",
  "entityMap": {
   "<e0>": "television show"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the television show whose channel's #entity1",
    "originStr": "what is the television show whose channel's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "parent organisation is fox sports",
    "originStr": "parent organisation is fox sports"
   }
  ],
  "question": "What is the television show whose channel's parent organisation is Fox Sports",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports_(United_States)> . ?uri <http://dbpedia.org/ontology/channel> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NP (NML (NP (NN channel) (POS 's))) (NN parent) (NN organisation))) (S (VP (VBZ is) (NP (NNP Fox) (NNPS Sports))))))) (. ?)))",
  "entityNum": 2,
  "id": 830
 },
 {
  "taggedQuestion": "Who commanded the <e0> and made <e1>'d famous?",
  "entityMap": {
   "<e1>": "Fatima bint Sa",
   "<e0>": "invasion of Buwat"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who commanded the invasion of buwat",
    "originStr": "who commanded the invasion of buwat"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and made fatima bint sa'd famous",
    "originStr": "and made fatima bint sa'd famous"
   }
  ],
  "question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Invasion_of_Buwat> <http://dbpedia.org/property/commander> ?uri. <http://dbpedia.org/resource/Fatimah_bint_Sa'd> <http://dbpedia.org/ontology/knownFor> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VP (VBD commanded) (NP (DT the) (NN <e0>))) (CC and) (VP (VBN made) (SBAR (S (NP (NN <e1>)) (VP (VBD 'd) (S (ADJP (JJ famous))))))))) (. ?)))",
  "entityNum": 1,
  "id": 831
 },
 {
  "taggedQuestion": "What is the home ground of the clubs managed by Ciao Zanardi?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the home ground of #entity1",
    "originStr": "what is the home ground of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the clubs managed by ciao zanardi",
    "originStr": "the clubs managed by ciao zanardi"
   }
  ],
  "question": "What is the home ground of the clubs managed by Ciao Zanardi",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN home) (NN ground)) (PP (IN of) (NP (DT the) (NNS clubs)))) (VP (VBN managed) (PP (IN by) (NP (NNP Ciao) (NNP Zanardi))))) (. ?)))",
  "entityNum": 2,
  "id": 832
 },
 {
  "taggedQuestion": "What is the country with native language as Languages of Ethiopia?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the country",
    "originStr": "what is the country"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with native language as languages of ethiopia",
    "originStr": "with native language as languages of ethiopia"
   }
  ],
  "question": "What is the country with native language as Languages of Ethiopia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN country)) (PP (IN with) (NP (NP (JJ native) (NN language)) (PP (IN as) (NP (NP (NNPS Languages)) (PP (IN of) (NP (NNP Ethiopia))))))))) (. ?)))",
  "entityNum": 1,
  "id": 833
 },
 {
  "taggedQuestion": "What is the band with previous members  Kevin Jonas and Joe Jonas?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the band",
    "originStr": "what is the band"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with previous members kevin jonas and joe jonas",
    "originStr": "with previous members kevin jonas and joe jonas"
   }
  ],
  "question": "What is the band with previous members Kevin Jonas and Joe Jonas",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN band)) (PP (IN with) (NP (NP (NP (JJ previous) (NNS members)) (NP (NNP Kevin) (NNP Jonas))) (CC and) (NP (NNP Joe) (NNP Jonas)))))) (. ?)))",
  "entityNum": 1,
  "id": 834
 },
 {
  "taggedQuestion": "List the people with Scientology as their religious belief?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the people",
    "originStr": "list the people"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "with scientology as their religious belief",
    "originStr": "with scientology as their religious belief"
   }
  ],
  "question": "List the people with Scientology as their religious belief",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (DT the) (NNS people)) (PP (IN with) (NP (NNP Scientology))) (PP (IN as) (NP (PRP$ their) (JJ religious) (NN belief)))) (. ?)))",
  "entityNum": 1,
  "id": 835
 },
 {
  "taggedQuestion": "How many fictional characters were humans?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many fictional characters",
    "originStr": "how many fictional characters"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were humans",
    "originStr": "were humans"
   }
  ],
  "question": "How many fictional characters were humans",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ fictional) (NNS characters)) (SQ (VBD were) (NP (NNS humans))) (. ?)))",
  "entityNum": 1,
  "id": 836
 },
 {
  "taggedQuestion": "Where was Girls (The Prodigy song)  recorded ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where was Girls (The Prodigy song) recorded",
    "originStr": "Where was Girls (The Prodigy song) recorded"
   }
  ],
  "question": "Where was Girls (The Prodigy song) recorded",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/property/recorded> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (NP (NNS Girls)) (-LRB- -LRB-) (NP (DT The) (NNP Prodigy) (NN song)) (-RRB- -RRB-)) (VP (VBN recorded)))) (. ?)))",
  "entityNum": 1,
  "id": 837
 },
 {
  "taggedQuestion": "How many TV shows' networks are headquarterd in NY?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many tv shows' networks #entity1",
    "originStr": "how many tv shows' networks #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "are headquartered in ny",
    "originStr": "are headquartered in ny"
   }
  ],
  "question": "How many TV shows' networks are headquartered in NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NN TV)) (SQ (NP (NP (NNS shows) (POS ')) (NNS networks)) (VP (VBP are) (ADJP (JJ headquarterd) (PP (IN in) (NP (NNP NY)))))) (. ?)))",
  "entityNum": 2,
  "id": 838
 },
 {
  "taggedQuestion": "Does StandBy records distribute via Sony?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does standby"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does StandBy records distribute via Sony",
    "originStr": "Does StandBy records distribute via Sony"
   }
  ],
  "question": "Does StandBy records distribute via Sony",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NN StandBy))) (S (NP (NNS records)) (VP (VBP distribute) (PP (IN via) (NP (NNP Sony))))) (. ?)))",
  "entityNum": 1,
  "id": 839
 },
 {
  "taggedQuestion": "Give me some shows owned by BBC one and BBC hd.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "give me some shows",
    "originStr": "give me some shows"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "owned by bbc one and bbc hd",
    "originStr": "owned by bbc one and bbc hd"
   }
  ],
  "question": "Give me some shows owned by BBC one and BBC hd",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT some) (NNS shows)) (VP (VBN owned) (PP (IN by) (NP (NP (NNP BBC) (CD one)) (CC and) (NP (NNP BBC) (NNP hd))))))) (. .)))",
  "entityNum": 1,
  "id": 840
 },
 {
  "taggedQuestion": "How many teams have rented stadiums in Canada?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many teams have rented #entity1",
    "originStr": "how many teams have rented #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "stadiums in canada",
    "originStr": "stadiums in canada"
   }
  ],
  "question": "How many teams have rented stadiums in Canada",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS teams)) (SQ (VP (VBP have) (NP (VBN rented) (NNS stadiums)) (PP (IN in) (NP (NNP Canada))))) (. ?)))",
  "entityNum": 2,
  "id": 841
 },
 {
  "taggedQuestion": "List the awards won by the film director of Chicken Run?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the awards won by #entity1",
    "originStr": "list the awards won by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the film director of chicken run",
    "originStr": "the film director of chicken run"
   }
  ],
  "question": "List the awards won by the film director of Chicken Run",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS awards)) (VP (VBN won) (PP (IN by) (NP (NP (DT the) (NN film) (NN director)) (PP (IN of) (NP (NNP Chicken) (NNP Run)))))))) (. ?)))",
  "entityNum": 2,
  "id": 842
 },
 {
  "taggedQuestion": "What territory of <e0> was the battle of Raoul Magrin-Vernerey fought ?",
  "entityMap": {
   "<e1>": "Raoul Magrin - Vernerey",
   "<e0>": "Sino French War"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what territory of sino french war",
    "originStr": "what territory of sino french war"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was the battle of raoul magrin-vernerey fought",
    "originStr": "was the battle of raoul magrin-vernerey fought"
   }
  ],
  "question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN territory) (PP (IN of) (NP (ADD <e0>))))) (SQ (VBD was) (NP (NP (DT the) (NN battle)) (PP (IN of) (NP (NP (NNP Raoul) (NNP Magrin) (HYPH -) (NNP Vernerey)) (SBAR (S (VP (VBD fought)))))))) (. ?)))",
  "entityNum": 1,
  "id": 843
 },
 {
  "taggedQuestion": "List the  outflow of Lake Uniamsi?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "List the outflow of Lake Uniamsi",
    "originStr": "List the outflow of Lake Uniamsi"
   }
  ],
  "question": "List the outflow of Lake Uniamsi",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?uri } ",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NN outflow)) (PP (IN of) (NP (NNP Lake) (NNP Uniamsi))))) (. ?)))",
  "entityNum": 1,
  "id": 844
 },
 {
  "taggedQuestion": "Did John Byrne create Emma Frost?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did John Byrne create Emma Frost",
    "originStr": "Did John Byrne create Emma Frost"
   }
  ],
  "question": "Did John Byrne create Emma Frost",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP John) (NNP Byrne)) (VP (VB create) (NP (NNP Emma) (NNP Frost))) (. ?)))",
  "entityNum": 1,
  "id": 845
 },
 {
  "taggedQuestion": "Was Heinrich Himmler ever a commanders of <e0>?",
  "entityMap": {
   "<e0>": "Army Group Oberrhein"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "was"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
    "originStr": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein"
   }
  ],
  "question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Was) (NP (NNP Heinrich) (NNP Himmler)) (NP (NP (RB ever) (DT a) (NNS commanders)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 846
 },
 {
  "taggedQuestion": "List the universities from a country where Norwegian language is officially accepted.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the universities from #entity1",
    "originStr": "list the universities from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a country where norwegian language is officially accepted",
    "originStr": "a country where norwegian language is officially accepted"
   }
  ],
  "question": "List the universities from a country where Norwegian language is officially accepted",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (DT the) (NNS universities)) (PP (IN from) (NP (DT a) (NN country))) (SBAR (WHADVP (WRB where)) (S (NP (JJ Norwegian) (NN language)) (VP (VBZ is) (ADVP (RB officially)) (VP (VBN accepted)))))) (. .)))",
  "entityNum": 2,
  "id": 847
 },
 {
  "taggedQuestion": "Name the incumbent of Linda Jenness .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the incumbent of Linda Jenness",
    "originStr": "Name the incumbent of Linda Jenness"
   }
  ],
  "question": "Name the incumbent of Linda Jenness",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN incumbent)) (PP (IN of) (NP (NNP Linda) (NNP Jenness))))) (. .)))",
  "entityNum": 1,
  "id": 848
 },
 {
  "taggedQuestion": "Which companies makes cars assembled in Karachi, Pakistan?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which companies makes #entity1",
    "originStr": "which companies makes #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "cars assembled in karachi, pakistan",
    "originStr": "cars assembled in karachi, pakistan"
   }
  ],
  "question": "Which companies makes cars assembled in Karachi, Pakistan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Karachi> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS companies)) (VP (VBZ makes) (NP (NP (NNS cars)) (VP (VBN assembled) (PP (IN in) (NP (NNP Karachi) (, ,) (NNP Pakistan))))))) (. ?)))",
  "entityNum": 2,
  "id": 849
 },
 {
  "taggedQuestion": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which company founded by fusajiro yamauchi",
    "originStr": "which company founded by fusajiro yamauchi"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also provides services of nintendo eshop",
    "originStr": "also provides services of nintendo eshop"
   }
  ],
  "question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (NN company)) (SBAR (S (VP (VBN founded) (PP (IN by) (NP (NNP Fusajiro) (NNP Yamauchi))))))) (SQ (VP (ADVP (RB also)) (VBZ provides) (NP (NP (NNS services)) (PP (IN of) (NP (NNP Nintendo) (NNP eShop)))))) (. ?)))",
  "entityNum": 1,
  "id": 850
 },
 {
  "taggedQuestion": "Which countries does the sea lie on whose shore is the city of Cumana?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which countries does the sea lie on #entity1",
    "originStr": "in which countries does the sea lie on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose shore is the city of cumana",
    "originStr": "whose shore is the city of cumana"
   }
  ],
  "question": "In which countries does the sea lie on whose shore is the city of Cumana",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Cuman\u00e1> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VP (VBZ does) (NP (DT the) (NN sea) (NN lie)) (PP (IN on) (SBAR (WHNP (WP$ whose) (NML (NN shore))) (S (VP (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Cumana)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 851
 },
 {
  "taggedQuestion": "Tirana is the largest city of which country?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "tirana is the largest city of",
    "originStr": "tirana is the largest city of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which country",
    "originStr": "which country"
   }
  ],
  "question": "Tirana is the largest city of which country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Tirana)) (VP (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (WHPP (IN of) (WHNP (WDT which) (NN country))))) (. ?)))",
  "entityNum": 1,
  "id": 852
 },
 {
  "taggedQuestion": "Which countries are the people from who are an academic authority of the <e0> species?",
  "entityMap": {
   "<e0>": "Western pygmy blue"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from which countries are the people from #entity1",
    "originStr": "from which countries are the people from #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "who are an academic authority of the western pygmy blue species",
    "originStr": "who are an academic authority of the western pygmy blue species"
   }
  ],
  "question": "From which countries are the people from who are an academic authority of the Western pygmy blue species",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBP are) (NP (NP (DT the) (NNS people)) (PP (IN from) (SBAR (WHNP (WP who)) (S (VP (VBP are) (NP (NP (DT an) (JJ academic) (NN authority)) (PP (IN of) (NP (DT the) (NN <e0>) (NNS species)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 853
 },
 {
  "taggedQuestion": "Where is the headquarters of Sigma TV?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is the headquarters of Sigma TV",
    "originStr": "Where is the headquarters of Sigma TV"
   }
  ],
  "question": "Where is the headquarters of Sigma TV",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sigma_TV> <http://dbpedia.org/property/headquarters> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Sigma) (NNP TV))))) (. ?)))",
  "entityNum": 1,
  "id": 854
 },
 {
  "taggedQuestion": "Which scientist was advised by <e0>?",
  "entityMap": {
   "<e0>": "John Robert Woodyard"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which scientist",
    "originStr": "which scientist"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was advised by john robert woodyard",
    "originStr": "was advised by john robert woodyard"
   }
  ],
  "question": "Which scientist was advised by John Robert Woodyard",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN scientist)) (SQ (VBD was) (VP (VBN advised) (PP (IN by) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 855
 },
 {
  "taggedQuestion": "What is the launch site of the Juno I which was also the ground of 2016 <e0> season ?",
  "entityMap": {
   "<e0>": "Fort Lauderdale Strikers"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the launch site of the juno i",
    "originStr": "what is the launch site of the juno i"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which was also the ground of 2016 fort lauderdale strikers season",
    "originStr": "which was also the ground of 2016 fort lauderdale strikers season"
   }
  ],
  "question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ is) (NP (NP (DT the) (NN launch) (NN site)) (PP (IN of) (NP (DT the) (NNP Juno))))) (NP (PRP I)) (SBAR (WHNP (WDT which)) (S (VP (VBD was) (ADVP (RB also)) (NP (NP (DT the) (NN ground)) (PP (IN of) (NP (CD 2016)))))))) (FRAG (NP (ADD <e0>)) (NP (NN season))) (. ?)))",
  "entityNum": 1,
  "id": 856
 },
 {
  "taggedQuestion": "Who has been married to both Penny Lancaster and Alana Stewart?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who has been married to both penny lancaster and alana",
    "originStr": "who has been married to both penny lancaster and alana"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "stewart",
    "originStr": "stewart"
   }
  ],
  "question": "Who has been married to both Penny Lancaster and Alana Stewart",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN been) (VP (VBN married) (PP (IN to) (NP (DT both) (NN Penny) (NNP Lancaster) (CC and) (NNP Alana) (NNP Stewart))))))) (. ?)))",
  "entityNum": 1,
  "id": 857
 },
 {
  "taggedQuestion": "Count the affiliations of <e0>.",
  "entityMap": {
   "<e0>": "International Union of Anarchists"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Count the affiliations of International Union of Anarchists",
    "originStr": "Count the affiliations of International Union of Anarchists"
   }
  ],
  "question": "Count the affiliations of International Union of Anarchists",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NNS affiliations)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 858
 },
 {
  "taggedQuestion": "What is the alma mater of the scientist  whose PhD advisor is Jean-Claude Latombe ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the alma mater of #entity1",
    "originStr": "what is the alma mater of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the scientist whose phd advisor is jean-claude latombe",
    "originStr": "the scientist whose phd advisor is jean-claude latombe"
   }
  ],
  "question": "What is the alma mater of the scientist whose PhD advisor is Jean-Claude Latombe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN alma) (NN mater)) (PP (IN of) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (NN PhD)) (S (NP (NN advisor)) (VP (VBZ is) (NP (NNP Jean) (HYPH -) (NNP Claude) (NNP Latombe))))))))) (. ?)))",
  "entityNum": 2,
  "id": 859
 },
 {
  "taggedQuestion": "List the people residing in Wilton, Connecticut?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the people",
    "originStr": "list the people"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "residing in wilton, connecticut",
    "originStr": "residing in wilton, connecticut"
   }
  ],
  "question": "List the people residing in Wilton, Connecticut",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> } ",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (S (NP (DT the) (NNS people)) (VP (VBG residing) (PP (IN in) (NP (NNP Wilton) (, ,) (NNP Connecticut)))))) (. ?)))",
  "entityNum": 1,
  "id": 860
 },
 {
  "taggedQuestion": "What is the Location of the <e1> which is also the state of <e0> ?",
  "entityMap": {
   "<e1>": "Peetz Table Wind Energy Center",
   "<e0>": "Ben Nighthorse Campbell"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the location of the peetz table wind energy center",
    "originStr": "what is the location of the peetz table wind energy center"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which is also the state of ben nighthorse campbell",
    "originStr": "which is also the state of ben nighthorse campbell"
   }
  ],
  "question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN Location)) (PP (IN of) (NP (NP (DT the) (NN <e1>)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NN <e0>))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 861
 },
 {
  "taggedQuestion": "Count the water bodies that flow into the North Sea.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "count the water bodies",
    "originStr": "count the water bodies"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "that flow into the north sea",
    "originStr": "that flow into the north sea"
   }
  ],
  "question": "Count the water bodies that flow into the North Sea",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN water) (NNS bodies)) (SBAR (WHNP (WDT that)) (S (VP (VBP flow) (PP (IN into) (NP (DT the) (NNP North) (NNP Sea)))))))) (. .)))",
  "entityNum": 1,
  "id": 862
 },
 {
  "taggedQuestion": "Who was the First Driver of <e0> ?",
  "entityMap": {
   "<e0>": "1999 San Marino Grand Prix"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who was the First Driver of 1999 San Marino Grand Prix",
    "originStr": "Who was the First Driver of 1999 San Marino Grand Prix"
   }
  ],
  "question": "Who was the First Driver of 1999 San Marino Grand Prix",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (JJ First) (NN Driver)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 863
 },
 {
  "taggedQuestion": "Bantam Spectra is the publisher of which series?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "bantam spectra is the publisher of",
    "originStr": "bantam spectra is the publisher of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which series",
    "originStr": "which series"
   }
  ],
  "question": "Bantam Spectra is the publisher of which series",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Bantam_Spectra> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NNP Bantam) (NNP Spectra)) (VP (VBZ is) (NP (NP (DT the) (NN publisher)) (PP (IN of) (NP (WDT which) (NN series))))) (. ?)))",
  "entityNum": 1,
  "id": 864
 },
 {
  "taggedQuestion": "Where is the sister station of <e0> located?",
  "entityMap": {
   "<e0>": "Al Arabiya 99"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where is #entity1 located",
    "originStr": "where is #entity1 located"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the sister station of al arabiya 99",
    "originStr": "the sister station of al arabiya 99"
   }
  ],
  "question": "Where is the sister station of Al Arabiya 99 located",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Arabiya_99> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN sister) (NN station)) (PP (IN of) (NP (NN <e0>)))) (VP (VBN located))) (. ?)))",
  "entityNum": 2,
  "id": 865
 },
 {
  "taggedQuestion": "Which common prime minister did Graham Richardson and Bon McMullan serve ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which common prime minister",
    "originStr": "which common prime minister"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did graham richardson and bon mcmullan serve",
    "originStr": "did graham richardson and bon mcmullan serve"
   }
  ],
  "question": "Which common prime minister did Graham Richardson and Bon McMullan serve",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (JJ common)) (NP (JJ prime) (NN minister)))) (SQ (VBD did) (NP (NP (NNP Graham) (NNP Richardson)) (CC and) (NP (NNP Bon) (NNP McMullan))) (VP (VB serve))) (. ?)))",
  "entityNum": 1,
  "id": 866
 },
 {
  "taggedQuestion": "How many things are produced by companies located in Tehran?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many things are produced by #entity1",
    "originStr": "how many things are produced by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "companies located in tehran",
    "originStr": "companies located in tehran"
   }
  ],
  "question": "How many things are produced by companies located in Tehran",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS things)) (SQ (VBP are) (VP (VBN produced) (PP (IN by) (NP (NP (NNS companies)) (VP (VBN located) (PP (IN in) (NP (NNP Tehran)))))))) (. ?)))",
  "entityNum": 2,
  "id": 867
 },
 {
  "taggedQuestion": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which is the common past team of the charlie justice (american football player) and bobby",
    "originStr": "which is the common past team of the charlie justice (american football player) and bobby"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "hoppe",
    "originStr": "hoppe"
   }
  ],
  "question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charlie_Justice_(American_football_player)> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (JJ common) (JJ past) (NN team)) (PP (IN of) (NP (NP (NP (DT the) (NNP Charlie) (NNP Justice)) (-LRB- -LRB-) (NP (JJ American) (NN football) (NN player)) (-RRB- -RRB-)) (CC and) (NP (NNP Bobby) (NNP Hoppe)))))) (. ?)))",
  "entityNum": 1,
  "id": 868
 },
 {
  "taggedQuestion": "Name the officeholder who hasa child named Augustus and has an associate named Marcus Bibulus .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the officeholder who has child named augustus",
    "originStr": "name the officeholder who has child named augustus"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and has an associate named marcus bibulus",
    "originStr": "and has an associate named marcus bibulus"
   }
  ],
  "question": "Name the officeholder who has child named Augustus and has an associate named Marcus Bibulus",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SINV (SINV (VP (VB Name) (NP (NP (DT the) (NN officeholder)) (SBAR (WHNP (WP who)) (S (VP (VBP hasa) (NP (NP (NN child)) (VP (VBN named)))))))) (NP (NNP Augustus))) (CC and) (SINV (VBZ has) (NP (DT an) (NN associate)) (VP (VBN named) (NP (NNP Marcus) (NNP Bibulus)))) (. .)))",
  "entityNum": 1,
  "id": 869
 },
 {
  "taggedQuestion": "Which party won both the general electoin and the andhra pradesh election in 2004?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which party",
    "originStr": "which party"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "won both the general election and the andhra pradesh election in 2004",
    "originStr": "won both the general election and the andhra pradesh election in 2004"
   }
  ],
  "question": "Which party won both the general election and the andhra pradesh election in 2004",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN party)) (SQ (VP (VBD won) (NP (CC both) (NP (DT the) (JJ general) (NN electoin)) (CC and) (NP (DT the) (NN andhra) (NN pradesh) (NN election))) (PP (IN in) (NP (CD 2004))))) (. ?)))",
  "entityNum": 1,
  "id": 870
 },
 {
  "taggedQuestion": "Give me someone on the board of trinity house.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Give me someone on the board of trinity house",
    "originStr": "Give me someone on the board of trinity house"
   }
  ],
  "question": "Give me someone on the board of trinity house",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House>  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (NN someone)) (PP (IN on) (NP (NP (DT the) (NN board)) (PP (IN of) (NP (NN trinity) (NN house))))))) (. .)))",
  "entityNum": 1,
  "id": 871
 },
 {
  "taggedQuestion": "Whose leaders are Willem-Alexander and Fredis Refunjol?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "whose"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has leaders are willem-alexander and fredis",
    "originStr": "has leaders are willem-alexander and fredis"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose leaders are willem-alexander and fredis refunjol",
    "originStr": "whose leaders are willem-alexander and fredis refunjol"
   }
  ],
  "question": "Whose leaders are Willem-Alexander and Fredis Refunjol",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WP$ Whose)) (NP (NNS leaders))) (SQ (VBP are) (NP (NP (NNP Willem) (HYPH -) (NNP Alexander)) (CC and) (NP (NNP Fredis) (NNP Refunjol)))) (. ?)))",
  "entityNum": 1,
  "id": 872
 },
 {
  "taggedQuestion": "Horses grandsired by Sundridge  have won which awards?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 have won which awards",
    "originStr": "#entity1 have won which awards"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "horses grandsired by sundridge",
    "originStr": "horses grandsired by sundridge"
   }
  ],
  "question": "Horses grandsired by Sundridge have won which awards",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Sundridge_(horse)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
  "syntaxTreeText": "(ROOT (S (NP (NP (NNS Horses)) (VP (VBN grandsired) (PP (IN by) (NP (NNP Sundridge))))) (VP (VBP have) (VP (VBN won) (SBAR (WHNP (WDT which)) (S (NP (NNS awards)))))) (. ?)))",
  "entityNum": 2,
  "id": 873
 },
 {
  "taggedQuestion": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the river whose source region is north-western province, zambia",
    "originStr": "what is the river whose source region is north-western province, zambia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and river mouth is indian ocean",
    "originStr": "and river mouth is indian ocean"
   }
  ],
  "question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WP$ whose) (NML (NN source)) (NN region)) (S (VP (VBZ is) (ADJP (ADJP (JJ North) (HYPH -) (JJ Western)) (SBAR (S (NP (NP (NNP Province)) (, ,) (NP (NNP Zambia)) (CC and) (NP (NN river) (NN mouth))) (VP (VBZ is) (NP (NNP Indian) (NNP Ocean))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 874
 },
 {
  "taggedQuestion": "Who was on the first team in the GPs that were held at Watkins Glen, NY?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who was on the first team in #entity1",
    "originStr": "who was on the first team in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the gps that were held at watkins glen, ny",
    "originStr": "the gps that were held at watkins glen, ny"
   }
  ],
  "question": "Who was on the first team in the GPs that were held at Watkins Glen, NY",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD was) (PP (IN on) (NP (DT the) (JJ first) (NN team))) (PP (IN in) (NP (NP (DT the) (NNS GPs)) (SBAR (WHNP (WDT that)) (S (VP (VBD were) (VP (VBN held) (PP (IN at) (NP (NP (NNP Watkins) (NNP Glen)) (, ,) (NP (NNP NY)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 875
 },
 {
  "taggedQuestion": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher .",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movie whose screenplay is by akiva goldsman",
    "originStr": "name the movie whose screenplay is by akiva goldsman"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and directed by joel schumacher",
    "originStr": "and directed by joel schumacher"
   }
  ],
  "question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN movie)) (SBAR (WHNP (WP$ whose) (NN screenplay)) (S (VP (VBZ is) (UCP (PP (IN by) (NP (NNP Akiva) (NNP Goldsman))) (CC and) (VP (VBN directed) (PP (IN by) (NP (NNP Joel) (NNP Schumacher)))))))))) (. .)))",
  "entityNum": 1,
  "id": 876
 },
 {
  "taggedQuestion": "What ethinicity of Linda Hogan is also the <e0> of Holmes Colbert ?",
  "entityMap": {
   "<e0>": "state of origin"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what ethnicity of linda hogan",
    "originStr": "what ethnicity of linda hogan"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the state of origin of holmes colbert",
    "originStr": "is also the state of origin of holmes colbert"
   }
  ],
  "question": "What ethnicity of Linda Hogan is also the state of origin of Holmes Colbert",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NN ethinicity) (PP (IN of) (NP (NNP Linda) (NNP Hogan))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NNP Holmes) (NNP Colbert))))) (. ?)))",
  "entityNum": 1,
  "id": 877
 },
 {
  "taggedQuestion": "What are the track and field events of <e0>?",
  "entityMap": {
   "<e1>": "track field events",
   "<e0>": "Jamiatu Muslim Mindanao"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are #entity1",
    "originStr": "what are #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the track and field events of jamiatu muslim mindanao",
    "originStr": "the track and field events of jamiatu muslim mindanao"
   }
  ],
  "question": "What are the track and field events of Jamiatu Muslim Mindanao",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NML (NN track) (CC and) (NN field)) (NNS events)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 2,
  "id": 878
 },
 {
  "taggedQuestion": "How many cities are close to Lake Victoria?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "how many cities",
    "originStr": "how many cities"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are close to lake victoria",
    "originStr": "are close to lake victoria"
   }
  ],
  "question": "How many cities are close to Lake Victoria",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS cities)) (SQ (VP (VBP are) (ADJP (JJ close) (PP (IN to) (NP (NNP Lake) (NNP Victoria)))))) (. ?)))",
  "entityNum": 1,
  "id": 879
 },
 {
  "taggedQuestion": "Is greasy pop recording the distributor of festival records?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is greasy pop recording the distributor of festival records",
    "originStr": "Is greasy pop recording the distributor of festival records"
   }
  ],
  "question": "Is greasy pop recording the distributor of festival records",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Greasy_Pop_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Festival_Records> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (JJ greasy) (NN pop)) (VP (VBG recording) (NP (NP (DT the) (NN distributor)) (PP (IN of) (NP (NN festival) (NNS records))))) (. ?)))",
  "entityNum": 1,
  "id": 880
 },
 {
  "taggedQuestion": "What is the baseball team whose club manager's debut team is Houston Astros?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the baseball team whose club manager's #entity1",
    "originStr": "what is the baseball team whose club manager's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "debut team is houston astros",
    "originStr": "debut team is houston astros"
   }
  ],
  "question": "What is the baseball team whose club manager's debut team is Houston Astros",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN baseball) (NN team)) (SBAR (WHNP (WP$ whose) (NML (NN club))) (S (NP (NP (NN manager) (POS 's)) (NN debut) (NN team)) (VP (VBZ is) (NP (NNP Houston) (NNPS Astros))))))) (. ?)))",
  "entityNum": 2,
  "id": 881
 },
 {
  "taggedQuestion": "What cities are near to Nihoa which is also known as Bird Island ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what cities",
    "originStr": "what cities"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "are near to nihoa which is also known as bird island",
    "originStr": "are near to nihoa which is also known as bird island"
   }
  ],
  "question": "What cities are near to Nihoa which is also known as Bird Island",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (PP (IN near) (IN to) (NP (NP (NNP Nihoa)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (ADVP (RB also)) (VP (VBN known) (PP (IN as) (NP (NNP Bird) (NNP Island))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 882
 },
 {
  "taggedQuestion": "Is Sloth in the Chordate phylum?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Sloth in the Chordate phylum",
    "originStr": "Is Sloth in the Chordate phylum"
   }
  ],
  "question": "Is Sloth in the Chordate phylum",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sloth> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Sloth)) (PP (IN in) (NP (DT the) (NN Chordate) (NN phylum))) (. ?)))",
  "entityNum": 1,
  "id": 883
 },
 {
  "taggedQuestion": "Which shareholder of <e0> is also the operator of <e1> ?",
  "entityMap": {
   "<e1>": "New Sanno Hotel",
   "<e0>": "Naval Air facility Adak"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which shareholder of naval air facility adak",
    "originStr": "which shareholder of naval air facility adak"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the operator of new sanno hotel",
    "originStr": "is also the operator of new sanno hotel"
   }
  ],
  "question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/owner> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN shareholder) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN operator)) (PP (IN of) (NP (NN <e1>))))) (. ?)))",
  "entityNum": 1,
  "id": 884
 },
 {
  "taggedQuestion": "What other awards have been given to <e0>?",
  "entityMap": {
   "<e0>": "Golden Globe winners"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what other awards have been given to #entity1",
    "originStr": "what other awards have been given to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "golden globe winners",
    "originStr": "golden globe winners"
   }
  ],
  "question": "What other awards have been given to Golden Globe winners",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (JJ other) (NNS awards)) (VP (VBP have) (VP (VBN been) (VP (VBN given) (PP (IN to) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 885
 },
 {
  "taggedQuestion": "Which allegiance of the John Kotelawala is also the  sovereign state of the Sanath Weerakoon ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which allegiance of the john kotelawala",
    "originStr": "which allegiance of the john kotelawala"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the sovereign state of the sanath weerakoon",
    "originStr": "is also the sovereign state of the sanath weerakoon"
   }
  ],
  "question": "Which allegiance of the John Kotelawala is also the sovereign state of the Sanath Weerakoon",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN allegiance) (PP (IN of) (NP (DT the) (NNP John) (NNP Kotelawala))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (JJ sovereign) (NN state)) (PP (IN of) (NP (DT the) (NNP Sanath) (NNP Weerakoon))))) (. ?)))",
  "entityNum": 1,
  "id": 886
 },
 {
  "taggedQuestion": "List the <e0> whose network's sister names is N-tv.",
  "entityMap": {
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list the television shows whose network's #entity1",
    "originStr": "list the television shows whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "sister names is n-tv",
    "originStr": "sister names is n-tv"
   }
  ],
  "question": "List the television shows whose network's sister names is N-tv",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/N-tv> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB List) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NML (NML (NN network) (POS 's)) (NN sister)) (NNS names)) (S (VP (VBZ is) (NP (NN N) (HYPH -) (NN tv))))))) (. .)))",
  "entityNum": 2,
  "id": 887
 },
 {
  "taggedQuestion": "<e0> is the national anthem of which country?",
  "entityMap": {
   "<e0>": "God Defend New Zealand"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "god defend new zealand is the national anthem of",
    "originStr": "god defend new zealand is the national anthem of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which country",
    "originStr": "which country"
   }
  ],
  "question": "God Defend New Zealand is the national anthem of which country",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> } ",
  "syntaxTreeText": "(ROOT (S (NP (ADD <e0>)) (VP (VBZ is) (NP (NP (DT the) (JJ national) (NN anthem)) (WHPP (IN of) (WHNP (WDT which) (NN country))))) (. ?)))",
  "entityNum": 1,
  "id": 888
 },
 {
  "taggedQuestion": "Where do the rivers starting from Zambia end?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where do #entity1 end",
    "originStr": "where do #entity1 end"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rivers starting from zambia",
    "originStr": "the rivers starting from zambia"
   }
  ],
  "question": "Where do the rivers starting from Zambia end",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (DT the) (NNS rivers)) (VP (VBG starting) (PP (IN from) (NP (NNP Zambia) (NN end)))))) (. ?)))",
  "entityNum": 2,
  "id": 889
 },
 {
  "taggedQuestion": "Which political party of kumta had affiliation with <e0>, 2004 (Andhra Pradesh) ?",
  "entityMap": {
   "<e0>": "Indian general election"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which political party of kumta",
    "originStr": "which political party of kumta"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "had affiliation with indian general election, 2004 (andhra pradesh)",
    "originStr": "had affiliation with indian general election, 2004 (andhra pradesh)"
   }
  ],
  "question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHNP (WDT Which) (JJ political) (NN party)) (PP (IN of) (NP (NN kumta)))) (SQ (VP (VBD had) (NP (NN affiliation)) (PP (IN with) (NP (NP (NN <e0>)) (, ,) (NP (CD 2004)))) (PRN (-LRB- -LRB-) (NP (NNP Andhra) (NNP Pradesh)) (-RRB- -RRB-)))) (. ?)))",
  "entityNum": 1,
  "id": 890
 },
 {
  "taggedQuestion": "Who was member of boards at Royal Society and Trinity House?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was member of boards at royal society and trinity",
    "originStr": "who was member of boards at royal society and trinity"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "house",
    "originStr": "house"
   }
  ],
  "question": "Who was member of boards at Royal Society and Trinity House",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NN member)) (PP (IN of) (NP (NP (NNS boards)) (PP (IN at) (NP (NP (NNP Royal) (NNP Society)) (CC and) (NP (NNP Trinity) (NNP House)))))))) (. ?)))",
  "entityNum": 1,
  "id": 891
 },
 {
  "taggedQuestion": "Where is the king buried whose predecessor was Iyasu II?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where is the king buried #entity1",
    "originStr": "where is the king buried #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose predecessor was iyasu ii",
    "originStr": "whose predecessor was iyasu ii"
   }
  ],
  "question": "Where is the king buried whose predecessor was Iyasu II",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN king)) (SBAR (S (VP (VBD buried) (SBAR (WHNP (WP$ whose) (NN predecessor)) (S (VP (VBD was) (NP (NNP Iyasu) (NNP II)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 892
 },
 {
  "taggedQuestion": "How many different places have people beatified by <e0> died?",
  "entityMap": {
   "<e0>": "Pope Pius X"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in how many different places have #entity1 died",
    "originStr": "in how many different places have #entity1 died"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "people beatified by pope pius x",
    "originStr": "people beatified by pope pius x"
   }
  ],
  "question": "In how many different places have people beatified by Pope Pius X died",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (JJ different) (NML (NNS places))) (SQ (VBP have) (NP (NNS people)) (VP (VBN beatified) (PP (IN by) (NP (NP (ADD <e0>)) (SBAR (S (VP (VBD died)))))))) (. ?)))",
  "entityNum": 2,
  "id": 893
 },
 {
  "taggedQuestion": "What faiths are followed by the relatives of Meadow Soprano?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what faiths are followed by #entity1",
    "originStr": "what faiths are followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the relatives of meadow soprano",
    "originStr": "the relatives of meadow soprano"
   }
  ],
  "question": "What faiths are followed by the relatives of Meadow Soprano",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS faiths)) (SQ (VBP are) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NNS relatives)) (PP (IN of) (NP (NNP Meadow) (NNP Soprano))))))) (. ?)))",
  "entityNum": 2,
  "id": 894
 },
 {
  "taggedQuestion": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station  ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where is the headquarters of #entity1",
    "originStr": "where is the headquarters of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the public transit system which owns target field, a metro transit station",
    "originStr": "the public transit system which owns target field, a metro transit station"
   }
  ],
  "question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NP (DT the) (NML (JJ public) (NN transit)) (NN system)) (SBAR (WHNP (WDT which)) (S (VP (VBZ owns) (NP (NP (NNP Target) (NNP Field)) (, ,) (NP (DT a) (NML (NNP Metro) (NNP Transit)) (NNP Station)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 895
 },
 {
  "taggedQuestion": "What is the nationality of Aishath Saffa ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the nationality of Aishath Saffa",
    "originStr": "What is the nationality of Aishath Saffa"
   }
  ],
  "question": "What is the nationality of Aishath Saffa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN nationality)) (PP (IN of) (NP (NNP Aishath) (NNP Saffa))))) (. ?)))",
  "entityNum": 1,
  "id": 896
 },
 {
  "taggedQuestion": "Who was the president under whom winston bryant served as a lieutenant?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who was the president under #entity1",
    "originStr": "who was the president under #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whom winston bryant served as a lieutenant",
    "originStr": "whom winston bryant served as a lieutenant"
   }
  ],
  "question": "who was the president under whom winston bryant served as a lieutenant",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN president)) (SBAR (WHPP (IN under) (WHNP (WP whom))) (S (NP (NNP winston) (NNP bryant)) (VP (VBD served) (PP (IN as) (NP (DT a) (NN lieutenant)))))))) (. ?)))",
  "entityNum": 2,
  "id": 897
 },
 {
  "taggedQuestion": "What are the bands associated with the artists of <e0>  ?",
  "entityMap": {
   "<e0>": "My Favorite Girl"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the bands associated with #entity1",
    "originStr": "what are the bands associated with #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the artists of my favorite girl",
    "originStr": "the artists of my favorite girl"
   }
  ],
  "question": "What are the bands associated with the artists of My Favorite Girl",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS bands)) (VP (VBN associated) (PP (IN with) (NP (NP (DT the) (NNS artists)) (PP (IN of) (NP (NN <e0>))))))) (. ?)))",
  "entityNum": 2,
  "id": 898
 },
 {
  "taggedQuestion": "What subjects was Broca's Brain written?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "on what subjects",
    "originStr": "on what subjects"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was broca's brain written",
    "originStr": "was broca's brain written"
   }
  ],
  "question": "On what subjects was Broca's Brain written",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NNS subjects))) (SQ (VBD was) (NP (NP (NNP Broca) (POS 's)) (NNP Brain)) (VP (VBN written))) (. ?)))",
  "entityNum": 1,
  "id": 899
 },
 {
  "taggedQuestion": "Which parent organization of GetTV is also the label of next thing ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which parent organization of gettv",
    "originStr": "which parent organization of gettv"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the label of next thing",
    "originStr": "is also the label of next thing"
   }
  ],
  "question": "Which parent organization of GetTV is also the label of next thing",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NN parent) (NN organization)) (PP (IN of) (NP (NNP GetTV))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN label)) (PP (IN of) (NP (JJ next) (NN thing))))) (. ?)))",
  "entityNum": 1,
  "id": 900
 },
 {
  "taggedQuestion": "Which teams have used the stadium whose architect was Populous ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which teams have used #entity1",
    "originStr": "which teams have used #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the stadium whose architect was populous",
    "originStr": "the stadium whose architect was populous"
   }
  ],
  "question": "Which teams have used the stadium whose architect was Populous",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS teams)) (SQ (VP (VBP have) (VP (VBN used) (NP (NP (DT the) (NN stadium)) (SBAR (WHNP (WP$ whose) (NML (NN architect))) (S (VP (VBD was) (ADJP (JJ Populous))))))))) (. ?)))",
  "entityNum": 2,
  "id": 901
 },
 {
  "taggedQuestion": "Name the route end of the <e1> and <e0>.",
  "entityMap": {
   "<e1>": "North-South Transport Corridor",
   "<e0>": "Mumbai Vadodara Expressway"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the route end of the north-south transport corridor and mumbai vadodara",
    "originStr": "name the route end of the north-south transport corridor and mumbai vadodara"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "expressway",
    "originStr": "expressway"
   }
  ],
  "question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN route) (NN end)) (PP (IN of) (NP (NP (DT the) (NN <e1>)) (CC and) (NP (ADD <e0>)))))) (. .)))",
  "entityNum": 1,
  "id": 902
 },
 {
  "taggedQuestion": "Is <e0> buried in Colorado?",
  "entityMap": {
   "<e0>": "Albert P Clark"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Albert P Clark buried in Colorado",
    "originStr": "Is Albert P Clark buried in Colorado"
   }
  ],
  "question": "Is Albert P Clark buried in Colorado",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NN <e0>)) (VP (VBN buried) (PP (IN in) (NP (NNP Colorado)))) (. ?)))",
  "entityNum": 1,
  "id": 903
 },
 {
  "taggedQuestion": "Which hockey team is head coached by Bill Peters?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which hockey team",
    "originStr": "which hockey team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is head coached by bill peters",
    "originStr": "is head coached by bill peters"
   }
  ],
  "question": "Which hockey team is head coached by Bill Peters",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN hockey) (NN team)) (SQ (VBZ is) (NP (NN head)) (VP (VBN coached) (PP (IN by) (NP (NNP Bill) (NNP Peters))))) (. ?)))",
  "entityNum": 1,
  "id": 904
 },
 {
  "taggedQuestion": "Count the religions followed by the alumini of Ananda College.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number of religions followed by #entity1",
    "originStr": "count the number of religions followed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the alumni of ananda college",
    "originStr": "the alumni of ananda college"
   }
  ],
  "question": "Count the number of religions followed by the alumni of Ananda College",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Ananda_College> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (S (NP (DT the) (NNS religions)) (VP (VBN followed) (PP (IN by) (NP (NP (DT the) (NN alumini)) (PP (IN of) (NP (NNP Ananda) (NNP College)))))))) (. .)))",
  "entityNum": 2,
  "id": 905
 },
 {
  "taggedQuestion": "Which team did Wilfred McDonalds and Cam Plante play for?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which team",
    "originStr": "which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did wilfred mcdonalds and cam plante play for",
    "originStr": "did wilfred mcdonalds and cam plante play for"
   }
  ],
  "question": "Which team did Wilfred McDonalds and Cam Plante play for",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VBD did) (NP (NP (NNP Wilfred) (NNP McDonalds)) (CC and) (NP (NNP Cam) (NNP Plante))) (VP (VB play) (PP (IN for)))) (. ?)))",
  "entityNum": 1,
  "id": 906
 },
 {
  "taggedQuestion": "What are the <e0> whose network's stockholder is <e1>?",
  "entityMap": {
   "<e1>": "Warner Bros. Television",
   "<e0>": "television shows"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what are the television shows whose network's #entity1",
    "originStr": "what are the television shows whose network's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "stockholder is warner bros. television",
    "originStr": "stockholder is warner bros. television"
   }
  ],
  "question": "What are the television shows whose network's stockholder is Warner Bros. Television",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN <e0>)) (SBAR (WHNP (WP$ whose) (NP (NN network) (POS 's)) (NN stockholder)) (S (VP (VBZ is) (NP (ADD <e1>))))))) (. ?)))",
  "entityNum": 2,
  "id": 907
 },
 {
  "taggedQuestion": "Name the <e0> judged by Rand Jackson .",
  "entityMap": {
   "<e0>": "Fox TV show"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the fox tv show",
    "originStr": "name the fox tv show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "judged by rand jackson",
    "originStr": "judged by rand jackson"
   }
  ],
  "question": "Name the Fox TV show judged by Rand Jackson",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (VP (VBN judged) (PP (IN by) (NP (NNP Rand) (NNP Jackson)))))) (. .)))",
  "entityNum": 1,
  "id": 908
 },
 {
  "taggedQuestion": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "what is the number of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the total number of software whose programming language is c++",
    "originStr": "what is the total number of software whose programming language is c++"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and operating system is microsoft windows",
    "originStr": "and operating system is microsoft windows"
   }
  ],
  "question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN number)) (PP (IN of) (NP (NP (NN software)) (SBAR (WHNP (WP$ whose) (NML (NN programming)) (NN language)) (S (VP (VBZ is) (SBAR (S (NP (NP (NNP C++)) (CC and) (NP (VBG operating) (NN system))) (VP (VBZ is) (NP (NNP Microsoft) (NNP Windows)))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 909
 },
 {
  "taggedQuestion": "Name the city of Phil-Ellena .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the city of Phil-Ellena",
    "originStr": "Name the city of Phil-Ellena"
   }
  ],
  "question": "Name the city of Phil-Ellena",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Phil-Ellena> <http://dbpedia.org/ontology/city> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP Phil) (HYPH -) (NNP Ellena))))) (. .)))",
  "entityNum": 1,
  "id": 910
 },
 {
  "taggedQuestion": "How many companies are located in a <e0>?",
  "entityMap": {
   "<e0>": "spanish speaking region"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many companies are located in #entity1",
    "originStr": "how many companies are located in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a spanish speaking region",
    "originStr": "a spanish speaking region"
   }
  ],
  "question": "how many companies are located in a spanish speaking region",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
  "syntaxTreeText": "(ROOT (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (NNS companies)) (VP (VBP are) (VP (VBN located) (PP (IN in) (NP (DT a) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 911
 },
 {
  "taggedQuestion": "What is the combatant of the <e0> and also the ethnic group of the Linda Hogan ?",
  "entityMap": {
   "<e0>": "Northwest Indian War"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the combatant of the northwest indian war",
    "originStr": "what is the combatant of the northwest indian war"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and also the ethnic group of the linda hogan",
    "originStr": "and also the ethnic group of the linda hogan"
   }
  ],
  "question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/property/combatant> ?uri. <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN combatant)) (PP (IN of) (NP (NP (DT the) (NN <e0>)) (CC and) (NP (ADVP (RB also)) (NP (DT the) (JJ ethnic) (NN group)) (PP (IN of) (NP (DT the) (NNP Linda) (NNP Hogan)))))))) (. ?)))",
  "entityNum": 1,
  "id": 912
 },
 {
  "taggedQuestion": "Which airlines fly to <e0>?",
  "entityMap": {
   "<e0>": "Gimhae International Airport"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which airlines",
    "originStr": "which airlines"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "fly to gimhae international airport",
    "originStr": "fly to gimhae international airport"
   }
  ],
  "question": "Which airlines fly to Gimhae International Airport",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> } ",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS airlines)) (VP (VBP fly) (PP (IN to) (NP (ADD <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 913
 },
 {
  "taggedQuestion": "GetTV is owned by which organisation?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "gettv is owned by",
    "originStr": "gettv is owned by"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which organisation",
    "originStr": "which organisation"
   }
  ],
  "question": "GetTV is owned by which organisation",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
  "syntaxTreeText": "(ROOT (S (NP (NNP GetTV)) (VP (VBZ is) (VP (VBN owned) (WHPP (IN by) (WHNP (WDT which) (NN organisation))))) (. ?)))",
  "entityNum": 1,
  "id": 914
 },
 {
  "taggedQuestion": "Name the islands that belong to the archipelago whose largest city is Papeete.",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "name the islands that belong to #entity1",
    "originStr": "name the islands that belong to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the archipelago whose largest city is papeete",
    "originStr": "the archipelago whose largest city is papeete"
   }
  ],
  "question": "Name the islands that belong to the archipelago whose largest city is Papeete",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NNS islands)) (SBAR (WHNP (WDT that)) (S (VP (VBP belong) (PP (IN to) (NP (NP (DT the) (NN archipelago)) (SBAR (WHNP (WP$ whose) (JJS largest) (NN city)) (S (VP (VBZ is) (NP (NNP Papeete)))))))))))) (. .)))",
  "entityNum": 2,
  "id": 915
 },
 {
  "taggedQuestion": "Which team did Dave Bing and Ron Reed started their basketball career?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "in which team",
    "originStr": "in which team"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "did dave bing and ron reed started their basketball career",
    "originStr": "did dave bing and ron reed started their basketball career"
   }
  ],
  "question": "In which team did Dave Bing and Ron Reed started their basketball career",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN team)) (SQ (VP (VBD did) (SBAR (S (NP (NP (NNP Dave) (NNP Bing)) (CC and) (NP (NNP Ron) (NNP Reed))) (VP (VBD started) (NP (PRP$ their) (NN basketball) (NN career))))))) (. ?)))",
  "entityNum": 1,
  "id": 916
 },
 {
  "taggedQuestion": "List the settlements area whose province is Metropolitan City of Venice ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the settlements area",
    "originStr": "list the settlements area"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose province is metropolitan city of venice",
    "originStr": "whose province is metropolitan city of venice"
   }
  ],
  "question": "List the settlements area whose province is Metropolitan City of Venice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (NNS settlements) (NN area)) (SBAR (WHNP (WP$ whose) (NN province)) (S (VP (VBZ is) (NP (NP (NNP Metropolitan) (NNP City)) (PP (IN of) (NP (NNP Venice))))))))) (. ?)))",
  "entityNum": 1,
  "id": 917
 },
 {
  "taggedQuestion": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede?",
  "entityMap": {
   "<e0>": "Detroit , MI place"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what was recorded by live in detroit, mi",
    "originStr": "what was recorded by live in detroit, mi"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and also place of birth of the bodhin kjolhede",
    "originStr": "and also place of birth of the bodhin kjolhede"
   }
  ],
  "question": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (VP (VBN recorded) (PP (IN by) (NP (NP (UCP (ADJP (JJ Live) (PP (IN in) (NP (NNP Detroit) (, ,) (NNP MI)))) (CC and) (ADVP (RB also))) (NN place)) (PP (IN of) (NP (NP (NN birth)) (PP (IN of) (NP (DT the) (NNP Bodhin) (NNP Kjolhede))))))))) (. ?)))",
  "entityNum": 1,
  "id": 918
 },
 {
  "taggedQuestion": "How many different institutes have the members of <e0>'s Corps graduated?",
  "entityMap": {
   "<e0>": "Judge Advocate General"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "How many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "from how many different institutes have #entity1 graduated",
    "originStr": "from how many different institutes have #entity1 graduated"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the members of judge advocate general's corps",
    "originStr": "the members of judge advocate general's corps"
   }
  ],
  "question": "From how many different institutes have the members of Judge Advocate General's Corps graduated",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHADJP (WRB How) (JJ many)) (S (NP (JJ different) (NNS institutes)) (VP (VBP have) (NP (NP (DT the) (NNS members)) (PP (IN of) (NP (NP (NN <e0>) (POS 's)) (NNP Corps))))))) (VP (VBD graduated)) (. ?)))",
  "entityNum": 2,
  "id": 919
 },
 {
  "taggedQuestion": "Who isa famous relative of anne spielberg?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "has a famous relative of anne",
    "originStr": "has a famous relative of anne"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose a famous relative of anne spielberg",
    "originStr": "whose a famous relative of anne spielberg"
   }
  ],
  "question": "Whose a famous relative of anne spielberg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Anne_Spielberg>  . }",
  "syntaxTreeText": "(ROOT (FRAG (FRAG (WHNP (WP Who)) (NP (NNP isa))) (NP (NP (JJ famous) (NN relative)) (PP (IN of) (NP (NN anne) (NNP spielberg)))) (. ?)))",
  "entityNum": 1,
  "id": 920
 },
 {
  "taggedQuestion": "Which city does Northeast Library belong?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "To which city does Northeast Library belong",
    "originStr": "To which city does Northeast Library belong"
   }
  ],
  "question": "To which city does Northeast Library belong",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northeast_Library> <http://dbpedia.org/ontology/city> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN city)) (SQ (VBZ does) (NP (NNP Northeast) (NNP Library)) (VP (VB belong))) (. ?)))",
  "entityNum": 1,
  "id": 921
 },
 {
  "taggedQuestion": "What are the airline hubs of Cascade Airways?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What are the airline hubs of Cascade Airways",
    "originStr": "What are the airline hubs of Cascade Airways"
   }
  ],
  "question": "What are the airline hubs of Cascade Airways",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN airline) (NNS hubs)) (PP (IN of) (NP (NNP Cascade) (NNPS Airways))))) (. ?)))",
  "entityNum": 1,
  "id": 922
 },
 {
  "taggedQuestion": "Who has manufactured vehicles designed originally by NASA?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who has manufactured #entity1",
    "originStr": "who has manufactured #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "vehicles designed originally by nasa",
    "originStr": "vehicles designed originally by nasa"
   }
  ],
  "question": "Who has manufactured vehicles designed originally by NASA",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/NASA> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ has) (VP (VBN manufactured) (NP (NP (NNS vehicles)) (VP (VBN designed) (ADVP (RB originally)) (PP (IN by) (NP (NNP NASA)))))))) (. ?)))",
  "entityNum": 2,
  "id": 923
 },
 {
  "taggedQuestion": "What is the order of the Henry Clay and profession of the <e0>?",
  "entityMap": {
   "<e0>": "William Luther Hill"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the order of the henry clay",
    "originStr": "what is the order of the henry clay"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and profession of the william luther hill",
    "originStr": "and profession of the william luther hill"
   }
  ],
  "question": "What is the order of the Henry Clay and profession of the William Luther Hill",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Clay> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN order)) (PP (IN of) (NP (DT the) (NNP Henry) (NNP Clay)))) (CC and) (NP (NP (NN profession)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 924
 },
 {
  "taggedQuestion": "What show  has theme music composer as Ron Grainer and at the same time  related to Class (<e0>)?",
  "entityMap": {
   "<e0>": "2016 TV series"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what show has theme music composer as ron grainer",
    "originStr": "what show has theme music composer as ron grainer"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and at the same time related to class (2016 tv series)",
    "originStr": "and at the same time related to class (2016 tv series)"
   }
  ],
  "question": "What show has theme music composer as Ron Grainer and at the same time related to Class (2016 TV series)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Class_(2016_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN show)) (SQ (VBZ has) (NP (NP (NN theme) (NN music) (NN composer)) (PP (PP (IN as) (NP (NNP Ron) (NNP Grainer))) (CC and) (PP (IN at) (NP (DT the) (JJ same) (NN time))))) (VP (VBN related) (PP (IN to) (NP (NN Class))) (PRN (-LRB- -LRB-) (NP (NN <e0>)) (-RRB- -RRB-)))) (. ?)))",
  "entityNum": 1,
  "id": 925
 },
 {
  "taggedQuestion": "What is the life stance of the ethnic groups related to Micronesia ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the life stance of #entity1",
    "originStr": "what is the life stance of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the ethnic groups related to micronesia",
    "originStr": "the ethnic groups related to micronesia"
   }
  ],
  "question": "What is the life stance of the ethnic groups related to Micronesia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Micronesia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN life) (NN stance)) (PP (IN of) (NP (DT the) (JJ ethnic) (NNS groups)))) (VP (VBN related) (PP (IN to) (NP (NNP Micronesia))))) (. ?)))",
  "entityNum": 2,
  "id": 926
 },
 {
  "taggedQuestion": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the river whose mouth mountain is southend-on-sea",
    "originStr": "name the river whose mouth mountain is southend-on-sea"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and mouth place is essex",
    "originStr": "and mouth place is essex"
   }
  ],
  "question": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Southend-on-Sea> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WHNP (WP$ whose) (NML (NN mouth)) (NN mountain)) (S (VBZ is) (NP (NML (NML (NNP Southend)) (HYPH -) (PP (IN on) (HYPH -) (NP (NN Sea) (CC and) (NN mouth)))) (NN place)))) (S (VP (VBZ is) (NP (NNP Essex))))))) (. .)))",
  "entityNum": 1,
  "id": 927
 },
 {
  "taggedQuestion": "Which venue of indy PopCon is also the death place of <e0> ?",
  "entityMap": {
   "<e0>": "Louis Le Cocqq"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which venue of indy popcon",
    "originStr": "which venue of indy popcon"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the death place of louis le cocqq",
    "originStr": "is also the death place of louis le cocqq"
   }
  ],
  "question": "Which venue of indy PopCon is also the death place of Louis Le Cocqq",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN venue) (PP (IN of) (NP (JJ indy) (NNP PopCon))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN death) (NN place)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 928
 },
 {
  "taggedQuestion": "What genre's softwares are released with a <e0>?",
  "entityMap": {
   "<e0>": "GNU GPL license"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what genre's #entity1",
    "originStr": "what genre's #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "softwares are released with a gnu gpl license",
    "originStr": "softwares are released with a gnu gpl license"
   }
  ],
  "question": "What genre's softwares are released with a GNU GPL license",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NP (NN genre) (POS 's)) (NNS softwares)) (VP (VBP are) (VP (VBN released) (PP (IN with) (NP (DT a) (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 929
 },
 {
  "taggedQuestion": "Is Christchurch the largest city of South Island?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Christchurch the largest city of South Island",
    "originStr": "Is Christchurch the largest city of South Island"
   }
  ],
  "question": "Is Christchurch the largest city of South Island",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Christchurch)) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP South) (NNP Island)))) (. ?)))",
  "entityNum": 1,
  "id": 930
 },
 {
  "taggedQuestion": "Who is the leader of Allgemeine SS ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the leader of Allgemeine SS",
    "originStr": "Who is the leader of Allgemeine SS"
   }
  ],
  "question": "Who is the leader of Allgemeine SS",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN leader)) (PP (IN of) (NP (NNP Allgemeine) (NNP SS))))) (. ?)))",
  "entityNum": 1,
  "id": 931
 },
 {
  "taggedQuestion": "Giorgos Kaminis is the mayor of what?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 is the mayor of what",
    "originStr": "#entity1 is the mayor of what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "giorgos kaminis",
    "originStr": "giorgos kaminis"
   }
  ],
  "question": "Giorgos Kaminis is the mayor of what",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis> } ",
  "syntaxTreeText": "(ROOT (S (NP (NNP Giorgos) (NNP Kaminis)) (VP (VBZ is) (NP (NP (DT the) (NN mayor)) (PP (IN of) (NP (WP what))))) (. ?)))",
  "entityNum": 2,
  "id": 932
 },
 {
  "taggedQuestion": "Where is the headquarters of Metro Transit (Minnesota) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Where is the headquarters of Metro Transit (Minnesota)",
    "originStr": "Where is the headquarters of Metro Transit (Minnesota)"
   }
  ],
  "question": "Where is the headquarters of Metro Transit (Minnesota)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (NN headquarters)) (PP (IN of) (NP (NNP Metro) (NNP Transit) (-LRB- -LRB-) (NNP Minnesota) (-RRB- -RRB-))))) (. ?)))",
  "entityNum": 1,
  "id": 933
 },
 {
  "taggedQuestion": "Give me the count of all the names of characters created by Frank Miller",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "give me"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "give me the count of all the names of #entity1",
    "originStr": "give me the count of all the names of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "characters created by frank miller",
    "originStr": "characters created by frank miller"
   }
  ],
  "question": "Give me the count of all the names of characters created by Frank Miller",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN count)) (PP (IN of) (NP (NP (PDT all) (DT the) (NNS names)) (PP (IN of) (NP (NP (NNS characters)) (VP (VBN created) (PP (IN by) (NP (NNP Frank) (NNP Miller))))))))))))",
  "entityNum": 2,
  "id": 934
 },
 {
  "taggedQuestion": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which fictional character",
    "originStr": "which fictional character"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "portrayed in terminator 2: judgment day is painted by josh friedman",
    "originStr": "portrayed in terminator 2: judgment day is painted by josh friedman"
   }
  ],
  "question": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (JJ fictional) (NN character)) (SQ (VP (VBN portrayed) (PP (IN in) (NP (NNP Terminator) (CD 2))) (: :) (S (NP (NNP Judgment) (NNP Day)) (VP (VBZ is) (VP (VBN painted) (PP (IN by) (NP (NNP Josh) (NNP Friedman)))))))) (. ?)))",
  "entityNum": 1,
  "id": 935
 },
 {
  "taggedQuestion": "Where was the narrator of Spain on the Road Again born?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where was #entity1 on the road again born",
    "originStr": "where was #entity1 on the road again born"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the narrator of spain",
    "originStr": "the narrator of spain"
   }
  ],
  "question": "Where was the narrator of Spain on the Road Again born",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spain..._on_the_Road_Again> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NP (DT the) (NN narrator)) (PP (IN of) (NP (NP (NNP Spain)) (PP (IN on) (NP (DT the) (NNP Road) (NNP Again)))))) (VP (VBN born))) (. ?)))",
  "entityNum": 2,
  "id": 936
 },
 {
  "taggedQuestion": "Does AMC Gremlin have the Volkswagen engine?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does amc"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does AMC Gremlin have the Volkswagen engine",
    "originStr": "Does AMC Gremlin have the Volkswagen engine"
   }
  ],
  "question": "Does AMC Gremlin have the Volkswagen engine",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/AMC_Gremlin> <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/Volkswagen> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (NNP AMC))) (S (NP (NNP Gremlin)) (VP (VBP have) (NP (DT the) (NNP Volkswagen) (NN engine)))) (. ?)))",
  "entityNum": 1,
  "id": 937
 },
 {
  "taggedQuestion": "Name the movie with narrator as Trevor Peacock and music composer  as Christophe Beck.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the movie with narrator as trevor peacock",
    "originStr": "name the movie with narrator as trevor peacock"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and music composer as christophe beck",
    "originStr": "and music composer as christophe beck"
   }
  ],
  "question": "Name the movie with narrator as Trevor Peacock and music composer as Christophe Beck",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Christophe_Beck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT the) (NN movie)) (PP (IN with) (NP (NP (NP (NN narrator)) (PP (IN as) (NP (NNP Trevor) (NN Peacock)))) (CC and) (NP (NP (NN music) (NN composer)) (PP (IN as) (NP (NNP Christophe) (NNP Beck))))))) (. .)))",
  "entityNum": 1,
  "id": 938
 },
 {
  "taggedQuestion": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did the scientist study #entity1",
    "originStr": "where did the scientist study #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "whose doctoral thesis was supervised by leonard lerman",
    "originStr": "whose doctoral thesis was supervised by leonard lerman"
   }
  ],
  "question": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Leonard_Lerman> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VP (VBD did) (NP (DT the) (NN scientist) (NN study)) (SBAR (WHNP (WP$ whose)) (S (NP (JJ doctoral) (NN thesis)) (VP (VBD was) (VP (VBN supervised) (PP (IN by) (NP (NNP Leonard) (NNP Lerman))))))))) (. ?)))",
  "entityNum": 2,
  "id": 939
 },
 {
  "taggedQuestion": "Where can one find some quick bread in the world?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where can one find #entity1",
    "originStr": "where can one find #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "some quick bread in the world",
    "originStr": "some quick bread in the world"
   }
  ],
  "question": "Where can one find some quick bread in the world",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP one)) (VP (VB find) (NP (DT some) (JJ quick) (NN bread)) (PP (IN in) (NP (DT the) (NN world))))) (. ?)))",
  "entityNum": 2,
  "id": 940
 },
 {
  "taggedQuestion": "What is the sea whose cities are Gdask and Oulu?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what is the sea",
    "originStr": "what is the sea"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "whose cities are gdask and oulu",
    "originStr": "whose cities are gdask and oulu"
   }
  ],
  "question": "What is the sea whose cities are Gdask and Oulu",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Gda\u0144sk> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN sea)) (SBAR (WHNP (WP$ whose) (NNS cities)) (S (VP (VBP are) (NP (NNP Gdask) (CC and) (NNP Oulu))))))) (. ?)))",
  "entityNum": 1,
  "id": 941
 },
 {
  "taggedQuestion": "What rivers originate from Australian Alps?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what rivers",
    "originStr": "what rivers"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "originate from australian alps",
    "originStr": "originate from australian alps"
   }
  ],
  "question": "What rivers originate from Australian Alps",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Australian_Alps>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NP (NNS rivers))) (SQ (VP (VB originate) (PP (IN from) (NP (NNP Australian) (NNP Alps))))) (. ?)))",
  "entityNum": 1,
  "id": 942
 },
 {
  "taggedQuestion": "Which venues are located at places governed by John Roberts?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which venues are located at #entity1",
    "originStr": "which venues are located at #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "places governed by john roberts",
    "originStr": "places governed by john roberts"
   }
  ],
  "question": "Which venues are located at places governed by John Roberts",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/John_Roberts> . ?uri <http://dbpedia.org/property/address> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS venues)) (SQ (VBP are) (VP (VBN located) (PP (IN at) (NP (NP (NNS places)) (VP (VBN governed) (PP (IN by) (NP (NNP John) (NNP Roberts)))))))) (. ?)))",
  "entityNum": 2,
  "id": 943
 },
 {
  "taggedQuestion": "What is the venue of <e0>-Con International ?",
  "entityMap": {
   "<e0>": "San Diego Comic"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "What is the venue of San Diego Comic-Con International",
    "originStr": "What is the venue of San Diego Comic-Con International"
   }
  ],
  "question": "What is the venue of San Diego Comic-Con International",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Diego_Comic-Con_International> <http://dbpedia.org/property/venue> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN venue)) (PP (IN of) (NP (NML (NN <e0>) (HYPH -) (NN Con)) (NNP International))))) (. ?)))",
  "entityNum": 1,
  "id": 944
 },
 {
  "taggedQuestion": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which office holder owes its allegiance to #entity1",
    "originStr": "which office holder owes its allegiance to #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "a state whose capital town is jamestown, virginia",
    "originStr": "a state whose capital town is jamestown, virginia"
   }
  ],
  "question": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (NN office) (NN holder)) (VP (VBZ owes) (NP (PRP$ its) (NN allegiance)) (PP (IN to) (NP (DT a) (NN state)))))) (WHNP (WP$ whose) (NN capital) (NN town)) (SQ (VBZ is) (NP (NNP Jamestown) (, ,) (NNP Virginia))) (. ?)))",
  "entityNum": 2,
  "id": 945
 },
 {
  "taggedQuestion": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which professional fighter",
    "originStr": "which professional fighter"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who is also a politician and was elected to house of representatives of the philippines",
    "originStr": "who is also a politician and was elected to house of representatives of the philippines"
   }
  ],
  "question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines> } ",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT Which)) (S (NP (JJ professional) (NN fighter)))) (, ,) (WHNP (WP who)) (SQ (VP (VP (VBZ is) (ADVP (RB also)) (NP (DT a) (NN politician))) (CC and) (VP (VBD was) (VP (VBN elected) (PP (IN to) (NP (NP (NNP House)) (PP (IN of) (NP (NP (NNPS Representatives)) (PP (IN of) (NP (DT the) (NNPS Philippines))))))))))) (. ?)))",
  "entityNum": 1,
  "id": 946
 },
 {
  "taggedQuestion": "List the comic characters created by Joe Shuster ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "list the comic characters",
    "originStr": "list the comic characters"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "created by joe shuster",
    "originStr": "created by joe shuster"
   }
  ],
  "question": "List the comic characters created by Joe Shuster",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Joe_Shuster>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
  "syntaxTreeText": "(ROOT (SQ (VP (VB List) (NP (NP (DT the) (JJ comic) (NNS characters)) (VP (VBN created) (PP (IN by) (NP (NNP Joe) (NNP Shuster)))))) (. ?)))",
  "entityNum": 1,
  "id": 947
 },
 {
  "taggedQuestion": "What conventions are held in Rosemont, Illinois?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which kind of #entity1",
    "originStr": "which kind of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "conventions are held in rosemont, illinois",
    "originStr": "conventions are held in rosemont, illinois"
   }
  ],
  "question": "Which kind of conventions are held in Rosemont, Illinois",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Rosemont,_Illinois> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Convention>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS conventions)) (VP (VBP are) (VP (VBN held) (PP (IN in) (NP (NNP Rosemont) (, ,) (NNP Illinois)))))) (. ?)))",
  "entityNum": 2,
  "id": 948
 },
 {
  "taggedQuestion": "What city is located on the mouth of Duwamish River?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what city is located on #entity1",
    "originStr": "what city is located on #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the mouth of duwamish river",
    "originStr": "the mouth of duwamish river"
   }
  ],
  "question": "What city is located on the mouth of Duwamish River",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/riverMouth> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VBZ is) (VP (VBN located) (PP (IN on) (NP (NP (DT the) (NN mouth)) (PP (IN of) (NP (NNP Duwamish) (NNP River))))))) (. ?)))",
  "entityNum": 2,
  "id": 949
 },
 {
  "taggedQuestion": "Which governer of Winston Bryant is the president of Joseph Stiglitz ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which governor of winston bryant",
    "originStr": "which governor of winston bryant"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is the president of joseph stiglitz",
    "originStr": "is the president of joseph stiglitz"
   }
  ],
  "question": "Which governor of Winston Bryant is the president of Joseph Stiglitz",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN governer) (PP (IN of) (NP (NNP Winston) (NNP Bryant))))) (SQ (VBZ is) (NP (NP (DT the) (NN president)) (PP (IN of) (NP (NNP Joseph) (NNP Stiglitz))))) (. ?)))",
  "entityNum": 1,
  "id": 950
 },
 {
  "taggedQuestion": "How many people have led agencies in <e0>?",
  "entityMap": {
   "<e0>": "German occupied Europe"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "how many people have led #entity1",
    "originStr": "how many people have led #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "agencies in german occupied europe",
    "originStr": "agencies in german occupied europe"
   }
  ],
  "question": "How many people have led agencies in German occupied Europe",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBP have) (VP (VBN led) (NP (NNS agencies)) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 951
 },
 {
  "taggedQuestion": "Where did the plays written by Robert Schenkkan take place?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where did #entity1 take place",
    "originStr": "where did #entity1 take place"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the plays written by robert schenkkan",
    "originStr": "the plays written by robert schenkkan"
   }
  ],
  "question": "Where did the plays written by Robert Schenkkan take place",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (DT the) (NNS plays)) (VP (VBN written) (PP (IN by) (NP (NNP Robert) (NNP Schenkkan))))) (VP (VB take) (NP (NN place)))) (. ?)))",
  "entityNum": 2,
  "id": 952
 },
 {
  "taggedQuestion": "Which president did the predecessor of <e0>?",
  "entityMap": {
   "<e0>": "Simon Ferro work"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "under which president did #entity1 work",
    "originStr": "under which president did #entity1 work"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the predecessor of simon ferro",
    "originStr": "the predecessor of simon ferro"
   }
  ],
  "question": "Under which president did the predecessor of Simon Ferro work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Simon_Ferro> . ?x <http://dbpedia.org/ontology/president> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN president)) (SQ (VP (VBD did) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 2,
  "id": 953
 },
 {
  "taggedQuestion": "Name  some ww1 veterans.",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name some ww1 veterans",
    "originStr": "Name some ww1 veterans"
   }
  ],
  "question": "Name some ww1 veterans",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_I>  . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT some) (NN ww1) (NNS veterans))) (. .)))",
  "entityNum": 1,
  "id": 954
 },
 {
  "taggedQuestion": "Who appointed both John Drayton and William Clark to their respective offices?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who appointed both john drayton and william clark to their respective",
    "originStr": "who appointed both john drayton and william clark to their respective"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "offices",
    "originStr": "offices"
   }
  ],
  "question": "Who appointed both John Drayton and William Clark to their respective offices",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD appointed) (NP (CC both) (NP (NNP John) (NNP Drayton)) (CC and) (NP (NNP William) (NNP Clark))) (PP (IN to) (NP (PRP$ their) (JJ respective) (NNS offices))))) (. ?)))",
  "entityNum": 1,
  "id": 955
 },
 {
  "taggedQuestion": "Which operator of <e1> is also the  governing body of the <e0> ?",
  "entityMap": {
   "<e1>": "New Sanno Hotel",
   "<e0>": "Oahu Railway and Land Company"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which operator of new sanno hotel",
    "originStr": "which operator of new sanno hotel"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the governing body of the oahu railway and land company",
    "originStr": "is also the governing body of the oahu railway and land company"
   }
  ],
  "question": "Which operator of New Sanno Hotel is also the governing body of the Oahu Railway and Land Company",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN operator) (PP (IN of) (NP (NN <e1>))))) (SQ (VP (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (VBG governing) (NN body)) (PP (IN of) (NP (DT the) (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 956
 },
 {
  "taggedQuestion": "Which predecessor of Alexander Downer was deputy to Neil Brown ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which predecessor of alexander downer",
    "originStr": "which predecessor of alexander downer"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "was deputy to neil brown",
    "originStr": "was deputy to neil brown"
   }
  ],
  "question": "Which predecessor of Alexander Downer was deputy to Neil Brown",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN predecessor) (PP (IN of) (NP (NNP Alexander) (NNP Downer))))) (SQ (VBD was) (NP (NP (NN deputy)) (PP (IN to) (NP (NNP Neil) (NNP Brown))))) (. ?)))",
  "entityNum": 1,
  "id": 957
 },
 {
  "taggedQuestion": "Which are the predecessor of Chevrolet Caprice?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which are the predecessor of chevrolet",
    "originStr": "which are the predecessor of chevrolet"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "caprice",
    "originStr": "caprice"
   }
  ],
  "question": "Which are the predecessor of Chevrolet Caprice",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Caprice> <http://dbpedia.org/ontology/predecessor> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which)) (SQ (VBP are) (NP (NP (DT the) (NN predecessor)) (PP (IN of) (NP (NNP Chevrolet) (NNP Caprice))))) (. ?)))",
  "entityNum": 1,
  "id": 958
 },
 {
  "taggedQuestion": "Who wrote the album coming right before Dead Man's Chest's OST?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who wrote #entity1",
    "originStr": "who wrote #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the album coming right before dead man's chest's ost",
    "originStr": "the album coming right before dead man's chest's ost"
   }
  ],
  "question": "Who wrote the album coming right before Dead Man's Chest's OST",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nextAlbum> <http://dbpedia.org/resource/Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD wrote) (NP (DT the) (NN album)) (S (VP (VBG coming) (ADVP (RB right)) (PP (IN before) (NP (NP (NP (NNP Dead) (NNP Man) (POS 's)) (NN Chest) (POS 's)) (NN OST))))))) (. ?)))",
  "entityNum": 2,
  "id": 959
 },
 {
  "taggedQuestion": "What is the series of the book which is a subsequent work of <e0>: The Edge of Human ?",
  "entityMap": {
   "<e0>": "Blade Runner 2"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what is the series of #entity1",
    "originStr": "what is the series of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the book which is a subsequent work of blade runner 2: the edge of human",
    "originStr": "the book which is a subsequent work of blade runner 2: the edge of human"
   }
  ],
  "question": "What is the series of the book which is a subsequent work of Blade Runner 2: The Edge of Human",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN series)) (PP (IN of) (NP (NP (DT the) (NN book)) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (NP (NP (NP (DT a) (JJ subsequent) (NN work)) (PP (IN of) (NP (NN <e0>)))) (: :) (NP (NP (DT The) (NNP Edge)) (PP (IN of) (NP (NNP Human)))))))))))) (. ?)))",
  "entityNum": 2,
  "id": 960
 },
 {
  "taggedQuestion": "How many cities's teams did David Bowens play?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "how many"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "for how many cities' #entity1 play",
    "originStr": "for how many cities' #entity1 play"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "teams did david bowens",
    "originStr": "teams did david bowens"
   }
  ],
  "question": "For how many cities' teams did David Bowens play",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/David_Bowens> <http://dbpedia.org/ontology/formerTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NNS cities) (POS 's)) (NNS teams)) (SQ (VBD did) (NP (NNP David) (NNP Bowens)) (VP (VB play))) (. ?)))",
  "entityNum": 2,
  "id": 961
 },
 {
  "taggedQuestion": "Is Anne Hidalgo the mayor of Paris?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Anne Hidalgo the mayor of Paris",
    "originStr": "Is Anne Hidalgo the mayor of Paris"
   }
  ],
  "question": "Is Anne Hidalgo the mayor of Paris",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Anne_Hidalgo> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Anne) (NNP Hidalgo)) (NP (NP (DT the) (NN mayor)) (PP (IN of) (NP (NNP Paris)))) (. ?)))",
  "entityNum": 1,
  "id": 962
 },
 {
  "taggedQuestion": "Which countries have models hanged themselves?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "in which countries have #entity1",
    "originStr": "in which countries have #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "models hanged themselves",
    "originStr": "models hanged themselves"
   }
  ],
  "question": "In which countries have models hanged themselves",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide_by_hanging> . ?x <http://dbpedia.org/property/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NNS countries)) (SQ (VBP have) (NP (NNS models)) (VP (VBN hanged) (NP (PRP themselves)))) (. ?)))",
  "entityNum": 2,
  "id": 963
 },
 {
  "taggedQuestion": "Is the Vadodara railway junction onwed by <e0>?",
  "entityMap": {
   "<e0>": "Indian Railway Ministry"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is the Vadodara railway junction owned by Indian Railway Ministry",
    "originStr": "Is the Vadodara railway junction owned by Indian Railway Ministry"
   }
  ],
  "question": "Is the Vadodara railway junction owned by Indian Railway Ministry",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ministry_of_Railways_(India)> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (DT the) (NNP Vadodara) (NN railway) (NN junction)) (VP (VBN onwed) (PP (IN by) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 964
 },
 {
  "taggedQuestion": "What city gave birth to Mishal Raheja and also houses New India Assurance?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what city",
    "originStr": "what city"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "gave birth to mishal raheja and also houses new india assurance",
    "originStr": "gave birth to mishal raheja and also houses new india assurance"
   }
  ],
  "question": "What city gave birth to Mishal Raheja and also houses New India Assurance",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mishal_Raheja> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/New_India_Assurance> <http://dbpedia.org/property/location> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN city)) (SQ (VP (VP (VBD gave) (NP (NN birth)) (PP (IN to) (NP (NNP Mishal) (NNP Raheja)))) (CC and) (ADVP (RB also)) (VP (VBZ houses) (NP (NNP New) (NNP India) (NNP Assurance))))) (. ?)))",
  "entityNum": 1,
  "id": 965
 },
 {
  "taggedQuestion": "Which TV show whose theme is composed by someone signed up with ATO records?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which tv show whose theme is composed by #entity1",
    "originStr": "which tv show whose theme is composed by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "someone signed up with ato records",
    "originStr": "someone signed up with ato records"
   }
  ],
  "question": "Which TV show whose theme is composed by someone signed up with ATO records",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/ATO_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV)) (SQ (NP (NP (NN show)) (SBAR (WHNP (WP$ whose) (NML (NN theme))) (S (VP (VBZ is) (VP (VBN composed) (PP (IN by) (NP (NN someone)))))))) (VP (VBD signed) (PRT (RP up)) (PP (IN with) (NP (NN ATO) (NNS records))))) (. ?)))",
  "entityNum": 2,
  "id": 966
 },
 {
  "taggedQuestion": "Which models were featured in <e0>?",
  "entityMap": {
   "<e0>": "Playboy Playmates 1954"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which models",
    "originStr": "which models"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "were featured in playboy playmates 1954",
    "originStr": "were featured in playboy playmates 1954"
   }
  ],
  "question": "Which models were featured in Playboy Playmates 1954",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/succeeded> <http://dbpedia.org/resource/List_of_Playboy_Playmates_of_1954>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PlayboyPlaymate>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS models)) (VP (VBD were) (VP (VBN featured) (PP (IN in) (NP (NN <e0>)))))) (. ?)))",
  "entityNum": 1,
  "id": 967
 },
 {
  "taggedQuestion": "What currencies have been prevalent in the country whose national anthem is La Marseillaise?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what currencies have been prevalent in #entity1",
    "originStr": "what currencies have been prevalent in #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the country whose national anthem is la marseillaise",
    "originStr": "the country whose national anthem is la marseillaise"
   }
  ],
  "question": "What currencies have been prevalent in the country whose national anthem is La Marseillaise",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/La_Marseillaise> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
  "syntaxTreeText": "(ROOT (SBARQ (SBAR (WHNP (WDT What)) (S (NP (NNS currencies)) (VP (VBP have) (VP (VBN been) (ADJP (JJ prevalent)) (PP (IN in) (NP (DT the) (NN country))))))) (WHNP (WP$ whose) (JJ national) (NN anthem)) (SQ (VBZ is) (NP (NNP La) (NNP Marseillaise))) (. ?)))",
  "entityNum": 2,
  "id": 968
 },
 {
  "taggedQuestion": "Who is the relative of Jim Farley (businessman) ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the relative of Jim Farley (businessman)",
    "originStr": "Who is the relative of Jim Farley (businessman)"
   }
  ],
  "question": "Who is the relative of Jim Farley (businessman)",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Farley_(businessman)> <http://dbpedia.org/property/relatives> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ relative)) (PP (IN of) (NP (NNP Jim) (NNP Farley) (PRN (-LRB- -LRB-) (NP (NN businessman)) (-RRB- -RRB-)))))) (. ?)))",
  "entityNum": 1,
  "id": 969
 },
 {
  "taggedQuestion": "Is Latin the official language of <e0>?",
  "entityMap": {
   "<e1>": "Latin official language",
   "<e0>": "Sovereign Military Order of Malta"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "is"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Is Latin the official language of Sovereign Military Order of Malta",
    "originStr": "Is Latin the official language of Sovereign Military Order of Malta"
   }
  ],
  "question": "Is Latin the official language of Sovereign Military Order of Malta",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sovereign_Military_Order_of_Malta> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Latin> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Is) (NP (NNP Latin)) (NP (NP (DT the) (JJ official) (NN language)) (PP (IN of) (NP (NN <e0>)))) (. ?)))",
  "entityNum": 1,
  "id": 970
 },
 {
  "taggedQuestion": "Where do the politicians, Blanche Bruce and <e0> work?",
  "entityMap": {
   "<e0>": "John Franklin Miller"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "where do the politicians, blanche bruce and john franklin miller",
    "originStr": "where do the politicians, blanche bruce and john franklin miller"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "work",
    "originStr": "work"
   }
  ],
  "question": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/John_Franklin_Miller_(senator)> <http://dbpedia.org/property/office> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (DT the) (NNS politicians)) (, ,) (NP (NNP Blanche) (NNP Bruce)) (CC and) (NP (ADD <e0>))) (VP (VB work))) (. ?)))",
  "entityNum": 1,
  "id": 971
 },
 {
  "taggedQuestion": "Name an American football player whose debuted in Chicago Bears and former team is <e0>",
  "entityMap": {
   "<e0>": "1998 Baltimore Ravens season."
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name an american football player whose debuted in chicago bears",
    "originStr": "name an american football player whose debuted in chicago bears"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and former team is 1998 baltimore ravens season",
    "originStr": "and former team is 1998 baltimore ravens season"
   }
  ],
  "question": "Name an American football player whose debuted in Chicago Bears and former team is 1998 Baltimore Ravens season",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Chicago_Bears> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/1998_Baltimore_Ravens_season>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT an) (JJ American) (NN football) (NN player)) (SBAR (WHNP (WP$ whose) (NML (S (VP (VBN debuted) (PP (IN in) (NP (NP (NNP Chicago) (NNPS Bears)) (CC and) (NP (JJ former))))))) (NN team)) (S (VP (VBZ is) (NP (ADD <e0>)))))))))",
  "entityNum": 1,
  "id": 972
 },
 {
  "taggedQuestion": "Name a  river with source country as Zambia and source location as Ikelenge  District.",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name a river with source country as zambia",
    "originStr": "name a river with source country as zambia"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and source location as ikelenge district",
    "originStr": "and source location as ikelenge district"
   }
  ],
  "question": "Name a river with source country as Zambia and source location as Ikelenge District",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (DT a) (NN river)) (PP (IN with) (NP (NP (NP (NN source) (NN country)) (PP (IN as) (NP (NNP Zambia)))) (CC and) (NP (NP (NN source) (NN location)) (PP (IN as) (NP (NNP Ikelenge) (NNP District))))))) (. .)))",
  "entityNum": 1,
  "id": 973
 },
 {
  "taggedQuestion": "Does Ford own the <e0>?",
  "entityMap": {
   "<e0>": "Ford Kansas Assembly plant"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Does Ford own the Ford Kansas Assembly plant",
    "originStr": "Does Ford own the Ford Kansas Assembly plant"
   }
  ],
  "question": "Does Ford own the Ford Kansas Assembly plant",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ford_Motor_Company> }",
  "syntaxTreeText": "(ROOT (SQ (VBZ Does) (NP (NNP Ford)) (VP (VB own) (NP (DT the) (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 974
 },
 {
  "taggedQuestion": "Which fields of the Paul Demiville is also the faith of <e0> ?",
  "entityMap": {
   "<e0>": "Koay Teng Hai"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which fields of the paul demiville",
    "originStr": "which fields of the paul demiville"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is also the faith of koay teng hai",
    "originStr": "is also the faith of koay teng hai"
   }
  ],
  "question": "Which fields of the Paul Demiville is also the faith of Koay Teng Hai",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Koay_Teng_Hai> <http://dbpedia.org/ontology/religion> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NP (NNS fields)) (PP (IN of) (NP (DT the) (NNP Paul) (NNP Demiville))))) (SQ (VBZ is) (ADVP (RB also)) (NP (NP (DT the) (NN faith)) (PP (IN of) (NP (NN <e0>))))) (. ?)))",
  "entityNum": 1,
  "id": 975
 },
 {
  "taggedQuestion": "Name the institute of Alton Ochsner .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the institute of Alton Ochsner",
    "originStr": "Name the institute of Alton Ochsner"
   }
  ],
  "question": "Name the institute of Alton Ochsner",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN institute)) (PP (IN of) (NP (NNP Alton) (NNP Ochsner))))) (. .)))",
  "entityNum": 1,
  "id": 976
 },
 {
  "taggedQuestion": "What movies have been written by authors of Monty Python ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "what movies have been written by #entity1",
    "originStr": "what movies have been written by #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "authors of monty python",
    "originStr": "authors of monty python"
   }
  ],
  "question": "What movies have been written by authors of Monty Python",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT What)) (S (NP (NNS movies)) (VP (VBP have) (VP (VBN been) (VP (VBN written) (PP (IN by) (NP (NP (NNS authors)) (PP (IN of) (NP (NNP Monty) (NNP Python))))))))) (. ?)))",
  "entityNum": 2,
  "id": 977
 },
 {
  "taggedQuestion": "Who was the cover artist of The Adventure of Tom Sawyer also wrote <e0> ?",
  "entityMap": {
   "<e0>": "mark Twain Tonight"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who was the cover artist of the adventure of tom sawyer",
    "originStr": "who was the cover artist of the adventure of tom sawyer"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "also wrote mark twain tonight",
    "originStr": "also wrote mark twain tonight"
   }
  ],
  "question": "Who was the cover artist of The Adventure of Tom Sawyer also wrote mark Twain Tonight",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (NN cover)) (SBAR (S (NP (NP (NN artist)) (PP (IN of) (NP (NP (DT The) (NN Adventure)) (PP (IN of) (NP (NNP Tom) (NNP Sawyer)))))) (ADVP (RB also)) (VP (VBD wrote) (NP (ADD <e0>))))))) (. ?)))",
  "entityNum": 1,
  "id": 978
 },
 {
  "taggedQuestion": "Name the scientist whose academic advisor is <e0> and supervisor is Georg Meissner.",
  "entityMap": {
   "<e0>": "Karl Ewald Hasse"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the scientist whose academic advisor is karl ewald hasse",
    "originStr": "name the scientist whose academic advisor is karl ewald hasse"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and supervisor is georg meissner",
    "originStr": "and supervisor is georg meissner"
   }
  ],
  "question": "Name the scientist whose academic advisor is Karl Ewald Hasse and supervisor is Georg Meissner",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (S (S (VP (VB Name) (NP (NP (DT the) (NN scientist)) (SBAR (WHNP (WP$ whose) (JJ academic) (NN advisor)) (S (VP (VBZ is) (NP (NP (ADD <e0>)) (CC and) (NP (NN supervisor))))))))) (VP (VBZ is) (NP (NNP Georg) (NNP Meissner))) (. .)))",
  "entityNum": 1,
  "id": 979
 },
 {
  "taggedQuestion": "Where do <e0> live?",
  "entityMap": {
   "<e0>": "current famous NatGeo photographers"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "Where"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "where do #entity1 live",
    "originStr": "where do #entity1 live"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "current famous natgeo photographers",
    "originStr": "current famous natgeo photographers"
   }
  ],
  "question": "Where do current famous NatGeo photographers live",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/National_Geographic_(magazine)> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Photographer>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (ADD <e0>)) (S (VP (VB live))))) (. ?)))",
  "entityNum": 2,
  "id": 980
 },
 {
  "taggedQuestion": "Georg Meissner was doctoral supervisor of which scientist ?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "georg meissner was doctoral supervisor of",
    "originStr": "georg meissner was doctoral supervisor of"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which scientist",
    "originStr": "which scientist"
   }
  ],
  "question": "Georg Meissner was doctoral supervisor of which scientist",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
  "syntaxTreeText": "(ROOT (S (NP (NNP Georg) (NNP Meissner)) (VP (VBD was) (NP (NP (JJ doctoral) (NN supervisor)) (PP (IN of) (NP (WDT which) (NN scientist))))) (. ?)))",
  "entityNum": 1,
  "id": 981
 },
 {
  "taggedQuestion": "Did Stanlee write the <e0>?",
  "entityMap": {
   "<e0>": "Tales of Suspense"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "did"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Did Stanlee write the Tales of Suspense",
    "originStr": "Did Stanlee write the Tales of Suspense"
   }
  ],
  "question": "Did Stanlee write the Tales of Suspense",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Stan_Lee> }",
  "syntaxTreeText": "(ROOT (SQ (VBD Did) (NP (NNP Stanlee)) (VP (VB write) (NP (DT the) (NN <e0>))) (. ?)))",
  "entityNum": 1,
  "id": 982
 },
 {
  "taggedQuestion": "Name the <e0> of the Trishna (yacht) and INS Viraat (R22).",
  "entityMap": {
   "<e0>": "common home port"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common home port of the trishna (yacht) and ins viraat",
    "originStr": "name the common home port of the trishna (yacht) and ins viraat"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "(r22)",
    "originStr": "(r22)"
   }
  ],
  "question": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trishna_(yacht)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN <e0>)) (PP (IN of) (NP (NP (NP (DT the) (NNP Trishna)) (-LRB- -LRB-) (NP (NN yacht)) (-RRB- -RRB-)) (CC and) (NP (NNP INS) (NNP Viraat) (PRN (-LRB- -LRB-) (NP (NN R22)) (-RRB- -RRB-))))))) (. .)))",
  "entityNum": 1,
  "id": 983
 },
 {
  "taggedQuestion": "Does the US navy have the structure of command of us department of defence?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "JUDGE",
    "trigger": "does the us"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "does the US navy have the structure of command of us department of defence",
    "originStr": "does the US navy have the structure of command of us department of defence"
   }
  ],
  "question": "does the US navy have the structure of command of us department of defence",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> }",
  "syntaxTreeText": "(ROOT (SQ (SQ (VBZ Does) (NP (DT the) (NNP US))) (S (NP (NN navy)) (VP (VBP have) (NP (NP (DT the) (NN structure)) (PP (IN of) (NP (NP (NN command)) (PP (IN of) (NP (NP (PRP us) (NN department)) (PP (IN of) (NP (NN defence)))))))))) (. ?)))",
  "entityNum": 1,
  "id": 984
 },
 {
  "taggedQuestion": "Name books with publisher as Francisco de Robles and writer as <e0> .",
  "entityMap": {
   "<e1>": "Francisco de Robles writer",
   "<e0>": "Miguel de Cervantes"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name books with publisher as francisco de robles",
    "originStr": "name books with publisher as francisco de robles"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "and writer as miguel de cervantes",
    "originStr": "and writer as miguel de cervantes"
   }
  ],
  "question": "Name books with publisher as Francisco de Robles and writer as Miguel de Cervantes",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles> . ?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NNS books)) (PP (IN with) (NP (NP (NP (NN publisher)) (PP (IN as) (NP (NNP Francisco) (FW de) (NNP Robles)))) (CC and) (NP (NP (NN writer)) (PP (IN as) (NP (ADD <e0>))))))) (. .)))",
  "entityNum": 1,
  "id": 985
 },
 {
  "taggedQuestion": "Who owns the schools which have a penguin as its mascot?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "who owns #entity1",
    "originStr": "who owns #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the schools which have a penguin as its mascot",
    "originStr": "the schools which have a penguin as its mascot"
   }
  ],
  "question": "Who owns the schools which have a penguin as its mascot",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ owns) (NP (NP (DT the) (NNS schools)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (DT a) (NN penguin)) (PP (IN as) (NP (PRP$ its) (NN mascot)))))))))) (. ?)))",
  "entityNum": 2,
  "id": 986
 },
 {
  "taggedQuestion": "River which flows into the <e0> pass through which states?",
  "entityMap": {
   "<e0>": "eugene mahoney state park"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "#entity1 pass through which states",
    "originStr": "#entity1 pass through which states"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "river which flows into the eugene mahoney state park",
    "originStr": "river which flows into the eugene mahoney state park"
   }
  ],
  "question": "River which flows into the eugene mahoney state park pass through which states",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Eugene_T._Mahoney_State_Park> . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
  "syntaxTreeText": "(ROOT (S (NP (NP (NN River)) (SBAR (WHNP (WDT which)) (S (VP (VBZ flows) (PP (IN into) (NP (DT the) (NN <e0>))))))) (VP (VB pass) (FRAG (WHPP (IN through) (WHNP (WDT which) (NNS states))))) (. ?)))",
  "entityNum": 2,
  "id": 987
 },
 {
  "taggedQuestion": "What nation is Hornito located in, where Jamie Bateman Cayn died too?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what nation",
    "originStr": "what nation"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is hornito located in, where jamie bateman cayn died too",
    "originStr": "is hornito located in, where jamie bateman cayn died too"
   }
  ],
  "question": "What nation is Hornito located in, where Jamie Bateman Cayn died too",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jaime_Bateman_Cay\u00f3n> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Hornito,_Chiriqu\u00ed> <http://dbpedia.org/ontology/country> ?uri . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NN nation)) (SQ (VBZ is) (NP (NNP Hornito)) (VP (VBN located) (PP (IN in)) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (NNP Jamie) (NNP Bateman) (NNP Cayn)) (VP (VBD died) (ADVP (RB too))))))) (. ?)))",
  "entityNum": 1,
  "id": 988
 },
 {
  "taggedQuestion": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which tv show",
    "originStr": "which tv show"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "had a judge named harry connick, jr. and was presented by ryan seacrest",
    "originStr": "had a judge named harry connick, jr. and was presented by ryan seacrest"
   }
  ],
  "question": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.> . ?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NN TV) (NN show)) (SQ (VBD had) (NP (DT a) (NN judge)) (VP (VP (VBN named) (NP (NP (NNP Harry) (NNP Connick)) (, ,) (NP (NNP Jr.)))) (CC and) (VP (VBD was) (VP (VBN presented) (PP (IN by) (NP (NNP Ryan) (NNP Seacrest))))))) (. ?)))",
  "entityNum": 1,
  "id": 989
 },
 {
  "taggedQuestion": "Name the resting place of <e0> .",
  "entityMap": {
   "<e0>": "Fazlur Rahman Khan"
  },
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the resting place of Fazlur Rahman Khan",
    "originStr": "Name the resting place of Fazlur Rahman Khan"
   }
  ],
  "question": "Name the resting place of Fazlur Rahman Khan",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fazlur_Rahman_Khan> <http://dbpedia.org/ontology/restingPlace> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ resting) (NN place)) (PP (IN of) (NP (ADD <e0>))))) (. .)))",
  "entityNum": 1,
  "id": 990
 },
 {
  "taggedQuestion": "Which arena of <e0> is death location of Tigran Petrosian >?",
  "entityMap": {
   "<e0>": "WPC Dynamo Moscow"
  },
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "which arena of wpc dynamo moscow",
    "originStr": "which arena of wpc dynamo moscow"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "is death location of tigran petrosian",
    "originStr": "is death location of tigran petrosian"
   }
  ],
  "question": "Which arena of WPC Dynamo Moscow is death location of Tigran Petrosian",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT Which) (NP (NN arena) (PP (IN of) (NP (NN <e0>))))) (SQ (VBZ is) (NP (NP (NN death) (NN location)) (PP (IN of) (NP (NNP Tigran) (NNP Petrosian) (SYM >))))) (. ?)))",
  "entityNum": 1,
  "id": 991
 },
 {
  "taggedQuestion": "What cities are close by LoDaisKa ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "what"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "what cities are close by LoDaisKa",
    "originStr": "what cities are close by LoDaisKa"
   }
  ],
  "question": "what cities are close by LoDaisKa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WDT What) (NNS cities)) (SQ (VP (VBP are) (ADJP (JJ close) (PP (IN by) (NP (NNP LoDaisKa)))))) (. ?)))",
  "entityNum": 1,
  "id": 992
 },
 {
  "taggedQuestion": "Which wars were fought when the commanders involved served under PM Choi Tu Son?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "which"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "which wars were fought when the commanders involved #entity1",
    "originStr": "which wars were fought when the commanders involved #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "served under pm choi tu son",
    "originStr": "served under pm choi tu son"
   }
  ],
  "question": "Which wars were fought when the commanders involved served under PM Choi Tu Son",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Choi_Tu-son> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
  "syntaxTreeText": "(ROOT (SBAR (WHNP (WDT Which)) (S (NP (NNS wars)) (VP (VBD were) (VP (VBN fought) (SBAR (WHADVP (WRB when)) (S (NP (NP (DT the) (NNS commanders)) (VP (VBN involved))) (VP (VBD served) (PP (IN under) (NP (NN PM) (NNP Choi) (NNP Tu) (NNP Son))))))))) (. ?)))",
  "entityNum": 2,
  "id": 993
 },
 {
  "taggedQuestion": "Who is the meaning of Isa  ?",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Who is the meaning of Isa",
    "originStr": "Who is the meaning of Isa"
   }
  ],
  "question": "Who is the meaning of Isa",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri } ",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (NNP Isa))))) (. ?)))",
  "entityNum": 1,
  "id": 994
 },
 {
  "taggedQuestion": "Who is  venerated in  Judaism and Islam?",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COMMON",
    "trigger": "who"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "who is venerated in judaism and",
    "originStr": "who is venerated in judaism and"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "islam",
    "originStr": "islam"
   }
  ],
  "question": "Who is venerated in Judaism and Islam",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . }",
  "syntaxTreeText": "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (VP (VBN venerated) (PP (IN in) (NP (NNP Judaism) (CC and) (NNP Islam))))) (. ?)))",
  "entityNum": 1,
  "id": 995
 },
 {
  "taggedQuestion": "Count the number teams which have  former ice hockey players which also included <e0> .",
  "entityMap": {
   "<e0>": "American Hockey League"
  },
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "COUNT",
    "trigger": "count"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "count the number teams which have former ice hockey players #entity1",
    "originStr": "count the number teams which have former ice hockey players #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "which also included american hockey league",
    "originStr": "which also included american hockey league"
   }
  ],
  "question": "Count the number teams which have former ice hockey players which also included American Hockey League",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/American_Hockey_League> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri }",
  "syntaxTreeText": "(ROOT (S (VP (VB Count) (NP (NP (DT the) (NN number) (NNS teams)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (JJ former) (NML (NN ice) (NN hockey)) (NNS players)) (SBAR (WHNP (WDT which)) (S (ADVP (RB also)) (VP (VBD included) (NP (ADD <e0>))))))))))) (. .)))",
  "entityNum": 2,
  "id": 996
 },
 {
  "taggedQuestion": "Name the common editor of Easy Street (film) and Work (film).",
  "entityMap": {},
  "nodeNum": 4,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "name the common editor of easy street (film) and work",
    "originStr": "name the common editor of easy street (film) and work"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "(film)",
    "originStr": "(film)"
   }
  ],
  "question": "Name the common editor of Easy Street (film) and Work (film)",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . }",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (JJ common) (NN editor)) (PP (IN of) (NP (NP (NNP Easy) (NNP Street) (PRN (-LRB- -LRB-) (NP (NN film)) (-RRB- -RRB-))) (CC and) (NP (NN Work) (PRN (-LRB- -LRB-) (NP (NN film)) (-RRB- -RRB-))))))) (. .)))",
  "entityNum": 1,
  "id": 997
 },
 {
  "taggedQuestion": "List all the schools of the rugby player whose went to school named Pietermaritzburg ?",
  "entityMap": {},
  "nodeNum": 5,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "list"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 2,
    "nodeID": 2,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": true,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 4,
    "nodeID": 3,
    "questionType": "UNKNOWN",
    "str": "list all the schools of #entity1",
    "originStr": "list all the schools of #entity1"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 1,
    "end": -1,
    "nodeType": 4,
    "nodeID": 4,
    "questionType": "UNKNOWN",
    "str": "the rugby player whose went to school named pietermaritzburg",
    "originStr": "the rugby player whose went to school named pietermaritzburg"
   }
  ],
  "question": "List all the schools of the rugby player whose went to school named Pietermaritzburg",
  "edges": [
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 3
   },
   {
    "edgeType": 2,
    "isEqual": false,
    "start": -1,
    "from": 3,
    "end": -1,
    "to": 2
   },
   {
    "edgeType": 4,
    "isEqual": false,
    "start": -1,
    "from": 2,
    "end": -1,
    "to": 4
   },
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   }
  ],
  "sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/school> <http://dbpedia.org/resource/Pietermaritzburg> . ?x <http://dbpedia.org/property/school> ?uri  . }",
  "syntaxTreeText": "(ROOT (FRAG (NP (NN List)) (NP (NP (NP (PDT all) (DT the) (NNS schools)) (PP (IN of) (NP (DT the) (JJ rugby) (NN player)))) (SBAR (WHNP (WP$ whose)) (S (VP (VBD went) (PP (IN to) (NP (NP (NN school)) (VP (VBN named) (NP (NNP Pietermaritzburg))))))))) (. ?)))",
  "entityNum": 2,
  "id": 998
 },
 {
  "taggedQuestion": "Name the office of Richard Coke .",
  "entityMap": {},
  "nodeNum": 3,
  "nodes": [
   {
    "containsRefer": false,
    "start": -1,
    "entityID": -1,
    "end": -1,
    "nodeType": 1,
    "nodeID": 0,
    "questionType": "LIST",
    "trigger": "name"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 2,
    "nodeID": 1,
    "questionType": "UNKNOWN"
   },
   {
    "containsRefer": false,
    "start": -1,
    "entityID": 0,
    "end": -1,
    "nodeType": 3,
    "nodeID": 2,
    "questionType": "UNKNOWN",
    "str": "Name the office of Richard Coke",
    "originStr": "Name the office of Richard Coke"
   }
  ],
  "question": "Name the office of Richard Coke",
  "edges": [
   {
    "edgeType": 1,
    "isEqual": false,
    "start": -1,
    "from": 0,
    "end": -1,
    "to": 1
   },
   {
    "edgeType": 3,
    "isEqual": false,
    "start": -1,
    "from": 1,
    "end": -1,
    "to": 2
   }
  ],
  "sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri } ",
  "syntaxTreeText": "(ROOT (S (VP (VB Name) (NP (NP (DT the) (NN office)) (PP (IN of) (NP (NNP Richard) (NNP Coke))))) (. .)))",
  "entityNum": 1,
  "id": 999
 }
]