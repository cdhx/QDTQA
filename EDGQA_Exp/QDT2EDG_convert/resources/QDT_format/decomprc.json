[
    {
        "ID": "1701",
        "question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which architect of marine corps air station kaneohe bay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was also tenant of new sanno hotel /'",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which architect of marine corps air station kaneohe bay [DES] was also tenant of new sanno hotel /'",
        "subq1": [
            "which architect of marine corps air station kaneohe bay",
            "was also tenant of new sanno hotel /'"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which architect of Marine Corps Air Station Kaneohe Bay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was also tenant of New Sanno hotel /'",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which architect of Marine Corps Air Station Kaneohe Bay [DES] was also tenant of New Sanno hotel /'",
        "subq1_no_decipher": [
            "Which architect of Marine Corps Air Station Kaneohe Bay",
            "was also tenant of New Sanno hotel /'"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3293",
        "question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which sects people are part of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "local political parties which fall under the international muslim brotherhood",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which sects people are part of [INQL] local political parties which fall under the international muslim brotherhood [INQR]",
        "subq1": [
            "which sects people are part of [ENT]"
        ],
        "subq2": [
            "local political parties which fall under the international muslim brotherhood"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which sects people are part of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "local political parties",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which fall under the International Muslim Brotherhood",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which sects people are part of [INQL] local political parties [DES] which fall under the International Muslim Brotherhood [INQR]",
        "subq1_no_decipher": [
            "Which sects people are part of [ENT]"
        ],
        "subq2_no_decipher": [
            "local political parties",
            "which fall under the International Muslim Brotherhood"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2161",
        "question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list common systems are developed by of the google videos",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and written by of the google web toolkit",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list common systems are developed by of the google videos [DES] and written by of the google web toolkit",
        "subq1": [
            "list common systems are developed by of the google videos",
            "and written by of the google web toolkit"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List common systems",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are developed by of the Google Videos",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and written by of the Google Web Toolkit",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List common systems [DES] are developed by of the Google Videos [DES] and written by of the Google Web Toolkit",
        "subq1_no_decipher": [
            "List common systems",
            "are developed by of the Google Videos",
            "and written by of the Google Web Toolkit"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1136",
        "question": "For which games are Sam Loyd and Eric Schiller both famous",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "for which games",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are sam loyd and eric schiller both famous",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "for which games [DES] are sam loyd and eric schiller both famous",
        "subq1": [
            "for which games",
            "are sam loyd and eric schiller both famous"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "For which games",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are Sam Loyd and Eric Schiller both famous",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "For which games [DES] are Sam Loyd and Eric Schiller both famous",
        "subq1_no_decipher": [
            "For which games",
            "are Sam Loyd and Eric Schiller both famous"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "987",
        "question": "Is Peter Piper Pizza in the pizza industry",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is peter piper pizza",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the pizza industry",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is peter piper pizza [DES] in the pizza industry",
        "subq1": [
            "is peter piper pizza",
            "in the pizza industry"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Peter Piper Pizza in the pizza industry?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Peter Piper Pizza in the pizza industry [INQR]",
        "subq1_no_decipher": [
            "Is Peter Piper Pizza in the pizza industry?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2549",
        "question": "Name the artist who made Dream Dancing and is often associated with Joe Pass",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joe_Pass> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Dream_Dancing_(album)> <http://dbpedia.org/property/artist> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the artist who made dream dancing",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is often associated with joe pass",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the artist who made dream dancing [DES] and is often associated with joe pass",
        "subq1": [
            "name the artist who made dream dancing",
            "and is often associated with joe pass"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the artist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who made Dream Dancing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is often associated with Joe Pass",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the artist [DES] who made Dream Dancing [DES] and is often associated with Joe Pass",
        "subq1_no_decipher": [
            "Name the artist",
            "who made Dream Dancing",
            "and is often associated with Joe Pass"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "193",
        "question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with deputies as neil brown and andrew peacock",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the office holder [DES] with deputies as neil brown and andrew peacock",
        "subq1": [
            "who is the office holder",
            "with deputies as neil brown and andrew peacock"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with deputies as Neil Brown and Andrew Peacock",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the office holder [DES] with deputies as Neil Brown and Andrew Peacock",
        "subq1_no_decipher": [
            "Who is the office holder",
            "with deputies as Neil Brown and Andrew Peacock"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3057",
        "question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where did these popular aeroplanes - focke wulf 260 and start+flug h 101",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where did these popular aeroplanes - focke wulf 260 and start+flug h 101 [DES] originate",
        "subq1": [
            "where did these popular aeroplanes - focke wulf 260 and start+flug h 101",
            "originate"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate",
        "subq1_no_decipher": [
            "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3246",
        "question": "Which television show's producer is Stephen E. Ambrose and written by Erik Jendresen",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which television show's producer is stephen e. ambrose",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and written by erik jendresen",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which television show's producer is stephen e. ambrose [DES] and written by erik jendresen",
        "subq1": [
            "which television show's producer is stephen e. ambrose",
            "and written by erik jendresen"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which television show's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "producer is Stephen E. Ambrose",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and written by Erik Jendresen",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which television show's [DES] producer is Stephen E. Ambrose [DES] and written by Erik Jendresen",
        "subq1_no_decipher": [
            "Which television show's",
            "producer is Stephen E. Ambrose",
            "and written by Erik Jendresen"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1394",
        "question": "Who created the Women in the Garden and also the L'Enfant a la tasse",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who created the women in the garden",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the l'enfant a la tasse",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who created the women in the garden [DES] and also the l'enfant a la tasse",
        "subq1": [
            "who created the women in the garden",
            "and also the l'enfant a la tasse"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who created the Women in the Garden",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the L'Enfant a la tasse",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who created the Women in the Garden [DES] and also the L'Enfant a la tasse",
        "subq1_no_decipher": [
            "Who created the Women in the Garden",
            "and also the L'Enfant a la tasse"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2637",
        "question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/War_Of_Attrition_(horse)> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which famous horserace",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has seen both fergie sutherland and the illustrious war of attrition",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which famous horserace [DES] has seen both fergie sutherland and the illustrious war of attrition",
        "subq1": [
            "which famous horserace",
            "has seen both fergie sutherland and the illustrious war of attrition"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which famous horserace",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has seen both Fergie sutherland",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and the illustrious War of Attrition",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which famous horserace [DES] has seen both Fergie sutherland [DES] and the illustrious War of Attrition",
        "subq1_no_decipher": [
            "Which famous horserace",
            "has seen both Fergie sutherland",
            "and the illustrious War of Attrition"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "768",
        "question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "tell me the name of the prime time entertainment network's tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose artist is christopher franke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "tell me the name of the prime time entertainment network's tv show [DES] whose artist is christopher franke",
        "subq1": [
            "tell me the name of the prime time entertainment network's tv show",
            "whose artist is christopher franke"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Tell me the name of the Prime Time Entertainment Network's TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose Artist is Christopher Franke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Tell me the name of the Prime Time Entertainment Network's TV show [DES] whose Artist is Christopher Franke",
        "subq1_no_decipher": [
            "Tell me the name of the Prime Time Entertainment Network's TV show",
            "whose Artist is Christopher Franke"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4702",
        "question": "How many other battles have the military person fought whose one of the battles is World War II",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many other battles have the military person fought [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the battles is world war ii",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many other battles have the military person fought [INQL] whose one of the battles is world war ii [INQR]",
        "subq1": [
            "how many other battles have the military person fought [ENT]"
        ],
        "subq2": [
            "whose one of the battles is world war ii"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many other battles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the military person",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought one of the battles is World War II",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many other battles [DES] have [INQL] the military person [DES] fought one of the battles is World War II [INQR]",
        "subq1_no_decipher": [
            "How many other battles",
            "have [ENT]"
        ],
        "subq2_no_decipher": [
            "the military person",
            "fought one of the battles is World War II"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3090",
        "question": "Whose network's parent organisation is Comcast",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "parent organisation is comcast",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "whose network's [INQL] parent organisation is comcast [INQR]",
        "subq1": [
            "whose network's [ENT]"
        ],
        "subq2": [
            "parent organisation is comcast"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "parent organisation is Comcast",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Whose network's [INQL] parent organisation is Comcast [INQR]",
        "subq1_no_decipher": [
            "Whose network's [ENT]"
        ],
        "subq2_no_decipher": [
            "parent organisation is Comcast"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3495",
        "question": "Is William H Blanchard buried in Colorado",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is william h blanchard",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in colorado",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is william h blanchard [DES] buried in colorado",
        "subq1": [
            "is william h blanchard",
            "buried in colorado"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is William H Blanchard buried in Colorado?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is William H Blanchard buried in Colorado simple",
        "subq1_no_decipher": [
            "Is William H Blanchard buried in Colorado?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3215",
        "question": "Which sport of Vishwajyot High School is also the genre of Battle chess",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which sport of vishwajyot high school",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the genre of battle chess",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which sport of vishwajyot high school [DES] is also the genre of battle chess",
        "subq1": [
            "which sport of vishwajyot high school",
            "is also the genre of battle chess"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which sport of Vishwajyot High School",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the genre of Battle chess",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which sport of Vishwajyot High School [DES] is also the genre of Battle chess",
        "subq1_no_decipher": [
            "Which sport of Vishwajyot High School",
            "is also the genre of Battle chess"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "285",
        "question": "In which state is the Channel district",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Channel_District> <http://dbpedia.org/ontology/state> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which state is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the channel district",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which state is [INQL] the channel district [INQR]",
        "subq1": [
            "in which state is [ENT]"
        ],
        "subq2": [
            "the channel district"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which state is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the Channel district",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "In which state is [INQL] the Channel district [INQR]",
        "subq1_no_decipher": [
            "In which state is [ENT]"
        ],
        "subq2_no_decipher": [
            "the Channel district"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4938",
        "question": "Who was in the missions of Apollo 11 and Gemini 8",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was in the missions of apollo 11 and gemini",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "8",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was in the missions of apollo 11 and gemini [DES] 8",
        "subq1": [
            "who was in the missions of apollo 11 and gemini",
            "8"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was in the missions of Apollo 11 and Gemini 8",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who was in the missions of Apollo 11 and Gemini 8",
        "subq1_no_decipher": [
            "Who was in the missions of Apollo 11 and Gemini 8"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "428",
        "question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of other tenant of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadia whose one of the tenant is raptors 905",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of other tenant of [INQL] the stadia whose one of the tenant is raptors 905 [INQR]",
        "subq1": [
            "what is the total number of other tenant of [ENT]"
        ],
        "subq2": [
            "the stadia whose one of the tenant is raptors 905"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of other tenant of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the tenant is Raptors 905",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the total number of other tenant of [INQL] the stadia [DES] whose one of the tenant is Raptors 905 [INQR]",
        "subq1_no_decipher": [
            "What is the total number of other tenant of [ENT]"
        ],
        "subq2_no_decipher": [
            "the stadia",
            "whose one of the tenant is Raptors 905"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4448",
        "question": "Where can one find the Dzogchen Ponolop Rinpoche",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where can one find [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the dzogchen ponolop rinpoche",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where can one find [INQL] the dzogchen ponolop rinpoche [INQR]",
        "subq1": [
            "where can one find [ENT]"
        ],
        "subq2": [
            "the dzogchen ponolop rinpoche"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where can one find the Dzogchen Ponolop Rinpoche",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where can one find the Dzogchen Ponolop Rinpoche",
        "subq1_no_decipher": [
            "Where can one find the Dzogchen Ponolop Rinpoche"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2332",
        "question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the stockholder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the road tunnels operated by the massachusetts department of transportation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the stockholder of [INQL] the road tunnels operated by the massachusetts department of transportation [INQR]",
        "subq1": [
            "who is the stockholder of [ENT]"
        ],
        "subq2": [
            "the road tunnels operated by the massachusetts department of transportation"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the stockholder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the road tunnels",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operated by the Massachusetts Department of Transportation",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the stockholder of [INQL] the road tunnels [DES] operated by the Massachusetts Department of Transportation [INQR]",
        "subq1_no_decipher": [
            "Who is the stockholder of [ENT]"
        ],
        "subq2_no_decipher": [
            "the road tunnels",
            "operated by the Massachusetts Department of Transportation"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2717",
        "question": "What are the awards won by the film director of Saraband",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the awards won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film director of saraband",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the awards won by [INQL] the film director of saraband [INQR]",
        "subq1": [
            "what are the awards won by [ENT]"
        ],
        "subq2": [
            "the film director of saraband"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film director of Saraband",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the awards [DES] won by [INQL] the film director of Saraband [INQR]",
        "subq1_no_decipher": [
            "What are the awards",
            "won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the film director of Saraband"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2079",
        "question": "What is the almamater of the president whose vice president was Enrique Jos Varona",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the almamater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president whose vice president was enrique jos varona",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the almamater of [INQL] the president whose vice president was enrique jos varona [INQR]",
        "subq1": [
            "what is the almamater of [ENT]"
        ],
        "subq2": [
            "the president whose vice president was enrique jos varona"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the almamater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose vice president was Enrique Jos Varona",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the almamater of [INQL] the president [DES] whose vice president was Enrique Jos Varona [INQR]",
        "subq1_no_decipher": [
            "What is the almamater of [ENT]"
        ],
        "subq2_no_decipher": [
            "the president",
            "whose vice president was Enrique Jos Varona"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3389",
        "question": "What is the route end of Birmingham and Oxford Junction Railway",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the route",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "end of birmingham and oxford junction railway",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the route [DES] end of birmingham and oxford junction railway",
        "subq1": [
            "what is the route",
            "end of birmingham and oxford junction railway"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the route end of Birmingham and Oxford Junction Railway",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the route end of Birmingham and Oxford Junction Railway",
        "subq1_no_decipher": [
            "What is the route end of Birmingham and Oxford Junction Railway"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "722",
        "question": "Where did the Vitis Vinifera grapes originate",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] originate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the vitis vinifera grapes",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the vitis vinifera grapes [INQR] originate",
        "subq1": [
            "where did [ENT] originate"
        ],
        "subq2": [
            "the vitis vinifera grapes"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the Vitis Vinifera grapes originate?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the Vitis Vinifera grapes originate",
        "subq1_no_decipher": [
            "Where did the Vitis Vinifera grapes originate?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "951",
        "question": "How many people are there whose children died in Indiana",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many people are there whose children [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "died in indiana",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many people are there whose children [INQL] died in indiana [INQR]",
        "subq1": [
            "how many people are there whose children [ENT]"
        ],
        "subq2": [
            "died in indiana"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people are there",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose children [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "died in Indiana",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many people are there [DES] whose children [INQL] died in Indiana [INQR]",
        "subq1_no_decipher": [
            "How many people are there",
            "whose children [ENT]"
        ],
        "subq2_no_decipher": [
            "died in Indiana"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4383",
        "question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the military branch of the william french smith",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the branch of pierre r. graham",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the military branch of the william french smith [DES] which is also the branch of pierre r. graham",
        "subq1": [
            "what is the military branch of the william french smith",
            "which is also the branch of pierre r. graham"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the military branch of the William French Smith",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the branch of Pierre R. Graham",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the military branch of the William French Smith [DES] which is also the branch of Pierre R. Graham",
        "subq1_no_decipher": [
            "What is the military branch of the William French Smith",
            "which is also the branch of Pierre R. Graham"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4366",
        "question": "What is the river whose source is Lake Ontario",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Lake_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source is lake ontario",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the river [DES] whose source is lake ontario",
        "subq1": [
            "what is the river",
            "whose source is lake ontario"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source is Lake Ontario",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the river [DES] whose source is Lake Ontario",
        "subq1_no_decipher": [
            "What is the river",
            "whose source is Lake Ontario"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2262",
        "question": "Which location city of the Denver Broncos is the place of birth of Steven Clark Cunningham",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which location city of the denver broncos",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the place of birth of steven clark cunningham",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which location city of the denver broncos [DES] is the place of birth of steven clark cunningham",
        "subq1": [
            "which location city of the denver broncos",
            "is the place of birth of steven clark cunningham"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which location city of the Denver Broncos",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the place of birth of Steven Clark Cunningham",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which location city of the Denver Broncos [DES] is the place of birth of Steven Clark Cunningham",
        "subq1_no_decipher": [
            "Which location city of the Denver Broncos",
            "is the place of birth of Steven Clark Cunningham"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "989",
        "question": "What is the religion of the person who founded the Emel magazine",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person who founded the emel magazine",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the religion of [INQL] the person who founded the emel magazine [INQR]",
        "subq1": [
            "what is the religion of [ENT]"
        ],
        "subq2": [
            "the person who founded the emel magazine"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who founded the Emel magazine",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the religion of [INQL] the person [DES] who founded the Emel magazine [INQR]",
        "subq1_no_decipher": [
            "What is the religion of [ENT]"
        ],
        "subq2_no_decipher": [
            "the person",
            "who founded the Emel magazine"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3212",
        "question": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give the name of the managers of england national under-20 football team and england national under-21 football",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give the name of the managers of england national under-20 football team and england national under-21 football [DES] team",
        "subq1": [
            "give the name of the managers of england national under-20 football team and england national under-21 football",
            "team"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Give the name of the managers of England national under-20 football team and England national under-21 football team",
        "subq1_no_decipher": [
            "Give the name of the managers of England national under-20 football team and England national under-21 football team"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1759",
        "question": "How many cities are around the sea in which the fig tree bay meets",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fig_Tree_Bay> <http://dbpedia.org/ontology/inflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many cities are around [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sea in which the fig tree bay meets",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many cities are around [INQL] the sea in which the fig tree bay meets [INQR]",
        "subq1": [
            "how many cities are around [ENT]"
        ],
        "subq2": [
            "the sea in which the fig tree bay meets"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many cities are around [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sea",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which the fig tree bay meets",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many cities are around [INQL] the sea [DES] in which the fig tree bay meets [INQR]",
        "subq1_no_decipher": [
            "How many cities are around [ENT]"
        ],
        "subq2_no_decipher": [
            "the sea",
            "in which the fig tree bay meets"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4579",
        "question": "is blue lagoon island a part of the bahamas archipelago",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is blue lagoon island",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a part of the bahamas archipelago",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is blue lagoon island [DES] a part of the bahamas archipelago",
        "subq1": [
            "is blue lagoon island",
            "a part of the bahamas archipelago"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is blue lagoon island a part of the bahamas achipelago?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "is blue lagoon island [DES] a part of the bahamas archipelago",
        "subq1_no_decipher": [
            "is blue lagoon island a part of the bahamas achipelago?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "326",
        "question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movies distributed by rko pictures",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has music composer as bernard herrmann",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movies distributed by rko pictures [DES] and has music composer as bernard herrmann",
        "subq1": [
            "name the movies distributed by rko pictures",
            "and has music composer as bernard herrmann"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "distributed by RKO Pictures",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has music composer as Bernard Herrmann",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movies [DES] distributed by RKO Pictures [DES] and has music composer as Bernard Herrmann",
        "subq1_no_decipher": [
            "Name the movies",
            "distributed by RKO Pictures",
            "and has music composer as Bernard Herrmann"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2608",
        "question": "Did the New Way party merge in the One Israel party",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/New_Way_(Israel)> <http://dbpedia.org/ontology/mergedIntoParty> <http://dbpedia.org/resource/One_Israel> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did the new way party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "merge in the one israel party",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did the new way party [DES] merge in the one israel party",
        "subq1": [
            "did the new way party",
            "merge in the one israel party"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did the New Way party merge in the One Israel party?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did the New Way party [DES] merge in the One Israel party",
        "subq1_no_decipher": [
            "Did the New Way party merge in the One Israel party?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1383",
        "question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many pole drivers have been there in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "grand prixes where first driver was damon hill",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many pole drivers have been there in [INQL] grand prixes where first driver was damon hill [INQR]",
        "subq1": [
            "how many pole drivers have been there in [ENT]"
        ],
        "subq2": [
            "grand prixes where first driver was damon hill"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many pole drivers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been there in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "grand prixes",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where first driver was Damon Hill",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many pole drivers [DES] have been there in [INQL] grand prixes [DES] where first driver was Damon Hill [INQR]",
        "subq1_no_decipher": [
            "How many pole drivers",
            "have been there in [ENT]"
        ],
        "subq2_no_decipher": [
            "grand prixes",
            "where first driver was Damon Hill"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1724",
        "question": "Where are jockeys in Dubai World Cup from",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/race> <http://dbpedia.org/resource/Dubai_World_Cup> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where are [ENT] from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "jockeys in dubai world cup",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where are [INQL] jockeys in dubai world cup [INQR] from",
        "subq1": [
            "where are [ENT] from"
        ],
        "subq2": [
            "jockeys in dubai world cup"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where are [ENT] from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "jockeys in Dubai World Cup",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where are [INQL] jockeys in Dubai World Cup [INQR] from",
        "subq1_no_decipher": [
            "Where are [ENT] from"
        ],
        "subq2_no_decipher": [
            "jockeys in Dubai World Cup"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1086",
        "question": "Who owns the newspaper which was founded by Nehru",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the newspaper which was founded by nehru",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who owns [INQL] the newspaper which was founded by nehru [INQR]",
        "subq1": [
            "who owns [ENT]"
        ],
        "subq2": [
            "the newspaper which was founded by nehru"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the newspaper",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was founded by Nehru",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who owns [INQL] the newspaper [DES] which was founded by Nehru [INQR]",
        "subq1_no_decipher": [
            "Who owns [ENT]"
        ],
        "subq2_no_decipher": [
            "the newspaper",
            "which was founded by Nehru"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2523",
        "question": "To which places do the flights go by airlines headquartered in the UK",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/United_Kingdom> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "to which places do the flights go by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "airlines headquartered in the uk",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "to which places do the flights go by [INQL] airlines headquartered in the uk [INQR]",
        "subq1": [
            "to which places do the flights go by [ENT]"
        ],
        "subq2": [
            "airlines headquartered in the uk"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "To which places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the flights go by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "airlines",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "headquartered in the UK",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "To which places [DES] do the flights go by [INQL] airlines [DES] headquartered in the UK [INQR]",
        "subq1_no_decipher": [
            "To which places",
            "do the flights go by [ENT]"
        ],
        "subq2_no_decipher": [
            "airlines",
            "headquartered in the UK"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "341",
        "question": "What is the magazine which have been founded by Ralph J. Gleason",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the magazine",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have been founded by ralph j. gleason",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the magazine [DES] which have been founded by ralph j. gleason",
        "subq1": [
            "what is the magazine",
            "which have been founded by ralph j. gleason"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the magazine",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have been founded by Ralph J. Gleason",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the magazine [DES] which have been founded by Ralph J. Gleason [INQR]",
        "subq1_no_decipher": [
            "What is the magazine",
            "which have been founded by Ralph J. Gleason"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3701",
        "question": "Is Seattle the Ship builder of USS Marmora (IX-189)",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is seattle",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the ship builder of uss marmora (ix-189)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is seattle [DES] the ship builder of uss marmora (ix-189)",
        "subq1": [
            "is seattle",
            "the ship builder of uss marmora (ix-189)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Seattle the Ship builder of USS Marmora (IX-189)",
        "subq1_no_decipher": [
            "Is Seattle the Ship builder of USS Marmora (IX-189)?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "147",
        "question": "Is Tirana the largest city of Albania",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is tirana",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the largest city of albania",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is tirana [DES] the largest city of albania",
        "subq1": [
            "is tirana",
            "the largest city of albania"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Tirana the largest city of Albania?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Tirana the largest city of Albania",
        "subq1_no_decipher": [
            "Is Tirana the largest city of Albania?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "688",
        "question": "In which cities can the beverage related to Barq's be found",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which cities can [ENT] be found",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the beverage related to barq's",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which cities can [INQL] the beverage related to barq's [INQR] be found",
        "subq1": [
            "in which cities can [ENT] be found"
        ],
        "subq2": [
            "the beverage related to barq's"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which cities",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can [ENT] be found",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the beverage",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "related to Barq's",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In which cities [DES] can [INQL] the beverage [DES] related to Barq's [INQR] be found",
        "subq1_no_decipher": [
            "In which cities",
            "can [ENT] be found"
        ],
        "subq2_no_decipher": [
            "the beverage",
            "related to Barq's"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3432",
        "question": "What is the birth place of the astronaut whose mission was the Vostok programmer",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Vostok_programme> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the birth place of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the astronaut whose mission was the vostok programmer",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the birth place of [INQL] the astronaut whose mission was the vostok programmer [INQR]",
        "subq1": [
            "what is the birth place of [ENT]"
        ],
        "subq2": [
            "the astronaut whose mission was the vostok programmer"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the birth place of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the astronaut",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mission was the Vostok programmer",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the birth place of [INQL] the astronaut [DES] whose mission was the Vostok programmer [INQR]",
        "subq1_no_decipher": [
            "What is the birth place of [ENT]"
        ],
        "subq2_no_decipher": [
            "the astronaut",
            "whose mission was the Vostok programmer"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1107",
        "question": "Count everyone who studied at an institute which are in Suburbs",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count everyone who studied at [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "an institute which are in suburbs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count everyone who studied at [INQL] an institute which are in suburbs [INQR]",
        "subq1": [
            "count everyone who studied at [ENT]"
        ],
        "subq2": [
            "an institute which are in suburbs"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count everyone",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who studied at [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "an institute",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are in Suburbs",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count everyone [DES] who studied at [INQL] an institute [DES] which are in Suburbs [INQR]",
        "subq1_no_decipher": [
            "Count everyone",
            "who studied at [ENT]"
        ],
        "subq2_no_decipher": [
            "an institute",
            "which are in Suburbs"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "848",
        "question": "Where did Whitney Wistert debut",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Whitey_Wistert> <http://dbpedia.org/property/debutteam> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where did whitney wistert",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "debut",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where did whitney wistert [DES] debut",
        "subq1": [
            "where did whitney wistert",
            "debut"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where did Whitney Wistert debut?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where did Whitney Wistert debut [INQR]",
        "subq1_no_decipher": [
            "Where did Whitney Wistert debut?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "966",
        "question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the major shrine of [ENT] zachlumia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the monarchs whose successor is dragimir of travunia and",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the major shrine of [INQL] the monarchs whose successor is dragimir of travunia and [INQR] zachlumia",
        "subq1": [
            "what is the major shrine of [ENT] zachlumia"
        ],
        "subq2": [
            "the monarchs whose successor is dragimir of travunia and"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the major shrine of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the monarchs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose successor is Dragimir of Travunia and Zachlumia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the major shrine of [INQL] the monarchs [DES] whose successor is Dragimir of Travunia and Zachlumia [INQR]",
        "subq1_no_decipher": [
            "What is the major shrine of [ENT]"
        ],
        "subq2_no_decipher": [
            "the monarchs",
            "whose successor is Dragimir of Travunia and Zachlumia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4727",
        "question": "How many television shows have Fox Broadcasting Company as their channel",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many television shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have fox broadcasting company as their channel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many television shows [DES] have fox broadcasting company as their channel",
        "subq1": [
            "how many television shows",
            "have fox broadcasting company as their channel"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many television shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have Fox Broadcasting Company as their channel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many television shows [DES] have Fox Broadcasting Company as their channel",
        "subq1_no_decipher": [
            "How many television shows",
            "have Fox Broadcasting Company as their channel"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1492",
        "question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mouth locations are arctic ocean and laptev sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the river [DES] whose mouth locations are arctic ocean and laptev sea",
        "subq1": [
            "what is the river",
            "whose mouth locations are arctic ocean and laptev sea"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mouth locations are Arctic Ocean and Laptev Sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the river [DES] whose mouth locations are Arctic Ocean and Laptev Sea",
        "subq1_no_decipher": [
            "What is the river",
            "whose mouth locations are Arctic Ocean and Laptev Sea"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3953",
        "question": "What are some wars fought when Chung Il Kwon as the country's prime minister",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Il-kwon> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some wars fought [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "when chung il kwon as the country's prime minister",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some wars fought [INQL] when chung il kwon as the country's prime minister [INQR]",
        "subq1": [
            "what are some wars fought [ENT]"
        ],
        "subq2": [
            "when chung il kwon as the country's prime minister"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some wars",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "when Chung Il Kwon as the country's prime minister",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some wars [DES] fought [INQL] when Chung Il Kwon as the country's prime minister [INQR]",
        "subq1_no_decipher": [
            "What are some wars",
            "fought [ENT]"
        ],
        "subq2_no_decipher": [
            "when Chung Il Kwon as the country's prime minister"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2203",
        "question": "Where was the person born who died in Bryn Mawr Hospital",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was the person born [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who died in bryn mawr hospital",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was the person born [INQL] who died in bryn mawr hospital [INQR]",
        "subq1": [
            "where was the person born [ENT]"
        ],
        "subq2": [
            "who died in bryn mawr hospital"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was the person",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who died in Bryn Mawr Hospital",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where was the person [DES] born [INQL] who died in Bryn Mawr Hospital [INQR]",
        "subq1_no_decipher": [
            "Where was the person",
            "born [ENT]"
        ],
        "subq2_no_decipher": [
            "who died in Bryn Mawr Hospital"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2713",
        "question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the faith of the ajith perera",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and religious affiliation of the neungin high school",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the faith of the ajith perera [DES] and religious affiliation of the neungin high school",
        "subq1": [
            "what is the faith of the ajith perera",
            "and religious affiliation of the neungin high school"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the faith of the Ajith Perera",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and religious affiliation of the Neungin High School",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the faith of the Ajith Perera [DES] and religious affiliation of the Neungin High School",
        "subq1_no_decipher": [
            "What is the faith of the Ajith Perera",
            "and religious affiliation of the Neungin High School"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "661",
        "question": "Who was in military unit which played the role of Air interdiction",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was in military unit",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which played the role of air interdiction",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was in military unit [DES] which played the role of air interdiction",
        "subq1": [
            "who was in military unit",
            "which played the role of air interdiction"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who was in military unit [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which played the role of Air interdiction",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who was in military unit [INQL] which played the role of Air interdiction [INQR]",
        "subq1_no_decipher": [
            "Who was in military unit [ENT]"
        ],
        "subq2_no_decipher": [
            "which played the role of Air interdiction"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1002",
        "question": "Who are the current members of Insects vs Robots",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who are the current members of insects vs",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "robots",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who are the current members of insects vs [DES] robots",
        "subq1": [
            "who are the current members of insects vs",
            "robots"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the current members of Insects vs Robots?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who are the current members of Insects vs Robots",
        "subq1_no_decipher": [
            "Who are the current members of Insects vs Robots?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "62",
        "question": "Is Ombla originate in Croatia",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Croatia> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is ombla",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originate in croatia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is ombla [DES] originate in croatia",
        "subq1": [
            "is ombla",
            "originate in croatia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Ombla originate in Croatia?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Ombla originate in Croatia [INQR]",
        "subq1_no_decipher": [
            "Is Ombla originate in Croatia?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "284",
        "question": "Greater Napanee is the home town of what people",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "greater napanee is the home town of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "what people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "greater napanee is the home town of [DES] what people",
        "subq1": [
            "greater napanee is the home town of",
            "what people"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Greater Napanee is the home town of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "what people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Greater Napanee is the home town of [DES] what people",
        "subq1_no_decipher": [
            "Greater Napanee is the home town of",
            "what people"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2224",
        "question": "What place did Edwin Adams die at, which gave birth to William A Purtell",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what place",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did edwin adams die at, which gave birth to william a purtell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what place [DES] did edwin adams die at, which gave birth to william a purtell",
        "subq1": [
            "what place",
            "did edwin adams die at, which gave birth to william a purtell"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What place",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did Edwin Adams die at,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which gave birth to William A Purtell",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What place [DES] did Edwin Adams die at, [DES] which gave birth to William A Purtell [INQR]",
        "subq1_no_decipher": [
            "What place",
            "did Edwin Adams die at,",
            "which gave birth to William A Purtell"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4706",
        "question": "Name the nationalteam of Trn Vit Hng",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng> <http://dbpedia.org/property/nationalteam> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "nationalteam of trn vit hng",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the [INQL] nationalteam of trn vit hng [INQR]",
        "subq1": [
            "name the [ENT]"
        ],
        "subq2": [
            "nationalteam of trn vit hng"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the nationalteam of Trn Vit Hng ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the nationalteam of Trn Vit Hng [INQR]",
        "subq1_no_decipher": [
            "Name the nationalteam of Trn Vit Hng ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1879",
        "question": "Which designer of RENFE also owns Renaissance Center",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/owner> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which designer of renfe",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also owns renaissance center",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which designer of renfe [DES] also owns renaissance center",
        "subq1": [
            "which designer of renfe",
            "also owns renaissance center"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which designer of RENFE",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also owns Renaissance Center",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which designer of RENFE [DES] also owns Renaissance Center",
        "subq1_no_decipher": [
            "Which designer of RENFE",
            "also owns Renaissance Center"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3572",
        "question": "Which uni did Joshua A. Siegel attend",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which uni",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did joshua a. siegel attend",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which uni [DES] did joshua a. siegel attend",
        "subq1": [
            "which uni",
            "did joshua a. siegel attend"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whihc uni did Joshua A. Siegel attend ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which uni [DES] did Joshua A. Siegel attend [INQR]",
        "subq1_no_decipher": [
            "Whihc uni did Joshua A. Siegel attend ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4857",
        "question": "How many books are written by the author who is famous for Novelas Ejemplares",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many books are written by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the author who is famous for novelas ejemplares",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many books are written by [INQL] the author who is famous for novelas ejemplares [INQR]",
        "subq1": [
            "how many books are written by [ENT]"
        ],
        "subq2": [
            "the author who is famous for novelas ejemplares"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many books are written by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the author",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is famous for Novelas Ejemplares",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many books are written by [INQL] the author [DES] who is famous for Novelas Ejemplares [INQR]",
        "subq1_no_decipher": [
            "How many books are written by [ENT]"
        ],
        "subq2_no_decipher": [
            "the author",
            "who is famous for Novelas Ejemplares"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1203",
        "question": "Name the rivers who originate from Essex",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the rivers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who originate from essex",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the rivers [DES] who originate from essex",
        "subq1": [
            "name the rivers",
            "who originate from essex"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the rivers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who originate from Essex",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the rivers [DES] who originate from Essex [INQR]",
        "subq1_no_decipher": [
            "Name the rivers",
            "who originate from Essex"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1990",
        "question": "Companies founded in Taiwan have typically which divisions",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Taiwan> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have typically which divisions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies founded in taiwan",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] companies founded in taiwan [INQR] have typically which divisions",
        "subq1": [
            "[ENT] have typically which divisions"
        ],
        "subq2": [
            "companies founded in taiwan"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have typically which divisions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Companies",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded in Taiwan",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Companies [DES] founded in Taiwan [INQR] have typically which divisions",
        "subq1_no_decipher": [
            "[ENT] have typically which divisions"
        ],
        "subq2_no_decipher": [
            "Companies",
            "founded in Taiwan"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "24",
        "question": "Did Timm Gunn guest in Sunrise (HIMYM)",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did timm gunn",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "guest in sunrise (himym)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did timm gunn [DES] guest in sunrise (himym)",
        "subq1": [
            "did timm gunn",
            "guest in sunrise (himym)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Timm Gunn guest in Sunrise (HIMYM)?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Timm Gunn guest in Sunrise (HIMYM) simple",
        "subq1_no_decipher": [
            "Did Timm Gunn guest in Sunrise (HIMYM)?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4852",
        "question": "to which university did both, the Stanford Cardinal and Gerald Reaven go",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did both, the stanford cardinal and gerald reaven go",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which university [DES] did both, the stanford cardinal and gerald reaven go",
        "subq1": [
            "to which university",
            "did both, the stanford cardinal and gerald reaven go"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did both, the Stanford Cardinal and Gerald Reaven go",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "to which university [DES] did both, the Stanford Cardinal and Gerald Reaven go",
        "subq1_no_decipher": [
            "to which university",
            "did both, the Stanford Cardinal and Gerald Reaven go"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4102",
        "question": "Name the nearest city to David W. Brown House",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the nearest city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "to david w. brown house",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the nearest city [DES] to david w. brown house",
        "subq1": [
            "name the nearest city",
            "to david w. brown house"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the nearest city to David W. Brown House ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the nearest city to [INQL] David W. Brown House [INQR]",
        "subq1_no_decipher": [
            "Name the nearest city to David W. Brown House ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4167",
        "question": "where did Deion Sanders debut",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "deion sanders debut",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] deion sanders debut [INQR]",
        "subq1": [
            "where did [ENT]"
        ],
        "subq2": [
            "deion sanders debut"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where did Deion Sanders debut?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "where did Deion Sanders debut [INQR]",
        "subq1_no_decipher": [
            "where did Deion Sanders debut?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "762",
        "question": "What cities are nearer to Fountain Lake Farm",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are nearer to fountain lake farm",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what cities [DES] are nearer to fountain lake farm",
        "subq1": [
            "what cities",
            "are nearer to fountain lake farm"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are nearer to Fountain Lake Farm",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What cities [DES] are nearer to Fountain Lake Farm",
        "subq1_no_decipher": [
            "What cities",
            "are nearer to Fountain Lake Farm"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "875",
        "question": "Who are the characters of Batman Live",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are [ENT] live",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the characters of batman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are [INQL] the characters of batman [INQR] live",
        "subq1": [
            "who are [ENT] live"
        ],
        "subq2": [
            "the characters of batman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the characters of Batman Live?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who are [INQL] the characters of Batman Live",
        "subq1_no_decipher": [
            "Who are the characters of Batman Live?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4742",
        "question": "Which artists trained in San Francisco Art Institute",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which artists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "trained in san francisco art institute",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which artists [DES] trained in san francisco art institute",
        "subq1": [
            "which artists",
            "trained in san francisco art institute"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which artists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "trained in San Francisco Art Institute",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which artists [DES] trained in San Francisco Art Institute",
        "subq1_no_decipher": [
            "Which artists",
            "trained in San Francisco Art Institute"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "938",
        "question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the owning organisation of the ford kansas city assembly plant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the builder of the ford y-block engine",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the owning organisation of the ford kansas city assembly plant [DES] and also the builder of the ford y-block engine",
        "subq1": [
            "what is the owning organisation of the ford kansas city assembly plant",
            "and also the builder of the ford y-block engine"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the owning organisation of the Ford Kansas City Assembly Plant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the builder of the Ford Y-block engine",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the owning organisation of the Ford Kansas City Assembly Plant [DES] and also the builder of the Ford Y-block engine",
        "subq1_no_decipher": [
            "What is the owning organisation of the Ford Kansas City Assembly Plant",
            "and also the builder of the Ford Y-block engine"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2687",
        "question": "Name the country with currency as Aureus",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with currency as aureus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the country [DES] with currency as aureus",
        "subq1": [
            "name the country",
            "with currency as aureus"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with currency as Aureus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the country [DES] with currency as Aureus",
        "subq1_no_decipher": [
            "Name the country",
            "with currency as Aureus"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3600",
        "question": "what awards have been given to A. Peter Dewey",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/ontology/award> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what awards",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been given to a. peter dewey",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what awards [DES] have been given to a. peter dewey",
        "subq1": [
            "what awards",
            "have been given to a. peter dewey"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what awards have been given to A. Peter Dewey?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "what awards [DES] have been given to A. Peter Dewey [INQR]",
        "subq1_no_decipher": [
            "what awards have been given to A. Peter Dewey?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2394",
        "question": "How many shows belong to the network one of whose sister station is Cartoonite",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many shows belong to the network [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "one of whose sister station is cartoonite",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many shows belong to the network [INQL] one of whose sister station is cartoonite [INQR]",
        "subq1": [
            "how many shows belong to the network [ENT]"
        ],
        "subq2": [
            "one of whose sister station is cartoonite"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many shows belong to the network",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "one of whose sister station is Cartoonite",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many shows belong to the network [DES] [INQL] one of whose sister station is Cartoonite [INQR]",
        "subq1_no_decipher": [
            "How many shows belong to the network",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "one of whose sister station is Cartoonite"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4567",
        "question": "what has been developed by John Fanning",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what has been developed by john",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fanning",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what has been developed by john [DES] fanning",
        "subq1": [
            "what has been developed by john",
            "fanning"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what has been developed by John Fanning?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "what has been developed by John Fanning simple: what has been developed by John Fanning simple: what has been developed by John Fanning",
        "subq1_no_decipher": [
            "what has been developed by John Fanning?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4980",
        "question": "Muhammad Yunus has won how many awards",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] many awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "muhammad yunus has won how",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] muhammad yunus has won how [INQR] many awards",
        "subq1": [
            "[ENT] many awards"
        ],
        "subq2": [
            "muhammad yunus has won how"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Muhammad Yunus has won how many awards?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Muhammad Yunus has won [DES] how many awards",
        "subq1_no_decipher": [
            "Muhammad Yunus has won how many awards?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4124",
        "question": "List the associates of bands which have a label by Motown",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the associates of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "bands which have a label by motown",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the associates of [INQL] bands which have a label by motown [INQR]",
        "subq1": [
            "list the associates of [ENT]"
        ],
        "subq2": [
            "bands which have a label by motown"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the associates of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "bands",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have a label by Motown",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the associates of [INQL] bands [DES] which have a label by Motown [INQR]",
        "subq1_no_decipher": [
            "List the associates of [ENT]"
        ],
        "subq2_no_decipher": [
            "bands",
            "which have a label by Motown"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4564",
        "question": "Who wrote the musical whose composer is Emil Dean Zoghby",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Emil_Dean_Zoghby> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who wrote [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the musical whose composer is emil dean zoghby",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who wrote [INQL] the musical whose composer is emil dean zoghby [INQR]",
        "subq1": [
            "who wrote [ENT]"
        ],
        "subq2": [
            "the musical whose composer is emil dean zoghby"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who wrote [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the musical",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose composer is Emil Dean Zoghby",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who wrote [INQL] the musical [DES] whose composer is Emil Dean Zoghby [INQR]",
        "subq1_no_decipher": [
            "Who wrote [ENT]"
        ],
        "subq2_no_decipher": [
            "the musical",
            "whose composer is Emil Dean Zoghby"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "385",
        "question": "Count the units garrisoned at Arlington County, Virginia",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the units [ENT] at arlington county, virginia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "garrisoned",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the units [INQL] garrisoned [INQR] at arlington county, virginia",
        "subq1": [
            "count the units [ENT] at arlington county, virginia"
        ],
        "subq2": [
            "garrisoned"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the units garrisoned at Arlington County, Virginia.",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the units [DES] garrisoned at Arlington County, Virginia [INQR]",
        "subq1_no_decipher": [
            "Count the units garrisoned at Arlington County, Virginia."
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3877",
        "question": "What is the faith of Kwai Chang Caine",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the faith of kwai chang",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "caine",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the faith of kwai chang [DES] caine",
        "subq1": [
            "what is the faith of kwai chang",
            "caine"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the faith of Kwai Chang Caine ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the faith of [INQL] Kwai Chang Caine [INQR]",
        "subq1_no_decipher": [
            "What is the faith of Kwai Chang Caine ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4370",
        "question": "Who is related to Kelly Osbourne & Ozzy Osbourne",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is related to kelly osbourne & ozzy",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "osbourne",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is related to kelly osbourne & ozzy [DES] osbourne",
        "subq1": [
            "who is related to kelly osbourne & ozzy",
            "osbourne"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is related to Kelly Osbourne & Ozzy Osbourne simple",
        "subq1_no_decipher": [
            "Who is  related to Kelly Osbourne & Ozzy Osbourne?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4569",
        "question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pullaiahgaripalli> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the houses of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the legislature where the leader is called pullaiahgaripalli",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the houses of [INQL] the legislature where the leader is called pullaiahgaripalli [INQR]",
        "subq1": [
            "what are the houses of [ENT]"
        ],
        "subq2": [
            "the legislature where the leader is called pullaiahgaripalli"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the houses of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the legislature",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where the leader is called Pullaiahgaripalli",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the houses of [INQL] the legislature [DES] where the leader is called Pullaiahgaripalli [INQR]",
        "subq1_no_decipher": [
            "What are the houses of [ENT]"
        ],
        "subq2_no_decipher": [
            "the legislature",
            "where the leader is called Pullaiahgaripalli"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "536",
        "question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which serving railway line of the daund junction railway station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was also the place where 99 (2009 film) was recorded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which serving railway line of the daund junction railway station [DES] was also the place where 99 (2009 film) was recorded",
        "subq1": [
            "which serving railway line of the daund junction railway station",
            "was also the place where 99 (2009 film) was recorded"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which serving railway line of the Daund Junction railway station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was also the place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where 99 (2009 film) was recorded",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which serving railway line of the Daund Junction railway station [DES] was also the place [DES] where 99 (2009 film) was recorded",
        "subq1_no_decipher": [
            "Which serving railway line of the Daund Junction railway station",
            "was also the place",
            "where 99 (2009 film) was recorded"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2291",
        "question": "List the ethnicity of Riley Reid",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the ethnicity of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "riley reid",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the ethnicity of [INQL] riley reid [INQR]",
        "subq1": [
            "list the ethnicity of [ENT]"
        ],
        "subq2": [
            "riley reid"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the ethnicity of Riley Reid?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the ethnicity of [INQL] Riley Reid [INQR]",
        "subq1_no_decipher": [
            "List the ethnicity of Riley Reid?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4665",
        "question": "Which shows are from a company whose subsidiary is Viacom Productions",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which shows are from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a company whose subsidiary is viacom productions",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which shows are from [INQL] a company whose subsidiary is viacom productions [INQR]",
        "subq1": [
            "which shows are from [ENT]"
        ],
        "subq2": [
            "a company whose subsidiary is viacom productions"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which shows are from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose subsidiary is Viacom Productions",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which shows are from [INQL] a company [DES] whose subsidiary is Viacom Productions [INQR]",
        "subq1_no_decipher": [
            "Which shows are from [ENT]"
        ],
        "subq2_no_decipher": [
            "a company",
            "whose subsidiary is Viacom Productions"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3874",
        "question": "Giuseppe Bertello and Pietro Parolin are leaders of which place",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "giuseppe bertello and pietro parolin are leaders of which",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "giuseppe bertello and pietro parolin are leaders of which [DES] place",
        "subq1": [
            "giuseppe bertello and pietro parolin are leaders of which",
            "place"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Giuseppe Bertello and Pietro Parolin are leaders of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Giuseppe Bertello and Pietro Parolin are leaders of [DES] which place",
        "subq1_no_decipher": [
            "Giuseppe Bertello and Pietro Parolin are leaders of",
            "which place"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "936",
        "question": "What is the university whose campus is Mount Moosilauke",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose campus is mount moosilauke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the university [DES] whose campus is mount moosilauke",
        "subq1": [
            "what is the university",
            "whose campus is mount moosilauke"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose campus is Mount Moosilauke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the university [DES] whose campus is Mount Moosilauke",
        "subq1_no_decipher": [
            "What is the university",
            "whose campus is Mount Moosilauke"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3737",
        "question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many religions are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the group whose architectural style can be seen on sanggar agung",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many religions are followed by [INQL] the group whose architectural style can be seen on sanggar agung [INQR]",
        "subq1": [
            "how many religions are followed by [ENT]"
        ],
        "subq2": [
            "the group whose architectural style can be seen on sanggar agung"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the group",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose architectural style can be seen on Sanggar Agung",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many religions [DES] are followed by [INQL] the group [DES] whose architectural style can be seen on Sanggar Agung [INQR]",
        "subq1_no_decipher": [
            "How many religions",
            "are followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "the group",
            "whose architectural style can be seen on Sanggar Agung"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4728",
        "question": "How many things are written in C++",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many things",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are written in c++",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many things [DES] are written in c++",
        "subq1": [
            "how many things",
            "are written in c++"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many things are written in C++?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "How many things [DES] are written in C++ simple",
        "subq1_no_decipher": [
            "How many things are written in C++?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2360",
        "question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the garrison of the western naval command",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and line of the vadodara junction railway station",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the garrison of the western naval command [DES] and line of the vadodara junction railway station",
        "subq1": [
            "name the garrison of the western naval command",
            "and line of the vadodara junction railway station"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the garrison of the Western Naval Command",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and line of the Vadodara Junction railway station",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the garrison of the Western Naval Command [DES] and line of the Vadodara Junction railway station",
        "subq1_no_decipher": [
            "Name the garrison of the Western Naval Command",
            "and line of the Vadodara Junction railway station"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3507",
        "question": "Who are the shareholder of the soccer club for whom Steve Holland plays",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are the shareholder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club for whom steve holland plays",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are the shareholder of [INQL] the soccer club for whom steve holland plays [INQR]",
        "subq1": [
            "who are the shareholder of [ENT]"
        ],
        "subq2": [
            "the soccer club for whom steve holland plays"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the shareholder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "for whom Steve Holland plays",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who are the shareholder of [INQL] the soccer club [DES] for whom Steve Holland plays [INQR]",
        "subq1_no_decipher": [
            "Who are the shareholder of [ENT]"
        ],
        "subq2_no_decipher": [
            "the soccer club",
            "for whom Steve Holland plays"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "201",
        "question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which city located on mediterranean sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the stadium of panionios g.s.s. season",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which city located on mediterranean sea [DES] is also the stadium of panionios g.s.s. season",
        "subq1": [
            "which city located on mediterranean sea",
            "is also the stadium of panionios g.s.s. season"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "located on Mediterranean Sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the stadium of Panionios G.S.S. season",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which city [DES] located on Mediterranean Sea [DES] is also the stadium of Panionios G.S.S. season",
        "subq1_no_decipher": [
            "Which city",
            "located on Mediterranean Sea",
            "is also the stadium of Panionios G.S.S. season"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3208",
        "question": "Was Don't Bring Me Down recorded in West Germany",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was don't bring me down",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "recorded in west germany",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was don't bring me down [DES] recorded in west germany",
        "subq1": [
            "was don't bring me down",
            "recorded in west germany"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Don't Bring Me Down recorded in West Germany?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Don't Bring Me Down recorded [DES] in West Germany",
        "subq1_no_decipher": [
            "Was Don't Bring Me Down recorded in West Germany?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1332",
        "question": "Through which cities do the rivers starting at the Montauk State Park flow",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "through which cities do [ENT] flow",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rivers starting at the montauk state park",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "through which cities do [INQL] the rivers starting at the montauk state park [INQR] flow",
        "subq1": [
            "through which cities do [ENT] flow"
        ],
        "subq2": [
            "the rivers starting at the montauk state park"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Through which cities do [ENT] flow",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rivers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "starting at the Montauk State Park",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Through which cities do [INQL] the rivers [DES] starting at the Montauk State Park [INQR] flow",
        "subq1_no_decipher": [
            "Through which cities do [ENT] flow"
        ],
        "subq2_no_decipher": [
            "the rivers",
            "starting at the Montauk State Park"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3016",
        "question": "How many ideologies do the political party of Boonchu Rojanastien hold",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many ideologies do [ENT] hold",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the political party of boonchu rojanastien",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many ideologies do [INQL] the political party of boonchu rojanastien [INQR] hold",
        "subq1": [
            "how many ideologies do [ENT] hold"
        ],
        "subq2": [
            "the political party of boonchu rojanastien"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many ideologies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do [ENT] hold",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the political party of Boonchu Rojanastien",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many ideologies [DES] do [INQL] the political party of Boonchu Rojanastien [INQR] hold",
        "subq1_no_decipher": [
            "How many ideologies",
            "do [ENT] hold"
        ],
        "subq2_no_decipher": [
            "the political party of Boonchu Rojanastien"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3502",
        "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PLUS_Expressways> <http://dbpedia.org/property/hubs> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are [ENT] a highway helicopter unit of plus expressways",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the hubs of plus helicopter services,",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are [INQL] the hubs of plus helicopter services, [INQR] a highway helicopter unit of plus expressways",
        "subq1": [
            "what are [ENT] a highway helicopter unit of plus expressways"
        ],
        "subq2": [
            "the hubs of plus helicopter services,"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways",
        "subq1_no_decipher": [
            "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2708",
        "question": "Name the movies for which music was given by Geoffrey Burgon and distributed by Cinema International Corporation",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movies for which music was given by geoffrey burgon",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and distributed by cinema international corporation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movies for which music was given by geoffrey burgon [DES] and distributed by cinema international corporation",
        "subq1": [
            "name the movies for which music was given by geoffrey burgon",
            "and distributed by cinema international corporation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "for which music was given by Geoffrey Burgon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and distributed by Cinema International Corporation",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movies [DES] for which music was given by Geoffrey Burgon [DES] and distributed by Cinema International Corporation",
        "subq1_no_decipher": [
            "Name the movies",
            "for which music was given by Geoffrey Burgon",
            "and distributed by Cinema International Corporation"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4021",
        "question": "Is Henry David Thoreau interested in Politics",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is henry david thoreau",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "interested in politics",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is henry david thoreau [DES] interested in politics",
        "subq1": [
            "is henry david thoreau",
            "interested in politics"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Henry David Thoreau interested in Politics?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Henry David Thoreau interested in Politics [INQR]",
        "subq1_no_decipher": [
            "Is Henry David Thoreau interested in Politics?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1854",
        "question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "among the companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has product named chinook who has a key person as dennis muilenburg",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "among the companies [DES] who has product named chinook who has a key person as dennis muilenburg",
        "subq1": [
            "among the companies",
            "who has product named chinook who has a key person as dennis muilenburg"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Among the companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has product named Chinook",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has a key person as Dennis Muilenburg",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Among the companies [DES] who has product named Chinook [DES] who has a key person as Dennis Muilenburg",
        "subq1_no_decipher": [
            "Among the companies",
            "who has product named Chinook",
            "who has a key person as Dennis Muilenburg"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4469",
        "question": "Which country's leader is Giuseppe Bertello",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which country's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "leader is giuseppe bertello",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which country's [DES] leader is giuseppe bertello",
        "subq1": [
            "which country's",
            "leader is giuseppe bertello"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which country's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "leader is Giuseppe Bertello",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which country's [DES] leader is Giuseppe Bertello",
        "subq1_no_decipher": [
            "Which country's",
            "leader is Giuseppe Bertello"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2872",
        "question": "Who wrote the subsequent work of One Day at a Time (Em's Version)",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who wrote [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the subsequent work of one day at a time (em's version)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who wrote [INQL] the subsequent work of one day at a time (em's version) [INQR]",
        "subq1": [
            "who wrote [ENT]"
        ],
        "subq2": [
            "the subsequent work of one day at a time (em's version)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who wrote the subsequent work of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "One Day at a Time (Em's Version)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who wrote the subsequent work of [INQL] One Day at a Time (Em's Version) [INQR]",
        "subq1_no_decipher": [
            "Who wrote the subsequent work of [ENT]"
        ],
        "subq2_no_decipher": [
            "One Day at a Time (Em's Version)"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3030",
        "question": "Name the TV shows with network as NBC and company as Paramount Television",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the tv shows with network as nbc",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and company as paramount television",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the tv shows with network as nbc [DES] and company as paramount television",
        "subq1": [
            "name the tv shows with network as nbc",
            "and company as paramount television"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the TV shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with network as NBC",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and company as Paramount Television",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the TV shows [DES] with network as NBC [DES] and company as Paramount Television",
        "subq1_no_decipher": [
            "Name the TV shows",
            "with network as NBC",
            "and company as Paramount Television"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1205",
        "question": "Name the fictional character whose voice's animator is Hardie Gramatky",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Hardie_Gramatky> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the fictional character whose voice's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "animator is hardie gramatky",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the fictional character whose voice's [INQL] animator is hardie gramatky [INQR]",
        "subq1": [
            "name the fictional character whose voice's [ENT]"
        ],
        "subq2": [
            "animator is hardie gramatky"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the fictional character",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose voice's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "animator is Hardie Gramatky",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the fictional character [DES] whose voice's [INQL] animator is Hardie Gramatky [INQR]",
        "subq1_no_decipher": [
            "Name the fictional character",
            "whose voice's [ENT]"
        ],
        "subq2_no_decipher": [
            "animator is Hardie Gramatky"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1645",
        "question": "Which license provider of MSX basic is also the designer of Language Integrated Query",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which license provider of msx basic",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the designer of language integrated query",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which license provider of msx basic [DES] is also the designer of language integrated query",
        "subq1": [
            "which license provider of msx basic",
            "is also the designer of language integrated query"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which license provider of MSX basic",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the designer of Language Integrated Query",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which license provider of MSX basic [DES] is also the designer of Language Integrated Query",
        "subq1_no_decipher": [
            "Which license provider of MSX basic",
            "is also the designer of Language Integrated Query"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3417",
        "question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are the architect of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium whose one of the architect is louis d. astorino",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are the architect of [INQL] the stadium whose one of the architect is louis d. astorino [INQR]",
        "subq1": [
            "who are the architect of [ENT]"
        ],
        "subq2": [
            "the stadium whose one of the architect is louis d. astorino"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the architect of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the architect is louis D. Astorino",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who are the architect of [INQL] the stadium [DES] whose one of the architect is louis D. Astorino [INQR]",
        "subq1_no_decipher": [
            "Who are the architect of [ENT]"
        ],
        "subq2_no_decipher": [
            "the stadium",
            "whose one of the architect is louis D. Astorino"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3476",
        "question": "Who are the astronauts associated with NASA",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who are the astronauts",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "associated with nasa",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who are the astronauts [DES] associated with nasa",
        "subq1": [
            "who are the astronauts",
            "associated with nasa"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the astronauts",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "associated with NASA",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who are the astronauts [DES] associated with NASA",
        "subq1_no_decipher": [
            "Who are the astronauts",
            "associated with NASA"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2861",
        "question": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri. <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is a common ingredient",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "used in boyt blodpalt and kaszanka",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is a common ingredient [DES] used in boyt blodpalt and kaszanka",
        "subq1": [
            "what is a common ingredient",
            "used in boyt blodpalt and kaszanka"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is a common ingredient used in boyt Blodpalt and Kaszanka",
        "subq1_no_decipher": [
            "What is a common ingredient used in boyt Blodpalt and Kaszanka"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1792",
        "question": "Who is the partner of Rob Patterson",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the partner of rob",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "patterson",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the partner of rob [DES] patterson",
        "subq1": [
            "who is the partner of rob",
            "patterson"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the partner of Rob Patterson?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the partner of Rob Patterson [INQR]",
        "subq1_no_decipher": [
            "Who is the partner of Rob Patterson?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3797",
        "question": "How many politicians are there from the city of Ganges",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many politicians",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are there from the city of ganges",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many politicians [DES] are there from the city of ganges",
        "subq1": [
            "how many politicians",
            "are there from the city of ganges"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many politicians are there",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the city of Ganges",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many politicians are there [DES] from [INQL] the city of Ganges [INQR]",
        "subq1_no_decipher": [
            "How many politicians are there",
            "from [ENT]"
        ],
        "subq2_no_decipher": [
            "the city of Ganges"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3368",
        "question": "To which american football teams does the Heinz Field serve as home stadium",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Field> <http://dbpedia.org/property/tenants> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which american football teams",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does the heinz field serve as home stadium",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which american football teams [DES] does the heinz field serve as home stadium",
        "subq1": [
            "to which american football teams",
            "does the heinz field serve as home stadium"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which american football teams does the Heinz Field serve as home stadium?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which american football teams [DES] does the Heinz Field serve as home stadium",
        "subq1_no_decipher": [
            "To which american football teams does the Heinz Field serve as home stadium?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3367",
        "question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which architect of the marine corps air station kaneohe bay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the branch of the burnet r. maybank",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which architect of the marine corps air station kaneohe bay [DES] is the branch of the burnet r. maybank",
        "subq1": [
            "which architect of the marine corps air station kaneohe bay",
            "is the branch of the burnet r. maybank"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which architect of the Marine Corps Air Station Kaneohe Bay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the branch of the Burnet R. Maybank",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which architect of the Marine Corps Air Station Kaneohe Bay [DES] is the branch of the Burnet R. Maybank",
        "subq1_no_decipher": [
            "Which architect of the Marine Corps Air Station Kaneohe Bay",
            "is the branch of the Burnet R. Maybank"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3533",
        "question": "Which movies' screenplay is written by Akiva Goldsman",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which movies' screenplay [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is written by akiva goldsman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which movies' screenplay [INQL] is written by akiva goldsman [INQR]",
        "subq1": [
            "which movies' screenplay [ENT]"
        ],
        "subq2": [
            "is written by akiva goldsman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which movies' screenplay [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is written by Akiva Goldsman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which movies' screenplay [INQL] is written by Akiva Goldsman [INQR]",
        "subq1_no_decipher": [
            "Which movies' screenplay [ENT]"
        ],
        "subq2_no_decipher": [
            "is written by Akiva Goldsman"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3449",
        "question": "How many TV shows are similar to the ones belonging to fantasy genre",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Fantasy_television> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many tv shows are similar to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones belonging to fantasy genre",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many tv shows are similar to [INQL] the ones belonging to fantasy genre [INQR]",
        "subq1": [
            "how many tv shows are similar to [ENT]"
        ],
        "subq2": [
            "the ones belonging to fantasy genre"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many TV shows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are similar to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "belonging to fantasy genre",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many TV shows [DES] are similar to [INQL] the ones [DES] belonging to fantasy genre [INQR]",
        "subq1_no_decipher": [
            "How many TV shows",
            "are similar to [ENT]"
        ],
        "subq2_no_decipher": [
            "the ones",
            "belonging to fantasy genre"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "603",
        "question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me all commanders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which had an important role in both, the battle of fort stephenson and battle of the thames",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me all commanders [DES] which had an important role in both, the battle of fort stephenson and battle of the thames",
        "subq1": [
            "give me all commanders",
            "which had an important role in both, the battle of fort stephenson and battle of the thames"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give me all commanders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Give me all commanders [DES] which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames",
        "subq1_no_decipher": [
            "Give me all commanders",
            "which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3056",
        "question": "How many developers were involved in creating games whose score is composed by Gerard Marino",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many developers were involved in creating [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games whose score is composed by gerard marino",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many developers were involved in creating [INQL] games whose score is composed by gerard marino [INQR]",
        "subq1": [
            "how many developers were involved in creating [ENT]"
        ],
        "subq2": [
            "games whose score is composed by gerard marino"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many developers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were involved in creating [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose score is composed by Gerard Marino",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many developers [DES] were involved in creating [INQL] games [DES] whose score is composed by Gerard Marino [INQR]",
        "subq1_no_decipher": [
            "How many developers",
            "were involved in creating [ENT]"
        ],
        "subq2_no_decipher": [
            "games",
            "whose score is composed by Gerard Marino"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4531",
        "question": "Which sea is surrounded by Rostock and Kaliningrad",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is surrounded by rostock and kaliningrad",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which sea [DES] is surrounded by rostock and kaliningrad",
        "subq1": [
            "which sea",
            "is surrounded by rostock and kaliningrad"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is surrounded by Rostock and Kaliningrad",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which sea [DES] is surrounded by Rostock and Kaliningrad",
        "subq1_no_decipher": [
            "Which sea",
            "is surrounded by Rostock and Kaliningrad"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "126",
        "question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which television show's developer is brian graden",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voices to the character is by isaac hayes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which television show's developer is brian graden [DES] and voices to the character is by isaac hayes",
        "subq1": [
            "which television show's developer is brian graden",
            "and voices to the character is by isaac hayes"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which television show's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "developer is Brian Graden",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voices to the character is by Isaac Hayes",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which television show's [DES] developer is Brian Graden [DES] and voices to the character is by Isaac Hayes",
        "subq1_no_decipher": [
            "Which television show's",
            "developer is Brian Graden",
            "and voices to the character is by Isaac Hayes"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3876",
        "question": "How did the child of Stevens T. Mason die",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how did [ENT] die",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the child of stevens t. mason",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how did [INQL] the child of stevens t. mason [INQR] die",
        "subq1": [
            "how did [ENT] die"
        ],
        "subq2": [
            "the child of stevens t. mason"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How did [ENT] die",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the child of Stevens T. Mason",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "How did [INQL] the child of Stevens T. Mason [INQR] die",
        "subq1_no_decipher": [
            "How did [ENT] die"
        ],
        "subq2_no_decipher": [
            "the child of Stevens T. Mason"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2935",
        "question": "Does the Ontario International Airport serve the Inland Empire",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does the ontario international airport",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "serve the inland empire",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does the ontario international airport [DES] serve the inland empire",
        "subq1": [
            "does the ontario international airport",
            "serve the inland empire"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does the Ontario International Airport serve the Inland Empire?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does the Ontario International Airport [DES] serve the Inland Empire",
        "subq1_no_decipher": [
            "Does the Ontario International Airport serve the Inland Empire?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3531",
        "question": "Is semnani one of the languages spoken in Iran",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Iran> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is semnani one of the languages",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "spoken in iran",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is semnani one of the languages [DES] spoken in iran",
        "subq1": [
            "is semnani one of the languages",
            "spoken in iran"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is semnani one of the languages spoken in Iran?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is semnani one of the languages [DES] spoken in Iran [INQR]",
        "subq1_no_decipher": [
            "Is semnani one of the languages spoken in Iran?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2730",
        "question": "What is the nickname of the home stadium of Angels Toru",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the nickname of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the home stadium of angels toru",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the nickname of [INQL] the home stadium of angels toru [INQR]",
        "subq1": [
            "what is the nickname of [ENT]"
        ],
        "subq2": [
            "the home stadium of angels toru"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the nickname of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the home stadium of Angels Toru",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the nickname of [INQL] the home stadium of Angels Toru [INQR]",
        "subq1_no_decipher": [
            "What is the nickname of [ENT]"
        ],
        "subq2_no_decipher": [
            "the home stadium of Angels Toru"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "827",
        "question": "What is the television show whose executive producer is Douglas Netter",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose executive producer is douglas netter",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the television show [DES] whose executive producer is douglas netter",
        "subq1": [
            "what is the television show",
            "whose executive producer is douglas netter"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose executive producer is Douglas Netter",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the television show [DES] whose executive producer is Douglas Netter",
        "subq1_no_decipher": [
            "What is the television show",
            "whose executive producer is Douglas Netter"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1639",
        "question": "List out the people who are related to the relatives of Jared Kushner",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list out the people who are related to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of jared kushner",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list out the people who are related to [INQL] the relatives of jared kushner [INQR]",
        "subq1": [
            "list out the people who are related to [ENT]"
        ],
        "subq2": [
            "the relatives of jared kushner"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List out the people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who are related to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of Jared Kushner",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List out the people [DES] who are related to [INQL] the relatives of Jared Kushner [INQR]",
        "subq1_no_decipher": [
            "List out the people",
            "who are related to [ENT]"
        ],
        "subq2_no_decipher": [
            "the relatives of Jared Kushner"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "984",
        "question": "List all the doctoral student of the scientist who has advised john Bowlby",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all the doctoral student of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist who has advised john bowlby",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all the doctoral student of [INQL] the scientist who has advised john bowlby [INQR]",
        "subq1": [
            "list all the doctoral student of [ENT]"
        ],
        "subq2": [
            "the scientist who has advised john bowlby"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all the doctoral student of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has advised john Bowlby",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List all the doctoral student of [INQL] the scientist [DES] who has advised john Bowlby [INQR]",
        "subq1_no_decipher": [
            "List all the doctoral student of [ENT]"
        ],
        "subq2_no_decipher": [
            "the scientist",
            "who has advised john Bowlby"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3281",
        "question": "To which series does the book belong which came after the Blade Runner 2",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "to which series does the book belong [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which came after the blade runner 2",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "to which series does the book belong [INQL] which came after the blade runner 2 [INQR]",
        "subq1": [
            "to which series does the book belong [ENT]"
        ],
        "subq2": [
            "which came after the blade runner 2"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "To which series does the book belong [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which came after the Blade Runner 2",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "To which series does the book belong [INQL] which came after the Blade Runner 2 [INQR]",
        "subq1_no_decipher": [
            "To which series does the book belong [ENT]"
        ],
        "subq2_no_decipher": [
            "which came after the Blade Runner 2"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4971",
        "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which city did [ENT] take place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ultimate fighter: team rousey vs. team tate",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which city did [INQL] the ultimate fighter: team rousey vs. team tate [INQR] take place",
        "subq1": [
            "in which city did [ENT] take place"
        ],
        "subq2": [
            "the ultimate fighter: team rousey vs. team tate"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did [ENT] take place",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "The Ultimate Fighter: Team Rousey vs. Team Tate",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which city [DES] did [INQL] The Ultimate Fighter: Team Rousey vs. Team Tate [INQR] take place",
        "subq1_no_decipher": [
            "In which city",
            "did [ENT] take place"
        ],
        "subq2_no_decipher": [
            "The Ultimate Fighter: Team Rousey vs. Team Tate"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2188",
        "question": "Where was Sino-French War fought",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] fought",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "sino-french war",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] sino-french war [INQR] fought",
        "subq1": [
            "where was [ENT] fought"
        ],
        "subq2": [
            "sino-french war"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Sino-French War fought ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was Sino-French War fought [DES]",
        "subq1_no_decipher": [
            "Where was Sino-French War fought ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4612",
        "question": "Who did Daniel Gibson marry",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who did [ENT] marry",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "daniel gibson",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who did [INQL] daniel gibson [INQR] marry",
        "subq1": [
            "who did [ENT] marry"
        ],
        "subq2": [
            "daniel gibson"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who did Daniel Gibson marry?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who did Daniel Gibson marry [INQR]",
        "subq1_no_decipher": [
            "Who did Daniel Gibson marry?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2443",
        "question": "What is the political party of the daughter of Jawaharlal Nehru",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the political party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the daughter of jawaharlal nehru",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the political party of [INQL] the daughter of jawaharlal nehru [INQR]",
        "subq1": [
            "what is the political party of [ENT]"
        ],
        "subq2": [
            "the daughter of jawaharlal nehru"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the political party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the daughter of Jawaharlal Nehru",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the political party of [INQL] the daughter of Jawaharlal Nehru [INQR]",
        "subq1_no_decipher": [
            "What is the political party of [ENT]"
        ],
        "subq2_no_decipher": [
            "the daughter of Jawaharlal Nehru"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "362",
        "question": "Name the river with source as Shannon Pot and its mouth is located in Limerick",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the river with source as shannon pot",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and its mouth is located in limerick",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the river with source as shannon pot [DES] and its mouth is located in limerick",
        "subq1": [
            "name the river with source as shannon pot",
            "and its mouth is located in limerick"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with source as Shannon Pot",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and its mouth is located in Limerick",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] with source as Shannon Pot [DES] and its mouth is located in Limerick",
        "subq1_no_decipher": [
            "Name the river",
            "with source as Shannon Pot",
            "and its mouth is located in Limerick"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2349",
        "question": "What is the organisation whose purposes are Environmentalism and Peace",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the organisation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose purposes are environmentalism and peace",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the organisation [DES] whose purposes are environmentalism and peace",
        "subq1": [
            "what is the organisation",
            "whose purposes are environmentalism and peace"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the organisation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose purposes are Environmentalism and Peace",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the organisation [DES] whose purposes are Environmentalism and Peace",
        "subq1_no_decipher": [
            "What is the organisation",
            "whose purposes are Environmentalism and Peace"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "345",
        "question": "Count the number of sports team members which have player named Matt Williams",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/name> <http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)> . ?x <http://dbpedia.org/property/name> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of sports team members which have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "player named matt williams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of sports team members which have [INQL] player named matt williams [INQR]",
        "subq1": [
            "count the number of sports team members which have [ENT]"
        ],
        "subq2": [
            "player named matt williams"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of sports team members",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have player named Matt Williams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Count the number of sports team members [DES] which have player named Matt Williams [INQR]",
        "subq1_no_decipher": [
            "Count the number of sports team members",
            "which have player named Matt Williams"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "814",
        "question": "How many different people own the Timeform award winners",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many different people own [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the timeform award winners",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many different people own [INQL] the timeform award winners [INQR]",
        "subq1": [
            "how many different people own [ENT]"
        ],
        "subq2": [
            "the timeform award winners"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many different people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "own [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the Timeform award winners",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many different people [DES] own [INQL] the Timeform award winners [INQR]",
        "subq1_no_decipher": [
            "How many different people",
            "own [ENT]"
        ],
        "subq2_no_decipher": [
            "the Timeform award winners"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3205",
        "question": "What religions do diplomats typically follow",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what religions",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do diplomats typically follow",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what religions [DES] do diplomats typically follow",
        "subq1": [
            "what religions",
            "do diplomats typically follow"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do [ENT] typically follow",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "diplomats",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What religions [DES] do [INQL] diplomats [INQR] typically follow",
        "subq1_no_decipher": [
            "What religions",
            "do [ENT] typically follow"
        ],
        "subq2_no_decipher": [
            "diplomats"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4160",
        "question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> . ?uri <http://dbpedia.org/property/owner> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "guggenheim family is the cofounder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a company that invested stocks in which baseball teams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "guggenheim family is the cofounder of [INQL] a company that invested stocks in which baseball teams [INQR]",
        "subq1": [
            "guggenheim family is the cofounder of [ENT]"
        ],
        "subq2": [
            "a company that invested stocks in which baseball teams"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] that invested stocks in which baseball teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Guggenheim family is the cofounder of",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a company",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Guggenheim family is the cofounder of [DES] a company [INQR] that invested stocks in which baseball teams",
        "subq1_no_decipher": [
            "[ENT] that invested stocks in which baseball teams"
        ],
        "subq2_no_decipher": [
            "Guggenheim family is the cofounder of",
            "a company"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4795",
        "question": "Was John muir one of the first to ascend a mountain on Mt hoffmann",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "was john muir one of the first to ascend [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a mountain on mt hoffmann",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "was john muir one of the first to ascend [INQL] a mountain on mt hoffmann [INQR]",
        "subq1": [
            "was john muir one of the first to ascend [ENT]"
        ],
        "subq2": [
            "a mountain on mt hoffmann"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was John muir one of the first to ascend a mountain on Mt hoffmann?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was John muir one of the first to ascend [INQL] a mountain on Mt hoffmann [INQR]",
        "subq1_no_decipher": [
            "Was John muir one of the first to ascend a mountain on Mt hoffmann?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3325",
        "question": "Which city is known for the people working in the western penn hospital",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which city is known for [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people working in the western penn hospital",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which city is known for [INQL] the people working in the western penn hospital [INQR]",
        "subq1": [
            "which city is known for [ENT]"
        ],
        "subq2": [
            "the people working in the western penn hospital"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is known for [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "working in the western penn hospital",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which city [DES] is known for [INQL] the people [DES] working in the western penn hospital [INQR]",
        "subq1_no_decipher": [
            "Which city",
            "is known for [ENT]"
        ],
        "subq2_no_decipher": [
            "the people",
            "working in the western penn hospital"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4106",
        "question": "In which country does the publishing house exist which was cofounded by Panos Loannides",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which country does the publishing house exist [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which was cofounded by panos loannides",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which country does the publishing house exist [INQL] which was cofounded by panos loannides [INQR]",
        "subq1": [
            "in which country does the publishing house exist [ENT]"
        ],
        "subq2": [
            "which was cofounded by panos loannides"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does the publishing house exist [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which was cofounded by Panos Loannides",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which country [DES] does the publishing house exist [INQL] which was cofounded by Panos Loannides [INQR]",
        "subq1_no_decipher": [
            "In which country",
            "does the publishing house exist [ENT]"
        ],
        "subq2_no_decipher": [
            "which was cofounded by Panos Loannides"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2116",
        "question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the team which is owned by dafenham wind turbines",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and stood first in 1967 mexican grand prix",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the team which is owned by dafenham wind turbines [DES] and stood first in 1967 mexican grand prix",
        "subq1": [
            "name the team which is owned by dafenham wind turbines",
            "and stood first in 1967 mexican grand prix"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is owned by Dafenham wind turbines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and stood first in 1967 mexican Grand Prix",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the team [DES] which is owned by Dafenham wind turbines [DES] and stood first in 1967 mexican Grand Prix",
        "subq1_no_decipher": [
            "Name the team",
            "which is owned by Dafenham wind turbines",
            "and stood first in 1967 mexican Grand Prix"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1834",
        "question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which education center sidney catlin partrodge attended which was also the alma mater of lisa brummel",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred": "[DES] which education center sidney catlin partrodge attended which was also the alma mater of lisa brummel",
        "subq1": [
            "which education center sidney catlin partrodge attended which was also the alma mater of lisa brummel"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which education center",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "Sidney Catlin Partrodge attended",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was also the alma mater of Lisa Brummel",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which education center [DES] Sidney Catlin Partrodge attended [DES] which was also the alma mater of Lisa Brummel",
        "subq1_no_decipher": [
            "Which education center",
            "Sidney Catlin Partrodge attended",
            "which was also the alma mater of Lisa Brummel"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "793",
        "question": "What sports can be played in Kharghar's schools",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Kharghar> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what sports can be played in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "kharghar's schools",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what sports can be played in [INQL] kharghar's schools [INQR]",
        "subq1": [
            "what sports can be played in [ENT]"
        ],
        "subq2": [
            "kharghar's schools"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What sports",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can be played in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Kharghar's schools",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What sports [DES] can be played in [INQL] Kharghar's schools [INQR]",
        "subq1_no_decipher": [
            "What sports",
            "can be played in [ENT]"
        ],
        "subq2_no_decipher": [
            "Kharghar's schools"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4946",
        "question": "Which ethnicity of Riley Reid is the state of origin of Holmes Colbert",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which ethnicity of riley reid",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the state of origin of holmes colbert",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which ethnicity of riley reid [DES] is the state of origin of holmes colbert",
        "subq1": [
            "which ethnicity of riley reid",
            "is the state of origin of holmes colbert"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which ethnicity of Riley Reid",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the state of origin of Holmes Colbert",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which ethnicity of Riley Reid [DES] is the state of origin of Holmes Colbert",
        "subq1_no_decipher": [
            "Which ethnicity of Riley Reid",
            "is the state of origin of Holmes Colbert"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2674",
        "question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> <http://dbpedia.org/resource/John_Boehner> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was john boehner",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the winner of the us house of representatives elections in ohio in 2010",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was john boehner [DES] the winner of the us house of representatives elections in ohio in 2010",
        "subq1": [
            "was john boehner",
            "the winner of the us house of representatives elections in ohio in 2010"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010",
        "subq1_no_decipher": [
            "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "94",
        "question": "Which american football team has stadium as O.co Coliseum",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which american football team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has stadium as o.co coliseum",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which american football team [DES] has stadium as o.co coliseum",
        "subq1": [
            "which american football team",
            "has stadium as o.co coliseum"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which american football team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has stadium as O.co Coliseum",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which american football team [DES] has stadium as O.co Coliseum",
        "subq1_no_decipher": [
            "Which american football team",
            "has stadium as O.co Coliseum"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3756",
        "question": "How many subjects are covered in the publications of Doubleday",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many subjects are covered in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the publications of doubleday",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many subjects are covered in [INQL] the publications of doubleday [INQR]",
        "subq1": [
            "how many subjects are covered in [ENT]"
        ],
        "subq2": [
            "the publications of doubleday"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many subjects",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are covered in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the publications of Doubleday",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many subjects [DES] are covered in [INQL] the publications of Doubleday [INQR]",
        "subq1_no_decipher": [
            "How many subjects",
            "are covered in [ENT]"
        ],
        "subq2_no_decipher": [
            "the publications of Doubleday"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2891",
        "question": "In which city of Pittsburg Steelers was the Congress of Industrial Organization founded",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Pittsburgh_Steelers> <http://dbpedia.org/property/city> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which city of pittsburg steelers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the congress of industrial organization founded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which city of pittsburg steelers [DES] was the congress of industrial organization founded",
        "subq1": [
            "in which city of pittsburg steelers",
            "was the congress of industrial organization founded"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which city of Pittsburg Steelers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the Congress of Industrial Organization founded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "In which city of Pittsburg Steelers [DES] was the Congress of Industrial Organization founded",
        "subq1_no_decipher": [
            "In which city of Pittsburg Steelers",
            "was the Congress of Industrial Organization founded"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2371",
        "question": "What is the hometown of the residents of Martha's vineyards",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Martha's_Vineyard> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the hometown of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the residents of martha's vineyards",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the hometown of [INQL] the residents of martha's vineyards [INQR]",
        "subq1": [
            "what is the hometown of [ENT]"
        ],
        "subq2": [
            "the residents of martha's vineyards"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the hometown of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the residents of Martha's vineyards",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the hometown of [INQL] the residents of Martha's vineyards [INQR]",
        "subq1_no_decipher": [
            "What is the hometown of [ENT]"
        ],
        "subq2_no_decipher": [
            "the residents of Martha's vineyards"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4149",
        "question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the cities on the shore",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the sea into which danish straits flows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has kaliningrad as one of the cities on the shore",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the sea into which danish straits flows [DES] and has kaliningrad as one of the cities on the shore",
        "subq1": [
            "name the sea into which danish straits flows",
            "and has kaliningrad as one of the cities on the shore"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "into which Danish Straits flows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has Kaliningrad as one of the cities on the shore",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the sea [DES] into which Danish Straits flows [DES] and has Kaliningrad as one of the cities on the shore",
        "subq1_no_decipher": [
            "Name the sea",
            "into which Danish Straits flows",
            "and has Kaliningrad as one of the cities on the shore"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4432",
        "question": "Name the team manager of Middlebrough F.C season 2006-07",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the team manager of middlebrough f.c season",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "2006-07",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the team manager of middlebrough f.c season [DES] 2006-07",
        "subq1": [
            "name the team manager of middlebrough f.c season",
            "2006-07"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the team manger of Middlebrough F.C season 2006-07 ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the team manager of Middlebrough F.C season 2006-07",
        "subq1_no_decipher": [
            "Name the team manger of Middlebrough F.C season 2006-07 ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3228",
        "question": "What city has the football team in which Lee Robinson debuted",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lee_Robinson_(American_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what city has [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the football team in which lee robinson debuted",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what city has [INQL] the football team in which lee robinson debuted [INQR]",
        "subq1": [
            "what city has [ENT]"
        ],
        "subq2": [
            "the football team in which lee robinson debuted"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the football team",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which Lee Robinson debuted",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What city [DES] has [INQL] the football team [DES] in which Lee Robinson debuted [INQR]",
        "subq1_no_decipher": [
            "What city",
            "has [ENT]"
        ],
        "subq2_no_decipher": [
            "the football team",
            "in which Lee Robinson debuted"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2853",
        "question": "Who is the owner of the bank which owns Bloomberg Radio",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the bank which owns bloomberg radio",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the owner of [INQL] the bank which owns bloomberg radio [INQR]",
        "subq1": [
            "who is the owner of [ENT]"
        ],
        "subq2": [
            "the bank which owns bloomberg radio"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the bank",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which owns Bloomberg Radio",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of [INQL] the bank [DES] which owns Bloomberg Radio [INQR]",
        "subq1_no_decipher": [
            "Who is the owner of [ENT]"
        ],
        "subq2_no_decipher": [
            "the bank",
            "which owns Bloomberg Radio"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2912",
        "question": "Which companies were behind the renovation of McKechnie Field",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McKechnie_Field> <http://dbpedia.org/property/architect> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which companies were behind [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the renovation of mckechnie field",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which companies were behind [INQL] the renovation of mckechnie field [INQR]",
        "subq1": [
            "which companies were behind [ENT]"
        ],
        "subq2": [
            "the renovation of mckechnie field"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which companies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were behind [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the renovation of McKechnie Field",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which companies [DES] were behind [INQL] the renovation of McKechnie Field [INQR]",
        "subq1_no_decipher": [
            "Which companies",
            "were behind [ENT]"
        ],
        "subq2_no_decipher": [
            "the renovation of McKechnie Field"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1865",
        "question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was the coach of marquette golden eagles men's basketball team-2012,13",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "season",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was the coach of marquette golden eagles men's basketball team-2012,13 [DES] season",
        "subq1": [
            "who was the coach of marquette golden eagles men's basketball team-2012,13",
            "season"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season",
        "subq1_no_decipher": [
            "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1857",
        "question": "Miluk and Cayuse are still spoken in which part of the world",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "miluk and cayuse are still spoken in which",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "part of the world",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "miluk and cayuse are still spoken in which [DES] part of the world",
        "subq1": [
            "miluk and cayuse are still spoken in which",
            "part of the world"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Miluk and Cayuse are still spoken in",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which part of the world",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Miluk and Cayuse are still spoken in [DES] which part of the world",
        "subq1_no_decipher": [
            "Miluk and Cayuse are still spoken in",
            "which part of the world"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2645",
        "question": "Which governor of Winston bryant is also the president of Carl Stokes",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which governor of winston bryant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of carl stokes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which governor of winston bryant [DES] is also the president of carl stokes",
        "subq1": [
            "which governor of winston bryant",
            "is also the president of carl stokes"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which governor of Winston bryant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of Carl Stokes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which governor of Winston bryant [DES] is also the president of Carl Stokes",
        "subq1_no_decipher": [
            "Which governor of Winston bryant",
            "is also the president of Carl Stokes"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2243",
        "question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the sports of patts college of aeronautics",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are of interest of jon speelman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the sports of patts college of aeronautics [DES] which are of interest of jon speelman",
        "subq1": [
            "list the sports of patts college of aeronautics",
            "which are of interest of jon speelman"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the sports of PATTS College of Aeronautics",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are of interest of Jon Speelman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the sports of PATTS College of Aeronautics [DES] which are of interest of Jon Speelman",
        "subq1_no_decipher": [
            "List the sports of PATTS College of Aeronautics",
            "which are of interest of Jon Speelman"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2336",
        "question": "What is the home stadium of the club coached by Justine Omojong",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Justine_Omojong> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the home stadium of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the club coached by justine omojong",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the home stadium of [INQL] the club coached by justine omojong [INQR]",
        "subq1": [
            "what is the home stadium of [ENT]"
        ],
        "subq2": [
            "the club coached by justine omojong"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the home stadium of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the club",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "coached by Justine Omojong",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the home stadium of [INQL] the club [DES] coached by Justine Omojong [INQR]",
        "subq1_no_decipher": [
            "What is the home stadium of [ENT]"
        ],
        "subq2_no_decipher": [
            "the club",
            "coached by Justine Omojong"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "950",
        "question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which are the predecessors of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the cars which are similar to the oldsmobile 88",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which are the predecessors of [INQL] the cars which are similar to the oldsmobile 88 [INQR]",
        "subq1": [
            "which are the predecessors of [ENT]"
        ],
        "subq2": [
            "the cars which are similar to the oldsmobile 88"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which are the predecessors of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are similar to the Oldsmobile 88",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which are the predecessors of [INQL] the cars [DES] which are similar to the Oldsmobile 88 [INQR]",
        "subq1_no_decipher": [
            "Which are the predecessors of [ENT]"
        ],
        "subq2_no_decipher": [
            "the cars",
            "which are similar to the Oldsmobile 88"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3068",
        "question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name a queen whose parent is ptolemy xii auletes",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and consort is ptolemy xiii theos philopator",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name a queen whose parent is ptolemy xii auletes [DES] and consort is ptolemy xiii theos philopator",
        "subq1": [
            "name a queen whose parent is ptolemy xii auletes",
            "and consort is ptolemy xiii theos philopator"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name a queen",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose parent is Ptolemy XII Auletes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and consort is Ptolemy XIII Theos Philopator",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name a queen [DES] whose parent is Ptolemy XII Auletes [DES] and consort is Ptolemy XIII Theos Philopator",
        "subq1_no_decipher": [
            "Name a queen",
            "whose parent is Ptolemy XII Auletes",
            "and consort is Ptolemy XIII Theos Philopator"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1120",
        "question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which show's theme music was composed by primus",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voiced by isaac hayes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which show's theme music was composed by primus [DES] and voiced by isaac hayes",
        "subq1": [
            "which show's theme music was composed by primus",
            "and voiced by isaac hayes"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which show's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "theme music was composed by Primus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voiced by Isaac Hayes",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which show's [DES] theme music was composed by Primus [DES] and voiced by Isaac Hayes",
        "subq1_no_decipher": [
            "Which show's",
            "theme music was composed by Primus",
            "and voiced by Isaac Hayes"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2597",
        "question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Woodlane,_New_Jersey> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the chancellor of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the university whose campus is in woodlane, new jersey",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the chancellor of [INQL] the university whose campus is in woodlane, new jersey [INQR]",
        "subq1": [
            "who is the chancellor of [ENT]"
        ],
        "subq2": [
            "the university whose campus is in woodlane, new jersey"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the chancellor of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the university",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose campus is in Woodlane, New Jersey",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the chancellor of [INQL] the university [DES] whose campus is in Woodlane, New Jersey [INQR]",
        "subq1_no_decipher": [
            "Who is the chancellor of [ENT]"
        ],
        "subq2_no_decipher": [
            "the university",
            "whose campus is in Woodlane, New Jersey"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2204",
        "question": "Name the mountain whose parent peak is located in Mexico",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the mountain whose parent peak [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is located in mexico",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the mountain whose parent peak [INQL] is located in mexico [INQR]",
        "subq1": [
            "name the mountain whose parent peak [ENT]"
        ],
        "subq2": [
            "is located in mexico"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the mountain",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose parent peak [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is located in Mexico",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the mountain [DES] whose parent peak [INQL] is located in Mexico [INQR]",
        "subq1_no_decipher": [
            "Name the mountain",
            "whose parent peak [ENT]"
        ],
        "subq2_no_decipher": [
            "is located in Mexico"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "419",
        "question": "List the ingredient of Blodpalt",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the ingredient of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "blodpalt",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the ingredient of [INQL] blodpalt [INQR]",
        "subq1": [
            "list the ingredient of [ENT]"
        ],
        "subq2": [
            "blodpalt"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the ingredient of Blodpalt ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the ingredient of Blodpalt simple: List the ingredient of Blodpalt simple",
        "subq1_no_decipher": [
            "List the ingredient of Blodpalt ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "922",
        "question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the developers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has contributed to both gnowsys and gnu texmacs",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the developers [DES] who has contributed to both gnowsys and gnu texmacs",
        "subq1": [
            "list the developers",
            "who has contributed to both gnowsys and gnu texmacs"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the developers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has contributed to both GNOWSYS and GNU TeXmacs",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the developers [DES] who has contributed to both GNOWSYS and GNU TeXmacs",
        "subq1_no_decipher": [
            "List the developers",
            "who has contributed to both GNOWSYS and GNU TeXmacs"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1254",
        "question": "List the served region of the organisations of Trade association",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the served region of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the organisations of trade association",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the served region of [INQL] the organisations of trade association [INQR]",
        "subq1": [
            "list the served region of [ENT]"
        ],
        "subq2": [
            "the organisations of trade association"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the served region of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the organisations of Trade association",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the served region of [INQL] the organisations of Trade association [INQR]",
        "subq1_no_decipher": [
            "List the served region of [ENT]"
        ],
        "subq2_no_decipher": [
            "the organisations of Trade association"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "477",
        "question": "Is Hyundai Lavita assembled in Malaysia",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is hyundai lavita",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "assembled in malaysia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is hyundai lavita [DES] assembled in malaysia",
        "subq1": [
            "is hyundai lavita",
            "assembled in malaysia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Hyundai Lavita assembled in Malaysia?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Hyundai Lavita [DES] assembled in Malaysia simple",
        "subq1_no_decipher": [
            "Is Hyundai Lavita assembled in Malaysia?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2035",
        "question": "Who composed the music for Tonight's the Night",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who composed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the music for tonight's the night",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who composed [INQL] the music for tonight's the night [INQR]",
        "subq1": [
            "who composed [ENT]"
        ],
        "subq2": [
            "the music for tonight's the night"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who composed the music for Tonight's the Night ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who composed [INQL] the music for Tonight's the Night [INQR]",
        "subq1_no_decipher": [
            "Who composed the music for Tonight's the Night ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1202",
        "question": "How many things are made by companies who produce mass media articles",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Mass_media> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many things are made by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies who produce mass media articles",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many things are made by [INQL] companies who produce mass media articles [INQR]",
        "subq1": [
            "how many things are made by [ENT]"
        ],
        "subq2": [
            "companies who produce mass media articles"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are made by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who produce mass media articles",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many things [DES] are made by [INQL] companies [DES] who produce mass media articles [INQR]",
        "subq1_no_decipher": [
            "How many things",
            "are made by [ENT]"
        ],
        "subq2_no_decipher": [
            "companies",
            "who produce mass media articles"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2626",
        "question": "What awards have been given to race horses bred by Bert Michell",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Bert_S._Michell> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what awards have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "race horses bred by bert michell",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what awards have been given to [INQL] race horses bred by bert michell [INQR]",
        "subq1": [
            "what awards have been given to [ENT]"
        ],
        "subq2": [
            "race horses bred by bert michell"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "race horses",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "bred by Bert Michell",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What awards [DES] have been given to [INQL] race horses [DES] bred by Bert Michell [INQR]",
        "subq1_no_decipher": [
            "What awards",
            "have been given to [ENT]"
        ],
        "subq2_no_decipher": [
            "race horses",
            "bred by Bert Michell"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4818",
        "question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "whose mayors [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are affiliated with christen-democratisch en vlaams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "whose mayors [INQL] are affiliated with christen-democratisch en vlaams [INQR]",
        "subq1": [
            "whose mayors [ENT]"
        ],
        "subq2": [
            "are affiliated with christen-democratisch en vlaams"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose mayors [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are affiliated with Christen-Democratisch en Vlaams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Whose mayors [INQL] are affiliated with Christen-Democratisch en Vlaams [INQR]",
        "subq1_no_decipher": [
            "Whose mayors [ENT]"
        ],
        "subq2_no_decipher": [
            "are affiliated with Christen-Democratisch en Vlaams"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1970",
        "question": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the common nationality of viveka babajee and ronny",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "vencatachellum",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the common nationality of viveka babajee and ronny [DES] vencatachellum",
        "subq1": [
            "what is the common nationality of viveka babajee and ronny",
            "vencatachellum"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the common nationality of Viveka Babajee and Ronny Vencatachellum",
        "subq1_no_decipher": [
            "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3110",
        "question": "Is the Hyundai Lavita assembled in Ulsan",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is the hyundai lavita",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "assembled in ulsan",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is the hyundai lavita [DES] assembled in ulsan",
        "subq1": [
            "is the hyundai lavita",
            "assembled in ulsan"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is the Hyundai Lavita assembled in Ulsan?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is the Hyundai Lavita [DES] assembled in Ulsan [INQR]",
        "subq1_no_decipher": [
            "Is the Hyundai Lavita assembled in Ulsan?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4018",
        "question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Election>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which party won [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the elections when y.s. rajasekhara reddy was in power",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which party won [INQL] the elections when y.s. rajasekhara reddy was in power [INQR]",
        "subq1": [
            "which party won [ENT]"
        ],
        "subq2": [
            "the elections when y.s. rajasekhara reddy was in power"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which party won [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the elections",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "when Y.S. Rajasekhara Reddy was in power",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which party won [INQL] the elections [DES] when Y.S. Rajasekhara Reddy was in power [INQR]",
        "subq1_no_decipher": [
            "Which party won [ENT]"
        ],
        "subq2_no_decipher": [
            "the elections",
            "when Y.S. Rajasekhara Reddy was in power"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2151",
        "question": "Where does the river begin whose left tributary is Krapanski Potok",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Krapanski_Potok> . ?x <http://dbpedia.org/ontology/source> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where does the river begin [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose left tributary is krapanski potok",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where does the river begin [INQL] whose left tributary is krapanski potok [INQR]",
        "subq1": [
            "where does the river begin [ENT]"
        ],
        "subq2": [
            "whose left tributary is krapanski potok"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where does the river begin",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose left tributary is Krapanski Potok",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where does the river begin [DES] [INQL] whose left tributary is Krapanski Potok [INQR]",
        "subq1_no_decipher": [
            "Where does the river begin",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "whose left tributary is Krapanski Potok"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3687",
        "question": "What are the notable commanders of the army whose one of the notable commanders is Paul Hausser",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Paul_Hausser> . ?x <http://dbpedia.org/property/notableCommanders> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the notable commanders of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the army whose one of the notable commanders is paul hausser",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the notable commanders of [INQL] the army whose one of the notable commanders is paul hausser [INQR]",
        "subq1": [
            "what are the notable commanders of [ENT]"
        ],
        "subq2": [
            "the army whose one of the notable commanders is paul hausser"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the notable commanders of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the army",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the notable commanders is Paul Hausser",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the notable commanders of [INQL] the army [DES] whose one of the notable commanders is Paul Hausser [INQR]",
        "subq1_no_decipher": [
            "What are the notable commanders of [ENT]"
        ],
        "subq2_no_decipher": [
            "the army",
            "whose one of the notable commanders is Paul Hausser"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1997",
        "question": "Name the source of Raa",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the source of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "raa",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the source of [DES] raa",
        "subq1": [
            "name the source of",
            "raa"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the source of Raa ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the source of Raa simple",
        "subq1_no_decipher": [
            "Name the source of Raa ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4033",
        "question": "Does Fa'a' International Airport serve tahiti too",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Fa'a'\u0101_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Tahiti> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does fa'a' international airport",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "serve tahiti too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does fa'a' international airport [DES] serve tahiti too",
        "subq1": [
            "does fa'a' international airport",
            "serve tahiti too"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Fa'a' International Airport serve tahiti too?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Fa'a' International Airport [INQR] serve tahiti too",
        "subq1_no_decipher": [
            "Does Fa'a' International Airport serve tahiti too?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3054",
        "question": "Who is the producer of Frampton's Camel",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the producer of frampton's camel",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the producer of frampton's camel [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the producer of frampton's camel"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the producer of  Frampton's Camel ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the producer of [INQL] Frampton's Camel [INQR]",
        "subq1_no_decipher": [
            "Who is the producer of  Frampton's Camel ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1248",
        "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)> <http://dbpedia.org/ontology/director> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the directors of [ENT] the very best of john lennon (dvd)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "lennon legend:",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the directors of [INQL] lennon legend: [INQR] the very best of john lennon (dvd)",
        "subq1": [
            "name the directors of [ENT] the very best of john lennon (dvd)"
        ],
        "subq2": [
            "lennon legend:"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) [INQR]",
        "subq1_no_decipher": [
            "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2192",
        "question": "What is the political party of Arun Chandra Guha and Indira Gandhi",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arun_Chandra_Guha> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the political party of arun chandra guha and indira",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "gandhi",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the political party of arun chandra guha and indira [DES] gandhi",
        "subq1": [
            "what is the political party of arun chandra guha and indira",
            "gandhi"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the political party of Arun Chandra Guha and Indira Gandhi",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the political party of Arun Chandra Guha and Indira Gandhi",
        "subq1_no_decipher": [
            "What is the political party of Arun Chandra Guha and Indira Gandhi"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2712",
        "question": "To which country is Svetlana Navasardyan from",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is svetlana navasardyan from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which country [DES] is svetlana navasardyan from",
        "subq1": [
            "to which country",
            "is svetlana navasardyan from"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which country is Svetlana Navasardyan from?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which country [DES] is Svetlana Navasardyan from [DES]",
        "subq1_no_decipher": [
            "To which country is Svetlana Navasardyan from?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "992",
        "question": "What is the alma mater of the scientist who is known for Rational analysis",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist who is known for rational analysis",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the alma mater of [INQL] the scientist who is known for rational analysis [INQR]",
        "subq1": [
            "what is the alma mater of [ENT]"
        ],
        "subq2": [
            "the scientist who is known for rational analysis"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is known for Rational analysis",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the alma mater of [INQL] the scientist [DES] who is known for Rational analysis [INQR]",
        "subq1_no_decipher": [
            "What is the alma mater of [ENT]"
        ],
        "subq2_no_decipher": [
            "the scientist",
            "who is known for Rational analysis"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2190",
        "question": "Who is the owner of Chelsea F.C.",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the owner of chelsea f.c.",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the owner of chelsea f.c. [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the owner of chelsea f.c."
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of  Chelsea F.C. ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of Chelsea F.C. [INQR]",
        "subq1_no_decipher": [
            "Who is the owner of  Chelsea F.C. ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3762",
        "question": "In how many places has Don R. Berlin worked",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in how many places",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has don r. berlin worked",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in how many places [DES] has don r. berlin worked",
        "subq1": [
            "in how many places",
            "has don r. berlin worked"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In how many places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Don R. Berlin worked",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In how many places [DES] has [INQL] Don R. Berlin worked [INQR]",
        "subq1_no_decipher": [
            "In how many places",
            "has [ENT]"
        ],
        "subq2_no_decipher": [
            "Don R. Berlin worked"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3597",
        "question": "For how many movies are there whose musicians home town is in Volos",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "for how many movies are there [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose musicians home town is in volos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "for how many movies are there [INQL] whose musicians home town is in volos [INQR]",
        "subq1": [
            "for how many movies are there [ENT]"
        ],
        "subq2": [
            "whose musicians home town is in volos"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "For how many movies are there",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose musicians [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "home town is in Volos",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "For how many movies are there [DES] whose musicians [INQL] home town is in Volos [INQR]",
        "subq1_no_decipher": [
            "For how many movies are there",
            "whose musicians [ENT]"
        ],
        "subq2_no_decipher": [
            "home town is in Volos"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1318",
        "question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stagecoach,_Colorado> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in all the places with a stagecoach,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where is a peetz table wind energy center located too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in all the places with a stagecoach, [DES] where is a peetz table wind energy center located too",
        "subq1": [
            "in all the places with a stagecoach,",
            "where is a peetz table wind energy center located too"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In [ENT] where is a Peetz Table Wind Energy Center located too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "all the places",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with a stagecoach,",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In [INQL] all the places [DES] with a stagecoach, [INQR] where is a Peetz Table Wind Energy Center located too",
        "subq1_no_decipher": [
            "In [ENT] where is a Peetz Table Wind Energy Center located too"
        ],
        "subq2_no_decipher": [
            "all the places",
            "with a stagecoach,"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1863",
        "question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the fictional character whose relatives are huey, dewey,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and louie and is of species american pekin duck",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the fictional character whose relatives are huey, dewey, [DES] and louie and is of species american pekin duck",
        "subq1": [
            "name the fictional character whose relatives are huey, dewey,",
            "and louie and is of species american pekin duck"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relatives are Huey, Dewey,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and Louie and is of species American Pekin duck",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the fictional character [DES] whose relatives are Huey, Dewey, [DES] and Louie and is of species American Pekin duck",
        "subq1_no_decipher": [
            "Name the fictional character",
            "whose relatives are Huey, Dewey,",
            "and Louie and is of species American Pekin duck"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2343",
        "question": "Who is the owner of the website which has the label Seed Eight",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seed_Eight> <http://dbpedia.org/property/label> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Website>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the website which has the label seed eight",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the owner of [INQL] the website which has the label seed eight [INQR]",
        "subq1": [
            "who is the owner of [ENT]"
        ],
        "subq2": [
            "the website which has the label seed eight"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the website",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has the label Seed Eight",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of [INQL] the website [DES] which has the label Seed Eight [INQR]",
        "subq1_no_decipher": [
            "Who is the owner of [ENT]"
        ],
        "subq2_no_decipher": [
            "the website",
            "which has the label Seed Eight"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2449",
        "question": "In which country is Sierra del Merendin",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is sierra del merendin",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which country [DES] is sierra del merendin",
        "subq1": [
            "in which country",
            "is sierra del merendin"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which country is Sierra del Merendin?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "In which country is [INQL] Sierra del Merendin [INQR]",
        "subq1_no_decipher": [
            "In which country is Sierra del Merendin?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2136",
        "question": "What is on the border of the places which fall under crook county municipality, oregon",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Crook_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is on the border of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the places which fall under crook county municipality, oregon",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is on the border of [INQL] the places which fall under crook county municipality, oregon [INQR]",
        "subq1": [
            "what is on the border of [ENT]"
        ],
        "subq2": [
            "the places which fall under crook county municipality, oregon"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is on the border of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the places",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which fall under crook county municipality, oregon",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is on the border of [INQL] the places [DES] which fall under crook county municipality, oregon [INQR]",
        "subq1_no_decipher": [
            "What is on the border of [ENT]"
        ],
        "subq2_no_decipher": [
            "the places",
            "which fall under crook county municipality, oregon"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1065",
        "question": "Which is the university of Vanderbilt Commodores",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the university of vanderbilt commodores",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which is [INQL] the university of vanderbilt commodores [INQR]",
        "subq1": [
            "which is [ENT]"
        ],
        "subq2": [
            "the university of vanderbilt commodores"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which is the university of Vanderbilt Commodores ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which is the university of Vanderbilt Commodores simple",
        "subq1_no_decipher": [
            "Which is the university of Vanderbilt Commodores ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4960",
        "question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has relatives are clan mcduck and huey, dewey, and",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relatives are clan mcduck and huey, dewey, and louie",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has relatives are clan mcduck and huey, dewey, and [DES] whose relatives are clan mcduck and huey, dewey, and louie",
        "subq1": [
            "has relatives are clan mcduck and huey, dewey, and",
            "whose relatives are clan mcduck and huey, dewey, and louie"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whose relatives are Clan McDuck and Huey, Dewey,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and Louie",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Whose relatives are Clan McDuck and Huey, Dewey, [DES] and Louie",
        "subq1_no_decipher": [
            "Whose relatives are Clan McDuck and Huey, Dewey,",
            "and Louie"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2621",
        "question": "What musicians are signed up with colpix records",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Colpix_Records>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what musicians",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are signed up with colpix records",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what musicians [DES] are signed up with colpix records",
        "subq1": [
            "what musicians",
            "are signed up with colpix records"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What musicians",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are signed up with colpix records",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What musicians [DES] are signed up with colpix records [INQR]",
        "subq1_no_decipher": [
            "What musicians",
            "are signed up with colpix records"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "77",
        "question": "Who is the person that first ascended the Cathedral Peak and Mount Hoffmann",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri. <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the person",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that first ascended the cathedral peak and mount hoffmann",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the person [DES] that first ascended the cathedral peak and mount hoffmann",
        "subq1": [
            "who is the person",
            "that first ascended the cathedral peak and mount hoffmann"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the person",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that first ascended the Cathedral Peak and Mount Hoffmann",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the person [DES] that first ascended the Cathedral Peak and Mount Hoffmann",
        "subq1_no_decipher": [
            "Who is the person",
            "that first ascended the Cathedral Peak and Mount Hoffmann"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2898",
        "question": "What currencies are used in the country whose capital is Podgorica",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Podgorica> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what currencies are used in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country whose capital is podgorica",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what currencies are used in [INQL] the country whose capital is podgorica [INQR]",
        "subq1": [
            "what currencies are used in [ENT]"
        ],
        "subq2": [
            "the country whose capital is podgorica"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What currencies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are used in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose capital is Podgorica",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What currencies [DES] are used in [INQL] the country [DES] whose capital is Podgorica [INQR]",
        "subq1_no_decipher": [
            "What currencies",
            "are used in [ENT]"
        ],
        "subq2_no_decipher": [
            "the country",
            "whose capital is Podgorica"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1314",
        "question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many other home stadium are there of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club whose home stadium is luzhniki stadium",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many other home stadium are there of [INQL] the soccer club whose home stadium is luzhniki stadium [INQR]",
        "subq1": [
            "how many other home stadium are there of [ENT]"
        ],
        "subq2": [
            "the soccer club whose home stadium is luzhniki stadium"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many other home stadium are there of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose home stadium is Luzhniki Stadium",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many other home stadium are there of [INQL] the soccer club [DES] whose home stadium is Luzhniki Stadium [INQR]",
        "subq1_no_decipher": [
            "How many other home stadium are there of [ENT]"
        ],
        "subq2_no_decipher": [
            "the soccer club",
            "whose home stadium is Luzhniki Stadium"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4372",
        "question": "Where was William Anthony trained",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] trained",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "william anthony",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] william anthony [INQR] trained",
        "subq1": [
            "where was [ENT] trained"
        ],
        "subq2": [
            "william anthony"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was  William Anthony  trained ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was William Anthony trained [INQR]",
        "subq1_no_decipher": [
            "Where was  William Anthony  trained ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "872",
        "question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which composer of motorpsycho nitemare",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has also composed the time are a-changing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which composer of motorpsycho nitemare [DES] has also composed the time are a-changing",
        "subq1": [
            "which composer of motorpsycho nitemare",
            "has also composed the time are a-changing"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which composer of Motorpsycho Nitemare",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has also composed The time are A-Changing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which composer of Motorpsycho Nitemare [DES] has also composed The time are A-Changing",
        "subq1_no_decipher": [
            "Which composer of Motorpsycho Nitemare",
            "has also composed The time are A-Changing"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3850",
        "question": "What river is it whose source is Dowra",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what river is it",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source is dowra",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what river is it [DES] whose source is dowra",
        "subq1": [
            "what river is it",
            "whose source is dowra"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is it",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source is Dowra",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What river [DES] is it [DES] whose source is Dowra",
        "subq1_no_decipher": [
            "What river",
            "is it",
            "whose source is Dowra"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4787",
        "question": "What is the religion of the president who won the Mongolian legislative election, 2004",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mongolian_legislative_election,_2004> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president who won the mongolian legislative election, 2004",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the religion of [INQL] the president who won the mongolian legislative election, 2004 [INQR]",
        "subq1": [
            "what is the religion of [ENT]"
        ],
        "subq2": [
            "the president who won the mongolian legislative election, 2004"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who won the Mongolian legislative election, 2004",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the religion of [INQL] the president [DES] who won the Mongolian legislative election, 2004 [INQR]",
        "subq1_no_decipher": [
            "What is the religion of [ENT]"
        ],
        "subq2_no_decipher": [
            "the president",
            "who won the Mongolian legislative election, 2004"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2965",
        "question": "Give me everything owned by networks which is lead by Steve Burke",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me everything owned by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "networks which is lead by steve burke",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me everything owned by [INQL] networks which is lead by steve burke [INQR]",
        "subq1": [
            "give me everything owned by [ENT]"
        ],
        "subq2": [
            "networks which is lead by steve burke"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me everything",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owned by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "networks",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is lead by Steve Burke",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Give me everything [DES] owned by [INQL] networks [DES] which is lead by Steve Burke [INQR]",
        "subq1_no_decipher": [
            "Give me everything",
            "owned by [ENT]"
        ],
        "subq2_no_decipher": [
            "networks",
            "which is lead by Steve Burke"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3391",
        "question": "What is the municipality of Homestead Grays Bridge",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the municipality of homestead grays bridge",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the municipality of homestead grays bridge [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the municipality of homestead grays bridge"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the municipality of Homestead Grays Bridge ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the municipality of Homestead Grays Bridge [INQR]",
        "subq1_no_decipher": [
            "What is the municipality of Homestead Grays Bridge ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2560",
        "question": "What religion do the politicians follow, who graduated from the Yokohama National University",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what religion do the politicians follow, [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who graduated from the yokohama national university",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what religion do the politicians follow, [INQL] who graduated from the yokohama national university [INQR]",
        "subq1": [
            "what religion do the politicians follow, [ENT]"
        ],
        "subq2": [
            "who graduated from the yokohama national university"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the politicians follow, [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who graduated from the Yokohama National University",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What religion [DES] do the politicians follow, [INQL] who graduated from the Yokohama National University [INQR]",
        "subq1_no_decipher": [
            "What religion",
            "do the politicians follow, [ENT]"
        ],
        "subq2_no_decipher": [
            "who graduated from the Yokohama National University"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4896",
        "question": "Who is the narrator of The Incredible Hulk , 1982 TV series",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the narrator of the incredible hulk",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": ", 1982 tv series",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the narrator of the incredible hulk [DES] , 1982 tv series",
        "subq1": [
            "who is the narrator of the incredible hulk",
            ", 1982 tv series"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the narrator of The Incredible Hulk , 1982 TV series ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the narrator of The Incredible Hulk, 1982 TV series",
        "subq1_no_decipher": [
            "Who is the narrator of The Incredible Hulk , 1982 TV series ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2635",
        "question": "What sports are played in schools where Swahili is the official language",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swahili_language> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what sports are played in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "schools where swahili is the official language",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what sports are played in [INQL] schools where swahili is the official language [INQR]",
        "subq1": [
            "what sports are played in [ENT]"
        ],
        "subq2": [
            "schools where swahili is the official language"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What sports",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are played in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "schools",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Swahili is the official language",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What sports [DES] are played in [INQL] schools [DES] where Swahili is the official language [INQR]",
        "subq1_no_decipher": [
            "What sports",
            "are played in [ENT]"
        ],
        "subq2_no_decipher": [
            "schools",
            "where Swahili is the official language"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3530",
        "question": "Which interest of Philip Novak is the religion of Vesak",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which interest of philip novak",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the religion of vesak",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which interest of philip novak [DES] is the religion of vesak",
        "subq1": [
            "which interest of philip novak",
            "is the religion of vesak"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which interest of Philip Novak",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the religion of Vesak",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which interest of Philip Novak [DES] is the religion of Vesak",
        "subq1_no_decipher": [
            "Which interest of Philip Novak",
            "is the religion of Vesak"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "375",
        "question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Anglo-Frisian_languages> . ?uri <http://dbpedia.org/property/languages> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count all the ethinic group who speaks [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "language which belongs to anglo-frisian language family",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count all the ethinic group who speaks [INQL] language which belongs to anglo-frisian language family [INQR]",
        "subq1": [
            "count all the ethinic group who speaks [ENT]"
        ],
        "subq2": [
            "language which belongs to anglo-frisian language family"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count all the ethinic group",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who speaks [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "language",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which belongs to Anglo-Frisian language family",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count all the ethinic group [DES] who speaks [INQL] language [DES] which belongs to Anglo-Frisian language family [INQR]",
        "subq1_no_decipher": [
            "Count all the ethinic group",
            "who speaks [ENT]"
        ],
        "subq2_no_decipher": [
            "language",
            "which belongs to Anglo-Frisian language family"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1908",
        "question": "What is the area of the Tar Heel Sports Network which is official residence of the Michael Nichols (photographer)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri. <http://dbpedia.org/resource/Michael_Nichols_(photographer)> <http://dbpedia.org/ontology/residence> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the area of the tar heel sports network",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is official residence of the michael nichols (photographer)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the area of the tar heel sports network [DES] which is official residence of the michael nichols (photographer)",
        "subq1": [
            "what is the area of the tar heel sports network",
            "which is official residence of the michael nichols (photographer)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the area of the Tar Heel Sports Network",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is official residence of the Michael Nichols (photographer)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the area of the Tar Heel Sports Network [DES] which is official residence of the Michael Nichols (photographer)",
        "subq1_no_decipher": [
            "What is the area of the Tar Heel Sports Network",
            "which is official residence of the Michael Nichols (photographer)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4332",
        "question": "Cologny and Lancy are the neighboring municipalities of which place",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "cologny and lancy are the neighboring municipalities of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "cologny and lancy are the neighboring municipalities of [DES] which place",
        "subq1": [
            "cologny and lancy are the neighboring municipalities of",
            "which place"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Cologny and Lancy are the neighboring municipalities of which place",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Cologny and Lancy are the neighboring municipalities of which place",
        "subq1_no_decipher": [
            "Cologny and Lancy are the neighboring municipalities of which place"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4379",
        "question": "How many artists have their works in the Sao Paolo Museum of Art",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many artists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have their works in the sao paolo museum of art",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many artists [DES] have their works in the sao paolo museum of art",
        "subq1": [
            "how many artists",
            "have their works in the sao paolo museum of art"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many artists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "their works",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the Sao Paolo Museum of Art",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many artists [DES] have [INQL] their works [DES] in the Sao Paolo Museum of Art [INQR]",
        "subq1_no_decipher": [
            "How many artists",
            "have [ENT]"
        ],
        "subq2_no_decipher": [
            "their works",
            "in the Sao Paolo Museum of Art"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4027",
        "question": "VP-8 and VP-10 shares which command structure",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/VP-8> <http://dbpedia.org/ontology/commandStructure> ?uri. <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "vp-8 and vp-10 shares which command",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "structure",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "vp-8 and vp-10 shares which command [DES] structure",
        "subq1": [
            "vp-8 and vp-10 shares which command",
            "structure"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "VP-8 and VP-10 shares",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which command structure",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "VP-8 and VP-10 shares [DES] which command structure",
        "subq1_no_decipher": [
            "VP-8 and VP-10 shares",
            "which command structure"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1604",
        "question": "What is used as money for French Southern and Antarctic Lands is also the product of the Karafarin Bank",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is used as money for french southern and antarctic lands is also the product of the karafarin bank",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what [DES] is used as money for french southern and antarctic lands is also the product of the karafarin bank",
        "subq1": [
            "what",
            "is used as money for french southern and antarctic lands is also the product of the karafarin bank"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is used as money for French Southern and Antarctic Lands",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the product of the Karafarin Bank",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is used as money for French Southern and Antarctic Lands [DES] is also the product of the Karafarin Bank",
        "subq1_no_decipher": [
            "What is used as money for French Southern and Antarctic Lands",
            "is also the product of the Karafarin Bank"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1118",
        "question": "Give me the total number of membership of the organisations which have members as Azerbaijan",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> . ?x <http://dbpedia.org/property/membership> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me the total number of membership of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the organisations which have members as azerbaijan",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me the total number of membership of [INQL] the organisations which have members as azerbaijan [INQR]",
        "subq1": [
            "give me the total number of membership of [ENT]"
        ],
        "subq2": [
            "the organisations which have members as azerbaijan"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the total number of membership of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the organisations",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have members as Azerbaijan",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me the total number of membership of [INQL] the organisations [DES] which have members as Azerbaijan [INQR]",
        "subq1_no_decipher": [
            "Give me the total number of membership of [ENT]"
        ],
        "subq2_no_decipher": [
            "the organisations",
            "which have members as Azerbaijan"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3677",
        "question": "What is the content license of MSX BASIC",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the content license of msx",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "basic",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the content license of msx [DES] basic",
        "subq1": [
            "what is the content license of msx",
            "basic"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the content licence of MSX BASIC ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the content license of MSX BASIC [INQR]",
        "subq1_no_decipher": [
            "What is the content licence of MSX BASIC ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3490",
        "question": "What are the central characters in spy kids series",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Spy_Kids_(franchise)>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the central characters in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "spy kids series",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the central characters in [INQL] spy kids series [INQR]",
        "subq1": [
            "what are the central characters in [ENT]"
        ],
        "subq2": [
            "spy kids series"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the central characters in spy kids series",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the central characters in spy kids series",
        "subq1_no_decipher": [
            "What are the central characters in spy kids series"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4864",
        "question": "Which comic characters were created by Paul Dini",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which comic characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were created by paul dini",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which comic characters [DES] were created by paul dini",
        "subq1": [
            "which comic characters",
            "were created by paul dini"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which comic characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were created by Paul Dini",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which comic characters [DES] were created by Paul Dini",
        "subq1_no_decipher": [
            "Which comic characters",
            "were created by Paul Dini"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2958",
        "question": "who owns the ship Victoria",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victoria_(ship)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who owns the ship",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "victoria",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who owns the ship [DES] victoria",
        "subq1": [
            "who owns the ship",
            "victoria"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who owns the ship Victoria?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "who owns the ship Victoria simple: [DES] who owns the ship Victoria",
        "subq1_no_decipher": [
            "who owns the ship Victoria?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1994",
        "question": "Where was the predecessor of Sevan Ross born",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of sevan ross",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] the predecessor of sevan ross [INQR] born",
        "subq1": [
            "where was [ENT] born"
        ],
        "subq2": [
            "the predecessor of sevan ross"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of Sevan Ross",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where was [INQL] the predecessor of Sevan Ross [INQR] born",
        "subq1_no_decipher": [
            "Where was [ENT] born"
        ],
        "subq2_no_decipher": [
            "the predecessor of Sevan Ross"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4955",
        "question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which city council",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owns the ted williams tunnel and leonard memorial ridge",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which city council [DES] owns the ted williams tunnel and leonard memorial ridge",
        "subq1": [
            "which city council",
            "owns the ted williams tunnel and leonard memorial ridge"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which city council",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owns the Ted Williams tunnel and Leonard Memorial ridge",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which city council [DES] owns the Ted Williams tunnel and Leonard Memorial ridge",
        "subq1_no_decipher": [
            "Which city council",
            "owns the Ted Williams tunnel and Leonard Memorial ridge"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4355",
        "question": "Where is the school which is the rival of Somerset Berkley Regional High",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the school which is the rival of somerset berkley regional high",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is [INQL] the school which is the rival of somerset berkley regional high [INQR]",
        "subq1": [
            "where is [ENT]"
        ],
        "subq2": [
            "the school which is the rival of somerset berkley regional high"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is the rival of Somerset Berkley Regional High",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where is [INQL] the school [DES] which is the rival of Somerset Berkley Regional High [INQR]",
        "subq1_no_decipher": [
            "Where is [ENT]"
        ],
        "subq2_no_decipher": [
            "the school",
            "which is the rival of Somerset Berkley Regional High"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2376",
        "question": "How many soccer manager have been in the Spain nation football team",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many soccer manager",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been in the spain nation football team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many soccer manager [DES] have been in the spain nation football team",
        "subq1": [
            "how many soccer manager",
            "have been in the spain nation football team"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many soccer manager",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been in the Spain nation football team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many soccer manager [DES] have been in the Spain nation football team",
        "subq1_no_decipher": [
            "How many soccer manager",
            "have been in the Spain nation football team"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1342",
        "question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common alma mater of the henry morton dexter and jack",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "mcgregor",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common alma mater of the henry morton dexter and jack [DES] mcgregor",
        "subq1": [
            "name the common alma mater of the henry morton dexter and jack",
            "mcgregor"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
        "subq1_no_decipher": [
            "Name the common alma mater of the Henry Morton Dexter and Jack McGregor"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "320",
        "question": "What are some companies which are founded in Dallas Jurisdiction",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are some companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are founded in dallas jurisdiction",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are some companies [DES] which are founded in dallas jurisdiction",
        "subq1": [
            "what are some companies",
            "which are founded in dallas jurisdiction"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are some companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are founded in Dallas Jurisdiction",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are some companies [DES] which are founded in Dallas Jurisdiction",
        "subq1_no_decipher": [
            "What are some companies",
            "which are founded in Dallas Jurisdiction"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1619",
        "question": "How many bands collaborated with artists who signed up with EMI",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many bands collaborated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "artists who signed up with emi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many bands collaborated with [INQL] artists who signed up with emi [INQR]",
        "subq1": [
            "how many bands collaborated with [ENT]"
        ],
        "subq2": [
            "artists who signed up with emi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many bands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "collaborated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "artists",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who signed up with EMI",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many bands [DES] collaborated with [INQL] artists [DES] who signed up with EMI [INQR]",
        "subq1_no_decipher": [
            "How many bands",
            "collaborated with [ENT]"
        ],
        "subq2_no_decipher": [
            "artists",
            "who signed up with EMI"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3713",
        "question": "What is the purpose of New Zealand Chess Federation",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the purpose of new zealand chess federation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the purpose of new zealand chess federation [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the purpose of new zealand chess federation"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the purpose of New Zealand Chess Federation ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the purpose of [INQL] New Zealand Chess Federation [INQR]",
        "subq1_no_decipher": [
            "What is the purpose of New Zealand Chess Federation ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2060",
        "question": "How many TV shows are of the company which are of company which is a subsidiary of Big Ticket Entertainment",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many tv shows are of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company which are of company which is a subsidiary of big ticket entertainment",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many tv shows are of [INQL] the company which are of company which is a subsidiary of big ticket entertainment [INQR]",
        "subq1": [
            "how many tv shows are of [ENT]"
        ],
        "subq2": [
            "the company which are of company which is a subsidiary of big ticket entertainment"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many TV shows are of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is a subsidiary of Big Ticket Entertainment",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many TV shows are of [INQL] the company [DES] which is a subsidiary of Big Ticket Entertainment [INQR]",
        "subq1_no_decipher": [
            "How many TV shows are of [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "which is a subsidiary of Big Ticket Entertainment"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2219",
        "question": "Who operates twin Cities 400",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who operates twin cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "400",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who operates twin cities [DES] 400",
        "subq1": [
            "who operates twin cities",
            "400"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who operates twin Cities 400 ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who operates twin Cities 400 [DES]",
        "subq1_no_decipher": [
            "Who operates twin Cities 400 ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1673",
        "question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri. <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/property/restingplace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the city of the maine school of science and mathematics is also the resting place of charles a. boutelle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what [DES] is the city of the maine school of science and mathematics is also the resting place of charles a. boutelle",
        "subq1": [
            "what",
            "is the city of the maine school of science and mathematics is also the resting place of charles a. boutelle"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the city of the Maine School of Science and Mathematics",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the resting place of Charles A. Boutelle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the city of the Maine School of Science and Mathematics [DES] is also the resting place of Charles A. Boutelle",
        "subq1_no_decipher": [
            "What is the city of the Maine School of Science and Mathematics",
            "is also the resting place of Charles A. Boutelle"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "260",
        "question": "Give me a count of royalties buried in Rome",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me a count of royalties",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in rome",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me a count of royalties [DES] buried in rome",
        "subq1": [
            "give me a count of royalties",
            "buried in rome"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give me a count of royalties",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in Rome",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Give me a count of royalties [DES] buried in Rome",
        "subq1_no_decipher": [
            "Give me a count of royalties",
            "buried in Rome"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4417",
        "question": "In how many places are Marjas found",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Marja'> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in how many places are [ENT] found",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "marjas",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in how many places are [INQL] marjas [INQR] found",
        "subq1": [
            "in how many places are [ENT] found"
        ],
        "subq2": [
            "marjas"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In how many places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Marjas found",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In how many places [DES] are [INQL] Marjas found [INQR]",
        "subq1_no_decipher": [
            "In how many places",
            "are [ENT]"
        ],
        "subq2_no_decipher": [
            "Marjas found"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2039",
        "question": "List the soccer players whose current team has the ground Stoke-on-Trent",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the soccer players whose current team [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has the ground stoke-on-trent",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the soccer players whose current team [INQL] has the ground stoke-on-trent [INQR]",
        "subq1": [
            "list the soccer players whose current team [ENT]"
        ],
        "subq2": [
            "has the ground stoke-on-trent"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the soccer players",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose current team [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has the ground Stoke-on-Trent",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the soccer players [DES] whose current team [INQL] has the ground Stoke-on-Trent [INQR]",
        "subq1_no_decipher": [
            "List the soccer players",
            "whose current team [ENT]"
        ],
        "subq2_no_decipher": [
            "has the ground Stoke-on-Trent"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "901",
        "question": "Which are the countries where Pioneer Corporation has flourished",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which are the countries",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where pioneer corporation has flourished",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which are the countries [DES] where pioneer corporation has flourished",
        "subq1": [
            "which are the countries",
            "where pioneer corporation has flourished"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which are the countires where Pioneer Corporation has flourished?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which are the countries [DES] where Pioneer Corporation has flourished [INQR]",
        "subq1_no_decipher": [
            "Which are the countires where Pioneer Corporation has flourished?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3744",
        "question": "Who is the president of Carl Stokes and Wyche Fowler",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the president of carl stokes and wyche",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fowler",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the president of carl stokes and wyche [DES] fowler",
        "subq1": [
            "who is the president of carl stokes and wyche",
            "fowler"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the president of Carl Stokes nad Wyche Fowler ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the president of Carl Stokes and Wyche Fowler simple",
        "subq1_no_decipher": [
            "Who is the president of Carl Stokes nad Wyche Fowler ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2026",
        "question": "Is God Save the Queen the national anthem of United Kingdom",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is god save",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the queen the national anthem of united kingdom",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is god save [DES] the queen the national anthem of united kingdom",
        "subq1": [
            "is god save",
            "the queen the national anthem of united kingdom"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is God Save the Queen the national anthem of United Kingdom?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is God Save the Queen the national anthem of United Kingdom [INQR]",
        "subq1_no_decipher": [
            "Is God Save the Queen the national anthem of United Kingdom?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1917",
        "question": "List few Swedish language movies",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list few swedish language",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list few swedish language [DES] movies",
        "subq1": [
            "list few swedish language",
            "movies"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List few Swedish language movies ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List few Swedish language movies [DES]",
        "subq1_no_decipher": [
            "List few Swedish language movies ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1828",
        "question": "Was christina crawford trained by Booker T",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was christina crawford",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "trained by booker t",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was christina crawford [DES] trained by booker t",
        "subq1": [
            "was christina crawford",
            "trained by booker t"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was christina crawford trained by Booker T?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was christina crawford [DES] trained by Booker T",
        "subq1_no_decipher": [
            "Was christina crawford trained by Booker T?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1573",
        "question": "What is the currency of Kerguelen Islands",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the currency of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "kerguelen islands",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the currency of [INQL] kerguelen islands [INQR]",
        "subq1": [
            "what is the currency of [ENT]"
        ],
        "subq2": [
            "kerguelen islands"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the currency of Kerguelen Islands ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the currency of [INQL] Kerguelen Islands [INQR]",
        "subq1_no_decipher": [
            "What is the currency of Kerguelen Islands ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4394",
        "question": "What are the musicals whose musicians worked under Sony Music Entertainment",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the musicals whose musicians [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "worked under sony music entertainment",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the musicals whose musicians [INQL] worked under sony music entertainment [INQR]",
        "subq1": [
            "what are the musicals whose musicians [ENT]"
        ],
        "subq2": [
            "worked under sony music entertainment"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the musicals",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose musicians [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "worked under Sony Music Entertainment",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the musicals [DES] whose musicians [INQL] worked under Sony Music Entertainment [INQR]",
        "subq1_no_decipher": [
            "What are the musicals",
            "whose musicians [ENT]"
        ],
        "subq2_no_decipher": [
            "worked under Sony Music Entertainment"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4208",
        "question": "Whose shrines are in a place governed by Justin Trudeau",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Justin_Trudeau> . ?uri <http://dbpedia.org/ontology/majorShrine> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "whose shrines are in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place governed by justin trudeau",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "whose shrines are in [INQL] a place governed by justin trudeau [INQR]",
        "subq1": [
            "whose shrines are in [ENT]"
        ],
        "subq2": [
            "a place governed by justin trudeau"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose shrines are in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "governed by Justin Trudeau",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Whose shrines are in [INQL] a place [DES] governed by Justin Trudeau [INQR]",
        "subq1_no_decipher": [
            "Whose shrines are in [ENT]"
        ],
        "subq2_no_decipher": [
            "a place",
            "governed by Justin Trudeau"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "224",
        "question": "What are the academic interests of the past members of Senser",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?x . ?x <http://dbpedia.org/property/mainInterests> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the academic interests of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the past members of senser",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the academic interests of [INQL] the past members of senser [INQR]",
        "subq1": [
            "what are the academic interests of [ENT]"
        ],
        "subq2": [
            "the past members of senser"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the academic interests of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the past members of Senser",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What are the academic interests of [INQL] the past members of Senser [INQR]",
        "subq1_no_decipher": [
            "What are the academic interests of [ENT]"
        ],
        "subq2_no_decipher": [
            "the past members of Senser"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "723",
        "question": "Who is the leader of Hackweiser",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/property/leaderName> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the leader of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hackweiser",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the leader of [DES] hackweiser",
        "subq1": [
            "who is the leader of",
            "hackweiser"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the leader of Hackweiser ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the leader of Hackweiser simple",
        "subq1_no_decipher": [
            "Who is the leader of Hackweiser ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4485",
        "question": "In which city is the sister station of KTXY located",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/city> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which city is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sister station of ktxy",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which city is [INQL] the sister station of ktxy [INQR] located",
        "subq1": [
            "in which city is [ENT] located"
        ],
        "subq2": [
            "the sister station of ktxy"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is [ENT] located",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sister station of KTXY",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which city [DES] is [INQL] the sister station of KTXY [INQR] located",
        "subq1_no_decipher": [
            "In which city",
            "is [ENT] located"
        ],
        "subq2_no_decipher": [
            "the sister station of KTXY"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1141",
        "question": "Where was the successor of Hank Brown born",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the successor of hank brown",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] the successor of hank brown [INQR] born",
        "subq1": [
            "where was [ENT] born"
        ],
        "subq2": [
            "the successor of hank brown"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the successor of Hank Brown",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where was [INQL] the successor of Hank Brown [INQR] born",
        "subq1_no_decipher": [
            "Where was [ENT] born"
        ],
        "subq2_no_decipher": [
            "the successor of Hank Brown"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2762",
        "question": "Name the constituency of Jonas Gahr where Sverre Krogh was born",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the constituency of jonas gahr",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where sverre krogh was born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the constituency of jonas gahr [DES] where sverre krogh was born",
        "subq1": [
            "name the constituency of jonas gahr",
            "where sverre krogh was born"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the constituency of Jonas Gahr",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Sverre Krogh was born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the constituency of Jonas Gahr [DES] where Sverre Krogh was born",
        "subq1_no_decipher": [
            "Name the constituency of Jonas Gahr",
            "where Sverre Krogh was born"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "846",
        "question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_Urban> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the common battle fought by stephen urban and ali habib",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "mahmud",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the common battle fought by stephen urban and ali habib [DES] mahmud",
        "subq1": [
            "what is the common battle fought by stephen urban and ali habib",
            "mahmud"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the common battle",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought by Stephen Urban and Ali Habib Mahmud",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the common battle [DES] fought by Stephen Urban and Ali Habib Mahmud",
        "subq1_no_decipher": [
            "What is the common battle",
            "fought by Stephen Urban and Ali Habib Mahmud"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2551",
        "question": "What is the relegious affiliations of Katyayana",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the relegious affiliations of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "katyayana",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the relegious affiliations of [INQL] katyayana [INQR]",
        "subq1": [
            "what is the relegious affiliations of [ENT]"
        ],
        "subq2": [
            "katyayana"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the relegious affiliations of Katyayana ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the relegious affiliations of Katyayana [INQR]",
        "subq1_no_decipher": [
            "What is the relegious affiliations of Katyayana ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2928",
        "question": "Where was the engineer born who manufactured EP R.E.P. 1",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1> <http://dbpedia.org/property/manufacturer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was the engineer born [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who manufactured ep r.e.p. 1",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was the engineer born [INQL] who manufactured ep r.e.p. 1 [INQR]",
        "subq1": [
            "where was the engineer born [ENT]"
        ],
        "subq2": [
            "who manufactured ep r.e.p. 1"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was the engineer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who manufactured EP R.E.P. 1",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where was the engineer [DES] born [INQL] who manufactured EP R.E.P. 1 [INQR]",
        "subq1_no_decipher": [
            "Where was the engineer",
            "born [ENT]"
        ],
        "subq2_no_decipher": [
            "who manufactured EP R.E.P. 1"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "117",
        "question": "who all have been a manager of english under twenty one football team",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who all have been a manager of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "english under twenty one football team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who all have been a manager of [INQL] english under twenty one football team [INQR]",
        "subq1": [
            "who all have been a manager of [ENT]"
        ],
        "subq2": [
            "english under twenty one football team"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who all have been a manager of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "english under twenty one football team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "who all have been a manager of [INQL] english under twenty one football team [INQR]",
        "subq1_no_decipher": [
            "who all have been a manager of [ENT]"
        ],
        "subq2_no_decipher": [
            "english under twenty one football team"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "645",
        "question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the military conflict",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose commanders are john mcewen and phm vn ng",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the military conflict [DES] whose commanders are john mcewen and phm vn ng",
        "subq1": [
            "what is the military conflict",
            "whose commanders are john mcewen and phm vn ng"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the military conflict",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose commanders are John McEwen",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and Phm Vn ng",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the military conflict [DES] whose commanders are John McEwen [DES] and Phm Vn ng",
        "subq1_no_decipher": [
            "What is the military conflict",
            "whose commanders are John McEwen",
            "and Phm Vn ng"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3",
        "question": "Which party has come in power in Mumbai North",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has come in power in mumbai north",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which party [DES] has come in power in mumbai north",
        "subq1": [
            "which party",
            "has come in power in mumbai north"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has come in power in Mumbai North",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which party [DES] has come in power in Mumbai North",
        "subq1_no_decipher": [
            "Which party",
            "has come in power in Mumbai North"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4170",
        "question": "Name the tv show with judges Randy Jackson and Jennifer Lopez",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with judges randy jackson and jennifer lopez",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the tv show [DES] with judges randy jackson and jennifer lopez",
        "subq1": [
            "name the tv show",
            "with judges randy jackson and jennifer lopez"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with judges Randy Jackson and Jennifer Lopez",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the tv show [DES] with judges Randy Jackson and Jennifer Lopez",
        "subq1_no_decipher": [
            "Name the tv show",
            "with judges Randy Jackson and Jennifer Lopez"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "467",
        "question": "What is the largest city of the country which hosted the 1951 Asian Games",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the largest city of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country which hosted the 1951 asian games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the largest city of [INQL] the country which hosted the 1951 asian games [INQR]",
        "subq1": [
            "what is the largest city of [ENT]"
        ],
        "subq2": [
            "the country which hosted the 1951 asian games"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the largest city of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which hosted the 1951 Asian Games",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the largest city of [INQL] the country [DES] which hosted the 1951 Asian Games [INQR]",
        "subq1_no_decipher": [
            "What is the largest city of [ENT]"
        ],
        "subq2_no_decipher": [
            "the country",
            "which hosted the 1951 Asian Games"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "5",
        "question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which royalty",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was married to ptolemy xiii theos philopator and had mother named cleopatra v",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which royalty [DES] was married to ptolemy xiii theos philopator and had mother named cleopatra v",
        "subq1": [
            "which royalty",
            "was married to ptolemy xiii theos philopator and had mother named cleopatra v"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which royalty",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was married to ptolemy XIII Theos Philopator",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and had mother named Cleopatra V",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which royalty [DES] was married to ptolemy XIII Theos Philopator [DES] and had mother named Cleopatra V",
        "subq1_no_decipher": [
            "Which royalty",
            "was married to ptolemy XIII Theos Philopator",
            "and had mother named Cleopatra V"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "919",
        "question": "Whose theme music was composed by a band which collaborated with Phish",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "whose theme music was composed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a band which collaborated with phish",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "whose theme music was composed by [INQL] a band which collaborated with phish [INQR]",
        "subq1": [
            "whose theme music was composed by [ENT]"
        ],
        "subq2": [
            "a band which collaborated with phish"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose theme music was composed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a band",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which collaborated with Phish",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Whose theme music was composed by [INQL] a band [DES] which collaborated with Phish [INQR]",
        "subq1_no_decipher": [
            "Whose theme music was composed by [ENT]"
        ],
        "subq2_no_decipher": [
            "a band",
            "which collaborated with Phish"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2595",
        "question": "Is morrissey in the smiths",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is morrissey",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the smiths",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is morrissey [DES] in the smiths",
        "subq1": [
            "is morrissey",
            "in the smiths"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is morrissey in the smiths?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is morrissey in the smiths",
        "subq1_no_decipher": [
            "Is morrissey in the smiths?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1063",
        "question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which administrative headquarters of the pulau ubin",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the resting place of the nicole lai",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which administrative headquarters of the pulau ubin [DES] is also the resting place of the nicole lai",
        "subq1": [
            "which administrative headquarters of the pulau ubin",
            "is also the resting place of the nicole lai"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which administrative headquarters of the Pulau Ubin",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the resting place of the Nicole Lai",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which administrative headquarters of the Pulau Ubin [DES] is also the resting place of the Nicole Lai",
        "subq1_no_decipher": [
            "Which administrative headquarters of the Pulau Ubin",
            "is also the resting place of the Nicole Lai"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2590",
        "question": "Where did the beverages sold by Refriango originate",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] originate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the beverages sold by refriango",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the beverages sold by refriango [INQR] originate",
        "subq1": [
            "where did [ENT] originate"
        ],
        "subq2": [
            "the beverages sold by refriango"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did [ENT] originate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the beverages",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "sold by Refriango",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the beverages [DES] sold by Refriango [INQR] originate",
        "subq1_no_decipher": [
            "Where did [ENT] originate"
        ],
        "subq2_no_decipher": [
            "the beverages",
            "sold by Refriango"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "242",
        "question": "Who built the stadium which was rented by Costa Rica national football team",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who built [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium which was rented by costa rica national football team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who built [INQL] the stadium which was rented by costa rica national football team [INQR]",
        "subq1": [
            "who built [ENT]"
        ],
        "subq2": [
            "the stadium which was rented by costa rica national football team"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who built [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was rented by Costa Rica national football team",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who built [INQL] the stadium [DES] which was rented by Costa Rica national football team [INQR]",
        "subq1_no_decipher": [
            "Who built [ENT]"
        ],
        "subq2_no_decipher": [
            "the stadium",
            "which was rented by Costa Rica national football team"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1160",
        "question": "In which country does the Auckland rugby union team play",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auckland_rugby_union_team> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which country does [ENT] play",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the auckland rugby union team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which country does [INQL] the auckland rugby union team [INQR] play",
        "subq1": [
            "in which country does [ENT] play"
        ],
        "subq2": [
            "the auckland rugby union team"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does [ENT] play",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the Auckland rugby union team",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which country [DES] does [INQL] the Auckland rugby union team [INQR] play",
        "subq1_no_decipher": [
            "In which country",
            "does [ENT] play"
        ],
        "subq2_no_decipher": [
            "the Auckland rugby union team"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2870",
        "question": "What is the serving railway line of Warwick railway station, Perth",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the serving railway line of warwick railway station, perth",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the serving railway line of warwick railway station, perth [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the serving railway line of warwick railway station, perth"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the serving railway line of Warwick railway station, Perth ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the serving railway line of [INQL] Warwick railway station, Perth [INQR]",
        "subq1_no_decipher": [
            "What is the serving railway line of Warwick railway station, Perth ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3735",
        "question": "What is the radio show created by Timoteo Jeffries, about",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> . ?x <http://dbpedia.org/property/format> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioProgram>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT] about",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the radio show created by timoteo jeffries,",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the radio show created by timoteo jeffries, [INQR] about",
        "subq1": [
            "what is [ENT] about"
        ],
        "subq2": [
            "the radio show created by timoteo jeffries,"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the radio show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "created by Timoteo Jeffries, about",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the radio show [DES] created by Timoteo Jeffries, about",
        "subq1_no_decipher": [
            "What is the radio show",
            "created by Timoteo Jeffries, about"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2397",
        "question": "Where are all the protected areas near Bend, Oregon",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where are all the protected areas [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "near bend, oregon",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where are all the protected areas [INQL] near bend, oregon [INQR]",
        "subq1": [
            "where are all the protected areas [ENT]"
        ],
        "subq2": [
            "near bend, oregon"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where are all the protected areas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "near Bend, Oregon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Where are all the protected areas [DES] near Bend, Oregon [INQR]",
        "subq1_no_decipher": [
            "Where are all the protected areas",
            "near Bend, Oregon"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3517",
        "question": "Was True Grit a novel of the western genre",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was true grit",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a novel of the western genre",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was true grit [DES] a novel of the western genre",
        "subq1": [
            "was true grit",
            "a novel of the western genre"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was True Grit a novel of the western genre?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was True Grit a novel of the western genre",
        "subq1_no_decipher": [
            "Was True Grit a novel of the western genre?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3421",
        "question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which notable series of russell t davies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the series of short trips: a day in the life",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which notable series of russell t davies [DES] is also the series of short trips: a day in the life",
        "subq1": [
            "which notable series of russell t davies",
            "is also the series of short trips: a day in the life"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which notable series of Russell T Davies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the series of Short Trips: A day in the life",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which notable series of Russell T Davies [DES] is also the series of Short Trips: A day in the life",
        "subq1_no_decipher": [
            "Which notable series of Russell T Davies",
            "is also the series of Short Trips: A day in the life"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2563",
        "question": "Which battles were fought under the president when Chung Won Shik was the prime minister",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which battles were fought under [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president when chung won shik was the prime minister",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which battles were fought under [INQL] the president when chung won shik was the prime minister [INQR]",
        "subq1": [
            "which battles were fought under [ENT]"
        ],
        "subq2": [
            "the president when chung won shik was the prime minister"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which battles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were fought under [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "when Chung Won Shik was the prime minister",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which battles [DES] were fought under [INQL] the president [DES] when Chung Won Shik was the prime minister [INQR]",
        "subq1_no_decipher": [
            "Which battles",
            "were fought under [ENT]"
        ],
        "subq2_no_decipher": [
            "the president",
            "when Chung Won Shik was the prime minister"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1605",
        "question": "Which office holder's resting place is in Palo Alto, California and was succeeded by Adrian A. Basora",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which office holder's resting place is in palo alto, california",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was succeeded by adrian a. basora",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which office holder's resting place is in palo alto, california [DES] and was succeeded by adrian a. basora",
        "subq1": [
            "which office holder's resting place is in palo alto, california",
            "and was succeeded by adrian a. basora"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which office holder's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "resting place is in Palo Alto, California",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was succeeded by Adrian A. Basora",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which office holder's [DES] resting place is in Palo Alto, California [DES] and was succeeded by Adrian A. Basora",
        "subq1_no_decipher": [
            "Which office holder's",
            "resting place is in Palo Alto, California",
            "and was succeeded by Adrian A. Basora"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4828",
        "question": "which movies have been published by Cinema International Corporation",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been published by cinema international corporation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which movies [DES] have been published by cinema international corporation",
        "subq1": [
            "which movies",
            "have been published by cinema international corporation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which movies have been published by Cinema International Corporation?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "which movies [DES] have been published by Cinema International Corporation [INQR]",
        "subq1_no_decipher": [
            "which movies have been published by Cinema International Corporation?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2324",
        "question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of other destinations of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airlines whose one of the destinations is mediterranean sea",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of other destinations of [INQL] the airlines whose one of the destinations is mediterranean sea [INQR]",
        "subq1": [
            "what is the total number of other destinations of [ENT]"
        ],
        "subq2": [
            "the airlines whose one of the destinations is mediterranean sea"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of other destinations of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airlines",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the destinations is Mediterranean Sea",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the total number of other destinations of [INQL] the airlines [DES] whose one of the destinations is Mediterranean Sea [INQR]",
        "subq1_no_decipher": [
            "What is the total number of other destinations of [ENT]"
        ],
        "subq2_no_decipher": [
            "the airlines",
            "whose one of the destinations is Mediterranean Sea"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2709",
        "question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the total number of academic discipline of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the journals whose one of the academic discipline is neuroimaging",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the total number of academic discipline of [INQL] the journals whose one of the academic discipline is neuroimaging [INQR]",
        "subq1": [
            "count the total number of academic discipline of [ENT]"
        ],
        "subq2": [
            "the journals whose one of the academic discipline is neuroimaging"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the total number of academic discipline of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the journals",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the academic discipline is Neuroimaging",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the total number of academic discipline of [INQL] the journals [DES] whose one of the academic discipline is Neuroimaging [INQR]",
        "subq1_no_decipher": [
            "Count the total number of academic discipline of [ENT]"
        ],
        "subq2_no_decipher": [
            "the journals",
            "whose one of the academic discipline is Neuroimaging"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4398",
        "question": "List the award which have been won by both Charles LeMaire and Nick Park",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the award",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have been won by both charles lemaire and nick park",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the award [DES] which have been won by both charles lemaire and nick park",
        "subq1": [
            "list the award",
            "which have been won by both charles lemaire and nick park"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the award",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have been won by both Charles LeMaire and Nick Park",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the award [DES] which have been won by both Charles LeMaire and Nick Park",
        "subq1_no_decipher": [
            "List the award",
            "which have been won by both Charles LeMaire and Nick Park"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1312",
        "question": "What are some cities which have a Ferris wheel",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/buildingType> <http://dbpedia.org/resource/Ferris_wheel> . ?x <http://dbpedia.org/property/locationTown> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are some cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have a ferris wheel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are some cities [DES] which have a ferris wheel",
        "subq1": [
            "what are some cities",
            "which have a ferris wheel"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are some cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have a Ferris wheel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are some cities [DES] which have a Ferris wheel",
        "subq1_no_decipher": [
            "What are some cities",
            "which have a Ferris wheel"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3448",
        "question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movie who has screenplay by akiva goldsman",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is edited by mark stevens",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movie who has screenplay by akiva goldsman [DES] and is edited by mark stevens",
        "subq1": [
            "name the movie who has screenplay by akiva goldsman",
            "and is edited by mark stevens"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has screenplay by Akiva Goldsman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is edited by Mark Stevens",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movie [DES] who has screenplay by Akiva Goldsman [DES] and is edited by Mark Stevens",
        "subq1_no_decipher": [
            "Name the movie",
            "who has screenplay by Akiva Goldsman",
            "and is edited by Mark Stevens"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3812",
        "question": "Count the movies in Swedish language",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in swedish language",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the movies [DES] in swedish language",
        "subq1": [
            "count the movies",
            "in swedish language"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in Swedish language",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Count the movies [DES] in Swedish language",
        "subq1_no_decipher": [
            "Count the movies",
            "in Swedish language"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4655",
        "question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by Simon Fuller",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> } ",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me the total number of television shows whose theme music composer is julian gingell",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and created by simon fuller",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me the total number of television shows whose theme music composer is julian gingell [DES] and created by simon fuller",
        "subq1": [
            "give me the total number of television shows whose theme music composer is julian gingell",
            "and created by simon fuller"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the total number of television shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose theme music composer is Julian Gingell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and created by Simon Fuller",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Give me the total number of television shows [DES] whose theme music composer is Julian Gingell [DES] and created by Simon Fuller",
        "subq1_no_decipher": [
            "Give me the total number of television shows",
            "whose theme music composer is Julian Gingell",
            "and created by Simon Fuller"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2362",
        "question": "Which cloud platform of Google cloud connect also provides services to 21Vianet",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which cloud platform of google cloud connect",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also provides services to 21vianet",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which cloud platform of google cloud connect [DES] also provides services to 21vianet",
        "subq1": [
            "which cloud platform of google cloud connect",
            "also provides services to 21vianet"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which cloud platform of Google cloud connect",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also provides services to 21Vianet",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which cloud platform of Google cloud connect [DES] also provides services to 21Vianet",
        "subq1_no_decipher": [
            "Which cloud platform of Google cloud connect",
            "also provides services to 21Vianet"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1975",
        "question": "Name the office holder whose constituency is Haight-Ashbury",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose constituency is haight-ashbury",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the office holder [DES] whose constituency is haight-ashbury",
        "subq1": [
            "name the office holder",
            "whose constituency is haight-ashbury"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose constituency is Haight-Ashbury",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the office holder [DES] whose constituency is Haight-Ashbury",
        "subq1_no_decipher": [
            "Name the office holder",
            "whose constituency is Haight-Ashbury"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3514",
        "question": "Name the location of Lekh Castle which is also the location of SamurAbsheron channel",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lekh_Castle> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the location of lekh castle",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the location of samurabsheron channel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the location of lekh castle [DES] which is also the location of samurabsheron channel",
        "subq1": [
            "name the location of lekh castle",
            "which is also the location of samurabsheron channel"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the location of Lekh Castle",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the location of SamurAbsheron channel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the location of Lekh Castle [DES] which is also the location of SamurAbsheron channel",
        "subq1_no_decipher": [
            "Name the location of Lekh Castle",
            "which is also the location of SamurAbsheron channel"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1761",
        "question": "Count the number of families of the Animal kingdom",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of families of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the animal kingdom",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of families of [INQL] the animal kingdom [INQR]",
        "subq1": [
            "count the number of families of [ENT]"
        ],
        "subq2": [
            "the animal kingdom"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of families of the Animal kingdom.",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the number of families of [INQL] the Animal kingdom [INQR]",
        "subq1_no_decipher": [
            "Count the number of families of the Animal kingdom."
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2739",
        "question": "What is the political party of the person succeeded by A.K. Singh",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/A._K._Singh> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the political party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person succeeded by a.k. singh",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the political party of [INQL] the person succeeded by a.k. singh [INQR]",
        "subq1": [
            "what is the political party of [ENT]"
        ],
        "subq2": [
            "the person succeeded by a.k. singh"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the political party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "succeeded by A.K. Singh",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the political party of [INQL] the person [DES] succeeded by A.K. Singh [INQR]",
        "subq1_no_decipher": [
            "What is the political party of [ENT]"
        ],
        "subq2_no_decipher": [
            "the person",
            "succeeded by A.K. Singh"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4844",
        "question": "Who is the head coach of the teams in Middlesbrough FC",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the head coach of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the teams in middlesbrough fc",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the head coach of [INQL] the teams in middlesbrough fc [INQR]",
        "subq1": [
            "who is the head coach of [ENT]"
        ],
        "subq2": [
            "the teams in middlesbrough fc"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the head coach of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the teams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in Middlesbrough FC",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the head coach of [INQL] the teams [DES] in Middlesbrough FC [INQR]",
        "subq1_no_decipher": [
            "Who is the head coach of [ENT]"
        ],
        "subq2_no_decipher": [
            "the teams",
            "in Middlesbrough FC"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2472",
        "question": "To which uni. did sidney c patridge and cyril hume both once went",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which uni.",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did sidney c patridge and cyril hume both once went",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which uni. [DES] did sidney c patridge and cyril hume both once went",
        "subq1": [
            "to which uni.",
            "did sidney c patridge and cyril hume both once went"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which uni.",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did sidney c patridge and cyril hume both once went",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "To which uni. [DES] did sidney c patridge and cyril hume both once went",
        "subq1_no_decipher": [
            "To which uni.",
            "did sidney c patridge and cyril hume both once went"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4007",
        "question": "People in the royal Thai army follow which religion",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] follow which religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people in the royal thai army",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] people in the royal thai army [INQR] follow which religion",
        "subq1": [
            "[ENT] follow which religion"
        ],
        "subq2": [
            "people in the royal thai army"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] follow which religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "People",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the royal Thai army",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] People [DES] in the royal Thai army [INQR] follow which religion",
        "subq1_no_decipher": [
            "[ENT] follow which religion"
        ],
        "subq2_no_decipher": [
            "People",
            "in the royal Thai army"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1493",
        "question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was lucrezia tornabuoni",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the mother of lorenzo de' medici",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was lucrezia tornabuoni [DES] the mother of lorenzo de' medici",
        "subq1": [
            "was lucrezia tornabuoni",
            "the mother of lorenzo de' medici"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici",
        "subq1_no_decipher": [
            "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4206",
        "question": "Who are the producers of the movies which has music by Gary Chang",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Gary_Chang> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are the producers of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the movies which has music by gary chang",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are the producers of [INQL] the movies which has music by gary chang [INQR]",
        "subq1": [
            "who are the producers of [ENT]"
        ],
        "subq2": [
            "the movies which has music by gary chang"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the producers of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the movies",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has music by Gary Chang",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who are the producers of [INQL] the movies [DES] which has music by Gary Chang [INQR]",
        "subq1_no_decipher": [
            "Who are the producers of [ENT]"
        ],
        "subq2_no_decipher": [
            "the movies",
            "which has music by Gary Chang"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2158",
        "question": "Where was Special 26 recorded",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] recorded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "special 26",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] special 26 [INQR] recorded",
        "subq1": [
            "where was [ENT] recorded"
        ],
        "subq2": [
            "special 26"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Special 26 recorded ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was Special 26 recorded [DES]",
        "subq1_no_decipher": [
            "Where was Special 26 recorded ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1169",
        "question": "How many movies music composers are associated with Demis Roussos",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many movies music composers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are associated with demis roussos",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many movies music composers [DES] are associated with demis roussos",
        "subq1": [
            "how many movies music composers",
            "are associated with demis roussos"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many movies music composers [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are associated with Demis Roussos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "How many movies music composers [INQL] are associated with Demis Roussos [INQR]",
        "subq1_no_decipher": [
            "How many movies music composers [ENT]"
        ],
        "subq2_no_decipher": [
            "are associated with Demis Roussos"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4516",
        "question": "To which nation did David Animle Hanses owe his allegiance",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which nation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did david animle hanses owe his allegiance",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which nation [DES] did david animle hanses owe his allegiance",
        "subq1": [
            "to which nation",
            "did david animle hanses owe his allegiance"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which nation did David Animle Hanses owe his allegiance?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which nation [DES] did David Animle Hanses owe his allegiance",
        "subq1_no_decipher": [
            "To which nation did David Animle Hanses owe his allegiance?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "232",
        "question": "What is the alma mater of the actors of The God Who Wasn't There",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the actors of the god who wasn't there",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the alma mater of [INQL] the actors of the god who wasn't there [INQR]",
        "subq1": [
            "what is the alma mater of [ENT]"
        ],
        "subq2": [
            "the actors of the god who wasn't there"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the actors of The God Who Wasn't There",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the alma mater of [INQL] the actors of The God Who Wasn't There [INQR]",
        "subq1_no_decipher": [
            "What is the alma mater of [ENT]"
        ],
        "subq2_no_decipher": [
            "the actors of The God Who Wasn't There"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "66",
        "question": "List some musicians associated with famous guitar players",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list some musicians associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "famous guitar players",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list some musicians associated with [INQL] famous guitar players [INQR]",
        "subq1": [
            "list some musicians associated with [ENT]"
        ],
        "subq2": [
            "famous guitar players"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List some musicians",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "famous guitar players",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List some musicians [DES] associated with [INQL] famous guitar players [INQR]",
        "subq1_no_decipher": [
            "List some musicians",
            "associated with [ENT]"
        ],
        "subq2_no_decipher": [
            "famous guitar players"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1603",
        "question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the airlines whose hub airport [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is operated by the los angeles world airports",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the airlines whose hub airport [INQL] is operated by the los angeles world airports [INQR]",
        "subq1": [
            "what are the airlines whose hub airport [ENT]"
        ],
        "subq2": [
            "is operated by the los angeles world airports"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the airlines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose hub airport [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is operated by the Los Angeles World Airports",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the airlines [DES] whose hub airport [INQL] is operated by the Los Angeles World Airports [INQR]",
        "subq1_no_decipher": [
            "What are the airlines",
            "whose hub airport [ENT]"
        ],
        "subq2_no_decipher": [
            "is operated by the Los Angeles World Airports"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3283",
        "question": "Which company's cars are assembled in Colombia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Colombia> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which company's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cars are assembled in colombia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which company's [INQL] cars are assembled in colombia [INQR]",
        "subq1": [
            "which company's [ENT]"
        ],
        "subq2": [
            "cars are assembled in colombia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which company's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are assembled in Colombia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which company's [INQL] cars [DES] are assembled in Colombia [INQR]",
        "subq1_no_decipher": [
            "Which company's [ENT]"
        ],
        "subq2_no_decipher": [
            "cars",
            "are assembled in Colombia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3596",
        "question": "Who directed The Haunted House",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who directed the haunted",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "house",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who directed the haunted [DES] house",
        "subq1": [
            "who directed the haunted",
            "house"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who directed The Haunted House ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who directed The Haunted House [INQR]",
        "subq1_no_decipher": [
            "Who directed The Haunted House ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "125",
        "question": "Count all the different purposes followed by the different NGOs",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count all the different purposes followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the different ngos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count all the different purposes followed by [INQL] the different ngos [INQR]",
        "subq1": [
            "count all the different purposes followed by [ENT]"
        ],
        "subq2": [
            "the different ngos"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count all the different purposes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the different NGOs",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count all the different purposes [DES] followed by [INQL] the different NGOs [INQR]",
        "subq1_no_decipher": [
            "Count all the different purposes",
            "followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "the different NGOs"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1296",
        "question": "The players born in Bellaire, Ohio have played for which team",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have played for which team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the players born in bellaire, ohio",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] the players born in bellaire, ohio [INQR] have played for which team",
        "subq1": [
            "[ENT] have played for which team"
        ],
        "subq2": [
            "the players born in bellaire, ohio"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have played for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which team",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "The players",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born in Bellaire, Ohio",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "[INQL] The players [DES] born in Bellaire, Ohio [INQR] have played for [DES] which team",
        "subq1_no_decipher": [
            "[ENT] have played for",
            "which team"
        ],
        "subq2_no_decipher": [
            "The players",
            "born in Bellaire, Ohio"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1976",
        "question": "What is the common ideology followed by Katyayana and Palang Dharma Party",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the common ideology",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "followed by katyayana and palang dharma party",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the common ideology [DES] followed by katyayana and palang dharma party",
        "subq1": [
            "what is the common ideology",
            "followed by katyayana and palang dharma party"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the common ideology followed by Katyayana and Palang Dharma Party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the common ideology followed by Katyayana and Palang Dharma Party",
        "subq1_no_decipher": [
            "What is the common ideology followed by Katyayana and Palang Dharma Party"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4517",
        "question": "Count the tenants of MasterCard Centre",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the tenants of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "mastercard centre",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the tenants of [INQL] mastercard centre [INQR]",
        "subq1": [
            "count the tenants of [ENT]"
        ],
        "subq2": [
            "mastercard centre"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the tenants of MasterCard Centre?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the tenants of MasterCard Centre [INQR]",
        "subq1_no_decipher": [
            "Count the tenants of MasterCard Centre?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4481",
        "question": "who are starring in the movies written by Mark Sandrich",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are starring in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the movies written by mark sandrich",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are starring in [INQL] the movies written by mark sandrich [INQR]",
        "subq1": [
            "who are starring in [ENT]"
        ],
        "subq2": [
            "the movies written by mark sandrich"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are starring in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the movies",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "written by Mark Sandrich",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "who are starring in [INQL] the movies [DES] written by Mark Sandrich [INQR]",
        "subq1_no_decipher": [
            "who are starring in [ENT]"
        ],
        "subq2_no_decipher": [
            "the movies",
            "written by Mark Sandrich"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2075",
        "question": "Count the number of religions followed by BJP members",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of religions followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "bjp members",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of religions followed by [INQL] bjp members [INQR]",
        "subq1": [
            "count the number of religions followed by [ENT]"
        ],
        "subq2": [
            "bjp members"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "BJP members",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the number of religions [DES] followed by [INQL] BJP members [INQR]",
        "subq1_no_decipher": [
            "Count the number of religions",
            "followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "BJP members"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3086",
        "question": "What is the mascot of the rival school of Sullivan Central High",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/property/rival> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the mascot of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rival school of sullivan central high",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the mascot of [INQL] the rival school of sullivan central high [INQR]",
        "subq1": [
            "what is the mascot of [ENT]"
        ],
        "subq2": [
            "the rival school of sullivan central high"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the mascot of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rival school of Sullivan Central High",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the mascot of [INQL] the rival school of Sullivan Central High [INQR]",
        "subq1_no_decipher": [
            "What is the mascot of [ENT]"
        ],
        "subq2_no_decipher": [
            "the rival school of Sullivan Central High"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4345",
        "question": "What award has been awarded to both Dion Beebe and Charles LeMaire",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what award",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has been awarded to both dion beebe and charles lemaire",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what award [DES] has been awarded to both dion beebe and charles lemaire",
        "subq1": [
            "what award",
            "has been awarded to both dion beebe and charles lemaire"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What award",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has been awarded to both Dion Beebe and Charles LeMaire",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What award [DES] has been awarded to both Dion Beebe and Charles LeMaire",
        "subq1_no_decipher": [
            "What award",
            "has been awarded to both Dion Beebe and Charles LeMaire"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3345",
        "question": "What is the birth name of Putri Raemawasti",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/property/birthName> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the birth name of putri",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "raemawasti",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the birth name of putri [DES] raemawasti",
        "subq1": [
            "what is the birth name of putri",
            "raemawasti"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the birth name  of Putri Raemawasti ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the birth name of Putri Raemawasti [INQR]",
        "subq1_no_decipher": [
            "What is the birth name  of Putri Raemawasti ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4464",
        "question": "What is the party of the politicians whose children is Sanjay Gandhi",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the politicians whose children is sanjay gandhi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the party of [INQL] the politicians whose children is sanjay gandhi [INQR]",
        "subq1": [
            "what is the party of [ENT]"
        ],
        "subq2": [
            "the politicians whose children is sanjay gandhi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the party of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the politicians",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose children is Sanjay Gandhi",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the party of [INQL] the politicians [DES] whose children is Sanjay Gandhi [INQR]",
        "subq1_no_decipher": [
            "What is the party of [ENT]"
        ],
        "subq2_no_decipher": [
            "the politicians",
            "whose children is Sanjay Gandhi"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2797",
        "question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the tenants of mastercard center wich",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the draft team of antoine bibeau",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the tenants of mastercard center wich [DES] is also the draft team of antoine bibeau",
        "subq1": [
            "name the tenants of mastercard center wich",
            "is also the draft team of antoine bibeau"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the tenants of MAsterCard center wich",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the draft team of Antoine Bibeau",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the tenants of MAsterCard center wich [DES] is also the draft team of Antoine Bibeau",
        "subq1_no_decipher": [
            "Name the tenants of MAsterCard center wich",
            "is also the draft team of Antoine Bibeau"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "918",
        "question": "What is the number of occupation of the people who died in tampa bay, florida",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the number of occupation of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people who died in tampa bay, florida",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the number of occupation of [INQL] the people who died in tampa bay, florida [INQR]",
        "subq1": [
            "what is the number of occupation of [ENT]"
        ],
        "subq2": [
            "the people who died in tampa bay, florida"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the number of occupation of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who died in tampa bay, florida",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the number of occupation of [INQL] the people [DES] who died in tampa bay, florida [INQR]",
        "subq1_no_decipher": [
            "What is the number of occupation of [ENT]"
        ],
        "subq2_no_decipher": [
            "the people",
            "who died in tampa bay, florida"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1646",
        "question": "Who was the United States president who also served as a governor of Indiana Territory",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was the united states president who also served as a governor of indiana territory",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred": "[DES] who was the united states president who also served as a governor of indiana territory",
        "subq1": [
            "who was the united states president who also served as a governor of indiana territory"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the United States president",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who also served as a governor of Indiana Territory",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who was the United States president [DES] who also served as a governor of Indiana Territory",
        "subq1_no_decipher": [
            "Who was the United States president",
            "who also served as a governor of Indiana Territory"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "364",
        "question": "List the people who were born in Gelnhausen and graduated from Pepperdine University",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> . ?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Pepperdine_University>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the people who were born in gelnhausen",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and graduated from pepperdine university",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the people who were born in gelnhausen [DES] and graduated from pepperdine university",
        "subq1": [
            "list the people who were born in gelnhausen",
            "and graduated from pepperdine university"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who were born in Gelnhausen",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and graduated from Pepperdine University",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the people [DES] who were born in Gelnhausen [DES] and graduated from Pepperdine University",
        "subq1_no_decipher": [
            "List the people",
            "who were born in Gelnhausen",
            "and graduated from Pepperdine University"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3287",
        "question": "Musical artists who are associated with Ren & Angela were born where",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] were born where",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "musical artists who are associated with ren & angela",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] musical artists who are associated with ren & angela [INQR] were born where",
        "subq1": [
            "[ENT] were born where"
        ],
        "subq2": [
            "musical artists who are associated with ren & angela"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] were born where",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Musical artists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who are associated with Ren & Angela",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Musical artists [DES] who are associated with Ren & Angela [INQR] were born where",
        "subq1_no_decipher": [
            "[ENT] were born where"
        ],
        "subq2_no_decipher": [
            "Musical artists",
            "who are associated with Ren & Angela"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2125",
        "question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what religion",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the wickramabahu centeral college and neungin high school both follow",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what religion [DES] do the wickramabahu centeral college and neungin high school both follow",
        "subq1": [
            "what religion",
            "do the wickramabahu centeral college and neungin high school both follow"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What religion",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the Wickramabahu Centeral College and Neungin High School both follow",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What religion [DES] do the Wickramabahu Centeral College and Neungin High School both follow",
        "subq1_no_decipher": [
            "What religion",
            "do the Wickramabahu Centeral College and Neungin High School both follow"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4123",
        "question": "Who designed the language integrated query",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who designed the language integrated",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "query",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who designed the language integrated [DES] query",
        "subq1": [
            "who designed the language integrated",
            "query"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who designed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the language",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "integrated query",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who designed [INQL] the language [DES] integrated query [INQR]",
        "subq1_no_decipher": [
            "Who designed [ENT]"
        ],
        "subq2_no_decipher": [
            "the language",
            "integrated query"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "525",
        "question": "Name the debut team of Dan Otero",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the debut team of dan otero",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name [INQL] the debut team of dan otero [INQR]",
        "subq1": [
            "name [ENT]"
        ],
        "subq2": [
            "the debut team of dan otero"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the debut team of Dan Otero ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the debut team of Dan Otero [INQR]",
        "subq1_no_decipher": [
            "Name the debut team of Dan Otero ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "55",
        "question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who started at the pole position in both 1997 canadian grand prix and the 94 spanish",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "one",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who started at the pole position in both 1997 canadian grand prix and the 94 spanish [DES] one",
        "subq1": [
            "who started at the pole position in both 1997 canadian grand prix and the 94 spanish",
            "one"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one",
        "subq1_no_decipher": [
            "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "638",
        "question": "Who founded the Not on our Watch NGO",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Not_on_Our_Watch_(organization)> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who founded the not on our watch",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "ngo",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who founded the not on our watch [DES] ngo",
        "subq1": [
            "who founded the not on our watch",
            "ngo"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who founded the Not on our Watch NGO?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who founded the Not on our Watch NGO simple",
        "subq1_no_decipher": [
            "Who founded the Not on our Watch NGO?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "302",
        "question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the name of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artist which worked on the subsequent work of ella loves cole",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the name of [INQL] the artist which worked on the subsequent work of ella loves cole [INQR]",
        "subq1": [
            "what is the name of [ENT]"
        ],
        "subq2": [
            "the artist which worked on the subsequent work of ella loves cole"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the name of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artist",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which worked on the subsequent work of Ella Loves Cole",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the name of [INQL] the artist [DES] which worked on the subsequent work of Ella Loves Cole [INQR]",
        "subq1_no_decipher": [
            "What is the name of [ENT]"
        ],
        "subq2_no_decipher": [
            "the artist",
            "which worked on the subsequent work of Ella Loves Cole"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2766",
        "question": "Which company owns Sony bank",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owns sony bank",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which company [DES] owns sony bank",
        "subq1": [
            "which company",
            "owns sony bank"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which company owns Sony bank ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which company [DES] owns Sony bank [INQR]",
        "subq1_no_decipher": [
            "Which company owns Sony bank ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1276",
        "question": "What state was Cyrus Mann born in, and has the famous Downriver",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what state",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was cyrus mann born in, and has the famous downriver",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what state [DES] was cyrus mann born in, and has the famous downriver",
        "subq1": [
            "what state",
            "was cyrus mann born in, and has the famous downriver"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What state",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was Cyrus Mann born in,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has the famous Downriver",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What state [DES] was Cyrus Mann born in, [DES] and has the famous Downriver",
        "subq1_no_decipher": [
            "What state",
            "was Cyrus Mann born in,",
            "and has the famous Downriver"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2055",
        "question": "Who is a religious figure titled superior general",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Superior_general>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Religious>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a religious figure titled superior general",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] a religious figure titled superior general [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "a religious figure titled superior general"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is a religious figure titled superior general?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is a religious figure [DES] titled superior general [INQR]",
        "subq1_no_decipher": [
            "Who is a religious figure titled superior general?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3644",
        "question": "List the employments of people who died in Tampa, Florida",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the employments of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people who died in tampa, florida",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the employments of [INQL] people who died in tampa, florida [INQR]",
        "subq1": [
            "list the employments of [ENT]"
        ],
        "subq2": [
            "people who died in tampa, florida"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the employments of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who died in Tampa, Florida",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the employments of [INQL] people [DES] who died in Tampa, Florida [INQR]",
        "subq1_no_decipher": [
            "List the employments of [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "who died in Tampa, Florida"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4143",
        "question": "What are some famous veterinary physicians known for",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are [ENT] known for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some famous veterinary physicians",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are [INQL] some famous veterinary physicians [INQR] known for",
        "subq1": [
            "what are [ENT] known for"
        ],
        "subq2": [
            "some famous veterinary physicians"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are [ENT] known for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some famous veterinary physicians",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What are [INQL] some famous veterinary physicians [INQR] known for",
        "subq1_no_decipher": [
            "What are [ENT] known for"
        ],
        "subq2_no_decipher": [
            "some famous veterinary physicians"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2878",
        "question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the movies edited by julian doyle",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which music was composed by geoffrey brugon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the movies edited by julian doyle [DES] in which music was composed by geoffrey brugon",
        "subq1": [
            "list the movies edited by julian doyle",
            "in which music was composed by geoffrey brugon"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "edited by Julian Doyle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which music was composed by Geoffrey Brugon",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the movies [DES] edited by Julian Doyle [DES] in which music was composed by Geoffrey Brugon",
        "subq1_no_decipher": [
            "List the movies",
            "edited by Julian Doyle",
            "in which music was composed by Geoffrey Brugon"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4202",
        "question": "Name the children of the person who is the star of The Weathered Underground",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Weathered_Underground> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/children> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the children of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person who is the star of the weathered underground",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the children of [INQL] the person who is the star of the weathered underground [INQR]",
        "subq1": [
            "name the children of [ENT]"
        ],
        "subq2": [
            "the person who is the star of the weathered underground"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the children of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is the star of The Weathered Underground",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the children of [INQL] the person [DES] who is the star of The Weathered Underground [INQR]",
        "subq1_no_decipher": [
            "Name the children of [ENT]"
        ],
        "subq2_no_decipher": [
            "the person",
            "who is the star of The Weathered Underground"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2286",
        "question": "Which owner of Chelsea F.C also owns Evraz",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri. <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which owner of chelsea f.c",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also owns evraz",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which owner of chelsea f.c [DES] also owns evraz",
        "subq1": [
            "which owner of chelsea f.c",
            "also owns evraz"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which owner of Chelsea F.C",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also owns Evraz",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which owner of Chelsea F.C [DES] also owns Evraz",
        "subq1_no_decipher": [
            "Which owner of Chelsea F.C",
            "also owns Evraz"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2261",
        "question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Umkhonto_we_Sizwe> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Nelson_Mandela> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did umkhonto we sizwe",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had nelson mandela as a commander",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did umkhonto we sizwe [DES] had nelson mandela as a commander",
        "subq1": [
            "did umkhonto we sizwe",
            "had nelson mandela as a commander"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Umkhonto we Sizwe had Nelson Mandela as a commander?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Umkhonto we Sizwe had Nelson Mandela as a commander",
        "subq1_no_decipher": [
            "Did Umkhonto we Sizwe had Nelson Mandela as a commander?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2296",
        "question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the office holder with associate as marcus calpurnius bibulus",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has a kid named augustus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the office holder with associate as marcus calpurnius bibulus [DES] and has a kid named augustus",
        "subq1": [
            "name the office holder with associate as marcus calpurnius bibulus",
            "and has a kid named augustus"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with associate as Marcus Calpurnius Bibulus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has a kid named Augustus",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the office holder [DES] with associate as Marcus Calpurnius Bibulus [DES] and has a kid named Augustus",
        "subq1_no_decipher": [
            "Name the office holder",
            "with associate as Marcus Calpurnius Bibulus",
            "and has a kid named Augustus"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1753",
        "question": "What are the movies whose screenplay is done by Eric Roth",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose screenplay is done by eric roth",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the movies [DES] whose screenplay is done by eric roth",
        "subq1": [
            "what are the movies",
            "whose screenplay is done by eric roth"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose screenplay is done by Eric Roth",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the movies [DES] whose screenplay is done by Eric Roth",
        "subq1_no_decipher": [
            "What are the movies",
            "whose screenplay is done by Eric Roth"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1968",
        "question": "What is the total number of writers whose singles are recorded in Miami",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of writers whose singles [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are recorded in miami",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of writers whose singles [INQL] are recorded in miami [INQR]",
        "subq1": [
            "what is the total number of writers whose singles [ENT]"
        ],
        "subq2": [
            "are recorded in miami"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of writers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose singles [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are recorded in Miami",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the total number of writers [DES] whose singles [INQL] are recorded in Miami [INQR]",
        "subq1_no_decipher": [
            "What is the total number of writers",
            "whose singles [ENT]"
        ],
        "subq2_no_decipher": [
            "are recorded in Miami"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4351",
        "question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what religions are followed by members of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the societies whose architectural influences can be seen on the sanggar agung",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what religions are followed by members of [INQL] the societies whose architectural influences can be seen on the sanggar agung [INQR]",
        "subq1": [
            "what religions are followed by members of [ENT]"
        ],
        "subq2": [
            "the societies whose architectural influences can be seen on the sanggar agung"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are followed by members of [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the societies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose architectural influences can be seen on the Sanggar Agung",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What religions [DES] are followed by members of [INQL] the societies [DES] whose architectural influences can be seen on the Sanggar Agung [INQR]",
        "subq1_no_decipher": [
            "What religions",
            "are followed by members of [ENT]"
        ],
        "subq2_no_decipher": [
            "the societies",
            "whose architectural influences can be seen on the Sanggar Agung"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3117",
        "question": "Who is the producer of album which has the song Money",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "album which has the song money",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the producer of [INQL] album which has the song money [INQR]",
        "subq1": [
            "who is the producer of [ENT]"
        ],
        "subq2": [
            "album which has the song money"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "album",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has the song Money",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the producer of [INQL] album [DES] which has the song Money [INQR]",
        "subq1_no_decipher": [
            "Who is the producer of [ENT]"
        ],
        "subq2_no_decipher": [
            "album",
            "which has the song Money"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2393",
        "question": "List the Sci-fi TV shows with theme music given by Ron Grainer",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the sci-fi tv shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with theme music given by ron grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the sci-fi tv shows [DES] with theme music given by ron grainer",
        "subq1": [
            "list the sci-fi tv shows",
            "with theme music given by ron grainer"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the Sci-fi TV shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with theme music given by Ron Grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the Sci-fi TV shows [DES] with theme music given by Ron Grainer [INQR]",
        "subq1_no_decipher": [
            "List the Sci-fi TV shows",
            "with theme music given by Ron Grainer"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "523",
        "question": "What is the company to which Fusajiro Yamauchi proprietor to",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company to which fusajiro yamauchi proprietor to",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the company to which fusajiro yamauchi proprietor to [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the company to which fusajiro yamauchi proprietor to"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the company to which Fusajiro Yamauchi proprietor to ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the company [DES] to which Fusajiro Yamauchi proprietor to [INQR]",
        "subq1_no_decipher": [
            "What is the company to which Fusajiro Yamauchi proprietor to ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3900",
        "question": "Who is the writer of mark twain Tonight",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the writer of mark twain tonight",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the writer of mark twain tonight [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the writer of mark twain tonight"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the writer of mark twain Tonight ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the writer of mark twain Tonight",
        "subq1_no_decipher": [
            "Who is the writer of mark twain Tonight ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3122",
        "question": "How many members are there in the European Go Federation",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many members",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are there in the european go federation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many members [DES] are there in the european go federation",
        "subq1": [
            "how many members",
            "are there in the european go federation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many members",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are there in the European Go Federation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many members [DES] are there in the European Go Federation",
        "subq1_no_decipher": [
            "How many members",
            "are there in the European Go Federation"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4156",
        "question": "Was Kevin Rudd the PM of Julia Gillard",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Kevin_Rudd> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was kevin rudd",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the pm of julia gillard",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was kevin rudd [DES] the pm of julia gillard",
        "subq1": [
            "was kevin rudd",
            "the pm of julia gillard"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Kevin Rudd the PM of Julia Gillard?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Kevin Rudd the PM of Julia Gillard",
        "subq1_no_decipher": [
            "Was Kevin Rudd the PM of Julia Gillard?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1969",
        "question": "Daniel L D Granger and Job Durfee have based their political career in which US state",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "daniel l d granger and job durfee have based their political career",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which us state",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "daniel l d granger and job durfee have based their political career [DES] in which us state",
        "subq1": [
            "daniel l d granger and job durfee have based their political career",
            "in which us state"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Daniel L D Granger and Job Durfee have based their political career in",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which US state",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Daniel L D Granger and Job Durfee have based their political career in [DES] which US state",
        "subq1_no_decipher": [
            "Daniel L D Granger and Job Durfee have based their political career in",
            "which US state"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "671",
        "question": "What is the mascot of the handball teams in the Turkish Handball Super League",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HandballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the mascot of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the handball teams in the turkish handball super league",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the mascot of [INQL] the handball teams in the turkish handball super league [INQR]",
        "subq1": [
            "what is the mascot of [ENT]"
        ],
        "subq2": [
            "the handball teams in the turkish handball super league"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the mascot of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the handball teams",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the Turkish Handball Super League",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the mascot of [INQL] the handball teams [DES] in the Turkish Handball Super League [INQR]",
        "subq1_no_decipher": [
            "What is the mascot of [ENT]"
        ],
        "subq2_no_decipher": [
            "the handball teams",
            "in the Turkish Handball Super League"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4188",
        "question": "What city was recorded in Live in detroit which is also the official residence of ken Holland",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was recorded in live in detroit which is also the official residence of ken holland",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what city [DES] was recorded in live in detroit which is also the official residence of ken holland",
        "subq1": [
            "what city",
            "was recorded in live in detroit which is also the official residence of ken holland"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was recorded in Live in detroit",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the official residence of ken Holland",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What city [DES] was recorded in Live in detroit [DES] which is also the official residence of ken Holland",
        "subq1_no_decipher": [
            "What city",
            "was recorded in Live in detroit",
            "which is also the official residence of ken Holland"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "666",
        "question": "Marika Gombitov makes songs in which languages",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] in which languages",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "marika gombitov makes songs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] marika gombitov makes songs [INQR] in which languages",
        "subq1": [
            "[ENT] in which languages"
        ],
        "subq2": [
            "marika gombitov makes songs"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] in which languages",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Marika Gombitov makes",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "songs",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Marika Gombitov makes [DES] songs [INQR] in which languages",
        "subq1_no_decipher": [
            "[ENT] in which languages"
        ],
        "subq2_no_decipher": [
            "Marika Gombitov makes",
            "songs"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4338",
        "question": "What are some musical artists associated with the ones signed up with EMI",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some musical artists associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones signed up with emi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some musical artists associated with [INQL] the ones signed up with emi [INQR]",
        "subq1": [
            "what are some musical artists associated with [ENT]"
        ],
        "subq2": [
            "the ones signed up with emi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some musical artists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "signed up with EMI",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What are some musical artists [DES] associated with [INQL] the ones [DES] signed up with EMI [INQR]",
        "subq1_no_decipher": [
            "What are some musical artists",
            "associated with [ENT]"
        ],
        "subq2_no_decipher": [
            "the ones",
            "signed up with EMI"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1887",
        "question": "Name the river which flows through the closest city of Mount Raimer",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?x . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the river which flows through [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the closest city of mount raimer",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the river which flows through [INQL] the closest city of mount raimer [INQR]",
        "subq1": [
            "name the river which flows through [ENT]"
        ],
        "subq2": [
            "the closest city of mount raimer"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which flows through [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the closest city of Mount Raimer",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] which flows through [INQL] the closest city of Mount Raimer [INQR]",
        "subq1_no_decipher": [
            "Name the river",
            "which flows through [ENT]"
        ],
        "subq2_no_decipher": [
            "the closest city of Mount Raimer"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3266",
        "question": "Name the scientist whose supervisor also supervised Mary Ainsworth",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the scientist whose supervisor [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "also supervised mary ainsworth",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the scientist whose supervisor [INQL] also supervised mary ainsworth [INQR]",
        "subq1": [
            "name the scientist whose supervisor [ENT]"
        ],
        "subq2": [
            "also supervised mary ainsworth"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the scientist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose supervisor",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also supervised Mary Ainsworth",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the scientist [DES] whose supervisor [DES] also supervised Mary Ainsworth",
        "subq1_no_decipher": [
            "Name the scientist",
            "whose supervisor",
            "also supervised Mary Ainsworth"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "280",
        "question": "What are some relatives of armymen who died in Germany",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some relatives of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "armymen who died in germany",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some relatives of [INQL] armymen who died in germany [INQR]",
        "subq1": [
            "what are some relatives of [ENT]"
        ],
        "subq2": [
            "armymen who died in germany"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some relatives of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "armymen",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who died in Germany",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some relatives of [INQL] armymen [DES] who died in Germany [INQR]",
        "subq1_no_decipher": [
            "What are some relatives of [ENT]"
        ],
        "subq2_no_decipher": [
            "armymen",
            "who died in Germany"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1719",
        "question": "Deion sanders and Hinkey haines debuted their career with which common team",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hinkey_Haines> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "deion sanders and hinkey haines debuted their career with",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which common team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "deion sanders and hinkey haines debuted their career with [DES] which common team",
        "subq1": [
            "deion sanders and hinkey haines debuted their career with",
            "which common team"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Deion sanders and Hinkey haines debuted their career",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which common team",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Deion sanders and Hinkey haines debuted their career [DES] with [DES] which common team",
        "subq1_no_decipher": [
            "Deion sanders and Hinkey haines debuted their career",
            "with",
            "which common team"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2947",
        "question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which garrison of east indies station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the route end of mumbai vadodara express",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which garrison of east indies station [DES] is also the route end of mumbai vadodara express",
        "subq1": [
            "which garrison of east indies station",
            "is also the route end of mumbai vadodara express"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which garrison of East Indies Station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the route end of Mumbai Vadodara Express",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which garrison of East Indies Station [DES] is also the route end of Mumbai Vadodara Express",
        "subq1_no_decipher": [
            "Which garrison of East Indies Station",
            "is also the route end of Mumbai Vadodara Express"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "899",
        "question": "To which political party does Virendra Kataria belongs",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/property/party> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which political party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does virendra kataria belongs",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which political party [DES] does virendra kataria belongs",
        "subq1": [
            "to which political party",
            "does virendra kataria belongs"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which political party does Virendra Kataria belongs ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which political party [DES] does [INQL] Virendra Kataria belongs [INQR]",
        "subq1_no_decipher": [
            "To which political party does Virendra Kataria belongs ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4850",
        "question": "Copley Medal has been awarded to which scientists",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Copley_Medal>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "copley medal has been awarded to",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which scientists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "copley medal has been awarded to [DES] which scientists",
        "subq1": [
            "copley medal has been awarded to",
            "which scientists"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] which scientists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Copley Medal has been awarded to",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "[INQL] Copley Medal has been awarded to [INQR] which scientists",
        "subq1_no_decipher": [
            "[ENT] which scientists"
        ],
        "subq2_no_decipher": [
            "Copley Medal has been awarded to"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "760",
        "question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of awards whose presenter's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "headquarters is beverly hills, california",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of awards whose presenter's [INQL] headquarters is beverly hills, california [INQR]",
        "subq1": [
            "what is the total number of awards whose presenter's [ENT]"
        ],
        "subq2": [
            "headquarters is beverly hills, california"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose presenter's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "headquarters is Beverly Hills, California",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the total number of awards [DES] whose presenter's [INQL] headquarters is Beverly Hills, California [INQR]",
        "subq1_no_decipher": [
            "What is the total number of awards",
            "whose presenter's [ENT]"
        ],
        "subq2_no_decipher": [
            "headquarters is Beverly Hills, California"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1906",
        "question": "Who is the narrator of The Price of Beauty",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the narrator of the price of beauty",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the narrator of the price of beauty [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the narrator of the price of beauty"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the narrator of The Price of Beauty ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the narrator of The Price of Beauty [INQR]",
        "subq1_no_decipher": [
            "Who is the narrator of The Price of Beauty ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4042",
        "question": "Does Dan River flow into the Jordan Valley",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Dan_River_(Middle_East)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does dan river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "flow into the jordan valley",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does dan river [DES] flow into the jordan valley",
        "subq1": [
            "does dan river",
            "flow into the jordan valley"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Dan River flow into the Jordan Valley?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Dan River flow [DES] into the Jordan Valley",
        "subq1_no_decipher": [
            "Does Dan River flow into the Jordan Valley?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3823",
        "question": "Who is the producer of the device which is the operating system of Now TV",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Now_TV_(UK)> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the device which is the operating system of now tv",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the producer of [INQL] the device which is the operating system of now tv [INQR]",
        "subq1": [
            "who is the producer of [ENT]"
        ],
        "subq2": [
            "the device which is the operating system of now tv"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the device",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is the operating system of Now TV",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the producer of [INQL] the device [DES] which is the operating system of Now TV [INQR]",
        "subq1_no_decipher": [
            "Who is the producer of [ENT]"
        ],
        "subq2_no_decipher": [
            "the device",
            "which is the operating system of Now TV"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4138",
        "question": "How many artists have collaborated with famous guitar players",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many artists have collaborated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "famous guitar players",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many artists have collaborated with [INQL] famous guitar players [INQR]",
        "subq1": [
            "how many artists have collaborated with [ENT]"
        ],
        "subq2": [
            "famous guitar players"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many artists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have collaborated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "famous guitar players",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many artists [DES] have collaborated with [INQL] famous guitar players [INQR]",
        "subq1_no_decipher": [
            "How many artists",
            "have collaborated with [ENT]"
        ],
        "subq2_no_decipher": [
            "famous guitar players"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3818",
        "question": "How many politicians live in India",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many politicians",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "live in india",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many politicians [DES] live in india",
        "subq1": [
            "how many politicians",
            "live in india"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many politicians",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "live in India",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many politicians [DES] live in India",
        "subq1_no_decipher": [
            "How many politicians",
            "live in India"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4300",
        "question": "What is the base currency of the country which operates the Marion Dufresne",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marion_Dufresne_(1995)> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the base currency of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country which operates the marion dufresne",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the base currency of [INQL] the country which operates the marion dufresne [INQR]",
        "subq1": [
            "what is the base currency of [ENT]"
        ],
        "subq2": [
            "the country which operates the marion dufresne"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the base currency of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which operates the Marion Dufresne",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the base currency of [INQL] the country [DES] which operates the Marion Dufresne [INQR]",
        "subq1_no_decipher": [
            "What is the base currency of [ENT]"
        ],
        "subq2_no_decipher": [
            "the country",
            "which operates the Marion Dufresne"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2593",
        "question": "What is the region served by the governor of Stephen L.R. McNichols",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_L.R._McNichols> <http://dbpedia.org/property/governor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the region served by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the governor of stephen l.r. mcnichols",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the region served by [INQL] the governor of stephen l.r. mcnichols [INQR]",
        "subq1": [
            "what is the region served by [ENT]"
        ],
        "subq2": [
            "the governor of stephen l.r. mcnichols"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the region",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the governor of Stephen L.R. McNichols",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the region [DES] served by [INQL] the governor of Stephen L.R. McNichols [INQR]",
        "subq1_no_decipher": [
            "What is the region",
            "served by [ENT]"
        ],
        "subq2_no_decipher": [
            "the governor of Stephen L.R. McNichols"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4164",
        "question": "Who operates Liverpool Playhouse",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who operates liverpool",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "playhouse",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who operates liverpool [DES] playhouse",
        "subq1": [
            "who operates liverpool",
            "playhouse"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who operates Liverpool Playhouse ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who operates Liverpool Playhouse simple",
        "subq1_no_decipher": [
            "Who operates Liverpool Playhouse ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3031",
        "question": "Who has composed songs produced by Terry Melcher",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who has composed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "songs produced by terry melcher",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who has composed [INQL] songs produced by terry melcher [INQR]",
        "subq1": [
            "who has composed [ENT]"
        ],
        "subq2": [
            "songs produced by terry melcher"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who has composed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "songs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "produced by Terry Melcher",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who has composed [INQL] songs [DES] produced by Terry Melcher [INQR]",
        "subq1_no_decipher": [
            "Who has composed [ENT]"
        ],
        "subq2_no_decipher": [
            "songs",
            "produced by Terry Melcher"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3579",
        "question": "To which series does Lost special belong to",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which series",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does lost special belong to",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which series [DES] does lost special belong to",
        "subq1": [
            "to which series",
            "does lost special belong to"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which series does Lost special belong to ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which series [DES] does Lost special belong to",
        "subq1_no_decipher": [
            "To which series does Lost special belong to ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2832",
        "question": "How many albums did the maker of The Band produce",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/The_Band> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many albums did [ENT] produce",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the maker of the band",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many albums did [INQL] the maker of the band [INQR] produce",
        "subq1": [
            "how many albums did [ENT] produce"
        ],
        "subq2": [
            "the maker of the band"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many albums",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did [ENT] produce",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the maker of The Band",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many albums [DES] did [INQL] the maker of The Band [INQR] produce",
        "subq1_no_decipher": [
            "How many albums",
            "did [ENT] produce"
        ],
        "subq2_no_decipher": [
            "the maker of The Band"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3472",
        "question": "List few musical artist whose notable instruments are Ludwig Drums and Remo",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list few musical artist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose notable instruments are ludwig drums and remo",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list few musical artist [DES] whose notable instruments are ludwig drums and remo",
        "subq1": [
            "list few musical artist",
            "whose notable instruments are ludwig drums and remo"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List few musical artist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose notable instruments are Ludwig Drums and Remo",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List few musical artist [DES] whose notable instruments are Ludwig Drums and Remo",
        "subq1_no_decipher": [
            "List few musical artist",
            "whose notable instruments are Ludwig Drums and Remo"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "137",
        "question": "How many rivers start in an English speaking country",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many rivers start in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "an english speaking country",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many rivers start in [INQL] an english speaking country [INQR]",
        "subq1": [
            "how many rivers start in [ENT]"
        ],
        "subq2": [
            "an english speaking country"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many rivers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "start in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "an English speaking country",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many rivers [DES] start in [INQL] an English speaking country [INQR]",
        "subq1_no_decipher": [
            "How many rivers",
            "start in [ENT]"
        ],
        "subq2_no_decipher": [
            "an English speaking country"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2180",
        "question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "for a position in which institution",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were both jack ryan and robert sarvis both appointed",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "for a position in which institution [DES] were both jack ryan and robert sarvis both appointed",
        "subq1": [
            "for a position in which institution",
            "were both jack ryan and robert sarvis both appointed"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "For a position in which institution",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were both Jack Ryan and Robert sarvis both appointed",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "For a position in which institution [DES] were both Jack Ryan and Robert sarvis both appointed",
        "subq1_no_decipher": [
            "For a position in which institution",
            "were both Jack Ryan and Robert sarvis both appointed"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2128",
        "question": "Where Everybody knows you is the theme album of which show",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> <http://dbpedia.org/ontology/album> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where everybody knows you is the theme album of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which show",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where everybody knows you is the theme album of [DES] which show",
        "subq1": [
            "where everybody knows you is the theme album of",
            "which show"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where Everybody knows you is the theme album of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which show",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Where Everybody knows you is the theme album of [DES] which show",
        "subq1_no_decipher": [
            "Where Everybody knows you is the theme album of",
            "which show"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3177",
        "question": "Food in which countries has shallot in it",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "food in which countries [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has shallot in it",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "food in which countries [INQL] has shallot in it [INQR]",
        "subq1": [
            "food in which countries [ENT]"
        ],
        "subq2": [
            "has shallot in it"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Food",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which countries has",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "shallot in it",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Food [DES] in which countries has [DES] shallot in it [INQR]",
        "subq1_no_decipher": [
            "Food",
            "in which countries has",
            "shallot in it"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4367",
        "question": "Which rivers have source origins asnorth western, Zambia",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which rivers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have source origins asnorth western, zambia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which rivers [DES] have source origins asnorth western, zambia",
        "subq1": [
            "which rivers",
            "have source origins asnorth western, zambia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which rivers have source origins asnorth western, Zambia ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which rivers [DES] have source origins asnorth western, Zambia [INQR]",
        "subq1_no_decipher": [
            "Which rivers have source origins asnorth western, Zambia ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4261",
        "question": "Organization holding stocks of Galician and German wikipedias",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "organization holding stocks of galician and german",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wikipedias",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "organization holding stocks of galician and german [DES] wikipedias",
        "subq1": [
            "organization holding stocks of galician and german",
            "wikipedias"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Organization",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "holding stocks of Galician and German wikipedias",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Organization [DES] holding stocks of Galician and German wikipedias",
        "subq1_no_decipher": [
            "Organization",
            "holding stocks of Galician and German wikipedias"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4344",
        "question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the river with readin, brekshire in its path",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth place is sothend-on-sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the river with readin, brekshire in its path [DES] and mouth place is sothend-on-sea",
        "subq1": [
            "name the river with readin, brekshire in its path",
            "and mouth place is sothend-on-sea"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with Readin, Brekshire in its path",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth place is Sothend-on-sea",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] with Readin, Brekshire in its path [DES] and mouth place is Sothend-on-sea",
        "subq1_no_decipher": [
            "Name the river",
            "with Readin, Brekshire in its path",
            "and mouth place is Sothend-on-sea"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1331",
        "question": "Alexander Magleby, a rugby player is alma mater to which university",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/property/university> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "alexander magleby, a rugby player is alma mater to",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which university",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "alexander magleby, a rugby player is alma mater to [DES] which university",
        "subq1": [
            "alexander magleby, a rugby player is alma mater to",
            "which university"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Alexander Magleby, a rugby player is alma mater to which university?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Alexander Magleby, a rugby player [DES] is alma mater to [DES] which university",
        "subq1_no_decipher": [
            "Alexander Magleby, a rugby player is alma mater to which university?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2017",
        "question": "Is Amharic the official language of Ethiopia",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is amharic",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the official language of ethiopia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is amharic [DES] the official language of ethiopia",
        "subq1": [
            "is amharic",
            "the official language of ethiopia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Amharic the official language of Ethiopia?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Amharic the official language of Ethiopia",
        "subq1_no_decipher": [
            "Is Amharic the official language of Ethiopia?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2482",
        "question": "What sport played at Islamic azad uni employes Craig Van Tilbury",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what sport played at islamic azad uni [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "employes craig van tilbury",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what sport played at islamic azad uni [INQL] employes craig van tilbury [INQR]",
        "subq1": [
            "what sport played at islamic azad uni [ENT]"
        ],
        "subq2": [
            "employes craig van tilbury"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What sport played at Islamic azad uni employes Craig Van Tilbury?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What sport [DES] played at Islamic azad uni [DES] employes Craig Van Tilbury",
        "subq1_no_decipher": [
            "What sport played at Islamic azad uni employes Craig Van Tilbury?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1358",
        "question": "List the products of the company which published Tweenies: Game Time",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tweenies:_Game_Time> <http://dbpedia.org/property/publisher> ?x . ?x <http://dbpedia.org/property/products> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the products of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company which published tweenies: game time",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the products of [INQL] the company which published tweenies: game time [INQR]",
        "subq1": [
            "list the products of [ENT]"
        ],
        "subq2": [
            "the company which published tweenies: game time"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the products of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which published Tweenies: Game Time",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the products of [INQL] the company [DES] which published Tweenies: Game Time [INQR]",
        "subq1_no_decipher": [
            "List the products of [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "which published Tweenies: Game Time"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1329",
        "question": "List the agencies located someplace lead by Alex Chalk",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Alex_Chalk> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the agencies located [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someplace lead by alex chalk",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the agencies located [INQL] someplace lead by alex chalk [INQR]",
        "subq1": [
            "list the agencies located [ENT]"
        ],
        "subq2": [
            "someplace lead by alex chalk"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the agencies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "located [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someplace",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "lead by Alex Chalk",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "List the agencies [DES] located [INQL] someplace [DES] lead by Alex Chalk [INQR]",
        "subq1_no_decipher": [
            "List the agencies",
            "located [ENT]"
        ],
        "subq2_no_decipher": [
            "someplace",
            "lead by Alex Chalk"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2150",
        "question": "What religion are the characters of Absolutely Fabulous from",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Absolutely_Fabulous> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what religion are [ENT] from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the characters of absolutely fabulous",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what religion are [INQL] the characters of absolutely fabulous [INQR] from",
        "subq1": [
            "what religion are [ENT] from"
        ],
        "subq2": [
            "the characters of absolutely fabulous"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are [ENT] from",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the characters of Absolutely Fabulous",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What religion [DES] are [INQL] the characters of Absolutely Fabulous [INQR] from",
        "subq1_no_decipher": [
            "What religion",
            "are [ENT] from"
        ],
        "subq2_no_decipher": [
            "the characters of Absolutely Fabulous"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2122",
        "question": "What are the movies whose music composer uses a Hammond organ",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the movies whose music composer [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "uses a hammond organ",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the movies whose music composer [INQL] uses a hammond organ [INQR]",
        "subq1": [
            "what are the movies whose music composer [ENT]"
        ],
        "subq2": [
            "uses a hammond organ"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose music composer [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "uses a Hammond organ",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the movies [DES] whose music composer [INQL] uses a Hammond organ [INQR]",
        "subq1_no_decipher": [
            "What are the movies",
            "whose music composer [ENT]"
        ],
        "subq2_no_decipher": [
            "uses a Hammond organ"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3981",
        "question": "Was Love Hurts in Short Cut Draw Blood",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Love_Hurts> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "was love [ENT] draw blood",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "hurts in short cut",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "was love [INQL] hurts in short cut [INQR] draw blood",
        "subq1": [
            "was love [ENT] draw blood"
        ],
        "subq2": [
            "hurts in short cut"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Love Hurts in Short Cut Draw Blood?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Love Hurts in Short Cut Draw Blood [INQR] simple",
        "subq1_no_decipher": [
            "Was Love Hurts in Short Cut Draw Blood?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1252",
        "question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Ati\u015ba> <http://dbpedia.org/ontology/occupation> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "janaka thissakuttiarachchi follows what religion,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which once employed atisa srijnana too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "janaka thissakuttiarachchi follows what religion, [DES] which once employed atisa srijnana too",
        "subq1": [
            "janaka thissakuttiarachchi follows what religion,",
            "which once employed atisa srijnana too"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Janaka Thissakuttiarachchi follows what religion,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which once employed Atisa Srijnana too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Janaka Thissakuttiarachchi follows what religion, [DES] which once employed Atisa Srijnana too",
        "subq1_no_decipher": [
            "Janaka Thissakuttiarachchi follows what religion,",
            "which once employed Atisa Srijnana too"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3278",
        "question": "Which birthpalce of Svetlana Gounkina is also the largest city of Union State",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which birthpalce of svetlana gounkina",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the largest city of union state",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which birthpalce of svetlana gounkina [DES] is also the largest city of union state",
        "subq1": [
            "which birthpalce of svetlana gounkina",
            "is also the largest city of union state"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which birthpalce of Svetlana Gounkina",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the largest city of Union State",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which birthpalce of Svetlana Gounkina [DES] is also the largest city of Union State",
        "subq1_no_decipher": [
            "Which birthpalce of Svetlana Gounkina",
            "is also the largest city of Union State"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3374",
        "question": "Name the TV show with artist Christopher Franke and cast member Jason Carter",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the tv show with artist christopher franke",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and cast member jason carter",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the tv show with artist christopher franke [DES] and cast member jason carter",
        "subq1": [
            "name the tv show with artist christopher franke",
            "and cast member jason carter"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with artist Christopher Franke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and cast member Jason Carter",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the TV show [DES] with artist Christopher Franke [DES] and cast member Jason Carter",
        "subq1_no_decipher": [
            "Name the TV show",
            "with artist Christopher Franke",
            "and cast member Jason Carter"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2814",
        "question": "Which artist married to Lee Krasner",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Lee_Krasner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which artist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "married to lee krasner",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which artist [DES] married to lee krasner",
        "subq1": [
            "which artist",
            "married to lee krasner"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which artist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "married to Lee Krasner",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which artist [DES] married to Lee Krasner",
        "subq1_no_decipher": [
            "Which artist",
            "married to Lee Krasner"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1848",
        "question": "What teams did the ex teamplayers of lighthouse boy club start their career with",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what teams did [ENT] start their career with",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ex teamplayers of lighthouse boy club",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what teams did [INQL] the ex teamplayers of lighthouse boy club [INQR] start their career with",
        "subq1": [
            "what teams did [ENT] start their career with"
        ],
        "subq2": [
            "the ex teamplayers of lighthouse boy club"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did [ENT] start their career with",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ex teamplayers of lighthouse boy club",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What teams [DES] did [INQL] the ex teamplayers of lighthouse boy club [INQR] start their career with",
        "subq1_no_decipher": [
            "What teams",
            "did [ENT] start their career with"
        ],
        "subq2_no_decipher": [
            "the ex teamplayers of lighthouse boy club"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3037",
        "question": "Where was the deadbody discovered of one of the alumni of General Educational Development",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was the deadbody discovered of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "one of the alumni of general educational development",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was the deadbody discovered of [INQL] one of the alumni of general educational development [INQR]",
        "subq1": [
            "where was the deadbody discovered of [ENT]"
        ],
        "subq2": [
            "one of the alumni of general educational development"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was the deadbody discovered of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "one of the alumni of General Educational Development",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where was the deadbody discovered of [INQL] one of the alumni of General Educational Development [INQR]",
        "subq1_no_decipher": [
            "Where was the deadbody discovered of [ENT]"
        ],
        "subq2_no_decipher": [
            "one of the alumni of General Educational Development"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "388",
        "question": "Who designed the bridge in Oddamavadi",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who designed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the bridge in oddamavadi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who designed [INQL] the bridge in oddamavadi [INQR]",
        "subq1": [
            "who designed [ENT]"
        ],
        "subq2": [
            "the bridge in oddamavadi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who designed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the bridge in Oddamavadi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who designed [INQL] the bridge in Oddamavadi [INQR]",
        "subq1_no_decipher": [
            "Who designed [ENT]"
        ],
        "subq2_no_decipher": [
            "the bridge in Oddamavadi"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "235",
        "question": "What is the leader name of the settlements whose governing body is Municipal council",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/Municipal_council> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the leader name of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the settlements whose governing body is municipal council",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the leader name of [INQL] the settlements whose governing body is municipal council [INQR]",
        "subq1": [
            "what is the leader name of [ENT]"
        ],
        "subq2": [
            "the settlements whose governing body is municipal council"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the leader name of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the settlements",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose governing body is Municipal council",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the leader name of [INQL] the settlements [DES] whose governing body is Municipal council [INQR]",
        "subq1_no_decipher": [
            "What is the leader name of [ENT]"
        ],
        "subq2_no_decipher": [
            "the settlements",
            "whose governing body is Municipal council"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1077",
        "question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the co-founder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the record labels which have one of the founder as chris dubois",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the co-founder of [INQL] the record labels which have one of the founder as chris dubois [INQR]",
        "subq1": [
            "name the co-founder of [ENT]"
        ],
        "subq2": [
            "the record labels which have one of the founder as chris dubois"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the co-founder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the record labels",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have one of the founder as Chris DuBois",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the co-founder of [INQL] the record labels [DES] which have one of the founder as Chris DuBois [INQR]",
        "subq1_no_decipher": [
            "Name the co-founder of [ENT]"
        ],
        "subq2_no_decipher": [
            "the record labels",
            "which have one of the founder as Chris DuBois"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1984",
        "question": "List the companies operating in Australia",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operating in australia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the companies [DES] operating in australia",
        "subq1": [
            "list the companies",
            "operating in australia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operating in Australia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the companies [DES] operating in Australia",
        "subq1_no_decipher": [
            "List the companies",
            "operating in Australia"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4363",
        "question": "In which countries is coconut used as a food ingredient",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which countries [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is coconut used as a food ingredient",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which countries [INQL] is coconut used as a food ingredient [INQR]",
        "subq1": [
            "in which countries [ENT]"
        ],
        "subq2": [
            "is coconut used as a food ingredient"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which countries [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is coconut used as a food ingredient",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "In which countries [INQL] is coconut used as a food ingredient [INQR]",
        "subq1_no_decipher": [
            "In which countries [ENT]"
        ],
        "subq2_no_decipher": [
            "is coconut used as a food ingredient"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3962",
        "question": "How many people have worked for teams chaired by Patricia Amorim",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many people have worked for [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "teams chaired by patricia amorim",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many people have worked for [INQL] teams chaired by patricia amorim [INQR]",
        "subq1": [
            "how many people have worked for [ENT]"
        ],
        "subq2": [
            "teams chaired by patricia amorim"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have worked for [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "teams",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "chaired by Patricia Amorim",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many people [DES] have worked for [INQL] teams [DES] chaired by Patricia Amorim [INQR]",
        "subq1_no_decipher": [
            "How many people",
            "have worked for [ENT]"
        ],
        "subq2_no_decipher": [
            "teams",
            "chaired by Patricia Amorim"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "770",
        "question": "How many kinds of games can be played on the Amiga",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many kinds of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games can be played on the amiga",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many kinds of [INQL] games can be played on the amiga [INQR]",
        "subq1": [
            "how many kinds of [ENT]"
        ],
        "subq2": [
            "games can be played on the amiga"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many kinds of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can be played on the Amiga",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many kinds of [INQL] games [DES] can be played on the Amiga [INQR]",
        "subq1_no_decipher": [
            "How many kinds of [ENT]"
        ],
        "subq2_no_decipher": [
            "games",
            "can be played on the Amiga"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2165",
        "question": "Is the book The Buddha and his Dhamma a book about Buddhism",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is the book the buddha and his dhamma",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a book about buddhism",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is the book the buddha and his dhamma [DES] a book about buddhism",
        "subq1": [
            "is the book the buddha and his dhamma",
            "a book about buddhism"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is the book The Buddha and his Dhamma book about Buddhism",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is the book The Buddha and his Dhamma book about Buddhism",
        "subq1_no_decipher": [
            "Is the book The Buddha and his Dhamma book about Buddhism"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "673",
        "question": "How many relatives are there of people fought in the Battle of the Bulge",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many relatives are there of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people fought in the battle of the bulge",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many relatives are there of [INQL] people fought in the battle of the bulge [INQR]",
        "subq1": [
            "how many relatives are there of [ENT]"
        ],
        "subq2": [
            "people fought in the battle of the bulge"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many relatives are there of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought in the Battle of the Bulge",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many relatives are there of [INQL] people [DES] fought in the Battle of the Bulge [INQR]",
        "subq1_no_decipher": [
            "How many relatives are there of [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "fought in the Battle of the Bulge"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "249",
        "question": "How many genres of games can I find on the commodore CDTV",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_CDTV> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many genres of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games can i find on the commodore cdtv",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many genres of [INQL] games can i find on the commodore cdtv [INQR]",
        "subq1": [
            "how many genres of [ENT]"
        ],
        "subq2": [
            "games can i find on the commodore cdtv"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many genres of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can I find on the commodore CDTV",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many genres of [INQL] games [DES] can I find on the commodore CDTV [INQR]",
        "subq1_no_decipher": [
            "How many genres of [ENT]"
        ],
        "subq2_no_decipher": [
            "games",
            "can I find on the commodore CDTV"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1574",
        "question": "Does Jevan Snead play as Quarterback",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does jevan snead",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "play as quarterback",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does jevan snead [DES] play as quarterback",
        "subq1": [
            "does jevan snead",
            "play as quarterback"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Jevan Snead play as Quarterback?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Jevan Snead play as Quarterback [INQR]",
        "subq1_no_decipher": [
            "Does Jevan Snead play as Quarterback?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3419",
        "question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me the sitcoms",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where eliza schneider and isaac hayes gave voice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me the sitcoms [DES] where eliza schneider and isaac hayes gave voice",
        "subq1": [
            "give me the sitcoms",
            "where eliza schneider and isaac hayes gave voice"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the sitcoms",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Eliza Schneider and Isaac Hayes gave voice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Give me the sitcoms [DES] where Eliza Schneider and Isaac Hayes gave voice",
        "subq1_no_decipher": [
            "Give me the sitcoms",
            "where Eliza Schneider and Isaac Hayes gave voice"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2081",
        "question": "Directors of which movies are buried in Ronda",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Ronda> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "directors of which movies [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are buried in ronda",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "directors of which movies [INQL] are buried in ronda [INQR]",
        "subq1": [
            "directors of which movies [ENT]"
        ],
        "subq2": [
            "are buried in ronda"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Directors of which movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are buried in Ronda",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Directors of which movies [DES] are buried in Ronda [INQR]",
        "subq1_no_decipher": [
            "Directors of which movies",
            "are buried in Ronda"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1823",
        "question": "List the debut team of the baseball player who born in Houston",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the debut team of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the baseball player who born in houston",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the debut team of [INQL] the baseball player who born in houston [INQR]",
        "subq1": [
            "list the debut team of [ENT]"
        ],
        "subq2": [
            "the baseball player who born in houston"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the debut team of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the baseball player",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who born in Houston",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the debut team of [INQL] the baseball player [DES] who born in Houston [INQR]",
        "subq1_no_decipher": [
            "List the debut team of [ENT]"
        ],
        "subq2_no_decipher": [
            "the baseball player",
            "who born in Houston"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "716",
        "question": "Does Cascade Airways have a hub in Seattle",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does cascade airways",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have a hub in seattle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does cascade airways [DES] have a hub in seattle",
        "subq1": [
            "does cascade airways",
            "have a hub in seattle"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Cascade Airways have a hub in Seattle?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Cascade Airways have a hub in Seattle",
        "subq1_no_decipher": [
            "Does Cascade Airways have a hub in Seattle?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4668",
        "question": "Who edited British Gazette",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who edited british",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "gazette",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who edited british [DES] gazette",
        "subq1": [
            "who edited british",
            "gazette"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who edited  British Gazette ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who edited British Gazette simple",
        "subq1_no_decipher": [
            "Who edited  British Gazette ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2048",
        "question": "List the things for which the relatives of Mrunalini Kunte are known",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the things for which [ENT] are known",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of mrunalini kunte",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the things for which [INQL] the relatives of mrunalini kunte [INQR] are known",
        "subq1": [
            "list the things for which [ENT] are known"
        ],
        "subq2": [
            "the relatives of mrunalini kunte"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "for which [ENT] are known",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of Mrunalini Kunte",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the things [DES] for which [INQL] the relatives of Mrunalini Kunte [INQR] are known",
        "subq1_no_decipher": [
            "List the things",
            "for which [ENT] are known"
        ],
        "subq2_no_decipher": [
            "the relatives of Mrunalini Kunte"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4178",
        "question": "What acts and artists are associated with people who have worked with Divertis",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Divertis> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what acts and artists are associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people who have worked with divertis",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what acts and artists are associated with [INQL] people who have worked with divertis [INQR]",
        "subq1": [
            "what acts and artists are associated with [ENT]"
        ],
        "subq2": [
            "people who have worked with divertis"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What acts and artists",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who have worked with Divertis",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What acts and artists [DES] are associated with [INQL] people [DES] who have worked with Divertis [INQR]",
        "subq1_no_decipher": [
            "What acts and artists",
            "are associated with [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "who have worked with Divertis"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2724",
        "question": "What are the notableworks of Russell T Davies",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the notableworks of russell t",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "davies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the notableworks of russell t [DES] davies",
        "subq1": [
            "what are the notableworks of russell t",
            "davies"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the notableworks of Russell T Davies?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the notableworks of [INQL] Russell T Davies [INQR]",
        "subq1_no_decipher": [
            "What are the notableworks of Russell T Davies?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4521",
        "question": "Which company has developed games whose music is done by Gerard Marino",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which company has developed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games whose music is done by gerard marino",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which company has developed [INQL] games whose music is done by gerard marino [INQR]",
        "subq1": [
            "which company has developed [ENT]"
        ],
        "subq2": [
            "games whose music is done by gerard marino"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which company has developed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose music is done by Gerard Marino",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which company has developed [INQL] games [DES] whose music is done by Gerard Marino [INQR]",
        "subq1_no_decipher": [
            "Which company has developed [ENT]"
        ],
        "subq2_no_decipher": [
            "games",
            "whose music is done by Gerard Marino"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1460",
        "question": "Who all have developed softwares for Unix Like OSes",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who all have developed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "softwares for unix like oses",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who all have developed [INQL] softwares for unix like oses [INQR]",
        "subq1": [
            "who all have developed [ENT]"
        ],
        "subq2": [
            "softwares for unix like oses"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who all have developed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "softwares for Unix Like OSes",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who all have developed [INQL] softwares for Unix Like OSes [INQR]",
        "subq1_no_decipher": [
            "Who all have developed [ENT]"
        ],
        "subq2_no_decipher": [
            "softwares for Unix Like OSes"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1668",
        "question": "What are some party leaders of the parties which have had a seat in Berlin",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some party leaders of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the parties which have had a seat in berlin",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some party leaders of [INQL] the parties which have had a seat in berlin [INQR]",
        "subq1": [
            "what are some party leaders of [ENT]"
        ],
        "subq2": [
            "the parties which have had a seat in berlin"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some party leaders of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the parties",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have had a seat in Berlin",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some party leaders of [INQL] the parties [DES] which have had a seat in Berlin [INQR]",
        "subq1_no_decipher": [
            "What are some party leaders of [ENT]"
        ],
        "subq2_no_decipher": [
            "the parties",
            "which have had a seat in Berlin"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2756",
        "question": "Was James maker in the band Noko",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Noko> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/James_Maker> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was james maker",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the band noko",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was james maker [DES] in the band noko",
        "subq1": [
            "was james maker",
            "in the band noko"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was James maker in the band Noko?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was James maker in [INQL] the band Noko [INQR]",
        "subq1_no_decipher": [
            "Was James maker in the band Noko?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2000",
        "question": "Was Nick Jonas a member of the Jonas Brothers",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was nick jonas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a member of the jonas brothers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was nick jonas [DES] a member of the jonas brothers",
        "subq1": [
            "was nick jonas",
            "a member of the jonas brothers"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Nick Jonas a member of the Jonas Brothers?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Nick Jonas a member of the Jonas Brothers [INQR]",
        "subq1_no_decipher": [
            "Was Nick Jonas a member of the Jonas Brothers?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "404",
        "question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri. <http://dbpedia.org/resource/Gary_Holder-Winfield> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which tenant of new sanno hotel",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the military branch of the gary holder-winfield",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which tenant of new sanno hotel [DES] is the military branch of the gary holder-winfield",
        "subq1": [
            "which tenant of new sanno hotel",
            "is the military branch of the gary holder-winfield"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which tenant of New Sanno Hotel",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the military branch of the Gary Holder-Winfield",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which tenant of New Sanno Hotel [DES] is the military branch of the Gary Holder-Winfield",
        "subq1_no_decipher": [
            "Which tenant of New Sanno Hotel",
            "is the military branch of the Gary Holder-Winfield"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "384",
        "question": "List the director of The Adventures of mimi",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)> <http://dbpedia.org/property/director> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the director of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the adventures of mimi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the director of [INQL] the adventures of mimi [INQR]",
        "subq1": [
            "list the director of [ENT]"
        ],
        "subq2": [
            "the adventures of mimi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the director of The Adventures of mimi ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the director of [INQL] The Adventures of mimi [INQR]",
        "subq1_no_decipher": [
            "List the director of The Adventures of mimi ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4535",
        "question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list sports managers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who managed middlesbrough f.c. and england national under-21 football team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list sports managers [DES] who managed middlesbrough f.c. and england national under-21 football team",
        "subq1": [
            "list sports managers",
            "who managed middlesbrough f.c. and england national under-21 football team"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List sports managers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who managed Middlesbrough F.C.",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and England national under-21 football team",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List sports managers [DES] who managed Middlesbrough F.C. [DES] and England national under-21 football team",
        "subq1_no_decipher": [
            "List sports managers",
            "who managed Middlesbrough F.C.",
            "and England national under-21 football team"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2152",
        "question": "Name all the soccer players who played in a under 18 club for La Liga",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name all the soccer players who played in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a under 18 club for la liga",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name all the soccer players who played in [INQL] a under 18 club for la liga [INQR]",
        "subq1": [
            "name all the soccer players who played in [ENT]"
        ],
        "subq2": [
            "a under 18 club for la liga"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name all the soccer players",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who played in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a under 18 club for La Liga",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name all the soccer players [DES] who played in [INQL] a under 18 club for La Liga [INQR]",
        "subq1_no_decipher": [
            "Name all the soccer players",
            "who played in [ENT]"
        ],
        "subq2_no_decipher": [
            "a under 18 club for La Liga"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1633",
        "question": "Which key perosn of the Elders is also the president of united World College",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which key perosn of the elders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of united world college",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which key perosn of the elders [DES] is also the president of united world college",
        "subq1": [
            "which key perosn of the elders",
            "is also the president of united world college"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which key perosn of the Elders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of united World College",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which key perosn of the Elders [DES] is also the president of united World College",
        "subq1_no_decipher": [
            "Which key perosn of the Elders",
            "is also the president of united World College"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4586",
        "question": "Who are the players whose current clubs have Ferran Soriano as chairman",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are the players whose current clubs [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "have ferran soriano as chairman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are the players whose current clubs [INQL] have ferran soriano as chairman [INQR]",
        "subq1": [
            "who are the players whose current clubs [ENT]"
        ],
        "subq2": [
            "have ferran soriano as chairman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who are [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the players",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose current clubs have Ferran Soriano as chairman",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who are [INQL] the players [DES] whose current clubs have Ferran Soriano as chairman [INQR]",
        "subq1_no_decipher": [
            "Who are [ENT]"
        ],
        "subq2_no_decipher": [
            "the players",
            "whose current clubs have Ferran Soriano as chairman"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3925",
        "question": "What are some parties which have people from Mangalore as a member",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Mangalore> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some parties which have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people from mangalore as a member",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some parties which have [INQL] people from mangalore as a member [INQR]",
        "subq1": [
            "what are some parties which have [ENT]"
        ],
        "subq2": [
            "people from mangalore as a member"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some parties",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from Mangalore as a member",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What are some parties [DES] which have [INQL] people [DES] from Mangalore as a member [INQR]",
        "subq1_no_decipher": [
            "What are some parties",
            "which have [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "from Mangalore as a member"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4158",
        "question": "Which employer of Michael M. Sears is also the producer of Delta III",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which employer of michael m. sears",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the producer of delta iii",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which employer of michael m. sears [DES] is also the producer of delta iii",
        "subq1": [
            "which employer of michael m. sears",
            "is also the producer of delta iii"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which employer of Michael M. Sears",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the producer of Delta III",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which employer of Michael M. Sears [DES] is also the producer of Delta III",
        "subq1_no_decipher": [
            "Which employer of Michael M. Sears",
            "is also the producer of Delta III"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "223",
        "question": "Name the largest city in the county where there is a Cy-Fair High School",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the largest city in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the county where there is a cy-fair high school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the largest city in [INQL] the county where there is a cy-fair high school [INQR]",
        "subq1": [
            "name the largest city in [ENT]"
        ],
        "subq2": [
            "the county where there is a cy-fair high school"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the largest city in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the county",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where there is a Cy-Fair High School",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the largest city in [INQL] the county [DES] where there is a Cy-Fair High School [INQR]",
        "subq1_no_decipher": [
            "Name the largest city in [ENT]"
        ],
        "subq2_no_decipher": [
            "the county",
            "where there is a Cy-Fair High School"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2193",
        "question": "How many bacterias are there whose division is Firmicutes",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many bacterias are there [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose division is firmicutes",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many bacterias are there [INQL] whose division is firmicutes [INQR]",
        "subq1": [
            "how many bacterias are there [ENT]"
        ],
        "subq2": [
            "whose division is firmicutes"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many bacterias are there",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose division is Firmicutes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many bacterias are there [DES] whose division is Firmicutes [INQR]",
        "subq1_no_decipher": [
            "How many bacterias are there",
            "whose division is Firmicutes"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3136",
        "question": "To which country does Peter Blay owe his allegiance",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does peter blay owe his allegiance",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which country [DES] does peter blay owe his allegiance",
        "subq1": [
            "to which country",
            "does peter blay owe his allegiance"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which country does Peter Blay owe his allegiance?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which country [DES] does Peter Blay owe his allegiance simple",
        "subq1_no_decipher": [
            "To which country does Peter Blay owe his allegiance?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1824",
        "question": "Is jim harbaugh currently in the Michigan Wolverines",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jim_Harbaugh> <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is jim harbaugh",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "currently in the michigan wolverines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is jim harbaugh [DES] currently in the michigan wolverines",
        "subq1": [
            "is jim harbaugh",
            "currently in the michigan wolverines"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is jim harbaugh currently in the Michigan Wolverines?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is jim harbaugh [DES] currently in the Michigan Wolverines",
        "subq1_no_decipher": [
            "Is jim harbaugh currently in the Michigan Wolverines?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4600",
        "question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the television show whose subsequent work is crusade",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and composer is stewart copeland",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the television show whose subsequent work is crusade [DES] and composer is stewart copeland",
        "subq1": [
            "name the television show whose subsequent work is crusade",
            "and composer is stewart copeland"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose subsequent work is Crusade",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and Composer is Stewart Copeland",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the television show [DES] whose subsequent work is Crusade [DES] and Composer is Stewart Copeland",
        "subq1_no_decipher": [
            "Name the television show",
            "whose subsequent work is Crusade",
            "and Composer is Stewart Copeland"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "797",
        "question": "What are the current music bands of Chester Bennington",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the current music bands of chester",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "bennington",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the current music bands of chester [DES] bennington",
        "subq1": [
            "what are the current music bands of chester",
            "bennington"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the current music bands of Chester Bennington?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the current music bands of Chester Bennington [INQR]",
        "subq1_no_decipher": [
            "What are the current music bands of Chester Bennington?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2871",
        "question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who was the prime minister under which [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of derick heathcoat amory served",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who was the prime minister under which [INQL] the predecessor of derick heathcoat amory served [INQR]",
        "subq1": [
            "who was the prime minister under which [ENT]"
        ],
        "subq2": [
            "the predecessor of derick heathcoat amory served"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the prime minister under which [ENT] served",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of Derick Heathcoat Amory",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who was the prime minister under which [INQL] the predecessor of Derick Heathcoat Amory [INQR] served",
        "subq1_no_decipher": [
            "Who was the prime minister under which [ENT] served"
        ],
        "subq2_no_decipher": [
            "the predecessor of Derick Heathcoat Amory"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "9",
        "question": "Which person designed the cars which has been designed by ASC Creative Services",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which person designed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the cars which has been designed by asc creative services",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which person designed [INQL] the cars which has been designed by asc creative services [INQR]",
        "subq1": [
            "which person designed [ENT]"
        ],
        "subq2": [
            "the cars which has been designed by asc creative services"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which person designed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has been designed by ASC Creative Services",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which person designed [INQL] the cars [DES] which has been designed by ASC Creative Services [INQR]",
        "subq1_no_decipher": [
            "Which person designed [ENT]"
        ],
        "subq2_no_decipher": [
            "the cars",
            "which has been designed by ASC Creative Services"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1944",
        "question": "What are some orthonychidae birds",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are some orthonychidae",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "birds",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are some orthonychidae [DES] birds",
        "subq1": [
            "what are some orthonychidae",
            "birds"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are some orthonychidae birds?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are some orthonychidae birds [INQR]",
        "subq1_no_decipher": [
            "What are some orthonychidae birds?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1838",
        "question": "Which driver had the pole position in 1994 Spanish Grand Prix",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which driver",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had the pole position in 1994 spanish grand prix",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which driver [DES] had the pole position in 1994 spanish grand prix",
        "subq1": [
            "which driver",
            "had the pole position in 1994 spanish grand prix"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which driver had the pole position in 1994 Spanish Grand Prix ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which driver [DES] had the pole position in 1994 Spanish Grand Prix",
        "subq1_no_decipher": [
            "Which driver had the pole position in 1994 Spanish Grand Prix ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "255",
        "question": "Does the US route 281 have a junction at San Antonio",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does the us route 281",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have a junction at san antonio",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does the us route 281 [DES] have a junction at san antonio",
        "subq1": [
            "does the us route 281",
            "have a junction at san antonio"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does the US route 281 have a junction at San Antonio?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does the US route 281 [DES] have a junction at San Antonio",
        "subq1_no_decipher": [
            "Does the US route 281 have a junction at San Antonio?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4508",
        "question": "How many awards have been given to the founder of Grameen Bank",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many awards have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the founder of grameen bank",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many awards have been given to [INQL] the founder of grameen bank [INQR]",
        "subq1": [
            "how many awards have been given to [ENT]"
        ],
        "subq2": [
            "the founder of grameen bank"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the founder of Grameen Bank",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many awards [DES] have been given to [INQL] the founder of Grameen Bank [INQR]",
        "subq1_no_decipher": [
            "How many awards",
            "have been given to [ENT]"
        ],
        "subq2_no_decipher": [
            "the founder of Grameen Bank"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1581",
        "question": "Was Queen Latifah in the U.N.I.T.Y. group",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was queen latifah",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the u.n.i.t.y. group",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was queen latifah [DES] in the u.n.i.t.y. group",
        "subq1": [
            "was queen latifah",
            "in the u.n.i.t.y. group"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Queen Latifah in the U.N.I.T.Y. group?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Queen Latifah in the U.N.I.T.Y. group",
        "subq1_no_decipher": [
            "Was Queen Latifah in the U.N.I.T.Y. group?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2956",
        "question": "Count the number of important works done by the writers of The Second Coming",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of important works done by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the writers of the second coming",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of important works done by [INQL] the writers of the second coming [INQR]",
        "subq1": [
            "count the number of important works done by [ENT]"
        ],
        "subq2": [
            "the writers of the second coming"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of important works",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "done by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the writers of The Second Coming",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the number of important works [DES] done by [INQL] the writers of The Second Coming [INQR]",
        "subq1_no_decipher": [
            "Count the number of important works",
            "done by [ENT]"
        ],
        "subq2_no_decipher": [
            "the writers of The Second Coming"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "924",
        "question": "Who all are known to play the Gibson Guitar Corporation",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who all are known to play the gibson guitar",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "corporation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who all are known to play the gibson guitar [DES] corporation",
        "subq1": [
            "who all are known to play the gibson guitar",
            "corporation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who all are known to play the Gibson Guitar Corporation?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who all [DES] are known to play the Gibson Guitar Corporation [INQR]",
        "subq1_no_decipher": [
            "Who all are known to play the Gibson Guitar Corporation?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4429",
        "question": "Which child of Jack Ferguson became a Prime Minister",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which child of jack ferguson",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "became a prime minister",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which child of jack ferguson [DES] became a prime minister",
        "subq1": [
            "which child of jack ferguson",
            "became a prime minister"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which child of Jack Ferguson",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "became a Prime Minister",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which child of Jack Ferguson [DES] became a Prime Minister",
        "subq1_no_decipher": [
            "Which child of Jack Ferguson",
            "became a Prime Minister"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2508",
        "question": "Did Annie Leibovitz do the cover of The Road Ahead",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Annie_Leibovitz> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did annie leibovitz",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the cover of the road ahead",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did annie leibovitz [DES] do the cover of the road ahead",
        "subq1": [
            "did annie leibovitz",
            "do the cover of the road ahead"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Annie Leibovitz do the cover of The Road Ahead?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Annie Leibovitz do [INQL] the cover of The Road Ahead",
        "subq1_no_decipher": [
            "Did Annie Leibovitz do the cover of The Road Ahead?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3775",
        "question": "What are the things whose mascots are from the class Eutheria",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Eutheria> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the things whose mascots [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are from the class eutheria",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the things whose mascots [INQL] are from the class eutheria [INQR]",
        "subq1": [
            "what are the things whose mascots [ENT]"
        ],
        "subq2": [
            "are from the class eutheria"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mascots [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are from the class Eutheria",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the things [DES] whose mascots [INQL] are from the class Eutheria [INQR]",
        "subq1_no_decipher": [
            "What are the things",
            "whose mascots [ENT]"
        ],
        "subq2_no_decipher": [
            "are from the class Eutheria"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4136",
        "question": "For whom did Michael Springer played for which is also had a former student named Donald Brooks",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Donald_Brooks> <http://dbpedia.org/property/education> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "for whom did michael springer played for",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also had a former student named donald brooks",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "for whom did michael springer played for [DES] which is also had a former student named donald brooks",
        "subq1": [
            "for whom did michael springer played for",
            "which is also had a former student named donald brooks"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "For whom did Michael Springer played for",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also had a former student named Donald Brooks",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "For whom did Michael Springer played for [DES] which is also had a former student named Donald Brooks",
        "subq1_no_decipher": [
            "For whom did Michael Springer played for",
            "which is also had a former student named Donald Brooks"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2779",
        "question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common nationality of georgina theodora wood and akwasi oppong",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fosu",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common nationality of georgina theodora wood and akwasi oppong [DES] fosu",
        "subq1": [
            "name the common nationality of georgina theodora wood and akwasi oppong",
            "fosu"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common nationality of Georgina Theodora Wood",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and akwasi Oppong Fosu",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the common nationality of Georgina Theodora Wood [DES] and akwasi Oppong Fosu",
        "subq1_no_decipher": [
            "Name the common nationality of Georgina Theodora Wood",
            "and akwasi Oppong Fosu"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "539",
        "question": "Name the movie written by Monty Python and distributed by Cinema International Corporation",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movie written by monty python",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and distributed by cinema international corporation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movie written by monty python [DES] and distributed by cinema international corporation",
        "subq1": [
            "name the movie written by monty python",
            "and distributed by cinema international corporation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "written by Monty Python",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and distributed by Cinema International Corporation",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movie [DES] written by Monty Python [DES] and distributed by Cinema International Corporation",
        "subq1_no_decipher": [
            "Name the movie",
            "written by Monty Python",
            "and distributed by Cinema International Corporation"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2745",
        "question": "Is Pittsburgh Steelers the former team of Marv McFadden",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is pittsburgh steelers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the former team of marv mcfadden",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is pittsburgh steelers [DES] the former team of marv mcfadden",
        "subq1": [
            "is pittsburgh steelers",
            "the former team of marv mcfadden"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Pittsburgh Steelers the former team of Marv McFadden?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Pittsburgh Steelers [DES] the former team of Marv McFadden",
        "subq1_no_decipher": [
            "Is Pittsburgh Steelers the former team of Marv McFadden?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4498",
        "question": "Which series was written by Eric Jendresen and John Orloff",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which series",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was written by eric jendresen and john orloff",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which series [DES] was written by eric jendresen and john orloff",
        "subq1": [
            "which series",
            "was written by eric jendresen and john orloff"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which series",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was written by Eric Jendresen and John Orloff",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which series [DES] was written by Eric Jendresen and John Orloff",
        "subq1_no_decipher": [
            "Which series",
            "was written by Eric Jendresen and John Orloff"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4571",
        "question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Elasticsearch> <http://dbpedia.org/property/location> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can i find both the office of elasticsearch and the yellow claw dj",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which city [DES] can i find both the office of elasticsearch and the yellow claw dj",
        "subq1": [
            "in which city",
            "can i find both the office of elasticsearch and the yellow claw dj"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can I find [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "both the office of Elasticsearch and the Yellow Claw DJ",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which city [DES] can I find [INQL] both the office of Elasticsearch and the Yellow Claw DJ [INQR]",
        "subq1_no_decipher": [
            "In which city",
            "can I find [ENT]"
        ],
        "subq2_no_decipher": [
            "both the office of Elasticsearch and the Yellow Claw DJ"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1145",
        "question": "Name the partners of Kelly Brook",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the partners of kelly",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "brook",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the partners of kelly [DES] brook",
        "subq1": [
            "name the partners of kelly",
            "brook"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the partners of Kelly Brook?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the partners of Kelly Brook [INQR]",
        "subq1_no_decipher": [
            "Name the partners of Kelly Brook?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "667",
        "question": "What is the area of the broadcast network which has the affiliation with 9TV",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9TV> <http://dbpedia.org/property/affiliation> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the area of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the broadcast network which has the affiliation with 9tv",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the area of [INQL] the broadcast network which has the affiliation with 9tv [INQR]",
        "subq1": [
            "what is the area of [ENT]"
        ],
        "subq2": [
            "the broadcast network which has the affiliation with 9tv"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the area of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the broadcast network",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has the affiliation with 9TV",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the area of [INQL] the broadcast network [DES] which has the affiliation with 9TV [INQR]",
        "subq1_no_decipher": [
            "What is the area of [ENT]"
        ],
        "subq2_no_decipher": [
            "the broadcast network",
            "which has the affiliation with 9TV"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3019",
        "question": "Who is married to Gerard Piqu",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is married to gerard",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "piqu",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is married to gerard [DES] piqu",
        "subq1": [
            "who is married to gerard",
            "piqu"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is married to Gerard Piqu?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is married to Gerard Piqu simple",
        "subq1_no_decipher": [
            "Who is married to Gerard Piqu?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "357",
        "question": "Which sports are played in schools affiliated with the Harvest Christian Center",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which sports are played in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "schools affiliated with the harvest christian center",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which sports are played in [INQL] schools affiliated with the harvest christian center [INQR]",
        "subq1": [
            "which sports are played in [ENT]"
        ],
        "subq2": [
            "schools affiliated with the harvest christian center"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which sports",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are played in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "schools",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "affiliated with the Harvest Christian Center",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which sports [DES] are played in [INQL] schools [DES] affiliated with the Harvest Christian Center [INQR]",
        "subq1_no_decipher": [
            "Which sports",
            "are played in [ENT]"
        ],
        "subq2_no_decipher": [
            "schools",
            "affiliated with the Harvest Christian Center"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2831",
        "question": "Who debuted their career in a team coached by Chip Kelly",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who debuted their career in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a team coached by chip kelly",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who debuted their career in [INQL] a team coached by chip kelly [INQR]",
        "subq1": [
            "who debuted their career in [ENT]"
        ],
        "subq2": [
            "a team coached by chip kelly"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who debuted their career in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "coached by Chip Kelly",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who debuted their career in [INQL] a team [DES] coached by Chip Kelly [INQR]",
        "subq1_no_decipher": [
            "Who debuted their career in [ENT]"
        ],
        "subq2_no_decipher": [
            "a team",
            "coached by Chip Kelly"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2783",
        "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters> <http://dbpedia.org/property/nickname> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the nicknames given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the characters of the wolves of the mercy falls",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the nicknames given to [INQL] the characters of the wolves of the mercy falls [INQR]",
        "subq1": [
            "what are the nicknames given to [ENT]"
        ],
        "subq2": [
            "the characters of the wolves of the mercy falls"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the nicknames",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "given to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the characters of The Wolves of the Mercy Falls",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the nicknames [DES] given to [INQL] the characters of The Wolves of the Mercy Falls [INQR]",
        "subq1_no_decipher": [
            "What are the nicknames",
            "given to [ENT]"
        ],
        "subq2_no_decipher": [
            "the characters of The Wolves of the Mercy Falls"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1353",
        "question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the river with source country in zambia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and source region as north-western province, zambia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the river with source country in zambia [DES] and source region as north-western province, zambia",
        "subq1": [
            "name the river with source country in zambia",
            "and source region as north-western province, zambia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with source country in Zambia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and source region as North-Western Province, Zambia",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] with source country in Zambia [DES] and source region as North-Western Province, Zambia",
        "subq1_no_decipher": [
            "Name the river",
            "with source country in Zambia",
            "and source region as North-Western Province, Zambia"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "470",
        "question": "Members of how many political parties have died in Delhi",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "members of how many political parties [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "have died in delhi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "members of how many political parties [INQL] have died in delhi [INQR]",
        "subq1": [
            "members of how many political parties [ENT]"
        ],
        "subq2": [
            "have died in delhi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Members of how many political parties",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have died in Delhi",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Members of how many political parties [DES] have died in Delhi [INQR]",
        "subq1_no_decipher": [
            "Members of how many political parties",
            "have died in Delhi"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2703",
        "question": "What is the birthplace of Adugna Deyas and the place where Fiq is located",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fiq,_Ethiopia> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the birthplace of adugna deyas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and the place where fiq is located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the birthplace of adugna deyas [DES] and the place where fiq is located",
        "subq1": [
            "what is the birthplace of adugna deyas",
            "and the place where fiq is located"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the birthplace of Adugna Deyas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and the place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Fiq is located",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the birthplace of Adugna Deyas [DES] and the place [DES] where Fiq is located",
        "subq1_no_decipher": [
            "What is the birthplace of Adugna Deyas",
            "and the place",
            "where Fiq is located"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3330",
        "question": "what is the headquarters of Juan Dalmau Ramerez",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez> <http://dbpedia.org/property/headquarters> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the headquarters of juan dalmau ramerez",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the headquarters of juan dalmau ramerez [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the headquarters of juan dalmau ramerez"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the headquarters of Juan Dalmau Ramerez?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "what is the headquarters of Juan Dalmau Ramerez [INQR]",
        "subq1_no_decipher": [
            "what is the headquarters of Juan Dalmau Ramerez?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3637",
        "question": "The president who was in office when Lee Hyun Jae was the PM followed which religion",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Lee_Hyun-jae> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] followed which religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president who was in office when lee hyun jae was the pm",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] the president who was in office when lee hyun jae was the pm [INQR] followed which religion",
        "subq1": [
            "[ENT] followed which religion"
        ],
        "subq2": [
            "the president who was in office when lee hyun jae was the pm"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] followed",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which religion",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "The president",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who was in office when Lee Hyun Jae was the PM",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "[INQL] The president [DES] who was in office when Lee Hyun Jae was the PM [INQR] followed [DES] which religion",
        "subq1_no_decipher": [
            "[ENT] followed",
            "which religion"
        ],
        "subq2_no_decipher": [
            "The president",
            "who was in office when Lee Hyun Jae was the PM"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1396",
        "question": "Who is the maker of the engine of Ford F-Series first generation",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_F-Series_first_generation> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the maker of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the engine of ford f-series first generation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the maker of [INQL] the engine of ford f-series first generation [INQR]",
        "subq1": [
            "who is the maker of [ENT]"
        ],
        "subq2": [
            "the engine of ford f-series first generation"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the maker of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the engine of Ford F-Series first generation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who is the maker of [INQL] the engine of Ford F-Series first generation [INQR]",
        "subq1_no_decipher": [
            "Who is the maker of [ENT]"
        ],
        "subq2_no_decipher": [
            "the engine of Ford F-Series first generation"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3584",
        "question": "What is the religious affiliation of Neungin High School",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the religious affiliation of neungin high school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the religious affiliation of neungin high school [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the religious affiliation of neungin high school"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the religious affiliation of Neungin High School?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the religious affiliation of Neungin High School [INQR]",
        "subq1_no_decipher": [
            "What is the religious affiliation of Neungin High School?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4486",
        "question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is maria sharapova",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the silver medalist of tennis at the 2012 summer olympics women's singles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is maria sharapova [DES] the silver medalist of tennis at the 2012 summer olympics women's singles",
        "subq1": [
            "is maria sharapova",
            "the silver medalist of tennis at the 2012 summer olympics women's singles"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics Women's singles",
        "subq1_no_decipher": [
            "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3376",
        "question": "Name the office holder with successor as Adrian A Basora and child as Lori Black",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the office holder with successor as adrian a basora",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and child as lori black",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the office holder with successor as adrian a basora [DES] and child as lori black",
        "subq1": [
            "name the office holder with successor as adrian a basora",
            "and child as lori black"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with successor as Adrian A Basora",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and child as Lori Black",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the office holder [DES] with successor as Adrian A Basora [DES] and child as Lori Black",
        "subq1_no_decipher": [
            "Name the office holder",
            "with successor as Adrian A Basora",
            "and child as Lori Black"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1256",
        "question": "Who is the owner of the South end",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_South_End> <http://dbpedia.org/property/owners> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the owner of the south end",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the owner of the south end [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the owner of the south end"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of the South end ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of [INQL] the South end",
        "subq1_no_decipher": [
            "Who is the owner of the South end ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3512",
        "question": "What is the colour of Xocolatlite",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the colour of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "xocolatlite",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the colour of [DES] xocolatlite",
        "subq1": [
            "what is the colour of",
            "xocolatlite"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the colour of Xocolatlite ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the colour of Xocolatlite simple",
        "subq1_no_decipher": [
            "What is the colour of Xocolatlite ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1250",
        "question": "For how many other teams have the members of Atlant Moscow Oblast played",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "for how many other teams have [ENT] played",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of atlant moscow oblast",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "for how many other teams have [INQL] the members of atlant moscow oblast [INQR] played",
        "subq1": [
            "for how many other teams have [ENT] played"
        ],
        "subq2": [
            "the members of atlant moscow oblast"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "For how many other teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT] played",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of Atlant Moscow Oblast",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "For how many other teams [DES] have [INQL] the members of Atlant Moscow Oblast [INQR] played",
        "subq1_no_decipher": [
            "For how many other teams",
            "have [ENT] played"
        ],
        "subq2_no_decipher": [
            "the members of Atlant Moscow Oblast"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4807",
        "question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Hellenic_Naval_Academy> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the state of origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president whose alma mater is hellenic naval academy",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the state of origin of [INQL] the president whose alma mater is hellenic naval academy [INQR]",
        "subq1": [
            "what is the state of origin of [ENT]"
        ],
        "subq2": [
            "the president whose alma mater is hellenic naval academy"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the state of origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the president",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose alma mater is Hellenic Naval Academy",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the state of origin of [INQL] the president [DES] whose alma mater is Hellenic Naval Academy [INQR]",
        "subq1_no_decipher": [
            "What is the state of origin of [ENT]"
        ],
        "subq2_no_decipher": [
            "the president",
            "whose alma mater is Hellenic Naval Academy"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4298",
        "question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the common ethnicity of the maike evers and francisco",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "lachowski",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the common ethnicity of the maike evers and francisco [DES] lachowski",
        "subq1": [
            "what is the common ethnicity of the maike evers and francisco",
            "lachowski"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the common ethnicity of the Maike Evers and Francisco Lachowski",
        "subq1_no_decipher": [
            "What is the common ethnicity of the Maike Evers and Francisco Lachowski"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3284",
        "question": "In which places do companies founded in Newcastle operate",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which places do [ENT] operate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies founded in newcastle",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which places do [INQL] companies founded in newcastle [INQR] operate",
        "subq1": [
            "in which places do [ENT] operate"
        ],
        "subq2": [
            "companies founded in newcastle"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do [ENT] operate",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded in Newcastle",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In which places [DES] do [INQL] companies [DES] founded in Newcastle [INQR] operate",
        "subq1_no_decipher": [
            "In which places",
            "do [ENT] operate"
        ],
        "subq2_no_decipher": [
            "companies",
            "founded in Newcastle"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2933",
        "question": "Which senator served in military units VMF-155 and VMF-218",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which senator",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served in military units vmf-155 and vmf-218",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which senator [DES] served in military units vmf-155 and vmf-218",
        "subq1": [
            "which senator",
            "served in military units vmf-155 and vmf-218"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which senator",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served in military units VMF-155 and VMF-218",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which senator [DES] served in military units VMF-155 and VMF-218",
        "subq1_no_decipher": [
            "Which senator",
            "served in military units VMF-155 and VMF-218"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4175",
        "question": "What kind of games are made by Interplay Entertainment",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games are made by interplay entertainment",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what kind of [INQL] games are made by interplay entertainment [INQR]",
        "subq1": [
            "what kind of [ENT]"
        ],
        "subq2": [
            "games are made by interplay entertainment"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games are made by Interplay Entertainment",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What kind of [INQL] games are made by Interplay Entertainment [INQR]",
        "subq1_no_decipher": [
            "What kind of [ENT]"
        ],
        "subq2_no_decipher": [
            "games are made by Interplay Entertainment"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1852",
        "question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which producer of purvis eureka engine",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the owner of ford theatre",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which producer of purvis eureka engine [DES] is also the owner of ford theatre",
        "subq1": [
            "which producer of purvis eureka engine",
            "is also the owner of ford theatre"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which producer of Purvis Eureka engine",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the owner of Ford Theatre",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which producer of Purvis Eureka engine [DES] is also the owner of Ford Theatre",
        "subq1_no_decipher": [
            "Which producer of Purvis Eureka engine",
            "is also the owner of Ford Theatre"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4869",
        "question": "What developed EMMS",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EMMS> <http://dbpedia.org/ontology/developer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what developed",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "emms",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what developed [DES] emms",
        "subq1": [
            "what developed",
            "emms"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What developed EMMS?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What developed EMMS simple: What developed EMMS simple",
        "subq1_no_decipher": [
            "What developed EMMS?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2105",
        "question": "Which music band made Take Me There, and to which Tedd Riley was associated",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which music band made take me there,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and to which tedd riley was associated",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which music band made take me there, [DES] and to which tedd riley was associated",
        "subq1": [
            "which music band made take me there,",
            "and to which tedd riley was associated"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which music band",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "made Take Me There,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and to which Tedd Riley was associated",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which music band [DES] made Take Me There, [DES] and to which Tedd Riley was associated",
        "subq1_no_decipher": [
            "Which music band",
            "made Take Me There,",
            "and to which Tedd Riley was associated"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "133",
        "question": "In which time zone is Pong Pha",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which time zone",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is pong pha",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which time zone [DES] is pong pha",
        "subq1": [
            "in which time zone",
            "is pong pha"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which time zone is Pong Pha?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "In which time zone is Pong Pha simple",
        "subq1_no_decipher": [
            "In which time zone is Pong Pha?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "928",
        "question": "How many fictional characters are there in a series in which Craig Robinson acted",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Craig_Robinson_(actor)> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many fictional characters are there in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a series in which craig robinson acted",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many fictional characters are there in [INQL] a series in which craig robinson acted [INQR]",
        "subq1": [
            "how many fictional characters are there in [ENT]"
        ],
        "subq2": [
            "a series in which craig robinson acted"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many fictional characters are there in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a series",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which Craig Robinson acted",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many fictional characters are there in [INQL] a series [DES] in which Craig Robinson acted [INQR]",
        "subq1_no_decipher": [
            "How many fictional characters are there in [ENT]"
        ],
        "subq2_no_decipher": [
            "a series",
            "in which Craig Robinson acted"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "823",
        "question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which political party of chandra shekhar",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the political party of datl satyanarayana raju",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which political party of chandra shekhar [DES] is also the political party of datl satyanarayana raju",
        "subq1": [
            "which political party of chandra shekhar",
            "is also the political party of datl satyanarayana raju"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which political party of Chandra Shekhar",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the political party of Datl Satyanarayana Raju",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which political party of Chandra Shekhar [DES] is also the political party of Datl Satyanarayana Raju",
        "subq1_no_decipher": [
            "Which political party of Chandra Shekhar",
            "is also the political party of Datl Satyanarayana Raju"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4543",
        "question": "Who owns the airport in Paphos",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airport in paphos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who owns [INQL] the airport in paphos [INQR]",
        "subq1": [
            "who owns [ENT]"
        ],
        "subq2": [
            "the airport in paphos"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airport in Paphos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who owns [INQL] the airport in Paphos [INQR]",
        "subq1_no_decipher": [
            "Who owns [ENT]"
        ],
        "subq2_no_decipher": [
            "the airport in Paphos"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1531",
        "question": "What is the baseball team whose club manager is Chip Hale",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Chip_Hale>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the baseball team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose club manager is chip hale",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the baseball team [DES] whose club manager is chip hale",
        "subq1": [
            "what is the baseball team",
            "whose club manager is chip hale"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the baseball team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose club manager is Chip Hale",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the baseball team [DES] whose club manager is Chip Hale",
        "subq1_no_decipher": [
            "What is the baseball team",
            "whose club manager is Chip Hale"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1214",
        "question": "Which bacteria's taxonomic class is Bacilli",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which bacteria's taxonomic class is",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "bacilli",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which bacteria's taxonomic class is [DES] bacilli",
        "subq1": [
            "which bacteria's taxonomic class is",
            "bacilli"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which bacteria's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "taxonomic class is Bacilli",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which bacteria's [DES] taxonomic class is Bacilli",
        "subq1_no_decipher": [
            "Which bacteria's",
            "taxonomic class is Bacilli"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "504",
        "question": "What honours did Reigh Count receive",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/honours> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what honours",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did reigh count receive",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what honours [DES] did reigh count receive",
        "subq1": [
            "what honours",
            "did reigh count receive"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What honours did Reigh Count receive?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What honours [DES] did Reigh Count receive [DES]",
        "subq1_no_decipher": [
            "What honours did Reigh Count receive?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4285",
        "question": "What are some products of the company whose subsidiary is Sony Corp shareholders and subsidies",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some products of [ENT] and subsidies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company whose subsidiary is sony corp shareholders",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some products of [INQL] the company whose subsidiary is sony corp shareholders [INQR] and subsidies",
        "subq1": [
            "what are some products of [ENT] and subsidies"
        ],
        "subq2": [
            "the company whose subsidiary is sony corp shareholders"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some products of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose subsidiary is Sony Corp shareholders and subsidies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some products of [INQL] the company [DES] whose subsidiary is Sony Corp shareholders and subsidies [INQR]",
        "subq1_no_decipher": [
            "What are some products of [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "whose subsidiary is Sony Corp shareholders and subsidies"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1996",
        "question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who built [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadiums where 2014 fifa under 17 woman's world cup took place",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who built [INQL] the stadiums where 2014 fifa under 17 woman's world cup took place [INQR]",
        "subq1": [
            "who built [ENT]"
        ],
        "subq2": [
            "the stadiums where 2014 fifa under 17 woman's world cup took place"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who built [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadiums",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where 2014 FIFA under 17 woman's world cup took place",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who built [INQL] the stadiums [DES] where 2014 FIFA under 17 woman's world cup took place [INQR]",
        "subq1_no_decipher": [
            "Who built [ENT]"
        ],
        "subq2_no_decipher": [
            "the stadiums",
            "where 2014 FIFA under 17 woman's world cup took place"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3072",
        "question": "Which area operated by the South Side Elevated Railroad is also the place of death of the Sakari Suzuki",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which area operated by the south side elevated railroad",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the place of death of the sakari suzuki",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which area operated by the south side elevated railroad [DES] is also the place of death of the sakari suzuki",
        "subq1": [
            "which area operated by the south side elevated railroad",
            "is also the place of death of the sakari suzuki"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which area",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operated by the South Side Elevated Railroad",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the place of death of the Sakari Suzuki",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which area [DES] operated by the South Side Elevated Railroad [DES] is also the place of death of the Sakari Suzuki",
        "subq1_no_decipher": [
            "Which area",
            "operated by the South Side Elevated Railroad",
            "is also the place of death of the Sakari Suzuki"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1958",
        "question": "What is the television show whose related with Doctor Who Confidential",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose related with doctor who confidential",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the television show [DES] whose related with doctor who confidential",
        "subq1": [
            "what is the television show",
            "whose related with doctor who confidential"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose related with Doctor Who Confidential",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the television show [DES] whose related with Doctor Who Confidential",
        "subq1_no_decipher": [
            "What is the television show",
            "whose related with Doctor Who Confidential"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1384",
        "question": "In which city wasThe Triple Door (The Courage album) performed live",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which city [ENT] performed live",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "wasthe triple door (the courage album)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which city [INQL] wasthe triple door (the courage album) [INQR] performed live",
        "subq1": [
            "in which city [ENT] performed live"
        ],
        "subq2": [
            "wasthe triple door (the courage album)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was [ENT] performed live",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "The Triple Door (The Courage album)",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which city [DES] was [INQL] The Triple Door (The Courage album) [INQR] performed live",
        "subq1_no_decipher": [
            "In which city",
            "was [ENT] performed live"
        ],
        "subq2_no_decipher": [
            "The Triple Door (The Courage album)"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "894",
        "question": "Which nearest city of Jurgens Site is the death place of Jimmie Heuga",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which nearest city of jurgens site",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the death place of jimmie heuga",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which nearest city of jurgens site [DES] is the death place of jimmie heuga",
        "subq1": [
            "which nearest city of jurgens site",
            "is the death place of jimmie heuga"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which nearest city of Jurgens Site",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the death place of Jimmie Heuga",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which nearest city of Jurgens Site [DES] is the death place of Jimmie Heuga",
        "subq1_no_decipher": [
            "Which nearest city of Jurgens Site",
            "is the death place of Jimmie Heuga"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "455",
        "question": "List the battles fought by Ali Habib Mahmud",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the battles",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought by ali habib mahmud",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the battles [DES] fought by ali habib mahmud",
        "subq1": [
            "list the battles",
            "fought by ali habib mahmud"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the battles fought by  Ali Habib Mahmud ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the battles [DES] fought by Ali Habib Mahmud [INQR]",
        "subq1_no_decipher": [
            "List the battles fought by  Ali Habib Mahmud ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4879",
        "question": "How many companies were started in the states",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were started in the states",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many companies [DES] were started in the states",
        "subq1": [
            "how many companies",
            "were started in the states"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many companies were started in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the states",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "How many companies were started in [INQL] the states [INQR]",
        "subq1_no_decipher": [
            "How many companies were started in [ENT]"
        ],
        "subq2_no_decipher": [
            "the states"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3709",
        "question": "Is Charles Drummond Ellis a doctoral student of James Chadwick",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is charles drummond ellis",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a doctoral student of james chadwick",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is charles drummond ellis [DES] a doctoral student of james chadwick",
        "subq1": [
            "is charles drummond ellis",
            "a doctoral student of james chadwick"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Charles Drummond Ellis a doctoral student of James Chadwick?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Charles Drummond Ellis a doctoral student of James Chadwick simple",
        "subq1_no_decipher": [
            "Is Charles Drummond Ellis a doctoral student of James Chadwick?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4618",
        "question": "How many movies are distributed by Cinema International Corporation",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are distributed by cinema international corporation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many movies [DES] are distributed by cinema international corporation",
        "subq1": [
            "how many movies",
            "are distributed by cinema international corporation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many movies are distributed by Cinema International Corporation?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "How many movies [DES] are distributed by Cinema International Corporation [INQR]",
        "subq1_no_decipher": [
            "How many movies are distributed by Cinema International Corporation?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4268",
        "question": "Name the local authority of Trinity School, Brentwood",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the local authority of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "trinity school, brentwood",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the local authority of [INQL] trinity school, brentwood [INQR]",
        "subq1": [
            "name the local authority of [ENT]"
        ],
        "subq2": [
            "trinity school, brentwood"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the local authority of Trinity School, Brentwood ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the local authority of [INQL] Trinity School, Brentwood [INQR]",
        "subq1_no_decipher": [
            "Name the local authority of Trinity School, Brentwood ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3522",
        "question": "Name the president of Wyche Fowler",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the president of wyche",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fowler",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the president of wyche [DES] fowler",
        "subq1": [
            "name the president of wyche",
            "fowler"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the president of Wyche Fowler ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the president of Wyche Fowler [DES]",
        "subq1_no_decipher": [
            "Name the president of Wyche Fowler ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4134",
        "question": "In which fields have people born in Lausanne worked",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Lausanne> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which fields have [ENT] worked",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people born in lausanne",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which fields have [INQL] people born in lausanne [INQR] worked",
        "subq1": [
            "in which fields have [ENT] worked"
        ],
        "subq2": [
            "people born in lausanne"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which fields",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT] worked",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born in Lausanne",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In which fields [DES] have [INQL] people [DES] born in Lausanne [INQR] worked",
        "subq1_no_decipher": [
            "In which fields",
            "have [ENT] worked"
        ],
        "subq2_no_decipher": [
            "people",
            "born in Lausanne"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3602",
        "question": "Which Texas based company was founded by Jim Harris",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which texas based company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was founded by jim harris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which texas based company [DES] was founded by jim harris",
        "subq1": [
            "which texas based company",
            "was founded by jim harris"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which Texas based company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was founded by Jim Harris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which Texas based company [DES] was founded by Jim Harris",
        "subq1_no_decipher": [
            "Which Texas based company",
            "was founded by Jim Harris"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "713",
        "question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name a show hosted by brian dunkleman",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and judged by harry connick, jr",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name a show hosted by brian dunkleman [DES] and judged by harry connick, jr",
        "subq1": [
            "name a show hosted by brian dunkleman",
            "and judged by harry connick, jr"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name a show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hosted by Brian Dunkleman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and judged by Harry Connick, Jr",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name a show [DES] hosted by Brian Dunkleman [DES] and judged by Harry Connick, Jr",
        "subq1_no_decipher": [
            "Name a show",
            "hosted by Brian Dunkleman",
            "and judged by Harry Connick, Jr"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4186",
        "question": "To which educational institute does Cornell University Press belong to",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which educational institute",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does cornell university press belong to",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which educational institute [DES] does cornell university press belong to",
        "subq1": [
            "to which educational institute",
            "does cornell university press belong to"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which educational institute does Cornell University Press belong to?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which educational institute [DES] does Cornell University Press belong to",
        "subq1_no_decipher": [
            "To which educational institute does Cornell University Press belong to?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2214",
        "question": "In which country's cuisine, ham is an important part",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Ham> . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which country's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cuisine, ham is an important part",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which country's [INQL] cuisine, ham is an important part [INQR]",
        "subq1": [
            "in which country's [ENT]"
        ],
        "subq2": [
            "cuisine, ham is an important part"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which country's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cuisine, ham is an important part",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "In which country's [INQL] cuisine, ham is an important part [INQR]",
        "subq1_no_decipher": [
            "In which country's [ENT]"
        ],
        "subq2_no_decipher": [
            "cuisine, ham is an important part"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2923",
        "question": "List the softwares which runs on Microsoft Windows and has license as Software as a service",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the softwares which runs on microsoft windows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has license as software as a service",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the softwares which runs on microsoft windows [DES] and has license as software as a service",
        "subq1": [
            "list the softwares which runs on microsoft windows",
            "and has license as software as a service"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the softwares",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which runs on Microsoft Windows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has license as Software as a service",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the softwares [DES] which runs on Microsoft Windows [DES] and has license as Software as a service",
        "subq1_no_decipher": [
            "List the softwares",
            "which runs on Microsoft Windows",
            "and has license as Software as a service"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1810",
        "question": "Which political party of Yashpal Kapur is also the owner of National Herald",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which political party of yashpal kapur",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the owner of national herald",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which political party of yashpal kapur [DES] is also the owner of national herald",
        "subq1": [
            "which political party of yashpal kapur",
            "is also the owner of national herald"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which political party of Yashpal Kapur",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the owner of National Herald",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which political party of Yashpal Kapur [DES] is also the owner of National Herald",
        "subq1_no_decipher": [
            "Which political party of Yashpal Kapur",
            "is also the owner of National Herald"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3486",
        "question": "Who all have been presenters on shows by the NBC",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who all have been presenters on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "shows by the nbc",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who all have been presenters on [INQL] shows by the nbc [INQR]",
        "subq1": [
            "who all have been presenters on [ENT]"
        ],
        "subq2": [
            "shows by the nbc"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who all have been presenters on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "shows",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "by the NBC",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who all have been presenters on [INQL] shows [DES] by the NBC [INQR]",
        "subq1_no_decipher": [
            "Who all have been presenters on [ENT]"
        ],
        "subq2_no_decipher": [
            "shows",
            "by the NBC"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3141",
        "question": "Give me the list of cars which are the predecessor of Full Sized Cars",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Full-size_car> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me the list of cars which are the predecessor of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "full sized cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me the list of cars which are the predecessor of [INQL] full sized cars [INQR]",
        "subq1": [
            "give me the list of cars which are the predecessor of [ENT]"
        ],
        "subq2": [
            "full sized cars"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the list of cars",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of Full Sized Cars",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me the list of cars [DES] which are [INQL] the predecessor of Full Sized Cars [INQR]",
        "subq1_no_decipher": [
            "Give me the list of cars",
            "which are [ENT]"
        ],
        "subq2_no_decipher": [
            "the predecessor of Full Sized Cars"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1827",
        "question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the people with final resting place as plymouth, vermont",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has samuel w. mccall as predecessor",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the people with final resting place as plymouth, vermont [DES] and has samuel w. mccall as predecessor",
        "subq1": [
            "list the people with final resting place as plymouth, vermont",
            "and has samuel w. mccall as predecessor"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with final resting place as Plymouth, Vermont",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has Samuel W. McCall as predecessor",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the people [DES] with final resting place as Plymouth, Vermont [DES] and has Samuel W. McCall as predecessor",
        "subq1_no_decipher": [
            "List the people",
            "with final resting place as Plymouth, Vermont",
            "and has Samuel W. McCall as predecessor"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1155",
        "question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what disease",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "led to the demise of letitia mactavish hargrave and martino martini",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what disease [DES] led to the demise of letitia mactavish hargrave and martino martini",
        "subq1": [
            "what disease",
            "led to the demise of letitia mactavish hargrave and martino martini"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What disease",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "led to the demise of Letitia MacTavish Hargrave and Martino Martini",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What disease [DES] led to the demise of Letitia MacTavish Hargrave and Martino Martini",
        "subq1_no_decipher": [
            "What disease",
            "led to the demise of Letitia MacTavish Hargrave and Martino Martini"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1324",
        "question": "What are some software which are written in languages that are run on Unix like OS",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some software which are written in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "languages that are run on unix like os",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some software which are written in [INQL] languages that are run on unix like os [INQR]",
        "subq1": [
            "what are some software which are written in [ENT]"
        ],
        "subq2": [
            "languages that are run on unix like os"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some software",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are written in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "languages",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that are run on Unix like OS",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What are some software [DES] which are written in [INQL] languages [DES] that are run on Unix like OS [INQR]",
        "subq1_no_decipher": [
            "What are some software",
            "which are written in [ENT]"
        ],
        "subq2_no_decipher": [
            "languages",
            "that are run on Unix like OS"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4312",
        "question": "List all the movies whose directors were born in Kenosha, Wisconsin",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all the movies whose directors [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "were born in kenosha, wisconsin",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all the movies whose directors [INQL] were born in kenosha, wisconsin [INQR]",
        "subq1": [
            "list all the movies whose directors [ENT]"
        ],
        "subq2": [
            "were born in kenosha, wisconsin"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all the movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose directors [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "were born in Kenosha, Wisconsin",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List all the movies [DES] whose directors [INQL] were born in Kenosha, Wisconsin [INQR]",
        "subq1_no_decipher": [
            "List all the movies",
            "whose directors [ENT]"
        ],
        "subq2_no_decipher": [
            "were born in Kenosha, Wisconsin"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "510",
        "question": "Does the St lawrence river start in Kingston, Ontario",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Saint_Lawrence_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Kingston,_Ontario> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does the st lawrence river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "start in kingston, ontario",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does the st lawrence river [DES] start in kingston, ontario",
        "subq1": [
            "does the st lawrence river",
            "start in kingston, ontario"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does the St lawrence river start in Kingston, Ontario?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does the St lawrence river [INQR] start in Kingston, Ontario",
        "subq1_no_decipher": [
            "Does the St lawrence river start in Kingston, Ontario?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1680",
        "question": "What stadium's operator is Stan Kroenke",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what stadium's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operator is stan kroenke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what stadium's [DES] operator is stan kroenke",
        "subq1": [
            "what stadium's",
            "operator is stan kroenke"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What stadium's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "operator is Stan Kroenke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What stadium's [DES] operator is Stan Kroenke",
        "subq1_no_decipher": [
            "What stadium's",
            "operator is Stan Kroenke"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "499",
        "question": "Is Mike Babcock the head coach of Toronto Maple Leafs",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is mike babcock",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the head coach of toronto maple leafs",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is mike babcock [DES] the head coach of toronto maple leafs",
        "subq1": [
            "is mike babcock",
            "the head coach of toronto maple leafs"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Mike Babcock the head coach of Toronto Maple Leafs?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Mike Babcock the head coach of Toronto Maple Leafs",
        "subq1_no_decipher": [
            "Is Mike Babcock the head coach of Toronto Maple Leafs?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4536",
        "question": "Whose commanders are John Mc Ewen and Park Chunghee",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has commanders are john mc ewen and park",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose commanders are john mc ewen and park chunghee",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has commanders are john mc ewen and park [DES] whose commanders are john mc ewen and park chunghee",
        "subq1": [
            "has commanders are john mc ewen and park",
            "whose commanders are john mc ewen and park chunghee"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whose commanders are John Mc Ewen and Park Chunghee",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Whose commanders are John Mc Ewen and Park Chunghee",
        "subq1_no_decipher": [
            "Whose commanders are John Mc Ewen and Park Chunghee"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1856",
        "question": "Who gave guest appearances on the show which is the next episode after the Bombshell one",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Bombshell_(Smash)> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who gave guest appearances on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the show which is the next episode after the bombshell one",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who gave guest appearances on [INQL] the show which is the next episode after the bombshell one [INQR]",
        "subq1": [
            "who gave guest appearances on [ENT]"
        ],
        "subq2": [
            "the show which is the next episode after the bombshell one"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who gave guest appearances on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the show",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is the next episode after the Bombshell one",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who gave guest appearances on [INQL] the show [DES] which is the next episode after the Bombshell one [INQR]",
        "subq1_no_decipher": [
            "Who gave guest appearances on [ENT]"
        ],
        "subq2_no_decipher": [
            "the show",
            "which is the next episode after the Bombshell one"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1388",
        "question": "What is manufactured by a company headed by Kazuo Hirai",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is manufactured by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a company headed by kazuo hirai",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is manufactured by [INQL] a company headed by kazuo hirai [INQR]",
        "subq1": [
            "what is manufactured by [ENT]"
        ],
        "subq2": [
            "a company headed by kazuo hirai"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is manufactured by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "headed by Kazuo Hirai",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is manufactured by [INQL] a company [DES] headed by Kazuo Hirai [INQR]",
        "subq1_no_decipher": [
            "What is manufactured by [ENT]"
        ],
        "subq2_no_decipher": [
            "a company",
            "headed by Kazuo Hirai"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3719",
        "question": "Under which presidents have politicians from the Continental army served",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "under which presidents have [ENT] served",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "politicians from the continental army",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "under which presidents have [INQL] politicians from the continental army [INQR] served",
        "subq1": [
            "under which presidents have [ENT] served"
        ],
        "subq2": [
            "politicians from the continental army"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Under which presidents",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT] served",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "politicians from the Continental army",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Under which presidents [DES] have [INQL] politicians from the Continental army [INQR] served",
        "subq1_no_decipher": [
            "Under which presidents",
            "have [ENT] served"
        ],
        "subq2_no_decipher": [
            "politicians from the Continental army"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2386",
        "question": "Philadelphia City Council is the governing body of which city",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "philadelphia city council is the governing body of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "philadelphia city council is the governing body of [DES] which city",
        "subq1": [
            "philadelphia city council is the governing body of",
            "which city"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Philadelphia City Council is the governing body of which city?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "[INQL] Philadelphia City Council is the governing body of [DES] which city",
        "subq1_no_decipher": [
            "Philadelphia City Council is the governing body of which city?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3236",
        "question": "What are the binomial authority of Menetries's warbler",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the binomial authority of menetries's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "warbler",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the binomial authority of menetries's [DES] warbler",
        "subq1": [
            "what are the binomial authority of menetries's",
            "warbler"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the binomial authority of Menetries's warbler?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the binomial authority of Menetries's warbler",
        "subq1_no_decipher": [
            "What are the binomial authority of Menetries's warbler?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1540",
        "question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Elliot_Goldenthal> . ?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movie which has music composed by elliot goldenthal",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and screenplay by akiva goldsman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movie which has music composed by elliot goldenthal [DES] and screenplay by akiva goldsman",
        "subq1": [
            "name the movie which has music composed by elliot goldenthal",
            "and screenplay by akiva goldsman"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has music composed by Elliot Goldenthal",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and screenplay by Akiva Goldsman",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movie [DES] which has music composed by Elliot Goldenthal [DES] and screenplay by Akiva Goldsman",
        "subq1_no_decipher": [
            "Name the movie",
            "which has music composed by Elliot Goldenthal",
            "and screenplay by Akiva Goldsman"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1217",
        "question": "Name the fictional character whose relative are Duck family and Clan McDuck",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relative are duck family and clan mcduck",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the fictional character [DES] whose relative are duck family and clan mcduck",
        "subq1": [
            "name the fictional character",
            "whose relative are duck family and clan mcduck"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relative are Duck family and Clan McDuck",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the fictional character [DES] whose relative are Duck family and Clan McDuck",
        "subq1_no_decipher": [
            "Name the fictional character",
            "whose relative are Duck family and Clan McDuck"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2681",
        "question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/St._Louis> . ?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Madison_River>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with athletics department in ncaa division i football bowl subdivision has nickname tulane green wave",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which university [DES] with athletics department in ncaa division i football bowl subdivision has nickname tulane green wave",
        "subq1": [
            "which university",
            "with athletics department in ncaa division i football bowl subdivision has nickname tulane green wave"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with athletics department in NCAA Division I Football Bowl Subdivision",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has nickname Tulane Green Wave",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which university [DES] with athletics department in NCAA Division I Football Bowl Subdivision [DES] has nickname Tulane Green Wave",
        "subq1_no_decipher": [
            "Which university",
            "with athletics department in NCAA Division I Football Bowl Subdivision",
            "has nickname Tulane Green Wave"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2993",
        "question": "Which state does Jerome B. Chaffee belong",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which state",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does jerome b. chaffee belong",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which state [DES] does jerome b. chaffee belong",
        "subq1": [
            "which state",
            "does jerome b. chaffee belong"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which state does Jerome B. Chaffee belong ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which state [DES] does Jerome B. Chaffee belong [INQR]",
        "subq1_no_decipher": [
            "Which state does Jerome B. Chaffee belong ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1191",
        "question": "In which of the parties that have governed over Rishikesh, does Govinda belong too",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which of the parties",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that have governed over rishikesh, does govinda belong too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which of the parties [DES] that have governed over rishikesh, does govinda belong too",
        "subq1": [
            "in which of the parties",
            "that have governed over rishikesh, does govinda belong too"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the parties",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that have governed over Rishikesh,",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does Govinda belong too",
                    "entityID": 0,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 0,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which of [INQL] the parties [DES] that have governed over Rishikesh, [DES] does Govinda belong too",
        "subq1_no_decipher": [
            "In which of",
            "the parties",
            "that have governed over Rishikesh,",
            "does Govinda belong too"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1542",
        "question": "What awards are won by the screenwriter of Lucky You",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what awards are won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the screenwriter of lucky you",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what awards are won by [INQL] the screenwriter of lucky you [INQR]",
        "subq1": [
            "what awards are won by [ENT]"
        ],
        "subq2": [
            "the screenwriter of lucky you"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the screenwriter of Lucky You",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What awards [DES] are won by [INQL] the screenwriter of Lucky You [INQR]",
        "subq1_no_decipher": [
            "What awards",
            "are won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the screenwriter of Lucky You"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3301",
        "question": "Name the Pole driver of 1994 Spanish Grand Prix",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the pole driver of 1994 spanish grand",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "prix",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the pole driver of 1994 spanish grand [DES] prix",
        "subq1": [
            "name the pole driver of 1994 spanish grand",
            "prix"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name  the Pole driver of 1994 Spanish Grand Prix ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the Pole driver of 1994 Spanish Grand Prix simple",
        "subq1_no_decipher": [
            "Name  the Pole driver of 1994 Spanish Grand Prix ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3324",
        "question": "Where did Georges Wolinski and Judson Huss die",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georges_Wolinski> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where did georges wolinski and judson huss",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "die",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where did georges wolinski and judson huss [DES] die",
        "subq1": [
            "where did georges wolinski and judson huss",
            "die"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where did Georges Wolinski and Judson Huss die",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where did Georges Wolinski and Judson Huss die",
        "subq1_no_decipher": [
            "Where did Georges Wolinski and Judson Huss die"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2539",
        "question": "What is the parent company of the airline whose hub is in Detroit",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the parent company of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airline whose hub is in detroit",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the parent company of [INQL] the airline whose hub is in detroit [INQR]",
        "subq1": [
            "what is the parent company of [ENT]"
        ],
        "subq2": [
            "the airline whose hub is in detroit"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the parent company of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the airline",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose hub is in Detroit",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the parent company of [INQL] the airline [DES] whose hub is in Detroit [INQR]",
        "subq1_no_decipher": [
            "What is the parent company of [ENT]"
        ],
        "subq2_no_decipher": [
            "the airline",
            "whose hub is in Detroit"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "953",
        "question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the appliance",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which uses the central processing unit manufactured by marvell technology group",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the appliance [DES] which uses the central processing unit manufactured by marvell technology group",
        "subq1": [
            "what is the appliance",
            "which uses the central processing unit manufactured by marvell technology group"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the appliance",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which uses [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the central processing unit",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "manufactured by Marvell Technology Group",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What is the appliance [DES] which uses [INQL] the central processing unit [DES] manufactured by Marvell Technology Group [INQR]",
        "subq1_no_decipher": [
            "What is the appliance",
            "which uses [ENT]"
        ],
        "subq2_no_decipher": [
            "the central processing unit",
            "manufactured by Marvell Technology Group"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4330",
        "question": "Give me all magazines whose founder died in Berkeley, California",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me all magazines whose founder [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "died in berkeley, california",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me all magazines whose founder [INQL] died in berkeley, california [INQR]",
        "subq1": [
            "give me all magazines whose founder [ENT]"
        ],
        "subq2": [
            "died in berkeley, california"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me all magazines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose founder [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "died in Berkeley, California",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me all magazines [DES] whose founder [INQL] died in Berkeley, California [INQR]",
        "subq1_no_decipher": [
            "Give me all magazines",
            "whose founder [ENT]"
        ],
        "subq2_no_decipher": [
            "died in Berkeley, California"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "732",
        "question": "Which technological products were manufactured by Foxconn",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which technological products",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were manufactured by foxconn",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which technological products [DES] were manufactured by foxconn",
        "subq1": [
            "which technological products",
            "were manufactured by foxconn"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which technological products",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were manufactured by Foxconn",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which technological products [DES] were manufactured by Foxconn [INQR]",
        "subq1_no_decipher": [
            "Which technological products",
            "were manufactured by Foxconn"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1156",
        "question": "Is George Lucas the cinematographer of 6-18-67",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is george lucas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the cinematographer of 6-18-67",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is george lucas [DES] the cinematographer of 6-18-67",
        "subq1": [
            "is george lucas",
            "the cinematographer of 6-18-67"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is George Lucas the cinematographer of 6-18-67?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is George Lucas the cinematographer of 6-18-67",
        "subq1_no_decipher": [
            "Is George Lucas the cinematographer of 6-18-67?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3294",
        "question": "Whose predecessor had Jenny Macklin as a deputy",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "whose predecessor [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "had jenny macklin as a deputy",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "whose predecessor [INQL] had jenny macklin as a deputy [INQR]",
        "subq1": [
            "whose predecessor [ENT]"
        ],
        "subq2": [
            "had jenny macklin as a deputy"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose predecessor [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "had Jenny Macklin as a deputy",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Whose predecessor [INQL] had Jenny Macklin as a deputy [INQR]",
        "subq1_no_decipher": [
            "Whose predecessor [ENT]"
        ],
        "subq2_no_decipher": [
            "had Jenny Macklin as a deputy"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2982",
        "question": "How many cars are similar to the ones assembled in the Jefferson North Assembly",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many cars are similar to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones assembled in the jefferson north assembly",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many cars are similar to [INQL] the ones assembled in the jefferson north assembly [INQR]",
        "subq1": [
            "how many cars are similar to [ENT]"
        ],
        "subq2": [
            "the ones assembled in the jefferson north assembly"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many cars",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are similar to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "assembled in the Jefferson North Assembly",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many cars [DES] are similar to [INQL] the ones [DES] assembled in the Jefferson North Assembly [INQR]",
        "subq1_no_decipher": [
            "How many cars",
            "are similar to [ENT]"
        ],
        "subq2_no_decipher": [
            "the ones",
            "assembled in the Jefferson North Assembly"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2156",
        "question": "Count the number of region of AN/FSQ-7 Combat Direction Central",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of region of [ENT] central",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "an/fsq-7 combat direction",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of region of [INQL] an/fsq-7 combat direction [INQR] central",
        "subq1": [
            "count the number of region of [ENT] central"
        ],
        "subq2": [
            "an/fsq-7 combat direction"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of region of AN/FSQ-7 Combat Direction Central?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the number of region of [INQL] AN/FSQ-7 Combat Direction Central [INQR]",
        "subq1_no_decipher": [
            "Count the number of region of AN/FSQ-7 Combat Direction Central?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1062",
        "question": "What are the common houses of US Congress and the Kansas Legislature",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the common houses of us congress and the kansas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "legislature",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the common houses of us congress and the kansas [DES] legislature",
        "subq1": [
            "what are the common houses of us congress and the kansas",
            "legislature"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the common houses of US Congress and the Kansas Legislature",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the common houses of US Congress and the Kansas Legislature",
        "subq1_no_decipher": [
            "What are the common houses of US Congress and the Kansas Legislature"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2616",
        "question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "was john muir the first one to ascend [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "one of the peaks in the cathedral peak",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "was john muir the first one to ascend [INQL] one of the peaks in the cathedral peak [INQR]",
        "subq1": [
            "was john muir the first one to ascend [ENT]"
        ],
        "subq2": [
            "one of the peaks in the cathedral peak"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was John Muir the first one to ascend [DES] one of the peaks in the cathedral peak",
        "subq1_no_decipher": [
            "Was John Muir the first one to ascend one of the peaks in the cathedral peak?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1167",
        "question": "From how many different places have people gone to the Harward Medical School",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "from how many different places have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people gone to the harward medical school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "from how many different places have [INQL] people gone to the harward medical school [INQR]",
        "subq1": [
            "from how many different places have [ENT]"
        ],
        "subq2": [
            "people gone to the harward medical school"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "From how many different places have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "gone to the Harward Medical School",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "From how many different places have [INQL] people [DES] gone to the Harward Medical School [INQR]",
        "subq1_no_decipher": [
            "From how many different places have [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "gone to the Harward Medical School"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3222",
        "question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the television show where mona marshall has given voice",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is distributed by comedy central",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the television show where mona marshall has given voice [DES] and is distributed by comedy central",
        "subq1": [
            "name the television show where mona marshall has given voice",
            "and is distributed by comedy central"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Mona Marshall has given voice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is distributed by Comedy Central",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the television show [DES] where Mona Marshall has given voice [DES] and is distributed by Comedy Central",
        "subq1_no_decipher": [
            "Name the television show",
            "where Mona Marshall has given voice",
            "and is distributed by Comedy Central"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3636",
        "question": "What are Jerry Bock's musicals based upon",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what [ENT] based upon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are jerry bock's musicals",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what [INQL] are jerry bock's musicals [INQR] based upon",
        "subq1": [
            "what [ENT] based upon"
        ],
        "subq2": [
            "are jerry bock's musicals"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are [ENT] based upon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Jerry Bock's musicals",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What are [INQL] Jerry Bock's musicals [INQR] based upon",
        "subq1_no_decipher": [
            "What are [ENT] based upon"
        ],
        "subq2_no_decipher": [
            "Jerry Bock's musicals"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2938",
        "question": "Give me list of people who were the first to climb a peak in the Yosemite park",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me list of people who were the first to climb [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a peak in the yosemite park",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me list of people who were the first to climb [INQL] a peak in the yosemite park [INQR]",
        "subq1": [
            "give me list of people who were the first to climb [ENT]"
        ],
        "subq2": [
            "a peak in the yosemite park"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me list of people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who were the first to climb [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a peak in the Yosemite park",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me list of people [DES] who were the first to climb [INQL] a peak in the Yosemite park [INQR]",
        "subq1_no_decipher": [
            "Give me list of people",
            "who were the first to climb [ENT]"
        ],
        "subq2_no_decipher": [
            "a peak in the Yosemite park"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4491",
        "question": "What is Naval Support Activity Naples a part of",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT] a part of",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "naval support activity naples",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] naval support activity naples [INQR] a part of",
        "subq1": [
            "what is [ENT] a part of"
        ],
        "subq2": [
            "naval support activity naples"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is Naval Support Activity Naples a part of?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is Naval Support Activity Naples a part of",
        "subq1_no_decipher": [
            "What is Naval Support Activity Naples a part of?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3140",
        "question": "Who has allegiance is Colony of Virginia and buried in Montpelier",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who has allegiance is colony of virginia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and buried in montpelier",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who has allegiance is colony of virginia [DES] and buried in montpelier",
        "subq1": [
            "who has allegiance is colony of virginia",
            "and buried in montpelier"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who has allegiance is Colony of Virginia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and buried in Montpelier",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who has allegiance is Colony of Virginia [DES] and buried in Montpelier",
        "subq1_no_decipher": [
            "Who has allegiance is Colony of Virginia",
            "and buried in Montpelier"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "143",
        "question": "Was Tim Gunn a guest on The Broken Code",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Broken_Code> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was tim gunn",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a guest on the broken code",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was tim gunn [DES] a guest on the broken code",
        "subq1": [
            "was tim gunn",
            "a guest on the broken code"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Tim Gunn a guest on The Broken Code?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Tim Gunn a guest on The Broken Code",
        "subq1_no_decipher": [
            "Was Tim Gunn a guest on The Broken Code?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3577",
        "question": "What is the successor of PlayStation 4",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the successor of playstation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "4",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the successor of playstation [DES] 4",
        "subq1": [
            "what is the successor of playstation",
            "4"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the successor of PlayStation 4",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the successor of PlayStation 4",
        "subq1_no_decipher": [
            "What is the successor of PlayStation 4"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2782",
        "question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the sovereign state of the dafydd benfras",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where jasmine lowson is also citizen of",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the sovereign state of the dafydd benfras [DES] where jasmine lowson is also citizen of",
        "subq1": [
            "what is the sovereign state of the dafydd benfras",
            "where jasmine lowson is also citizen of"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the sovereign state of the Dafydd Benfras",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Jasmine Lowson is also citizen of",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the sovereign state of the Dafydd Benfras [DES] where Jasmine Lowson is also citizen of",
        "subq1_no_decipher": [
            "What is the sovereign state of the Dafydd Benfras",
            "where Jasmine Lowson is also citizen of"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "717",
        "question": "Who did their highschool from a school whose mascot was a fighting tiger",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Fighting_Tiger> . ?uri <http://dbpedia.org/ontology/highschool> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who did their highschool from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a school whose mascot was a fighting tiger",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who did their highschool from [INQL] a school whose mascot was a fighting tiger [INQR]",
        "subq1": [
            "who did their highschool from [ENT]"
        ],
        "subq2": [
            "a school whose mascot was a fighting tiger"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who did their highschool from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mascot was a fighting tiger",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who did their highschool from [INQL] a school [DES] whose mascot was a fighting tiger [INQR]",
        "subq1_no_decipher": [
            "Who did their highschool from [ENT]"
        ],
        "subq2_no_decipher": [
            "a school",
            "whose mascot was a fighting tiger"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1819",
        "question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/property/cityServed> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which destination of emerald air",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the city served by houston fort bend airport",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which destination of emerald air [DES] is also the city served by houston fort bend airport",
        "subq1": [
            "which destination of emerald air",
            "is also the city served by houston fort bend airport"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which destination of Emerald Air",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served by houston Fort Bend Airport",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which destination of Emerald Air [DES] is also the city [DES] served by houston Fort Bend Airport",
        "subq1_no_decipher": [
            "Which destination of Emerald Air",
            "is also the city",
            "served by houston Fort Bend Airport"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2502",
        "question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the region served by jerusalem institue of justice",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was also the conflict region in gazaisrael",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the region served by jerusalem institue of justice [DES] which was also the conflict region in gazaisrael",
        "subq1": [
            "name the region served by jerusalem institue of justice",
            "which was also the conflict region in gazaisrael"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the region",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served by Jerusalem Institue of Justice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was also the conflict region in GazaIsrael",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "name the region [DES] served by Jerusalem Institue of Justice [DES] which was also the conflict region in GazaIsrael",
        "subq1_no_decipher": [
            "name the region",
            "served by Jerusalem Institue of Justice",
            "which was also the conflict region in GazaIsrael"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4360",
        "question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the company whose key person is raymond conner",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and produces boeing ch-47 chinook",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the company whose key person is raymond conner [DES] and produces boeing ch-47 chinook",
        "subq1": [
            "name the company whose key person is raymond conner",
            "and produces boeing ch-47 chinook"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose key person is Raymond Conner",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and produces Boeing CH-47 Chinook",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the company [DES] whose key person is Raymond Conner [DES] and produces Boeing CH-47 Chinook",
        "subq1_no_decipher": [
            "Name the company",
            "whose key person is Raymond Conner",
            "and produces Boeing CH-47 Chinook"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4171",
        "question": "What is the total number of professions in which someone who has suicided worked",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of professions in which [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone who has suicided worked",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of professions in which [INQL] someone who has suicided worked [INQR]",
        "subq1": [
            "what is the total number of professions in which [ENT]"
        ],
        "subq2": [
            "someone who has suicided worked"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of professions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which [ENT] worked",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has suicided",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What is the total number of professions [DES] in which [INQL] someone [DES] who has suicided [INQR] worked",
        "subq1_no_decipher": [
            "What is the total number of professions",
            "in which [ENT] worked"
        ],
        "subq2_no_decipher": [
            "someone",
            "who has suicided"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "395",
        "question": "How many golf players are there in Arizona State Sun Devils",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many golf players",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are there in arizona state sun devils",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many golf players [DES] are there in arizona state sun devils",
        "subq1": [
            "how many golf players",
            "are there in arizona state sun devils"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many golf players",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are there in Arizona State Sun Devils",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many golf players [DES] are there in Arizona State Sun Devils",
        "subq1_no_decipher": [
            "How many golf players",
            "are there in Arizona State Sun Devils"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4836",
        "question": "Count the number of characters in Batman Live",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in batman live",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the number of characters [DES] in batman live",
        "subq1": [
            "count the number of characters",
            "in batman live"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of characters in Batman Live?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the number of characters [DES] in Batman Live [INQR]",
        "subq1_no_decipher": [
            "Count the number of characters in Batman Live?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4492",
        "question": "List the services provided by the company which provides Microsoft azure as one of the service",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the services provided by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company which provides microsoft azure as one of the service",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the services provided by [INQL] the company which provides microsoft azure as one of the service [INQR]",
        "subq1": [
            "list the services provided by [ENT]"
        ],
        "subq2": [
            "the company which provides microsoft azure as one of the service"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the services",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "provided by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which provides Microsoft azure as one of the service",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "List the services [DES] provided by [INQL] the company [DES] which provides Microsoft azure as one of the service [INQR]",
        "subq1_no_decipher": [
            "List the services",
            "provided by [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "which provides Microsoft azure as one of the service"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1365",
        "question": "What are some team members of the team based in Camp Nou",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Camp_Nou> . ?x <http://dbpedia.org/property/name> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some team members of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the team based in camp nou",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some team members of [INQL] the team based in camp nou [INQR]",
        "subq1": [
            "what are some team members of [ENT]"
        ],
        "subq2": [
            "the team based in camp nou"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some team members of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the team",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "based in Camp Nou",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some team members of [INQL] the team [DES] based in Camp Nou [INQR]",
        "subq1_no_decipher": [
            "What are some team members of [ENT]"
        ],
        "subq2_no_decipher": [
            "the team",
            "based in Camp Nou"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4558",
        "question": "Which universities are also known as the Tulane Green wave",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which universities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are also known as the tulane green wave",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which universities [DES] are also known as the tulane green wave",
        "subq1": [
            "which universities",
            "are also known as the tulane green wave"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which universities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are also known as the Tulane Green wave",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which universities [DES] are also known as the Tulane Green wave",
        "subq1_no_decipher": [
            "Which universities",
            "are also known as the Tulane Green wave"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "595",
        "question": "What is the branch of the politicians whose governor is Bill Clements",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Bill_Clements> . ?x <http://dbpedia.org/property/branch> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the branch of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the politicians whose governor is bill clements",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the branch of [INQL] the politicians whose governor is bill clements [INQR]",
        "subq1": [
            "what is the branch of [ENT]"
        ],
        "subq2": [
            "the politicians whose governor is bill clements"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the branch of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the politicians",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose governor is Bill Clements",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the branch of [INQL] the politicians [DES] whose governor is Bill Clements [INQR]",
        "subq1_no_decipher": [
            "What is the branch of [ENT]"
        ],
        "subq2_no_decipher": [
            "the politicians",
            "whose governor is Bill Clements"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3952",
        "question": "Who composed the episode after which came Butter's Very own Episode",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> . ?x <http://dbpedia.org/ontology/musicComposer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who composed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the episode after which came butter's very own episode",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who composed [INQL] the episode after which came butter's very own episode [INQR]",
        "subq1": [
            "who composed [ENT]"
        ],
        "subq2": [
            "the episode after which came butter's very own episode"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who composed [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the episode",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "after which came Butter's Very own Episode",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who composed [INQL] the episode [DES] after which came Butter's Very own Episode [INQR]",
        "subq1_no_decipher": [
            "Who composed [ENT]"
        ],
        "subq2_no_decipher": [
            "the episode",
            "after which came Butter's Very own Episode"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2914",
        "question": "What is the location country of Teperberg 1870",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the location country of teperberg 1870",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the location country of teperberg 1870 [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the location country of teperberg 1870"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the location country of Teperberg 1870 ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the location country of Teperberg 1870 [INQR]",
        "subq1_no_decipher": [
            "What is the location country of Teperberg 1870 ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2326",
        "question": "List the software developed by Shawn Fanning",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the software",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "developed by shawn fanning",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the software [DES] developed by shawn fanning",
        "subq1": [
            "list the software",
            "developed by shawn fanning"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the software",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "developed by Shawn Fanning",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the software [DES] developed by Shawn Fanning",
        "subq1_no_decipher": [
            "List the software",
            "developed by Shawn Fanning"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3766",
        "question": "What is the stylistic origin of the music genres where the Bass guitar is important",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the stylistic origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the music genres where the bass guitar is important",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the stylistic origin of [INQL] the music genres where the bass guitar is important [INQR]",
        "subq1": [
            "what is the stylistic origin of [ENT]"
        ],
        "subq2": [
            "the music genres where the bass guitar is important"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the stylistic origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the music genres",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where the Bass guitar is important",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the stylistic origin of [INQL] the music genres [DES] where the Bass guitar is important [INQR]",
        "subq1_no_decipher": [
            "What is the stylistic origin of [ENT]"
        ],
        "subq2_no_decipher": [
            "the music genres",
            "where the Bass guitar is important"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3440",
        "question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the other notable work of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the executive producer of the runaway bride episode of doctor who",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the other notable work of [INQL] the executive producer of the runaway bride episode of doctor who [INQR]",
        "subq1": [
            "what are the other notable work of [ENT]"
        ],
        "subq2": [
            "the executive producer of the runaway bride episode of doctor who"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the other notable work of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the executive producer of The Runaway Bride episode of Doctor Who",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What are the other notable work of [INQL] the executive producer of The Runaway Bride episode of Doctor Who [INQR]",
        "subq1_no_decipher": [
            "What are the other notable work of [ENT]"
        ],
        "subq2_no_decipher": [
            "the executive producer of The Runaway Bride episode of Doctor Who"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3851",
        "question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri. <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/ontology/voice> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was the voice actor of allen walker",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also gave voice to kimihiro watanuki",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was the voice actor of allen walker [DES] also gave voice to kimihiro watanuki",
        "subq1": [
            "who was the voice actor of allen walker",
            "also gave voice to kimihiro watanuki"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the voice actor of allen walker",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also gave voice to kimihiro watanuki",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who was the voice actor of allen walker [DES] also gave voice to kimihiro watanuki",
        "subq1_no_decipher": [
            "Who was the voice actor of allen walker",
            "also gave voice to kimihiro watanuki"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4132",
        "question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the office holder whose final resting place is north bend",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was part of siege of fort recovery conflict",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the office holder whose final resting place is north bend [DES] and was part of siege of fort recovery conflict",
        "subq1": [
            "name the office holder whose final resting place is north bend",
            "and was part of siege of fort recovery conflict"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the office holder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose final resting place is North Bend",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was part of Siege of fort recovery conflict",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the office holder [DES] whose final resting place is North Bend [DES] and was part of Siege of fort recovery conflict",
        "subq1_no_decipher": [
            "Name the office holder",
            "whose final resting place is North Bend",
            "and was part of Siege of fort recovery conflict"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4591",
        "question": "What type of engines are utilised by Purvis Eureka",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what type of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "engines are utilised by purvis eureka",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what type of [INQL] engines are utilised by purvis eureka [INQR]",
        "subq1": [
            "what type of [ENT]"
        ],
        "subq2": [
            "engines are utilised by purvis eureka"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What type of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "engines",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are utilised by Purvis Eureka",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What type of [INQL] engines [DES] are utilised by Purvis Eureka [INQR]",
        "subq1_no_decipher": [
            "What type of [ENT]"
        ],
        "subq2_no_decipher": [
            "engines",
            "are utilised by Purvis Eureka"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2143",
        "question": "Who edited Easy street",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who edited easy",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "street",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who edited easy [DES] street",
        "subq1": [
            "who edited easy",
            "street"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who edited Easy street ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who edited Easy street [DES]",
        "subq1_no_decipher": [
            "Who edited Easy street ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1571",
        "question": "Who were involved in the wars where Jonathan Haskell battled",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who were involved in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the wars where jonathan haskell battled",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who were involved in [INQL] the wars where jonathan haskell battled [INQR]",
        "subq1": [
            "who were involved in [ENT]"
        ],
        "subq2": [
            "the wars where jonathan haskell battled"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who were involved in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the wars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Jonathan Haskell battled",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who were involved in [INQL] the wars [DES] where Jonathan Haskell battled [INQR]",
        "subq1_no_decipher": [
            "Who were involved in [ENT]"
        ],
        "subq2_no_decipher": [
            "the wars",
            "where Jonathan Haskell battled"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4079",
        "question": "In which city was the film star of Singhasan Battisi born",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which city was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film star of singhasan battisi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which city was [INQL] the film star of singhasan battisi [INQR] born",
        "subq1": [
            "in which city was [ENT] born"
        ],
        "subq2": [
            "the film star of singhasan battisi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was [ENT] born",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film star of Singhasan Battisi",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which city [DES] was [INQL] the film star of Singhasan Battisi [INQR] born",
        "subq1_no_decipher": [
            "In which city",
            "was [ENT] born"
        ],
        "subq2_no_decipher": [
            "the film star of Singhasan Battisi"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1122",
        "question": "What are the reason served by Toll Global Express which is also the country of LPGA",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the reason served by toll global express",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the country of lpga",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the reason served by toll global express [DES] which is also the country of lpga",
        "subq1": [
            "what are the reason served by toll global express",
            "which is also the country of lpga"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the reason",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "served by Toll Global Express",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the country of LPGA",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What are the reason [DES] served by Toll Global Express [DES] which is also the country of LPGA",
        "subq1_no_decipher": [
            "What are the reason",
            "served by Toll Global Express",
            "which is also the country of LPGA"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2786",
        "question": "List the territory of Tonkin Campaign",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the territory of tonkin",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "campaign",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the territory of tonkin [DES] campaign",
        "subq1": [
            "list the territory of tonkin",
            "campaign"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the territory of Tonkin Campaign ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the territory of Tonkin Campaign [INQR]",
        "subq1_no_decipher": [
            "List the territory of Tonkin Campaign ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2967",
        "question": "For which teams did Ryan Powell play for",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "for which teams",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did ryan powell play for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "for which teams [DES] did ryan powell play for",
        "subq1": [
            "for which teams",
            "did ryan powell play for"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "For which teams did Ryan Powell play for?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "For which teams [DES] did Ryan Powell play for [INQR]",
        "subq1_no_decipher": [
            "For which teams did Ryan Powell play for?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2504",
        "question": "What are the awards won by the person who wrote the screen play for Lost in Rio",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/OSS_117:_Lost_in_Rio> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the awards won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person who wrote the screen play for lost in rio",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the awards won by [INQL] the person who wrote the screen play for lost in rio [INQR]",
        "subq1": [
            "what are the awards won by [ENT]"
        ],
        "subq2": [
            "the person who wrote the screen play for lost in rio"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the person",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who wrote the screen play for Lost in Rio",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What are the awards [DES] won by [INQL] the person [DES] who wrote the screen play for Lost in Rio [INQR]",
        "subq1_no_decipher": [
            "What are the awards",
            "won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the person",
            "who wrote the screen play for Lost in Rio"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3465",
        "question": "Total number of places where people drafted in the detroit pistons have died",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "total number of places where [ENT] have died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people drafted in the detroit pistons",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "total number of places where [INQL] people drafted in the detroit pistons [INQR] have died",
        "subq1": [
            "total number of places where [ENT] have died"
        ],
        "subq2": [
            "people drafted in the detroit pistons"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Total number of places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where [ENT] have died",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "drafted in the detroit pistons",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Total number of places [DES] where [INQL] people [DES] drafted in the detroit pistons [INQR] have died",
        "subq1_no_decipher": [
            "Total number of places",
            "where [ENT] have died"
        ],
        "subq2_no_decipher": [
            "people",
            "drafted in the detroit pistons"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "675",
        "question": "What band made The trial and One of these days song",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what band",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "made the trial and one of these days song",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what band [DES] made the trial and one of these days song",
        "subq1": [
            "what band",
            "made the trial and one of these days song"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What band",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "made The trial and One of these days song",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What band [DES] made The trial and One of these days song",
        "subq1_no_decipher": [
            "What band",
            "made The trial and One of these days song"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2808",
        "question": "Name the club of Julie Hastings",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the club of julie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hastings",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the club of julie [DES] hastings",
        "subq1": [
            "name the club of julie",
            "hastings"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the club of Julie Hastings ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the club of Julie Hastings [INQR]",
        "subq1_no_decipher": [
            "Name the club of Julie Hastings ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3348",
        "question": "From where does the river Upper Neretva start flowing",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "from where does [ENT] start flowing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the river upper neretva",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "from where does [INQL] the river upper neretva [INQR] start flowing",
        "subq1": [
            "from where does [ENT] start flowing"
        ],
        "subq2": [
            "the river upper neretva"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "From where does [ENT] start flowing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the river Upper Neretva",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "From where does [INQL] the river Upper Neretva [INQR] start flowing",
        "subq1_no_decipher": [
            "From where does [ENT] start flowing"
        ],
        "subq2_no_decipher": [
            "the river Upper Neretva"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "728",
        "question": "Name the university located in Indiana and has affiliations with Kaplan, Inc",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the university located in indiana",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has affiliations with kaplan, inc",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the university located in indiana [DES] and has affiliations with kaplan, inc",
        "subq1": [
            "name the university located in indiana",
            "and has affiliations with kaplan, inc"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "located in Indiana",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has affiliations with Kaplan, Inc",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the university [DES] located in Indiana [DES] and has affiliations with Kaplan, Inc",
        "subq1_no_decipher": [
            "Name the university",
            "located in Indiana",
            "and has affiliations with Kaplan, Inc"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "412",
        "question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the newspapers whose offices [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are situated in 1211 avenue of the americas",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the newspapers whose offices [INQL] are situated in 1211 avenue of the americas [INQR]",
        "subq1": [
            "list the newspapers whose offices [ENT]"
        ],
        "subq2": [
            "are situated in 1211 avenue of the americas"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the newspapers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose offices [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are situated in 1211 Avenue of the Americas",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the newspapers [DES] whose offices [INQL] are situated in 1211 Avenue of the Americas [INQR]",
        "subq1_no_decipher": [
            "List the newspapers",
            "whose offices [ENT]"
        ],
        "subq2_no_decipher": [
            "are situated in 1211 Avenue of the Americas"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3146",
        "question": "Was Morrissey a member of the Smiths",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was morrissey",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a member of the smiths",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was morrissey [DES] a member of the smiths",
        "subq1": [
            "was morrissey",
            "a member of the smiths"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Morrissey a member of the Smiths?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Morrissey a member of the Smiths",
        "subq1_no_decipher": [
            "Was Morrissey a member of the Smiths?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1516",
        "question": "Did Phillippe Cabot go to Columbia for studying",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did phillippe cabot",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "go to columbia for studying",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did phillippe cabot [DES] go to columbia for studying",
        "subq1": [
            "did phillippe cabot",
            "go to columbia for studying"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Phillippe Cabot go to Columbia for studying?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Phillippe Cabot go to Columbia for studying",
        "subq1_no_decipher": [
            "Did Phillippe Cabot go to Columbia for studying?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "825",
        "question": "What river originates in Kingston Ontario",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originates in kingston ontario",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what river [DES] originates in kingston ontario",
        "subq1": [
            "what river",
            "originates in kingston ontario"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originates in Kingston Ontario",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What river [DES] originates in Kingston Ontario",
        "subq1_no_decipher": [
            "What river",
            "originates in Kingston Ontario"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3267",
        "question": "By what style was Providence Chapel, Charlwood made",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "by what style",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was providence chapel, charlwood made",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "by what style [DES] was providence chapel, charlwood made",
        "subq1": [
            "by what style",
            "was providence chapel, charlwood made"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "By what style was Providence Chapel, Charlwood made?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "By what style [DES] was [INQL] Providence Chapel, Charlwood made [INQR]",
        "subq1_no_decipher": [
            "By what style was Providence Chapel, Charlwood made?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3974",
        "question": "For how many PMs did the politician work, whose successor was Kingsley Wood",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "for how many pms did the politician work, [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose successor was kingsley wood",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "for how many pms did the politician work, [INQL] whose successor was kingsley wood [INQR]",
        "subq1": [
            "for how many pms did the politician work, [ENT]"
        ],
        "subq2": [
            "whose successor was kingsley wood"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "For how many PMs did the politician work,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose successor was Kingsley Wood",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "For how many PMs did the politician work, [DES] [INQL] whose successor was Kingsley Wood [INQR]",
        "subq1_no_decipher": [
            "For how many PMs did the politician work,",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "whose successor was Kingsley Wood"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "616",
        "question": "list some companies founded by Jim Harris",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list some companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded by jim harris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list some companies [DES] founded by jim harris",
        "subq1": [
            "list some companies",
            "founded by jim harris"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list some companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded by Jim Harris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "list some companies [DES] founded by Jim Harris [INQR]",
        "subq1_no_decipher": [
            "list some companies",
            "founded by Jim Harris"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "114",
        "question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> . ?x <http://dbpedia.org/ontology/employer> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me the total number of employer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the engineers whose one of the employer is mcdonnell aircraft",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me the total number of employer of [INQL] the engineers whose one of the employer is mcdonnell aircraft [INQR]",
        "subq1": [
            "give me the total number of employer of [ENT]"
        ],
        "subq2": [
            "the engineers whose one of the employer is mcdonnell aircraft"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the total number of employer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the engineers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the employer is McDonnell Aircraft",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me the total number of employer of [INQL] the engineers [DES] whose one of the employer is McDonnell Aircraft [INQR]",
        "subq1_no_decipher": [
            "Give me the total number of employer of [ENT]"
        ],
        "subq2_no_decipher": [
            "the engineers",
            "whose one of the employer is McDonnell Aircraft"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "417",
        "question": "How many developers have games where I can hear Lightning McQueen",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many developers have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games where i can hear lightning mcqueen",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many developers have [INQL] games where i can hear lightning mcqueen [INQR]",
        "subq1": [
            "how many developers have [ENT]"
        ],
        "subq2": [
            "games where i can hear lightning mcqueen"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many developers have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where I can hear Lightning McQueen",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many developers have [INQL] games [DES] where I can hear Lightning McQueen [INQR]",
        "subq1_no_decipher": [
            "How many developers have [ENT]"
        ],
        "subq2_no_decipher": [
            "games",
            "where I can hear Lightning McQueen"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3069",
        "question": "Which university's affiliation is with Kalpan, Inc. and has campus at Iowa",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which university's affiliation is with kalpan, inc.",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has campus at iowa",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which university's affiliation is with kalpan, inc. [DES] and has campus at iowa",
        "subq1": [
            "which university's affiliation is with kalpan, inc.",
            "and has campus at iowa"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which university's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "affiliation is with Kalpan, Inc.",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has campus at Iowa",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which university's [DES] affiliation is with Kalpan, Inc. [DES] and has campus at Iowa",
        "subq1_no_decipher": [
            "Which university's",
            "affiliation is with Kalpan, Inc.",
            "and has campus at Iowa"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1625",
        "question": "How many record labels publish works of Jazz fusion",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many record labels publish [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "works of jazz fusion",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many record labels publish [INQL] works of jazz fusion [INQR]",
        "subq1": [
            "how many record labels publish [ENT]"
        ],
        "subq2": [
            "works of jazz fusion"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many record labels",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "publish [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "works of Jazz fusion",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many record labels [DES] publish [INQL] works of Jazz fusion [INQR]",
        "subq1_no_decipher": [
            "How many record labels",
            "publish [ENT]"
        ],
        "subq2_no_decipher": [
            "works of Jazz fusion"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4950",
        "question": "What are the regions in which the distributor of Secrets and Lies serves",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)> <http://dbpedia.org/ontology/distributor> ?x . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the regions in which [ENT] serves",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the distributor of secrets and lies",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the regions in which [INQL] the distributor of secrets and lies [INQR] serves",
        "subq1": [
            "what are the regions in which [ENT] serves"
        ],
        "subq2": [
            "the distributor of secrets and lies"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the regions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in which [ENT] serves",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the distributor of Secrets and Lies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the regions [DES] in which [INQL] the distributor of Secrets and Lies [INQR] serves",
        "subq1_no_decipher": [
            "What are the regions",
            "in which [ENT] serves"
        ],
        "subq2_no_decipher": [
            "the distributor of Secrets and Lies"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4185",
        "question": "List all the writers of the comics which has Robert Bernstein as one of the writer",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all the writers of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the comics which has robert bernstein as one of the writer",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all the writers of [INQL] the comics which has robert bernstein as one of the writer [INQR]",
        "subq1": [
            "list all the writers of [ENT]"
        ],
        "subq2": [
            "the comics which has robert bernstein as one of the writer"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all the writers of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the comics",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has Robert Bernstein as one of the writer",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List all the writers of [INQL] the comics [DES] which has Robert Bernstein as one of the writer [INQR]",
        "subq1_no_decipher": [
            "List all the writers of [ENT]"
        ],
        "subq2_no_decipher": [
            "the comics",
            "which has Robert Bernstein as one of the writer"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2896",
        "question": "What are the settlements whose neighboring municipalities is Lancy",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the settlements",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose neighboring municipalities is lancy",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the settlements [DES] whose neighboring municipalities is lancy",
        "subq1": [
            "what are the settlements",
            "whose neighboring municipalities is lancy"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the settlements",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose neighboring municipalities is Lancy",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the settlements [DES] whose neighboring municipalities is Lancy [INQR]",
        "subq1_no_decipher": [
            "What are the settlements",
            "whose neighboring municipalities is Lancy"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4671",
        "question": "Count the total number of hometown of the gymnasts whose one of the hometown in Russia",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hometown> <http://dbpedia.org/resource/Russia> . ?x <http://dbpedia.org/property/hometown> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the total number of hometown of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the gymnasts whose one of the hometown in russia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the total number of hometown of [INQL] the gymnasts whose one of the hometown in russia [INQR]",
        "subq1": [
            "count the total number of hometown of [ENT]"
        ],
        "subq2": [
            "the gymnasts whose one of the hometown in russia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the total number of hometown of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the gymnasts",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the hometown in Russia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the total number of hometown of [INQL] the gymnasts [DES] whose one of the hometown in Russia [INQR]",
        "subq1_no_decipher": [
            "Count the total number of hometown of [ENT]"
        ],
        "subq2_no_decipher": [
            "the gymnasts",
            "whose one of the hometown in Russia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2082",
        "question": "In which states does the river flow whose left tributary is Toms Creek",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which states does the river flow [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose left tributary is toms creek",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which states does the river flow [INQL] whose left tributary is toms creek [INQR]",
        "subq1": [
            "in which states does the river flow [ENT]"
        ],
        "subq2": [
            "whose left tributary is toms creek"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which states",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does the river flow [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose left tributary is Toms Creek",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which states [DES] does the river flow [INQL] whose left tributary is Toms Creek [INQR]",
        "subq1_no_decipher": [
            "In which states",
            "does the river flow [ENT]"
        ],
        "subq2_no_decipher": [
            "whose left tributary is Toms Creek"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "753",
        "question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the river whose source mountain is baikal mountains",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth location is arctic ocean",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the river whose source mountain is baikal mountains [DES] and mouth location is arctic ocean",
        "subq1": [
            "name the river whose source mountain is baikal mountains",
            "and mouth location is arctic ocean"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source mountain is Baikal Mountains",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth location is Arctic Ocean",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] whose source mountain is Baikal Mountains [DES] and mouth location is Arctic Ocean",
        "subq1_no_decipher": [
            "Name the river",
            "whose source mountain is Baikal Mountains",
            "and mouth location is Arctic Ocean"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2546",
        "question": "Count the PhD students whose thesis are supervised by National Medal of Science winners",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the phd students whose thesis [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are supervised by national medal of science winners",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the phd students whose thesis [INQL] are supervised by national medal of science winners [INQR]",
        "subq1": [
            "count the phd students whose thesis [ENT]"
        ],
        "subq2": [
            "are supervised by national medal of science winners"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the PhD students",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose thesis [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are supervised by National Medal of Science winners",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the PhD students [DES] whose thesis [INQL] are supervised by National Medal of Science winners [INQR]",
        "subq1_no_decipher": [
            "Count the PhD students",
            "whose thesis [ENT]"
        ],
        "subq2_no_decipher": [
            "are supervised by National Medal of Science winners"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3969",
        "question": "Which broadcast area of CFRX is also the place of birth of Anthony Raymond",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/Anthony_Raymond_Ceresko> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which broadcast area of cfrx",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the place of birth of anthony raymond",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which broadcast area of cfrx [DES] is also the place of birth of anthony raymond",
        "subq1": [
            "which broadcast area of cfrx",
            "is also the place of birth of anthony raymond"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which broadcast area of CFRX",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the place of birth of Anthony Raymond",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which broadcast area of CFRX [DES] is also the place of birth of Anthony Raymond",
        "subq1_no_decipher": [
            "Which broadcast area of CFRX",
            "is also the place of birth of Anthony Raymond"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3373",
        "question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Joey_McIntyre> . ?x <http://dbpedia.org/property/starring> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the total number of cast member of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the television shows whose actress is joey mcintyre",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the total number of cast member of [INQL] the television shows whose actress is joey mcintyre [INQR]",
        "subq1": [
            "count the total number of cast member of [ENT]"
        ],
        "subq2": [
            "the television shows whose actress is joey mcintyre"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the total number of cast member of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the television shows",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose actress is Joey McIntyre",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the total number of cast member of [INQL] the television shows [DES] whose actress is Joey McIntyre [INQR]",
        "subq1_no_decipher": [
            "Count the total number of cast member of [ENT]"
        ],
        "subq2_no_decipher": [
            "the television shows",
            "whose actress is Joey McIntyre"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4107",
        "question": "List all the awards won by the artist who has won SIGGRAPH",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all the awards won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artist who has won siggraph",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all the awards won by [INQL] the artist who has won siggraph [INQR]",
        "subq1": [
            "list all the awards won by [ENT]"
        ],
        "subq2": [
            "the artist who has won siggraph"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all the awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artist",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has won SIGGRAPH",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "List all the awards [DES] won by [INQL] the artist [DES] who has won SIGGRAPH [INQR]",
        "subq1_no_decipher": [
            "List all the awards",
            "won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the artist",
            "who has won SIGGRAPH"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2444",
        "question": "Where was david Scherman trained",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/property/training> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] trained",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "david scherman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] david scherman [INQR] trained",
        "subq1": [
            "where was [ENT] trained"
        ],
        "subq2": [
            "david scherman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was david Scherman trained ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was david Scherman trained [INQR]",
        "subq1_no_decipher": [
            "Where was david Scherman trained ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4380",
        "question": "Count the battles fought by Raoul Magrin-Vernerey",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the battles",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought by raoul magrin-vernerey",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the battles [DES] fought by raoul magrin-vernerey",
        "subq1": [
            "count the battles",
            "fought by raoul magrin-vernerey"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the battles fought by Raoul Magrin-Vernerey?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the battles [DES] fought by Raoul Magrin-Vernerey [INQR]",
        "subq1_no_decipher": [
            "Count the battles fought by Raoul Magrin-Vernerey?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1066",
        "question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which athlete",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the flag bearer for switzerland in 2004 and 2008 summer olympics",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which athlete [DES] was the flag bearer for switzerland in 2004 and 2008 summer olympics",
        "subq1": [
            "which athlete",
            "was the flag bearer for switzerland in 2004 and 2008 summer olympics"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which athlete",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which athlete [DES] was the flag bearer for Switzerland in 2004 and 2008 summer Olympics",
        "subq1_no_decipher": [
            "Which athlete",
            "was the flag bearer for Switzerland in 2004 and 2008 summer Olympics"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3913",
        "question": "Which nationalist group was responsible for foundation of Young Lords",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Lords> <http://dbpedia.org/property/international> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which nationalist group",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was responsible for foundation of young lords",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which nationalist group [DES] was responsible for foundation of young lords",
        "subq1": [
            "which nationalist group",
            "was responsible for foundation of young lords"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which nationalist group",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was responsible for foundation of Young Lords",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which nationalist group [DES] was responsible for foundation of Young Lords",
        "subq1_no_decipher": [
            "Which nationalist group",
            "was responsible for foundation of Young Lords"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3498",
        "question": "What award was won by the father of Angelina Jolie",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what award was won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the father of angelina jolie",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what award was won by [INQL] the father of angelina jolie [INQR]",
        "subq1": [
            "what award was won by [ENT]"
        ],
        "subq2": [
            "the father of angelina jolie"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What award",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the father of Angelina Jolie",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What award [DES] was won by [INQL] the father of Angelina Jolie [INQR]",
        "subq1_no_decipher": [
            "What award",
            "was won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the father of Angelina Jolie"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2738",
        "question": "What are the software whose programming language are Multilingual",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Multilingualism> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the software",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose programming language are multilingual",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the software [DES] whose programming language are multilingual",
        "subq1": [
            "what are the software",
            "whose programming language are multilingual"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the software",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose programming language are Multilingual",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the software [DES] whose programming language are Multilingual",
        "subq1_no_decipher": [
            "What are the software",
            "whose programming language are Multilingual"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4000",
        "question": "Was Marshall Arisman the cover artist in american psycho",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was marshall arisman",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the cover artist in american psycho",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was marshall arisman [DES] the cover artist in american psycho",
        "subq1": [
            "was marshall arisman",
            "the cover artist in american psycho"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Marshall Arisman the cover artist in american psycho?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Marshall Arisman the cover artist in american psycho",
        "subq1_no_decipher": [
            "Was Marshall Arisman the cover artist in american psycho?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1568",
        "question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which birthplace of liliya lobanova",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the location of the snake island",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which birthplace of liliya lobanova [DES] is also the location of the snake island",
        "subq1": [
            "which birthplace of liliya lobanova",
            "is also the location of the snake island"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which birthplace of Liliya Lobanova",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the location of the Snake Island",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which birthplace of Liliya Lobanova [DES] is also the location of the Snake Island",
        "subq1_no_decipher": [
            "Which birthplace of Liliya Lobanova",
            "is also the location of the Snake Island"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2427",
        "question": "Count all the stateless people",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count all the stateless",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count all the stateless [DES] people",
        "subq1": [
            "count all the stateless",
            "people"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count all the stateless people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count all the stateless [INQL] people [DES] Count all the stateless people",
        "subq1_no_decipher": [
            "Count all the stateless people"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3746",
        "question": "Josef Bhler belongs to which political party",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_B\u00fchler> <http://dbpedia.org/ontology/occupation> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "josef bhler belongs to",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which political party",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "josef bhler belongs to [DES] which political party",
        "subq1": [
            "josef bhler belongs to",
            "which political party"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Josef Bhler belongs to which political party?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Josef Bhler belongs to [DES] which political party",
        "subq1_no_decipher": [
            "Josef Bhler belongs to which political party?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4639",
        "question": "Where did the war take place where one of the commander was Zuo Zongtang",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did the war take place [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "where one of the commander was zuo zongtang",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did the war take place [INQL] where one of the commander was zuo zongtang [INQR]",
        "subq1": [
            "where did the war take place [ENT]"
        ],
        "subq2": [
            "where one of the commander was zuo zongtang"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the war take place [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "where one of the commander was Zuo Zongtang",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where did the war take place [INQL] where one of the commander was Zuo Zongtang [INQR]",
        "subq1_no_decipher": [
            "Where did the war take place [ENT]"
        ],
        "subq2_no_decipher": [
            "where one of the commander was Zuo Zongtang"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1687",
        "question": "In which place is the company which is known for Barbara bestor located",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/property/knownFor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which place is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company which is known for barbara bestor",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which place is [INQL] the company which is known for barbara bestor [INQR] located",
        "subq1": [
            "in which place is [ENT] located"
        ],
        "subq2": [
            "the company which is known for barbara bestor"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is [ENT] located",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is known for Barbara bestor",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In which place [DES] is [INQL] the company [DES] which is known for Barbara bestor [INQR] located",
        "subq1_no_decipher": [
            "In which place",
            "is [ENT] located"
        ],
        "subq2_no_decipher": [
            "the company",
            "which is known for Barbara bestor"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "851",
        "question": "What novels are belong to the genre of Utopian and dystopian fiction",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what novels",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are belong to the genre of utopian and dystopian fiction",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what novels [DES] are belong to the genre of utopian and dystopian fiction",
        "subq1": [
            "what novels",
            "are belong to the genre of utopian and dystopian fiction"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What novels",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are belong to the genre of Utopian and dystopian fiction",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What novels [DES] are belong to the genre of Utopian and dystopian fiction",
        "subq1_no_decipher": [
            "What novels",
            "are belong to the genre of Utopian and dystopian fiction"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3546",
        "question": "What are the movies written by Nick Castle",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "written by nick castle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the movies [DES] written by nick castle",
        "subq1": [
            "what are the movies",
            "written by nick castle"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "written by Nick Castle",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the movies [DES] written by Nick Castle",
        "subq1_no_decipher": [
            "What are the movies",
            "written by Nick Castle"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "895",
        "question": "On which river are there things belonging to zambezi river authority",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Zambezi_River_Authority> . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "on which river are there [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "things belonging to zambezi river authority",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "on which river are there [INQL] things belonging to zambezi river authority [INQR]",
        "subq1": [
            "on which river are there [ENT]"
        ],
        "subq2": [
            "things belonging to zambezi river authority"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "On which river are there [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "things",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "belonging to zambezi river authority",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "On which river are there [INQL] things [DES] belonging to zambezi river authority [INQR]",
        "subq1_no_decipher": [
            "On which river are there [ENT]"
        ],
        "subq2_no_decipher": [
            "things",
            "belonging to zambezi river authority"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4592",
        "question": "Is Egyptian Arabic belong to the Central Semitic Languages family",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is egyptian arabic",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "belong to the central semitic languages family",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is egyptian arabic [DES] belong to the central semitic languages family",
        "subq1": [
            "is egyptian arabic",
            "belong to the central semitic languages family"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Egyptian Arabic belong to the Central Semitic Languages family?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Egyptian Arabic belong to the Central Semitic Languages family",
        "subq1_no_decipher": [
            "Is Egyptian Arabic belong to the Central Semitic Languages family?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "335",
        "question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues at least once",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the artist of sings kristofferson",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also performed milk cow blues at least once",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the artist of sings kristofferson [DES] and also performed milk cow blues at least once",
        "subq1": [
            "who is the artist of sings kristofferson",
            "and also performed milk cow blues at least once"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the artist of Sings Kristofferson",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also performed Milk Cow Blues at least once",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the artist of Sings Kristofferson [DES] and also performed Milk Cow Blues at least once",
        "subq1_no_decipher": [
            "Who is the artist of Sings Kristofferson",
            "and also performed Milk Cow Blues at least once"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2839",
        "question": "Who has fought in wars under commander Arthur St Clair",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who has fought in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "wars under commander arthur st clair",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who has fought in [INQL] wars under commander arthur st clair [INQR]",
        "subq1": [
            "who has fought in [ENT]"
        ],
        "subq2": [
            "wars under commander arthur st clair"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who has fought in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "wars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "under commander Arthur St Clair",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who has fought in [INQL] wars [DES] under commander Arthur St Clair [INQR]",
        "subq1_no_decipher": [
            "Who has fought in [ENT]"
        ],
        "subq2_no_decipher": [
            "wars",
            "under commander Arthur St Clair"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3087",
        "question": "Which Paramount TV show was produced by Glen and Les Charles",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which paramount tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was produced by glen and les charles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which paramount tv show [DES] was produced by glen and les charles",
        "subq1": [
            "which paramount tv show",
            "was produced by glen and les charles"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which Paramount TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was produced by Glen and Les Charles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which Paramount TV show [DES] was produced by Glen and Les Charles",
        "subq1_no_decipher": [
            "Which Paramount TV show",
            "was produced by Glen and Les Charles"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1348",
        "question": "Name some basketball players who have played for chicago bulls",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name some basketball players",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who have played for chicago bulls",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name some basketball players [DES] who have played for chicago bulls",
        "subq1": [
            "name some basketball players",
            "who have played for chicago bulls"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name some basketball players",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "played for chicago bulls",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name some basketball players [DES] who have [INQL] played for chicago bulls [INQR]",
        "subq1_no_decipher": [
            "Name some basketball players",
            "who have [ENT]"
        ],
        "subq2_no_decipher": [
            "played for chicago bulls"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1015",
        "question": "Which owner of the national Herald india is the leader of Kumta",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which owner of the national herald india",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the leader of kumta",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which owner of the national herald india [DES] is the leader of kumta",
        "subq1": [
            "which owner of the national herald india",
            "is the leader of kumta"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which owner of the national Herald india",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the leader of Kumta",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which owner of the national Herald india [DES] is the leader of Kumta",
        "subq1_no_decipher": [
            "Which owner of the national Herald india",
            "is the leader of Kumta"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2816",
        "question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "was francisco pizarro of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the monarch of charles 5, of the roman empire",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "was francisco pizarro of [INQL] the monarch of charles 5, of the roman empire [INQR]",
        "subq1": [
            "was francisco pizarro of [ENT]"
        ],
        "subq2": [
            "the monarch of charles 5, of the roman empire"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Francisco Pizarro of [INQL] the monarch of Charles 5, of the roman empire [INQR]",
        "subq1_no_decipher": [
            "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1631",
        "question": "What is the largest city of Pulau Ubin",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the largest city of pulau",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "ubin",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the largest city of pulau [DES] ubin",
        "subq1": [
            "what is the largest city of pulau",
            "ubin"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the largest city of Pulau Ubin ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the largest city of Pulau Ubin [INQR]",
        "subq1_no_decipher": [
            "What is the largest city of Pulau Ubin ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2489",
        "question": "What is the origin of the musical artist of A Todo Romantic Style",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Todo_Romantic_Style> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/property/origin> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the musical artist of a todo romantic style",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the origin of [INQL] the musical artist of a todo romantic style [INQR]",
        "subq1": [
            "what is the origin of [ENT]"
        ],
        "subq2": [
            "the musical artist of a todo romantic style"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the origin of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the musical artist of A Todo Romantic Style",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the origin of [INQL] the musical artist of A Todo Romantic Style [INQR]",
        "subq1_no_decipher": [
            "What is the origin of [ENT]"
        ],
        "subq2_no_decipher": [
            "the musical artist of A Todo Romantic Style"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3730",
        "question": "Horses sired by Karinga Bay have participated in which races",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Karinga_Bay> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have participated in which races",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "horses sired by karinga bay",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] horses sired by karinga bay [INQR] have participated in which races",
        "subq1": [
            "[ENT] have participated in which races"
        ],
        "subq2": [
            "horses sired by karinga bay"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have participated in which races",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Horses",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "sired by Karinga Bay",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Horses [DES] sired by Karinga Bay [INQR] have participated in which races",
        "subq1_no_decipher": [
            "[ENT] have participated in which races"
        ],
        "subq2_no_decipher": [
            "Horses",
            "sired by Karinga Bay"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3251",
        "question": "What is the alma mater of the scientists known for String theory",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientists known for string theory",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the alma mater of [INQL] the scientists known for string theory [INQR]",
        "subq1": [
            "what is the alma mater of [ENT]"
        ],
        "subq2": [
            "the scientists known for string theory"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "known for String theory",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the alma mater of [INQL] the scientists [DES] known for String theory [INQR]",
        "subq1_no_decipher": [
            "What is the alma mater of [ENT]"
        ],
        "subq2_no_decipher": [
            "the scientists",
            "known for String theory"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4634",
        "question": "How many apes are there",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many apes are",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "there",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many apes are [DES] there",
        "subq1": [
            "how many apes are",
            "there"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many apes are there",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "How many apes are there",
        "subq1_no_decipher": [
            "How many apes are there"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2070",
        "question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is a common nickname given to both lyons township high school and the wheaton college in",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "massachusetts",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is a common nickname given to both lyons township high school and the wheaton college in [DES] massachusetts",
        "subq1": [
            "what is a common nickname given to both lyons township high school and the wheaton college in",
            "massachusetts"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is a common nickname given to both Lyons Township high school",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and the wheaton college in massachusetts",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is a common nickname given to both Lyons Township high school [DES] and the wheaton college in massachusetts",
        "subq1_no_decipher": [
            "What is a common nickname given to both Lyons Township high school",
            "and the wheaton college in massachusetts"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4452",
        "question": "Where do beauty queens with brown hair reside",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where do [ENT] reside",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "beauty queens with brown hair",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where do [INQL] beauty queens with brown hair [INQR] reside",
        "subq1": [
            "where do [ENT] reside"
        ],
        "subq2": [
            "beauty queens with brown hair"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where do [ENT] reside",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "beauty queens",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with brown hair",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where do [INQL] beauty queens [DES] with brown hair [INQR] reside",
        "subq1_no_decipher": [
            "Where do [ENT] reside"
        ],
        "subq2_no_decipher": [
            "beauty queens",
            "with brown hair"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4882",
        "question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._Animation> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the television shows one of whose distributor's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "divisions is warner bros. animation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the television shows one of whose distributor's [INQL] divisions is warner bros. animation [INQR]",
        "subq1": [
            "list the television shows one of whose distributor's [ENT]"
        ],
        "subq2": [
            "divisions is warner bros. animation"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the television shows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "one of whose distributor's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "divisions is Warner Bros. Animation",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the television shows [DES] one of whose distributor's [INQL] divisions is Warner Bros. Animation [INQR]",
        "subq1_no_decipher": [
            "List the television shows",
            "one of whose distributor's [ENT]"
        ],
        "subq2_no_decipher": [
            "divisions is Warner Bros. Animation"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1635",
        "question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the television show directed by simon fuller",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and judged by jennifier lopez",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the television show directed by simon fuller [DES] and judged by jennifier lopez",
        "subq1": [
            "name the television show directed by simon fuller",
            "and judged by jennifier lopez"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the television show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "directed by Simon Fuller",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and judged by Jennifier Lopez",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the television show [DES] directed by Simon Fuller [DES] and judged by Jennifier Lopez",
        "subq1_no_decipher": [
            "Name the television show",
            "directed by Simon Fuller",
            "and judged by Jennifier Lopez"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2479",
        "question": "Name the appointer of William Clark",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the appointer of william",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "clark",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the appointer of william [DES] clark",
        "subq1": [
            "name the appointer of william",
            "clark"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the appointer of William Clark ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the appointer of William Clark [INQR]",
        "subq1_no_decipher": [
            "Name the appointer of William Clark ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2265",
        "question": "in which movies have momoki kochi acted",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have momoki kochi acted",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which movies [DES] have momoki kochi acted",
        "subq1": [
            "in which movies",
            "have momoki kochi acted"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have momoki kochi acted",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "in which movies [DES] have momoki kochi acted",
        "subq1_no_decipher": [
            "in which movies",
            "have momoki kochi acted"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2959",
        "question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the base currency of the benelux",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is also used as money in kerguelen islands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the base currency of the benelux [DES] and is also used as money in kerguelen islands",
        "subq1": [
            "what is the base currency of the benelux",
            "and is also used as money in kerguelen islands"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the base currency of the Benelux",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is also used as money in Kerguelen Islands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the base currency of the Benelux [DES] and is also used as money in Kerguelen Islands",
        "subq1_no_decipher": [
            "What is the base currency of the Benelux",
            "and is also used as money in Kerguelen Islands"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4731",
        "question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> . ?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the mammals whose taxonomy is diprotodontia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and phylum is chordate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the mammals whose taxonomy is diprotodontia [DES] and phylum is chordate",
        "subq1": [
            "list the mammals whose taxonomy is diprotodontia",
            "and phylum is chordate"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the mammals",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose taxonomy is Diprotodontia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and phylum is Chordate",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the mammals [DES] whose taxonomy is Diprotodontia [DES] and phylum is Chordate",
        "subq1_no_decipher": [
            "List the mammals",
            "whose taxonomy is Diprotodontia",
            "and phylum is Chordate"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3059",
        "question": "Count the key people of the Clinton Foundation",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the key people of the clinton",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "foundation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the key people of the clinton [DES] foundation",
        "subq1": [
            "count the key people of the clinton",
            "foundation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the key people of the Clinton Foundation?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the key people of the Clinton Foundation [INQR]",
        "subq1_no_decipher": [
            "Count the key people of the Clinton Foundation?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2141",
        "question": "Name the company founded in New Mexico and provides Outlook.com as services",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the company founded in new mexico",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and provides outlook.com as services",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the company founded in new mexico [DES] and provides outlook.com as services",
        "subq1": [
            "name the company founded in new mexico",
            "and provides outlook.com as services"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded in New Mexico",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and provides Outlook.com as services",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the company [DES] founded in New Mexico [DES] and provides Outlook.com as services",
        "subq1_no_decipher": [
            "Name the company",
            "founded in New Mexico",
            "and provides Outlook.com as services"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3118",
        "question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which tv show was preceded by the spirit of christmas",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voice to the character was given by mona marshall",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which tv show was preceded by the spirit of christmas [DES] and voice to the character was given by mona marshall",
        "subq1": [
            "which tv show was preceded by the spirit of christmas",
            "and voice to the character was given by mona marshall"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was preceded by The spirit of Christmas",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and voice to the character was given by Mona Marshall",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which tv show [DES] was preceded by The spirit of Christmas [DES] and voice to the character was given by Mona Marshall",
        "subq1_no_decipher": [
            "Which tv show",
            "was preceded by The spirit of Christmas",
            "and voice to the character was given by Mona Marshall"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4725",
        "question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "under which common jurisdiction",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do trinity school, brentwood and buckhurst hill county high school fall",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "under which common jurisdiction [DES] do trinity school, brentwood and buckhurst hill county high school fall",
        "subq1": [
            "under which common jurisdiction",
            "do trinity school, brentwood and buckhurst hill county high school fall"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Under which common jurisdiction",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do Trinity School, Brentwood and Buckhurst Hill County High School fall",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Under which common jurisdiction [DES] do Trinity School, Brentwood and Buckhurst Hill County High School fall",
        "subq1_no_decipher": [
            "Under which common jurisdiction",
            "do Trinity School, Brentwood and Buckhurst Hill County High School fall"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4045",
        "question": "Music of how many things has been given by Akira Ifukube",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "music of how many things [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has been given by akira ifukube",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "music of how many things [INQL] has been given by akira ifukube [INQR]",
        "subq1": [
            "music of how many things [ENT]"
        ],
        "subq2": [
            "has been given by akira ifukube"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Music of how many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has been given by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Akira Ifukube",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Music of how many things [DES] has been given by [INQL] Akira Ifukube [INQR]",
        "subq1_no_decipher": [
            "Music of how many things",
            "has been given by [ENT]"
        ],
        "subq2_no_decipher": [
            "Akira Ifukube"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3356",
        "question": "What made jo garcia and merritt cabal both famous",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what made jo garcia and merritt cabal both",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "famous",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what made jo garcia and merritt cabal both [DES] famous",
        "subq1": [
            "what made jo garcia and merritt cabal both",
            "famous"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What made jo garcia and merritt cabal both famous",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What made jo garcia and merritt cabal both famous",
        "subq1_no_decipher": [
            "What made jo garcia and merritt cabal both famous"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2744",
        "question": "What was the career of some people who have committed suicide",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what was the career of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some people who have committed suicide",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what was the career of [INQL] some people who have committed suicide [INQR]",
        "subq1": [
            "what was the career of [ENT]"
        ],
        "subq2": [
            "some people who have committed suicide"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What was the career of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who have committed suicide",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What was the career of [INQL] some people [DES] who have committed suicide [INQR]",
        "subq1_no_decipher": [
            "What was the career of [ENT]"
        ],
        "subq2_no_decipher": [
            "some people",
            "who have committed suicide"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3506",
        "question": "In how many places are the tombs of people who died in Connecticut Colony",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Connecticut_Colony> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in how many places are the tombs of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people who died in connecticut colony",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in how many places are the tombs of [INQL] people who died in connecticut colony [INQR]",
        "subq1": [
            "in how many places are the tombs of [ENT]"
        ],
        "subq2": [
            "people who died in connecticut colony"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In how many places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are the tombs of [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who died in Connecticut Colony",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In how many places [DES] are the tombs of [INQL] people [DES] who died in Connecticut Colony [INQR]",
        "subq1_no_decipher": [
            "In how many places",
            "are the tombs of [ENT]"
        ],
        "subq2_no_decipher": [
            "people",
            "who died in Connecticut Colony"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1679",
        "question": "List the producer of the television shows distributed by FremantleMedia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the television shows distributed by fremantlemedia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the producer of [INQL] the television shows distributed by fremantlemedia [INQR]",
        "subq1": [
            "list the producer of [ENT]"
        ],
        "subq2": [
            "the television shows distributed by fremantlemedia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the television shows",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "distributed by FremantleMedia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the producer of [INQL] the television shows [DES] distributed by FremantleMedia [INQR]",
        "subq1_no_decipher": [
            "List the producer of [ENT]"
        ],
        "subq2_no_decipher": [
            "the television shows",
            "distributed by FremantleMedia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4249",
        "question": "Name the awards won by Elie Wiesel",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the awards [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "won by elie wiesel",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the awards [INQL] won by elie wiesel [INQR]",
        "subq1": [
            "name the awards [ENT]"
        ],
        "subq2": [
            "won by elie wiesel"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the awards won by Elie Wiesel ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the awards [DES] won by Elie Wiesel [INQR]",
        "subq1_no_decipher": [
            "Name the awards won by Elie Wiesel ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3147",
        "question": "Who are the producers of Marie Sisters",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who are the producers of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "marie sisters",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who are the producers of [INQL] marie sisters [INQR]",
        "subq1": [
            "who are the producers of [ENT]"
        ],
        "subq2": [
            "marie sisters"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the producers of Marie Sisters?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who are the producers of Marie Sisters [INQR]",
        "subq1_no_decipher": [
            "Who are the producers of Marie Sisters?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2294",
        "question": "Who won the silver medal when the bronze was won by Yang Yilin",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> . ?x <http://dbpedia.org/ontology/silverMedalist> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who won the silver medal [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "when the bronze was won by yang yilin",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who won the silver medal [INQL] when the bronze was won by yang yilin [INQR]",
        "subq1": [
            "who won the silver medal [ENT]"
        ],
        "subq2": [
            "when the bronze was won by yang yilin"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who won the silver medal [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "when the bronze was won by Yang Yilin",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who won the silver medal [INQL] when the bronze was won by Yang Yilin [INQR]",
        "subq1_no_decipher": [
            "Who won the silver medal [ENT]"
        ],
        "subq2_no_decipher": [
            "when the bronze was won by Yang Yilin"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "580",
        "question": "List the successor of successor of Hayden, Stone & Co",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/successor> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the successor of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "successor of hayden, stone & co",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the successor of [INQL] successor of hayden, stone & co [INQR]",
        "subq1": [
            "list the successor of [ENT]"
        ],
        "subq2": [
            "successor of hayden, stone & co"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the successor of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "successor of Hayden, Stone & Co",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "List the successor of [INQL] successor of Hayden, Stone & Co [INQR]",
        "subq1_no_decipher": [
            "List the successor of [ENT]"
        ],
        "subq2_no_decipher": [
            "successor of Hayden, Stone & Co"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1470",
        "question": "Count the number of battles fought by the military person involved in Morocco",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Morocco> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of battles fought by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the military person involved in morocco",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of battles fought by [INQL] the military person involved in morocco [INQR]",
        "subq1": [
            "count the number of battles fought by [ENT]"
        ],
        "subq2": [
            "the military person involved in morocco"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of battles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fought by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the military person",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "involved in Morocco",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count the number of battles [DES] fought by [INQL] the military person [DES] involved in Morocco [INQR]",
        "subq1_no_decipher": [
            "Count the number of battles",
            "fought by [ENT]"
        ],
        "subq2_no_decipher": [
            "the military person",
            "involved in Morocco"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4070",
        "question": "What is the origin of Xynisteri",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the origin of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "xynisteri",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the origin of [DES] xynisteri",
        "subq1": [
            "what is the origin of",
            "xynisteri"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the origin of Xynisteri?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the origin of [INQL] Xynisteri [INQR]",
        "subq1_no_decipher": [
            "What is the origin of Xynisteri?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3343",
        "question": "How many important works have been done by Russel Davies",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many important works",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been done by russel davies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many important works [DES] have been done by russel davies",
        "subq1": [
            "how many important works",
            "have been done by russel davies"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many important works have been done by Russel Davies?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "How many important works [DES] have been done by Russel Davies [INQR]",
        "subq1_no_decipher": [
            "How many important works have been done by Russel Davies?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4583",
        "question": "Who are currently playing for Barcelona FC",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who are currently playing for barcelona",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fc",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who are currently playing for barcelona [DES] fc",
        "subq1": [
            "who are currently playing for barcelona",
            "fc"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are currently playing for Barcelona FC?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who are currently playing for Barcelona FC [INQR]",
        "subq1_no_decipher": [
            "Who are currently playing for Barcelona FC?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3672",
        "question": "Is Andrew Lincoln the narrator of Million Dollar Traders",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is andrew lincoln",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the narrator of million dollar traders",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is andrew lincoln [DES] the narrator of million dollar traders",
        "subq1": [
            "is andrew lincoln",
            "the narrator of million dollar traders"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Andrew Lincoln the narrator of Million Dollar Traders?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Andrew Lincoln the narrator of Million Dollar Traders",
        "subq1_no_decipher": [
            "Is Andrew Lincoln the narrator of Million Dollar Traders?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "559",
        "question": "Who is the owner of Saumarez",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saumarez_(horse)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the owner of saumarez",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the owner of saumarez [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the owner of saumarez"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of Saumarez ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of Saumarez [INQR]",
        "subq1_no_decipher": [
            "Who is the owner of Saumarez ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2849",
        "question": "What is telecasted on the network where Deborah Turness holds important position",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is telecasted on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the network where deborah turness holds important position",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is telecasted on [INQL] the network where deborah turness holds important position [INQR]",
        "subq1": [
            "what is telecasted on [ENT]"
        ],
        "subq2": [
            "the network where deborah turness holds important position"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is telecasted on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the network",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Deborah Turness holds important position",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is telecasted on [INQL] the network [DES] where Deborah Turness holds important position [INQR]",
        "subq1_no_decipher": [
            "What is telecasted on [ENT]"
        ],
        "subq2_no_decipher": [
            "the network",
            "where Deborah Turness holds important position"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "512",
        "question": "Who is the fictional character whose relative is Vestigial Peter",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relative is vestigial peter",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the fictional character [DES] whose relative is vestigial peter",
        "subq1": [
            "who is the fictional character",
            "whose relative is vestigial peter"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose relative is Vestigial Peter",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the fictional character [DES] whose relative is Vestigial Peter",
        "subq1_no_decipher": [
            "Who is the fictional character",
            "whose relative is Vestigial Peter"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1081",
        "question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many home stadium are there, of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club seasons whose chairman is merritt paulson",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many home stadium are there, of [INQL] the soccer club seasons whose chairman is merritt paulson [INQR]",
        "subq1": [
            "how many home stadium are there, of [ENT]"
        ],
        "subq2": [
            "the soccer club seasons whose chairman is merritt paulson"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many home stadium are there, of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club seasons",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose chairman is Merritt Paulson",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many home stadium are there, of [INQL] the soccer club seasons [DES] whose chairman is Merritt Paulson [INQR]",
        "subq1_no_decipher": [
            "How many home stadium are there, of [ENT]"
        ],
        "subq2_no_decipher": [
            "the soccer club seasons",
            "whose chairman is Merritt Paulson"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1664",
        "question": "Name the alma mater of Ernest de Saisset",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the alma mater of ernest de",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "saisset",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the alma mater of ernest de [DES] saisset",
        "subq1": [
            "name the alma mater of ernest de",
            "saisset"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the alma mater of Ernest de Saisset ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the alma mater of Ernest de Saisset [INQR]",
        "subq1_no_decipher": [
            "Name the alma mater of Ernest de Saisset ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1012",
        "question": "What magazine companies are of form Limited liability company",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Limited_liability_company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what magazine companies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are of form limited liability company",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what magazine companies [DES] are of form limited liability company",
        "subq1": [
            "what magazine companies",
            "are of form limited liability company"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What magazine companies are of form Limited liability company?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What magazine companies [DES] are of form Limited liability company [INQR]",
        "subq1_no_decipher": [
            "What magazine companies are of form Limited liability company?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1931",
        "question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the driver of sa marino grand prix",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the pole driver of canadian grand proix",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the driver of sa marino grand prix [DES] is also the pole driver of canadian grand proix",
        "subq1": [
            "list the driver of sa marino grand prix",
            "is also the pole driver of canadian grand proix"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the driver of SA MArino Grand Prix",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the Pole driver of Canadian Grand Proix",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the driver of SA MArino Grand Prix [DES] is also the Pole driver of Canadian Grand Proix",
        "subq1_no_decipher": [
            "List the driver of SA MArino Grand Prix",
            "is also the Pole driver of Canadian Grand Proix"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1150",
        "question": "Where does John A Danaher III work",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where does [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "john a danaher iii work",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where does [INQL] john a danaher iii work [INQR]",
        "subq1": [
            "where does [ENT]"
        ],
        "subq2": [
            "john a danaher iii work"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where does John A Danaher III work?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where does John A Danaher III work [INQR]",
        "subq1_no_decipher": [
            "Where does John A Danaher III work?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2838",
        "question": "Name few movies directed by Tim Burton",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name few movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "directed by tim burton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name few movies [DES] directed by tim burton",
        "subq1": [
            "name few movies",
            "directed by tim burton"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name few movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "directed by Tim Burton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name few movies [DES] directed by Tim Burton",
        "subq1_no_decipher": [
            "Name few movies",
            "directed by Tim Burton"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "116",
        "question": "Where was Live in Detroit, MI recorded",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] recorded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "live in detroit, mi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] live in detroit, mi [INQR] recorded",
        "subq1": [
            "where was [ENT] recorded"
        ],
        "subq2": [
            "live in detroit, mi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Live in Detroit, MI recorded ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was [INQL] Live in Detroit, MI [INQR] recorded",
        "subq1_no_decipher": [
            "Where was Live in Detroit, MI recorded ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "740",
        "question": "Name all the bands which have members of QDT in them",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name all the bands which have [ENT] in them",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "members of qdt",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name all the bands which have [INQL] members of qdt [INQR] in them",
        "subq1": [
            "name all the bands which have [ENT] in them"
        ],
        "subq2": [
            "members of qdt"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name all the bands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have [ENT] in them",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "members of QDT",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name all the bands [DES] which have [INQL] members of QDT [INQR] in them",
        "subq1_no_decipher": [
            "Name all the bands",
            "which have [ENT] in them"
        ],
        "subq2_no_decipher": [
            "members of QDT"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4806",
        "question": "Which footballers did their high school in west Sacramento california",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/West_Sacramento,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which footballers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did their high school in west sacramento california",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which footballers [DES] did their high school in west sacramento california",
        "subq1": [
            "which footballers",
            "did their high school in west sacramento california"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which footballers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did their high school in west Sacramento california",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which footballers [DES] did their high school in west Sacramento california [INQR]",
        "subq1_no_decipher": [
            "Which footballers",
            "did their high school in west Sacramento california"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3675",
        "question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the names of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club seasons whose division is 2012 campeonato brasileiro srie a",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the names of [INQL] the soccer club seasons whose division is 2012 campeonato brasileiro srie a [INQR]",
        "subq1": [
            "list the names of [ENT]"
        ],
        "subq2": [
            "the soccer club seasons whose division is 2012 campeonato brasileiro srie a"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the names of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the soccer club seasons",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose division is 2012 Campeonato Brasileiro Srie A",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the names of [INQL] the soccer club seasons [DES] whose division is 2012 Campeonato Brasileiro Srie A [INQR]",
        "subq1_no_decipher": [
            "List the names of [ENT]"
        ],
        "subq2_no_decipher": [
            "the soccer club seasons",
            "whose division is 2012 Campeonato Brasileiro Srie A"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "830",
        "question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?uri. <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which successor of philippine ports authority",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the state of origin of ruben j. villote",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which successor of philippine ports authority [DES] is the state of origin of ruben j. villote",
        "subq1": [
            "which successor of philippine ports authority",
            "is the state of origin of ruben j. villote"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which successor of Philippine Ports Authority",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the state of origin of Ruben J. Villote",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which successor of Philippine Ports Authority [DES] is the state of origin of Ruben J. Villote",
        "subq1_no_decipher": [
            "Which successor of Philippine Ports Authority",
            "is the state of origin of Ruben J. Villote"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "119",
        "question": "What awards have been won by the executive producer of Timmy Time",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what awards have been won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the executive producer of timmy time",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what awards have been won by [INQL] the executive producer of timmy time [INQR]",
        "subq1": [
            "what awards have been won by [ENT]"
        ],
        "subq2": [
            "the executive producer of timmy time"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the executive producer of Timmy Time",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What awards [DES] have been won by [INQL] the executive producer of Timmy Time [INQR]",
        "subq1_no_decipher": [
            "What awards",
            "have been won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the executive producer of Timmy Time"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4853",
        "question": "Which american football team is owned by Mark davis and is located in O.co Colliseum",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Mark_Davis_(American_football)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which american football team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is owned by mark davis and is located in o.co colliseum",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which american football team [DES] is owned by mark davis and is located in o.co colliseum",
        "subq1": [
            "which american football team",
            "is owned by mark davis and is located in o.co colliseum"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which american football team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is owned by Mark davis",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and is located in O.co Colliseum",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which american football team [DES] is owned by Mark davis [DES] and is located in O.co Colliseum",
        "subq1_no_decipher": [
            "Which american football team",
            "is owned by Mark davis",
            "and is located in O.co Colliseum"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4738",
        "question": "The successor of Ulrich II, Count of East Frisia was born in what place",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] was born in what place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the successor of ulrich ii, count of east frisia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] the successor of ulrich ii, count of east frisia [INQR] was born in what place",
        "subq1": [
            "[ENT] was born in what place"
        ],
        "subq2": [
            "the successor of ulrich ii, count of east frisia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] was born in",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "what place",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "The successor of Ulrich II, Count of East Frisia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] The successor of Ulrich II, Count of East Frisia [INQR] was born in [DES] what place",
        "subq1_no_decipher": [
            "[ENT] was born in",
            "what place"
        ],
        "subq2_no_decipher": [
            "The successor of Ulrich II, Count of East Frisia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "635",
        "question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the prime minister of michael jeffery who is also the minister of williuam deane",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred": "[DES] who is the prime minister of michael jeffery who is also the minister of williuam deane",
        "subq1": [
            "who is the prime minister of michael jeffery who is also the minister of williuam deane"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the prime minister of Michael Jeffery",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is also the minister of Williuam Deane",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the prime minister of Michael Jeffery [DES] who is also the minister of Williuam Deane",
        "subq1_no_decipher": [
            "Who is the prime minister of Michael Jeffery",
            "who is also the minister of Williuam Deane"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4465",
        "question": "Who is the owner of the FC which owns the Cobham Training Centre",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the fc which owns the cobham training centre",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the owner of [INQL] the fc which owns the cobham training centre [INQR]",
        "subq1": [
            "who is the owner of [ENT]"
        ],
        "subq2": [
            "the fc which owns the cobham training centre"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the FC",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which owns the Cobham Training Centre",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of [INQL] the FC [DES] which owns the Cobham Training Centre [INQR]",
        "subq1_no_decipher": [
            "Who is the owner of [ENT]"
        ],
        "subq2_no_decipher": [
            "the FC",
            "which owns the Cobham Training Centre"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4364",
        "question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is considered to be the deciding person when it comes to crustaceans",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from the balanidae family",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is considered to be the deciding person when it comes to crustaceans [DES] from the balanidae family",
        "subq1": [
            "who is considered to be the deciding person when it comes to crustaceans",
            "from the balanidae family"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is considered to be the deciding person when it comes to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "crustaceans from the Balanidae family",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who is considered to be the deciding person when it comes to [INQL] crustaceans from the Balanidae family [INQR]",
        "subq1_no_decipher": [
            "Who is considered to be the deciding person when it comes to [ENT]"
        ],
        "subq2_no_decipher": [
            "crustaceans from the Balanidae family"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4142",
        "question": "What have some US citizens died of",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what have [ENT] died of",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some us citizens",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what have [INQL] some us citizens [INQR] died of",
        "subq1": [
            "what have [ENT] died of"
        ],
        "subq2": [
            "some us citizens"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What have [ENT] died of",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some US citizens",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What have [INQL] some US citizens [INQR] died of",
        "subq1_no_decipher": [
            "What have [ENT] died of"
        ],
        "subq2_no_decipher": [
            "some US citizens"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "991",
        "question": "What are some apes",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are some",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "apes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are some [DES] apes",
        "subq1": [
            "what are some",
            "apes"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are some apes?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are some apes simple",
        "subq1_no_decipher": [
            "What are some apes?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "876",
        "question": "Who is buried at the place governed by National Park Service",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> . ?uri <http://dbpedia.org/property/restingplace> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is buried at [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the place governed by national park service",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is buried at [INQL] the place governed by national park service [INQR]",
        "subq1": [
            "who is buried at [ENT]"
        ],
        "subq2": [
            "the place governed by national park service"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is buried at [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the place",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "governed by National Park Service",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is buried at [INQL] the place [DES] governed by National Park Service [INQR]",
        "subq1_no_decipher": [
            "Who is buried at [ENT]"
        ],
        "subq2_no_decipher": [
            "the place",
            "governed by National Park Service"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4",
        "question": "Name the municipality of Roberto Clemente Bridge",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the municipality of roberto clemente",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "bridge",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the municipality of roberto clemente [DES] bridge",
        "subq1": [
            "name the municipality of roberto clemente",
            "bridge"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the municipality of Roberto Clemente Bridge ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the municipality of Roberto Clemente Bridge [INQR]",
        "subq1_no_decipher": [
            "Name the municipality of Roberto Clemente Bridge ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3051",
        "question": "Which past members of the Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which past members of the conglomerate (american group)",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also sang take me there (blackstreet & ma song)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which past members of the conglomerate (american group) [DES] also sang take me there (blackstreet & ma song)",
        "subq1": [
            "which past members of the conglomerate (american group)",
            "also sang take me there (blackstreet & ma song)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which past members of the Conglomerate (American group)",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also sang Take Me There (Blackstreet & Ma song)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which past members of the Conglomerate (American group) [DES] also sang Take Me There (Blackstreet & Ma song)",
        "subq1_no_decipher": [
            "Which past members of the Conglomerate (American group)",
            "also sang Take Me There (Blackstreet & Ma song)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3124",
        "question": "List all the notable works of Russell T Davies",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list all the notable works of russell t",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "davies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list all the notable works of russell t [DES] davies",
        "subq1": [
            "list all the notable works of russell t",
            "davies"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List all the notable works of  Russell T Davies?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List all the notable works of [INQL] Russell T Davies [INQR]",
        "subq1_no_decipher": [
            "List all the notable works of  Russell T Davies?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2660",
        "question": "Which military unit garrison is Arlington County, Virginia and The Pentagon",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which military unit garrison",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is arlington county, virginia and the pentagon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which military unit garrison [DES] is arlington county, virginia and the pentagon",
        "subq1": [
            "which military unit garrison",
            "is arlington county, virginia and the pentagon"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which military unit",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "garrison is Arlington County, Virginia and The Pentagon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which military unit [DES] garrison is Arlington County, Virginia and The Pentagon",
        "subq1_no_decipher": [
            "Which military unit",
            "garrison is Arlington County, Virginia and The Pentagon"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2491",
        "question": "Name all the products produced by the producer of United States dollar",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/United_States_dollar> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name all the products produced by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the producer of united states dollar",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name all the products produced by [INQL] the producer of united states dollar [INQR]",
        "subq1": [
            "name all the products produced by [ENT]"
        ],
        "subq2": [
            "the producer of united states dollar"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name all the products",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "produced by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the producer of United States dollar",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name all the products [DES] produced by [INQL] the producer of United States dollar [INQR]",
        "subq1_no_decipher": [
            "Name all the products",
            "produced by [ENT]"
        ],
        "subq2_no_decipher": [
            "the producer of United States dollar"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3854",
        "question": "What is the launch site of Aquarius (rocket)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the launch site of aquarius (rocket)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the launch site of aquarius (rocket) [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the launch site of aquarius (rocket)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the launch site of Aquarius (rocket) ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the launch site of [INQL] Aquarius (rocket) [INQR]",
        "subq1_no_decipher": [
            "What is the launch site of Aquarius (rocket) ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1715",
        "question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the players",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose former teams are carolina panthers and indianapolis colts",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the players [DES] whose former teams are carolina panthers and indianapolis colts",
        "subq1": [
            "what are the players",
            "whose former teams are carolina panthers and indianapolis colts"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the players",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose former teams are Carolina Panthers and Indianapolis Colts",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the players [DES] whose former teams are Carolina Panthers and Indianapolis Colts",
        "subq1_no_decipher": [
            "What are the players",
            "whose former teams are Carolina Panthers and Indianapolis Colts"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1148",
        "question": "Count the total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> } ",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the total number of mammals whose phylum is chordate",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and order (taxonomy) is diprotodontia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the total number of mammals whose phylum is chordate [DES] and order (taxonomy) is diprotodontia",
        "subq1": [
            "count the total number of mammals whose phylum is chordate",
            "and order (taxonomy) is diprotodontia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the total number of mammals",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose phylum is Chordate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and order (taxonomy) is Diprotodontia",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Count the total number of mammals [DES] whose phylum is Chordate [DES] and order (taxonomy) is Diprotodontia",
        "subq1_no_decipher": [
            "Count the total number of mammals",
            "whose phylum is Chordate",
            "and order (taxonomy) is Diprotodontia"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3261",
        "question": "Who is the music composer of Kenny Dies",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the music composer of kenny dies",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the music composer of kenny dies [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the music composer of kenny dies"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the music composer of Kenny Dies ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the music composer of Kenny Dies [INQR]",
        "subq1_no_decipher": [
            "Who is the music composer of Kenny Dies ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "574",
        "question": "How many cities are around the sea into which the aegean sea flows",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many cities are around [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sea into which the aegean sea flows",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many cities are around [INQL] the sea into which the aegean sea flows [INQR]",
        "subq1": [
            "how many cities are around [ENT]"
        ],
        "subq2": [
            "the sea into which the aegean sea flows"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many cities are around [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sea",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "into which the aegean sea flows",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many cities are around [INQL] the sea [DES] into which the aegean sea flows [INQR]",
        "subq1_no_decipher": [
            "How many cities are around [ENT]"
        ],
        "subq2_no_decipher": [
            "the sea",
            "into which the aegean sea flows"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3769",
        "question": "Where did the office holder who is predecessor to Marco Aurelio Robles died",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the office holder who is predecessor to marco aurelio robles",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the office holder who is predecessor to marco aurelio robles [INQR] died",
        "subq1": [
            "where did [ENT] died"
        ],
        "subq2": [
            "the office holder who is predecessor to marco aurelio robles"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did [ENT] died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the office holder",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is predecessor to Marco Aurelio Robles",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the office holder [DES] who is predecessor to Marco Aurelio Robles [INQR] died",
        "subq1_no_decipher": [
            "Where did [ENT] died"
        ],
        "subq2_no_decipher": [
            "the office holder",
            "who is predecessor to Marco Aurelio Robles"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3736",
        "question": "Who is associated with the musical artists from Africa '70 (band) and Tony Allen",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is associated with [ENT] tony allen",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the musical artists from africa '70 (band) and",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is associated with [INQL] the musical artists from africa '70 (band) and [INQR] tony allen",
        "subq1": [
            "who is associated with [ENT] tony allen"
        ],
        "subq2": [
            "the musical artists from africa '70 (band) and"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is associated with the musical artists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from Africa '70 (band) and Tony Allen",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is associated with the musical artists [DES] from Africa '70 (band) and Tony Allen",
        "subq1_no_decipher": [
            "Who is associated with the musical artists",
            "from Africa '70 (band) and Tony Allen"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4146",
        "question": "Is the Hyundai Lavita assembled in Kulim",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is the hyundai lavita",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "assembled in kulim",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is the hyundai lavita [DES] assembled in kulim",
        "subq1": [
            "is the hyundai lavita",
            "assembled in kulim"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is the Hyundai Lavita assembled in Kulim?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is the Hyundai Lavita [DES] assembled in Kulim simple",
        "subq1_no_decipher": [
            "Is the Hyundai Lavita assembled in Kulim?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "853",
        "question": "What is the programme format of WWTR",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WWTR> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the programme format of wwtr",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the programme format of wwtr [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the programme format of wwtr"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the programme format of WWTR ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the programme format of WWTR [INQR]",
        "subq1_no_decipher": [
            "What is the programme format of WWTR ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1982",
        "question": "list the founders of Bream Bay",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/property/founder> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the founders of bream",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "bay",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the founders of bream [DES] bay",
        "subq1": [
            "list the founders of bream",
            "bay"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the founders of Bream Bay ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "list the founders of Bream Bay [INQR]",
        "subq1_no_decipher": [
            "list the founders of Bream Bay ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2774",
        "question": "Is Essex the Ceremonial County of West Tilbury",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is essex",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the ceremonial county of west tilbury",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is essex [DES] the ceremonial county of west tilbury",
        "subq1": [
            "is essex",
            "the ceremonial county of west tilbury"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Essex the Ceremonial County of West Tilbury?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Essex the Ceremonial County of West Tilbury",
        "subq1_no_decipher": [
            "Is Essex the Ceremonial County of West Tilbury?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1166",
        "question": "What is the total number of participant in conflict of SFOR",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of participant in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "conflict of sfor",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of participant in [INQL] conflict of sfor [INQR]",
        "subq1": [
            "what is the total number of participant in [ENT]"
        ],
        "subq2": [
            "conflict of sfor"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of participant in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "conflict of SFOR",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the total number of participant in [INQL] conflict of SFOR [INQR]",
        "subq1_no_decipher": [
            "What is the total number of participant in [ENT]"
        ],
        "subq2_no_decipher": [
            "conflict of SFOR"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "971",
        "question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Alexius_Meinong> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the people whose academic advisor has also mentored [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the thesis of alexius meinong",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the people whose academic advisor has also mentored [INQL] the thesis of alexius meinong [INQR]",
        "subq1": [
            "name the people whose academic advisor has also mentored [ENT]"
        ],
        "subq2": [
            "the thesis of alexius meinong"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose academic advisor [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has also mentored the thesis of Alexius Meinong",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the people [DES] whose academic advisor [INQL] has also mentored the thesis of Alexius Meinong [INQR]",
        "subq1_no_decipher": [
            "Name the people",
            "whose academic advisor [ENT]"
        ],
        "subq2_no_decipher": [
            "has also mentored the thesis of Alexius Meinong"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2701",
        "question": "Where is Denver Broncos located",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "denver broncos",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is [INQL] denver broncos [INQR] located",
        "subq1": [
            "where is [ENT] located"
        ],
        "subq2": [
            "denver broncos"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where is Denver Broncos located ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where is Denver Broncos located [DES] located",
        "subq1_no_decipher": [
            "Where is Denver Broncos located ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4495",
        "question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which serving railway line of the daund junction railway station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the home port of ins viraat",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which serving railway line of the daund junction railway station [DES] is the home port of ins viraat",
        "subq1": [
            "which serving railway line of the daund junction railway station",
            "is the home port of ins viraat"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which serving railway line of the Daund Junction railway station",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the home port of INS Viraat",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which serving railway line of the Daund Junction railway station [DES] is the home port of INS Viraat",
        "subq1_no_decipher": [
            "Which serving railway line of the Daund Junction railway station",
            "is the home port of INS Viraat"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3847",
        "question": "Which river flows through Hudson Highlands State park and also through Troy, New York",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri. <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/ontology/river> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "flows through hudson highlands state park and also through troy, new york",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which river [DES] flows through hudson highlands state park and also through troy, new york",
        "subq1": [
            "which river",
            "flows through hudson highlands state park and also through troy, new york"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "flows through Hudson Highlands State park",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also through Troy, New York",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which river [DES] flows through Hudson Highlands State park [DES] and also through Troy, New York",
        "subq1_no_decipher": [
            "Which river",
            "flows through Hudson Highlands State park",
            "and also through Troy, New York"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2368",
        "question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the university to which erica frank went,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and where ivan toplak was a club manager",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the university to which erica frank went, [DES] and where ivan toplak was a club manager",
        "subq1": [
            "what is the university to which erica frank went,",
            "and where ivan toplak was a club manager"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the university",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "to which Erica Frank went,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and where Ivan Toplak was a club manager",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the university [DES] to which Erica Frank went, [DES] and where Ivan Toplak was a club manager",
        "subq1_no_decipher": [
            "What is the university",
            "to which Erica Frank went,",
            "and where Ivan Toplak was a club manager"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4115",
        "question": "How many movies have been directed by Orson Welles",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been directed by orson welles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many movies [DES] have been directed by orson welles",
        "subq1": [
            "how many movies",
            "have been directed by orson welles"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been directed by Orson Welles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many movies [DES] have been directed by Orson Welles",
        "subq1_no_decipher": [
            "How many movies",
            "have been directed by Orson Welles"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4131",
        "question": "Which borough is common for Duddeston and Bordesley railway station",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which borough",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is common for duddeston and bordesley railway station",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which borough [DES] is common for duddeston and bordesley railway station",
        "subq1": [
            "which borough",
            "is common for duddeston and bordesley railway station"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which borough",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is common for Duddeston and Bordesley railway station",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which borough [DES] is common for Duddeston and Bordesley railway station",
        "subq1_no_decipher": [
            "Which borough",
            "is common for Duddeston and Bordesley railway station"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2950",
        "question": "Does Mauritius follow a parliamentary republic",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does mauritius",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "follow a parliamentary republic",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does mauritius [DES] follow a parliamentary republic",
        "subq1": [
            "does mauritius",
            "follow a parliamentary republic"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Mauritius follow a parliamentary republic?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Mauritius follow a parliamentary republic",
        "subq1_no_decipher": [
            "Does Mauritius follow a parliamentary republic?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "524",
        "question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the performer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the album whose subsequent work is willie nelson and family",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the performer of [INQL] the album whose subsequent work is willie nelson and family [INQR]",
        "subq1": [
            "who is the performer of [ENT]"
        ],
        "subq2": [
            "the album whose subsequent work is willie nelson and family"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the performer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the album",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose subsequent work is Willie Nelson and Family",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the performer of [INQL] the album [DES] whose subsequent work is Willie Nelson and Family [INQR]",
        "subq1_no_decipher": [
            "Who is the performer of [ENT]"
        ],
        "subq2_no_decipher": [
            "the album",
            "whose subsequent work is Willie Nelson and Family"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2455",
        "question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Fernando_Augustin> <http://dbpedia.org/property/residence> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the birthplace of ludovic boi",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the residence of fernando augustin",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the birthplace of ludovic boi [DES] which is also the residence of fernando augustin",
        "subq1": [
            "what is the birthplace of ludovic boi",
            "which is also the residence of fernando augustin"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the birthplace of Ludovic Boi",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the residence of Fernando Augustin",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the birthplace of Ludovic Boi [DES] which is also the residence of Fernando Augustin",
        "subq1_no_decipher": [
            "What is the birthplace of Ludovic Boi",
            "which is also the residence of Fernando Augustin"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1841",
        "question": "Who is the producer of album, which has the song Eclipse",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eclipse_(song)> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "album, which has the song eclipse",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the producer of [INQL] album, which has the song eclipse [INQR]",
        "subq1": [
            "who is the producer of [ENT]"
        ],
        "subq2": [
            "album, which has the song eclipse"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the producer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "album,",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has the song Eclipse",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the producer of [INQL] album, [DES] which has the song Eclipse [INQR]",
        "subq1_no_decipher": [
            "Who is the producer of [ENT]"
        ],
        "subq2_no_decipher": [
            "album,",
            "which has the song Eclipse"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "537",
        "question": "Which parties have their members live in the PM House, Colombo",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which parties have their members [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "live in the pm house, colombo",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which parties have their members [INQL] live in the pm house, colombo [INQR]",
        "subq1": [
            "which parties have their members [ENT]"
        ],
        "subq2": [
            "live in the pm house, colombo"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which parties",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have their members [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "live in the PM House, Colombo",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which parties [DES] have their members [INQL] live in the PM House, Colombo [INQR]",
        "subq1_no_decipher": [
            "Which parties",
            "have their members [ENT]"
        ],
        "subq2_no_decipher": [
            "live in the PM House, Colombo"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2806",
        "question": "Which awards have been given to scientists that graduated from NKU athens",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which awards have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "scientists that graduated from nku athens",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which awards have been given to [INQL] scientists that graduated from nku athens [INQR]",
        "subq1": [
            "which awards have been given to [ENT]"
        ],
        "subq2": [
            "scientists that graduated from nku athens"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which awards have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "scientists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that graduated from NKU athens",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which awards have been given to [INQL] scientists [DES] that graduated from NKU athens [INQR]",
        "subq1_no_decipher": [
            "Which awards have been given to [ENT]"
        ],
        "subq2_no_decipher": [
            "scientists",
            "that graduated from NKU athens"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4341",
        "question": "Ricky Gervais is the executive producer of the series having how many fictional characters",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] having how many fictional characters",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "ricky gervais is the executive producer of the series",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] ricky gervais is the executive producer of the series [INQR] having how many fictional characters",
        "subq1": [
            "[ENT] having how many fictional characters"
        ],
        "subq2": [
            "ricky gervais is the executive producer of the series"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] having",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "how many fictional characters",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "Ricky Gervais is the executive producer of",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the series",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "[INQL] Ricky Gervais is the executive producer of [DES] the series [INQR] having [DES] how many fictional characters",
        "subq1_no_decipher": [
            "[ENT] having",
            "how many fictional characters"
        ],
        "subq2_no_decipher": [
            "Ricky Gervais is the executive producer of",
            "the series"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3175",
        "question": "Did Jerry Rice study in Oktoc Mississippi",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did jerry rice",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "study in oktoc mississippi",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did jerry rice [DES] study in oktoc mississippi",
        "subq1": [
            "did jerry rice",
            "study in oktoc mississippi"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Jerry Rice study in Oktoc Mississippi?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Jerry Rice study in Oktoc Mississippi [INQR]",
        "subq1_no_decipher": [
            "Did Jerry Rice study in Oktoc Mississippi?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "784",
        "question": "Cable stayed bridges have been used to cross over how many things",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have been used to cross over how many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cable stayed bridges",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] cable stayed bridges [INQR] have been used to cross over how many things",
        "subq1": [
            "[ENT] have been used to cross over how many things"
        ],
        "subq2": [
            "cable stayed bridges"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have been used to cross over how many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Cable stayed bridges",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "[INQL] Cable stayed bridges [INQR] have been used to cross over how many things",
        "subq1_no_decipher": [
            "[ENT] have been used to cross over how many things"
        ],
        "subq2_no_decipher": [
            "Cable stayed bridges"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4057",
        "question": "Is north caucasian emirate have an islamic government",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Islam> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is north caucasian emirate",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have an islamic government",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is north caucasian emirate [DES] have an islamic government",
        "subq1": [
            "is north caucasian emirate",
            "have an islamic government"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is north caucasian emirate have an islamic government?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is north caucasian emirate [DES] have an islamic government",
        "subq1_no_decipher": [
            "Is north caucasian emirate have an islamic government?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1409",
        "question": "What are the television shows whose starting music is composed by Ron Grainer",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the television shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose starting music is composed by ron grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the television shows [DES] whose starting music is composed by ron grainer",
        "subq1": [
            "what are the television shows",
            "whose starting music is composed by ron grainer"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the television shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose starting music is composed by Ron Grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the television shows [DES] whose starting music is composed by Ron Grainer",
        "subq1_no_decipher": [
            "What are the television shows",
            "whose starting music is composed by Ron Grainer"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2537",
        "question": "Who influenced the author of The Shooting of Dan McGrew",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/influences> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who influenced [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the author of the shooting of dan mcgrew",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who influenced [INQL] the author of the shooting of dan mcgrew [INQR]",
        "subq1": [
            "who influenced [ENT]"
        ],
        "subq2": [
            "the author of the shooting of dan mcgrew"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who influenced [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the author of The Shooting of Dan McGrew",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who influenced [INQL] the author of The Shooting of Dan McGrew [INQR]",
        "subq1_no_decipher": [
            "Who influenced [ENT]"
        ],
        "subq2_no_decipher": [
            "the author of The Shooting of Dan McGrew"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "154",
        "question": "Raymond Johansen is the mayor of what city",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen>  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "raymond johansen is the mayor of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "what city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "raymond johansen is the mayor of [DES] what city",
        "subq1": [
            "raymond johansen is the mayor of",
            "what city"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Raymond Johansen is the mayor of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "what city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Raymond Johansen is the mayor of [DES] what city",
        "subq1_no_decipher": [
            "Raymond Johansen is the mayor of",
            "what city"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3009",
        "question": "What region was Gloria Schaffer born in, which also contains Newington",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Newington,_Connecticut> <http://dbpedia.org/ontology/isPartOf> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what region",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was gloria schaffer born in, which also contains newington",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what region [DES] was gloria schaffer born in, which also contains newington",
        "subq1": [
            "what region",
            "was gloria schaffer born in, which also contains newington"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What region",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was Gloria Schaffer born in,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which also contains Newington",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What region [DES] was Gloria Schaffer born in, [DES] which also contains Newington",
        "subq1_no_decipher": [
            "What region",
            "was Gloria Schaffer born in,",
            "which also contains Newington"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1686",
        "question": "List some teams for which someone who has played as a defender, now plays",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list some teams for which [ENT] now plays",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone who has played as a defender,",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list some teams for which [INQL] someone who has played as a defender, [INQR] now plays",
        "subq1": [
            "list some teams for which [ENT] now plays"
        ],
        "subq2": [
            "someone who has played as a defender,"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List some teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "for which [ENT] now plays",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has played as a defender,",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "List some teams [DES] for which [INQL] someone [DES] who has played as a defender, [INQR] now plays",
        "subq1_no_decipher": [
            "List some teams",
            "for which [ENT] now plays"
        ],
        "subq2_no_decipher": [
            "someone",
            "who has played as a defender,"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2901",
        "question": "Which rivers start from the Provinces of Zambia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which rivers start from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the provinces of zambia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which rivers start from [INQL] the provinces of zambia [INQR]",
        "subq1": [
            "which rivers start from [ENT]"
        ],
        "subq2": [
            "the provinces of zambia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which rivers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "start from [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the Provinces of Zambia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which rivers [DES] start from [INQL] the Provinces of Zambia [INQR]",
        "subq1_no_decipher": [
            "Which rivers",
            "start from [ENT]"
        ],
        "subq2_no_decipher": [
            "the Provinces of Zambia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4949",
        "question": "Who are the scientists known for the Manhattan Project",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who are the scientists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "known for the manhattan project",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who are the scientists [DES] known for the manhattan project",
        "subq1": [
            "who are the scientists",
            "known for the manhattan project"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the scientists",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "known for the Manhattan Project",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who are the scientists [DES] known for the Manhattan Project",
        "subq1_no_decipher": [
            "Who are the scientists",
            "known for the Manhattan Project"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3863",
        "question": "What are some dishes from the family of dishes which primarily use flour",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> . ?uri <http://dbpedia.org/ontology/type> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some dishes from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the family of dishes which primarily use flour",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some dishes from [INQL] the family of dishes which primarily use flour [INQR]",
        "subq1": [
            "what are some dishes from [ENT]"
        ],
        "subq2": [
            "the family of dishes which primarily use flour"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some dishes from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the family of dishes",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which primarily use flour",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some dishes from [INQL] the family of dishes [DES] which primarily use flour [INQR]",
        "subq1_no_decipher": [
            "What are some dishes from [ENT]"
        ],
        "subq2_no_decipher": [
            "the family of dishes",
            "which primarily use flour"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2733",
        "question": "Which religion do the people follow, whose constituency is Jadavpur",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which religion do the people follow, [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose constituency is jadavpur",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which religion do the people follow, [INQL] whose constituency is jadavpur [INQR]",
        "subq1": [
            "which religion do the people follow, [ENT]"
        ],
        "subq2": [
            "whose constituency is jadavpur"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which religion",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "do the people follow, [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose constituency is Jadavpur",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which religion [DES] do the people follow, [INQL] whose constituency is Jadavpur [INQR]",
        "subq1_no_decipher": [
            "Which religion",
            "do the people follow, [ENT]"
        ],
        "subq2_no_decipher": [
            "whose constituency is Jadavpur"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1895",
        "question": "In which region is the rival school of Somerset, Massachusetts located",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which region is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rival school of somerset, massachusetts",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which region is [INQL] the rival school of somerset, massachusetts [INQR] located",
        "subq1": [
            "in which region is [ENT] located"
        ],
        "subq2": [
            "the rival school of somerset, massachusetts"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which region",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is [ENT] located",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rival school of Somerset, Massachusetts",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which region [DES] is [INQL] the rival school of Somerset, Massachusetts [INQR] located",
        "subq1_no_decipher": [
            "In which region",
            "is [ENT] located"
        ],
        "subq2_no_decipher": [
            "the rival school of Somerset, Massachusetts"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "569",
        "question": "Which key person of Clinton Foundation is also the president of Jim Sasser",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which key person of clinton foundation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of jim sasser",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which key person of clinton foundation [DES] is also the president of jim sasser",
        "subq1": [
            "which key person of clinton foundation",
            "is also the president of jim sasser"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which key person of Clinton Foundation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the president of Jim Sasser",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which key person of Clinton Foundation [DES] is also the president of Jim Sasser",
        "subq1_no_decipher": [
            "Which key person of Clinton Foundation",
            "is also the president of Jim Sasser"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1816",
        "question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did the athlete start his career, [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who did his highschool in red lion area school district",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did the athlete start his career, [INQL] who did his highschool in red lion area school district [INQR]",
        "subq1": [
            "where did the athlete start his career, [ENT]"
        ],
        "subq2": [
            "who did his highschool in red lion area school district"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the athlete start his career,",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who did his highschool in Red Lion Area School District",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did the athlete start his career, [DES] [INQL] who did his highschool in Red Lion Area School District [INQR]",
        "subq1_no_decipher": [
            "Where did the athlete start his career,",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "who did his highschool in Red Lion Area School District"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2065",
        "question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name a person who works in open society foundation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has wife named susan weber soros",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name a person who works in open society foundation [DES] and has wife named susan weber soros",
        "subq1": [
            "name a person who works in open society foundation",
            "and has wife named susan weber soros"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name a person",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who works in Open Society Foundation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has wife named Susan Weber Soros",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name a person [DES] who works in Open Society Foundation [DES] and has wife named Susan Weber Soros",
        "subq1_no_decipher": [
            "Name a person",
            "who works in Open Society Foundation",
            "and has wife named Susan Weber Soros"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "127",
        "question": "How many things are crossed over by bridges which can carry cars",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many things are crossed over by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "bridges which can carry cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many things are crossed over by [INQL] bridges which can carry cars [INQR]",
        "subq1": [
            "how many things are crossed over by [ENT]"
        ],
        "subq2": [
            "bridges which can carry cars"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are crossed over by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "bridges",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which can carry cars",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many things [DES] are crossed over by [INQL] bridges [DES] which can carry cars [INQR]",
        "subq1_no_decipher": [
            "How many things",
            "are crossed over by [ENT]"
        ],
        "subq2_no_decipher": [
            "bridges",
            "which can carry cars"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3394",
        "question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "sculpted by josh friedmann was portrayed in terminator 3",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which fictional character [DES] sculpted by josh friedmann was portrayed in terminator 3",
        "subq1": [
            "which fictional character",
            "sculpted by josh friedmann was portrayed in terminator 3"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "sculpted by Josh Friedmann",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was portrayed in Terminator 3",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which fictional character [DES] sculpted by Josh Friedmann [DES] was portrayed in Terminator 3",
        "subq1_no_decipher": [
            "Which fictional character",
            "sculpted by Josh Friedmann",
            "was portrayed in Terminator 3"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3327",
        "question": "Which team won the American Football League",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won the american football league",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which team [DES] won the american football league",
        "subq1": [
            "which team",
            "won the american football league"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which team won the American Football League?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which team [DES] won the American Football League [INQR]",
        "subq1_no_decipher": [
            "Which team won the American Football League?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4986",
        "question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which currency",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can i use both in kerguelen islands and french southern and antarctic lands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which currency [DES] can i use both in kerguelen islands and french southern and antarctic lands",
        "subq1": [
            "which currency",
            "can i use both in kerguelen islands and french southern and antarctic lands"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which currency",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "can I use both in Kerguelen islands and French southern and antarctic lands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which currency [DES] can I use both in Kerguelen islands and French southern and antarctic lands",
        "subq1_no_decipher": [
            "Which currency",
            "can I use both in Kerguelen islands and French southern and antarctic lands"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2975",
        "question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TradeUnion>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the founder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the trade union which affiliates amalgamated association of iron and steel workers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the founder of [INQL] the trade union which affiliates amalgamated association of iron and steel workers [INQR]",
        "subq1": [
            "who is the founder of [ENT]"
        ],
        "subq2": [
            "the trade union which affiliates amalgamated association of iron and steel workers"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the founder of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the trade union",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which affiliates Amalgamated Association of Iron and Steel Workers",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the founder of [INQL] the trade union [DES] which affiliates Amalgamated Association of Iron and Steel Workers [INQR]",
        "subq1_no_decipher": [
            "Who is the founder of [ENT]"
        ],
        "subq2_no_decipher": [
            "the trade union",
            "which affiliates Amalgamated Association of Iron and Steel Workers"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "980",
        "question": "Which leader of United States House of Representatives was the appointer of ohn Drayton",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which leader of united states house of representatives",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the appointer of ohn drayton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which leader of united states house of representatives [DES] was the appointer of ohn drayton",
        "subq1": [
            "which leader of united states house of representatives",
            "was the appointer of ohn drayton"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which leader of United States House of Representatives",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the appointer of ohn Drayton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which leader of United States House of Representatives [DES] was the appointer of ohn Drayton",
        "subq1_no_decipher": [
            "Which leader of United States House of Representatives",
            "was the appointer of ohn Drayton"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2300",
        "question": "Is fox belong to the phylum of Chordate",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is fox",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "belong to the phylum of chordate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is fox [DES] belong to the phylum of chordate",
        "subq1": [
            "is fox",
            "belong to the phylum of chordate"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is fox belong to the phylum of Chordate?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is fox belong to the phylum of Chordate",
        "subq1_no_decipher": [
            "Is fox belong to the phylum of Chordate?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "190",
        "question": "Which researchers received fellowship from Royal Society",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which researchers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "received fellowship from royal society",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which researchers [DES] received fellowship from royal society",
        "subq1": [
            "which researchers",
            "received fellowship from royal society"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which researchers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "received fellowship from Royal Society",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which researchers [DES] received fellowship from Royal Society",
        "subq1_no_decipher": [
            "Which researchers",
            "received fellowship from Royal Society"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1139",
        "question": "Which president of United States had vice president as John Adams",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which president of united states",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had vice president as john adams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which president of united states [DES] had vice president as john adams",
        "subq1": [
            "which president of united states",
            "had vice president as john adams"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which president of United States",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had vice president as John Adams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which president of United States [DES] had vice president as John Adams",
        "subq1_no_decipher": [
            "Which president of United States",
            "had vice president as John Adams"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "699",
        "question": "Where was James H. Fields buried",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] buried",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "james h. fields",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] james h. fields [INQR] buried",
        "subq1": [
            "where was [ENT] buried"
        ],
        "subq2": [
            "james h. fields"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was James H. Fields buried ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was James H. Fields buried [INQR]",
        "subq1_no_decipher": [
            "Where was James H. Fields buried ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4780",
        "question": "Is Henry Knox a commander of Continental Artillery Regiment",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is henry knox",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a commander of continental artillery regiment",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is henry knox [DES] a commander of continental artillery regiment",
        "subq1": [
            "is henry knox",
            "a commander of continental artillery regiment"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Henry Knox a commander of Continental Artillery Regiment?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Henry Knox a commander of Continental Artillery Regiment",
        "subq1_no_decipher": [
            "Is Henry Knox a commander of Continental Artillery Regiment?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "606",
        "question": "What is the commander of Battle of Brownstown",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the commander of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "battle of brownstown",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the commander of [INQL] battle of brownstown [INQR]",
        "subq1": [
            "what is the commander of [ENT]"
        ],
        "subq2": [
            "battle of brownstown"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the commander of Battle of Brownstown ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the commander of [INQL] Battle of Brownstown [INQR]",
        "subq1_no_decipher": [
            "What is the commander of Battle of Brownstown ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4276",
        "question": "Is Baker's Dozen Donuts in the coffee industry",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is baker's dozen donuts",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the coffee industry",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is baker's dozen donuts [DES] in the coffee industry",
        "subq1": [
            "is baker's dozen donuts",
            "in the coffee industry"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Baker's Dozen Donuts in the coffee industry?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Baker's Dozen Donuts [DES] in the coffee industry",
        "subq1_no_decipher": [
            "Is Baker's Dozen Donuts in the coffee industry?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "301",
        "question": "What is Jon Speelman famous for",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what [ENT] famous for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is jon speelman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what [INQL] is jon speelman [INQR] famous for",
        "subq1": [
            "what [ENT] famous for"
        ],
        "subq2": [
            "is jon speelman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is Jon Speelman famous for?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is Jon Speelman famous for [INQR]",
        "subq1_no_decipher": [
            "What is Jon Speelman famous for?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3420",
        "question": "Who is the fictional character whose family member is Padme Amidala",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose family member is padme amidala",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the fictional character [DES] whose family member is padme amidala",
        "subq1": [
            "who is the fictional character",
            "whose family member is padme amidala"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose family member is Padme Amidala",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the fictional character [DES] whose family member is Padme Amidala",
        "subq1_no_decipher": [
            "Who is the fictional character",
            "whose family member is Padme Amidala"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4820",
        "question": "What company is the one which wrote the google web toolkit and PlayN",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the one which wrote the google web toolkit and playn",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what company [DES] is the one which wrote the google web toolkit and playn",
        "subq1": [
            "what company",
            "is the one which wrote the google web toolkit and playn"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the one",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which wrote the google web toolkit and PlayN",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What company [DES] is the one [DES] which wrote the google web toolkit and PlayN",
        "subq1_no_decipher": [
            "What company",
            "is the one",
            "which wrote the google web toolkit and PlayN"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1060",
        "question": "How many different songwriters have had their songs recorded in London",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many different songwriters have had their songs [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "recorded in london",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many different songwriters have had their songs [INQL] recorded in london [INQR]",
        "subq1": [
            "how many different songwriters have had their songs [ENT]"
        ],
        "subq2": [
            "recorded in london"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many different songwriters",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have had [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "their songs",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "recorded in London",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many different songwriters [DES] have had [INQL] their songs [DES] recorded in London [INQR]",
        "subq1_no_decipher": [
            "How many different songwriters",
            "have had [ENT]"
        ],
        "subq2_no_decipher": [
            "their songs",
            "recorded in London"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2565",
        "question": "Which are the automobile platform whose one of the automobile platform is Dodge",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which are the automobile platform [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the automobile platform is dodge",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which are the automobile platform [INQL] whose one of the automobile platform is dodge [INQR]",
        "subq1": [
            "which are the automobile platform [ENT]"
        ],
        "subq2": [
            "whose one of the automobile platform is dodge"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which are the automobile platform",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the automobile platform is Dodge",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which are the automobile platform [DES] whose one of the automobile platform is Dodge [INQR]",
        "subq1_no_decipher": [
            "Which are the automobile platform",
            "whose one of the automobile platform is Dodge"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4994",
        "question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> . ?x <http://dbpedia.org/property/combatant> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of other combatant of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the military conflicts whose combatant is choctaw",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the total number of other combatant of [INQL] the military conflicts whose combatant is choctaw [INQR]",
        "subq1": [
            "what is the total number of other combatant of [ENT]"
        ],
        "subq2": [
            "the military conflicts whose combatant is choctaw"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of other combatant of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the military conflicts",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose combatant is Choctaw",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the total number of other combatant of [INQL] the military conflicts [DES] whose combatant is Choctaw [INQR]",
        "subq1_no_decipher": [
            "What is the total number of other combatant of [ENT]"
        ],
        "subq2_no_decipher": [
            "the military conflicts",
            "whose combatant is Choctaw"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1069",
        "question": "List some pupils of National Science Medal winning scientists",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list some pupils of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "national science medal winning scientists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list some pupils of [INQL] national science medal winning scientists [INQR]",
        "subq1": [
            "list some pupils of [ENT]"
        ],
        "subq2": [
            "national science medal winning scientists"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List some pupils of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "National Science Medal winning",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "scientists",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List some pupils of [INQL] National Science Medal winning [DES] scientists [INQR]",
        "subq1_no_decipher": [
            "List some pupils of [ENT]"
        ],
        "subq2_no_decipher": [
            "National Science Medal winning",
            "scientists"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2524",
        "question": "Relatives of Moses used to follow which religions",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/veneratedIn> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] used to follow which religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "relatives of moses",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] relatives of moses [INQR] used to follow which religions",
        "subq1": [
            "[ENT] used to follow which religions"
        ],
        "subq2": [
            "relatives of moses"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] follow which religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Relatives of Moses",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "used to",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Relatives of Moses [INQR] used to [INQR] follow which religions",
        "subq1_no_decipher": [
            "[ENT] follow which religions"
        ],
        "subq2_no_decipher": [
            "Relatives of Moses",
            "used to"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2205",
        "question": "Where was Ne daj se, Nina first aired",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where was ne daj se, nina first",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "aired",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where was ne daj se, nina first [DES] aired",
        "subq1": [
            "where was ne daj se, nina first",
            "aired"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Ne daj se, Nina first aired ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was Ne daj se, Nina first aired [INQR]",
        "subq1_no_decipher": [
            "Where was Ne daj se, Nina first aired ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1243",
        "question": "Where did the 2015 MLS All-Star Game take place",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] take place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the 2015 mls all-star game",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the 2015 mls all-star game [INQR] take place",
        "subq1": [
            "where did [ENT] take place"
        ],
        "subq2": [
            "the 2015 mls all-star game"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the 2015 MLS All-Star Game take place?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the 2015 MLS All-Star Game [INQR] take place",
        "subq1_no_decipher": [
            "Where did the 2015 MLS All-Star Game take place?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "16",
        "question": "Is Nikolai Morozov the former coach of Stanislav Morozov",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is nikolai morozov",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the former coach of stanislav morozov",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is nikolai morozov [DES] the former coach of stanislav morozov",
        "subq1": [
            "is nikolai morozov",
            "the former coach of stanislav morozov"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Nikolai Morozov the former coach of Stanislav Morozov the former coach of Stanislav Morozov the former coach of Stanislav Morozov the former coach of Stanislav Morozov the former coach of Stanislav Morozov",
        "subq1_no_decipher": [
            "Is Nikolai Morozov the former coach of Stanislav Morozov?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3120",
        "question": "Did Alexandre Tichonov study at the Moscow university",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Moscow> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did alexandre tichonov",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "study at the moscow university",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did alexandre tichonov [DES] study at the moscow university",
        "subq1": [
            "did alexandre tichonov",
            "study at the moscow university"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Alexandre Tichonov study at the Moscow university?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Alexandre Tichonov study at the Moscow university",
        "subq1_no_decipher": [
            "Did Alexandre Tichonov study at the Moscow university?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4642",
        "question": "What is the name of the homeground of football team Panionios G.S.S",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the name of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the homeground of football team panionios g.s.s",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the name of [INQL] the homeground of football team panionios g.s.s [INQR]",
        "subq1": [
            "what is the name of [ENT]"
        ],
        "subq2": [
            "the homeground of football team panionios g.s.s"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the name of the homeground of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "football team Panionios G.S.S",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the name of the homeground of [INQL] football team Panionios G.S.S [INQR]",
        "subq1_no_decipher": [
            "What is the name of the homeground of [ENT]"
        ],
        "subq2_no_decipher": [
            "football team Panionios G.S.S"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "815",
        "question": "List presidents of the school whose one of the president is Charles. Prince of Wales",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list presidents of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the school whose one of the president is charles. prince of wales",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list presidents of [INQL] the school whose one of the president is charles. prince of wales [INQR]",
        "subq1": [
            "list presidents of [ENT]"
        ],
        "subq2": [
            "the school whose one of the president is charles. prince of wales"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List presidents of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the school",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the president is Charles. Prince of Wales",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List presidents of [INQL] the school [DES] whose one of the president is Charles. Prince of Wales [INQR]",
        "subq1_no_decipher": [
            "List presidents of [ENT]"
        ],
        "subq2_no_decipher": [
            "the school",
            "whose one of the president is Charles. Prince of Wales"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3067",
        "question": "Does Timothy Morton study Buddhism",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does timothy morton",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "study buddhism",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does timothy morton [DES] study buddhism",
        "subq1": [
            "does timothy morton",
            "study buddhism"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Timothy Morton study Buddhism?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Timothy Morton study Buddhism [INQR] study Buddhism simple",
        "subq1_no_decipher": [
            "Does Timothy Morton study Buddhism?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4784",
        "question": "Brian Moriarty designed video games written by whom",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] written by whom",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "brian moriarty designed video games",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] brian moriarty designed video games [INQR] written by whom",
        "subq1": [
            "[ENT] written by whom"
        ],
        "subq2": [
            "brian moriarty designed video games"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] written by whom",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Brian Moriarty designed",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "video games",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Brian Moriarty designed [DES] video games [INQR] written by whom",
        "subq1_no_decipher": [
            "[ENT] written by whom"
        ],
        "subq2_no_decipher": [
            "Brian Moriarty designed",
            "video games"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "959",
        "question": "What are some movies whose distributors are led by Kevin Tsujihara",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some movies whose distributors [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are led by kevin tsujihara",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some movies whose distributors [INQL] are led by kevin tsujihara [INQR]",
        "subq1": [
            "what are some movies whose distributors [ENT]"
        ],
        "subq2": [
            "are led by kevin tsujihara"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose distributors [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are led by Kevin Tsujihara",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some movies [DES] whose distributors [INQL] are led by Kevin Tsujihara [INQR]",
        "subq1_no_decipher": [
            "What are some movies",
            "whose distributors [ENT]"
        ],
        "subq2_no_decipher": [
            "are led by Kevin Tsujihara"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "225",
        "question": "Name the common associate band of Blayse and Teddy Riley",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common associate band of blayse and teddy",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "riley",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common associate band of blayse and teddy [DES] riley",
        "subq1": [
            "name the common associate band of blayse and teddy",
            "riley"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common associate band of Blayse and Teddy Riley",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the common associate band of Blayse and Teddy Riley",
        "subq1_no_decipher": [
            "Name the common associate band of Blayse and Teddy Riley"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3354",
        "question": "What did Steven T Mason's father die from",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what did [ENT] die from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "steven t mason's father",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what did [INQL] steven t mason's father [INQR] die from",
        "subq1": [
            "what did [ENT] die from"
        ],
        "subq2": [
            "steven t mason's father"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What did [ENT] die from",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Steven T Mason's father",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What did [INQL] Steven T Mason's father [INQR] die from",
        "subq1_no_decipher": [
            "What did [ENT] die from"
        ],
        "subq2_no_decipher": [
            "Steven T Mason's father"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2485",
        "question": "Whose military units are VMF-218 and VMF-155",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has military units are vmf-218 and",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose military units are vmf-218 and vmf-155",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has military units are vmf-218 and [DES] whose military units are vmf-218 and vmf-155",
        "subq1": [
            "has military units are vmf-218 and",
            "whose military units are vmf-218 and vmf-155"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whose military units are VMF-218 and VMF-155",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Whose military units are VMF-218 and VMF-155",
        "subq1_no_decipher": [
            "Whose military units are VMF-218 and VMF-155"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "562",
        "question": "What automobile engine's successor is BMW M40",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/BMW_M40>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AutomobileEngine>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what automobile engine's",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "successor is bmw m40",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what automobile engine's [DES] successor is bmw m40",
        "subq1": [
            "what automobile engine's",
            "successor is bmw m40"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What automobile engine's successor is BMW M40",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What automobile engine's successor is BMW M40",
        "subq1_no_decipher": [
            "What automobile engine's successor is BMW M40"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3436",
        "question": "Name the company which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which produces both boeing f/a-18 e/f hornet and ch-46 chinook",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the company [DES] which produces both boeing f/a-18 e/f hornet and ch-46 chinook",
        "subq1": [
            "name the company",
            "which produces both boeing f/a-18 e/f hornet and ch-46 chinook"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the company [DES] which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook",
        "subq1_no_decipher": [
            "Name the company",
            "which produces both Boeing F/A-18 E/F Hornet and CH-46 Chinook"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1693",
        "question": "What is the district of Methodist Central Hall Westminster",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Methodist_Central_Hall_Westminster> <http://dbpedia.org/ontology/district> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the district of methodist central hall westminster",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the district of methodist central hall westminster [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the district of methodist central hall westminster"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the district of Methodist Central Hall Westminster ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the district of [INQL] Methodist Central Hall Westminster [INQR]",
        "subq1_no_decipher": [
            "What is the district of Methodist Central Hall Westminster ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1045",
        "question": "Who develops the computation platform of Microsoft Expression Encoder",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who develops [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the computation platform of microsoft expression encoder",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who develops [INQL] the computation platform of microsoft expression encoder [INQR]",
        "subq1": [
            "who develops [ENT]"
        ],
        "subq2": [
            "the computation platform of microsoft expression encoder"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who develops [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the computation platform of Microsoft Expression Encoder",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Who develops [INQL] the computation platform of Microsoft Expression Encoder [INQR]",
        "subq1_no_decipher": [
            "Who develops [ENT]"
        ],
        "subq2_no_decipher": [
            "the computation platform of Microsoft Expression Encoder"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3446",
        "question": "What is the official language of Ladonia, which is the target area of Probus Journal",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the official language of ladonia,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is the target area of probus journal",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the official language of ladonia, [DES] which is the target area of probus journal",
        "subq1": [
            "what is the official language of ladonia,",
            "which is the target area of probus journal"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the official language of Ladonia,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is the target area of Probus Journal",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the official language of Ladonia, [DES] which is the target area of Probus Journal",
        "subq1_no_decipher": [
            "What is the official language of Ladonia,",
            "which is the target area of Probus Journal"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4565",
        "question": "Where did the conflict take place where Louis Briere de I'Isle was a commander",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did the conflict take place [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "where louis briere de i'isle was a commander",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did the conflict take place [INQL] where louis briere de i'isle was a commander [INQR]",
        "subq1": [
            "where did the conflict take place [ENT]"
        ],
        "subq2": [
            "where louis briere de i'isle was a commander"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the conflict take place [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "where Louis Briere de I'Isle was a commander",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where did the conflict take place [INQL] where Louis Briere de I'Isle was a commander [INQR]",
        "subq1_no_decipher": [
            "Where did the conflict take place [ENT]"
        ],
        "subq2_no_decipher": [
            "where Louis Briere de I'Isle was a commander"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "954",
        "question": "In which team was the person drafted who has studied at the Worcester college, Oxford",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which team was the person drafted [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who has studied at the worcester college, oxford",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which team was the person drafted [INQL] who has studied at the worcester college, oxford [INQR]",
        "subq1": [
            "in which team was the person drafted [ENT]"
        ],
        "subq2": [
            "who has studied at the worcester college, oxford"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which team was the person drafted",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has studied at the Worcester college, Oxford",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "In which team was the person drafted [DES] who has studied at the Worcester college, Oxford [INQR]",
        "subq1_no_decipher": [
            "In which team was the person drafted",
            "who has studied at the Worcester college, Oxford"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4985",
        "question": "How many people hold important positions along with Donna Shalala",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hold important positions along with donna shalala",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many people [DES] hold important positions along with donna shalala",
        "subq1": [
            "how many people",
            "hold important positions along with donna shalala"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hold important positions [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "along with Donna Shalala",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many people [DES] hold important positions [INQL] along with Donna Shalala [INQR]",
        "subq1_no_decipher": [
            "How many people",
            "hold important positions [ENT]"
        ],
        "subq2_no_decipher": [
            "along with Donna Shalala"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2735",
        "question": "What other things are provided by the producer of Office 365",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Office_365> . ?x <http://dbpedia.org/property/services> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what other things are provided by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the producer of office 365",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what other things are provided by [INQL] the producer of office 365 [INQR]",
        "subq1": [
            "what other things are provided by [ENT]"
        ],
        "subq2": [
            "the producer of office 365"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What other things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are provided by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the producer of Office 365",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What other things [DES] are provided by [INQL] the producer of Office 365 [INQR]",
        "subq1_no_decipher": [
            "What other things",
            "are provided by [ENT]"
        ],
        "subq2_no_decipher": [
            "the producer of Office 365"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4903",
        "question": "Who owns the company that made the Edsel Villager",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company that made the edsel villager",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who owns [INQL] the company that made the edsel villager [INQR]",
        "subq1": [
            "who owns [ENT]"
        ],
        "subq2": [
            "the company that made the edsel villager"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that made the Edsel Villager",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who owns [INQL] the company [DES] that made the Edsel Villager [INQR]",
        "subq1_no_decipher": [
            "Who owns [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "that made the Edsel Villager"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4735",
        "question": "Which collaborator of Nice and Smooth wrote Same Song",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nice_&_Smooth> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which collaborator of nice and smooth",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wrote same song",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which collaborator of nice and smooth [DES] wrote same song",
        "subq1": [
            "which collaborator of nice and smooth",
            "wrote same song"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which collaborator of Nice and Smooth",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wrote Same Song",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which collaborator of Nice and Smooth [DES] wrote Same Song",
        "subq1_no_decipher": [
            "Which collaborator of Nice and Smooth",
            "wrote Same Song"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4823",
        "question": "Who fought in the battle at Tupelo Mississippi",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Tupelo,_Mississippi> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who fought in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the battle at tupelo mississippi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who fought in [INQL] the battle at tupelo mississippi [INQR]",
        "subq1": [
            "who fought in [ENT]"
        ],
        "subq2": [
            "the battle at tupelo mississippi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who fought in the battle at Tupelo Mississippi?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who fought in [INQL] the battle at Tupelo Mississippi [INQR]",
        "subq1_no_decipher": [
            "Who fought in the battle at Tupelo Mississippi?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1218",
        "question": "List the movies whose cast member were born in Scotland",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> . ?uri <http://dbpedia.org/ontology/starring> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the movies whose cast member [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "were born in scotland",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the movies whose cast member [INQL] were born in scotland [INQR]",
        "subq1": [
            "list the movies whose cast member [ENT]"
        ],
        "subq2": [
            "were born in scotland"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose cast member [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "were born in Scotland",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the movies [DES] whose cast member [INQL] were born in Scotland [INQR]",
        "subq1_no_decipher": [
            "List the movies",
            "whose cast member [ENT]"
        ],
        "subq2_no_decipher": [
            "were born in Scotland"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1527",
        "question": "List the other nicknames of city which has one of the nickname as City of Angels",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/City_of_Angels> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the other nicknames of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "city which has one of the nickname as city of angels",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the other nicknames of [INQL] city which has one of the nickname as city of angels [INQR]",
        "subq1": [
            "list the other nicknames of [ENT]"
        ],
        "subq2": [
            "city which has one of the nickname as city of angels"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the other nicknames of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "city",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which has one of the nickname as City of Angels",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the other nicknames of [INQL] city [DES] which has one of the nickname as City of Angels [INQR]",
        "subq1_no_decipher": [
            "List the other nicknames of [ENT]"
        ],
        "subq2_no_decipher": [
            "city",
            "which has one of the nickname as City of Angels"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3987",
        "question": "Count the writers whose work has been played in NY",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the writers whose work [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has been played in ny",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the writers whose work [INQL] has been played in ny [INQR]",
        "subq1": [
            "count the writers whose work [ENT]"
        ],
        "subq2": [
            "has been played in ny"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the writers",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose work [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "has been played in NY",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the writers [DES] whose work [INQL] has been played in NY [INQR]",
        "subq1_no_decipher": [
            "Count the writers",
            "whose work [ENT]"
        ],
        "subq2_no_decipher": [
            "has been played in NY"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1300",
        "question": "Where did the graduates of Memphis, Tennessee continue their education",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Memphis,_Tennessee> . ?x <http://dbpedia.org/ontology/school> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] continue their education",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the graduates of memphis, tennessee",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the graduates of memphis, tennessee [INQR] continue their education",
        "subq1": [
            "where did [ENT] continue their education"
        ],
        "subq2": [
            "the graduates of memphis, tennessee"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did [ENT] continue their education",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the graduates of Memphis, Tennessee",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the graduates of Memphis, Tennessee [INQR] continue their education",
        "subq1_no_decipher": [
            "Where did [ENT] continue their education"
        ],
        "subq2_no_decipher": [
            "the graduates of Memphis, Tennessee"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4891",
        "question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what subsequent work of moondog matinee",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has the composer of motorpsycho nitemare",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what subsequent work of moondog matinee [DES] has the composer of motorpsycho nitemare",
        "subq1": [
            "what subsequent work of moondog matinee",
            "has the composer of motorpsycho nitemare"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What subsequent work of Moondog Matinee",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has the composer of Motorpsycho Nitemare",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What subsequent work of Moondog Matinee [DES] has the composer of Motorpsycho Nitemare",
        "subq1_no_decipher": [
            "What subsequent work of Moondog Matinee",
            "has the composer of Motorpsycho Nitemare"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "160",
        "question": "What was the language of the single which came before To Know Him Is to Love Him",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what was the language of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the single which came before to know him is to love him",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what was the language of [INQL] the single which came before to know him is to love him [INQR]",
        "subq1": [
            "what was the language of [ENT]"
        ],
        "subq2": [
            "the single which came before to know him is to love him"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What was the language of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the single",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which came before To Know Him Is to Love Him",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What was the language of [INQL] the single [DES] which came before To Know Him Is to Love Him [INQR]",
        "subq1_no_decipher": [
            "What was the language of [ENT]"
        ],
        "subq2_no_decipher": [
            "the single",
            "which came before To Know Him Is to Love Him"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4067",
        "question": "What are the television shows whose company is owned by Viacom",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the television shows whose company [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is owned by viacom",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the television shows whose company [INQL] is owned by viacom [INQR]",
        "subq1": [
            "what are the television shows whose company [ENT]"
        ],
        "subq2": [
            "is owned by viacom"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the television shows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose company [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "is owned by Viacom",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the television shows [DES] whose company [INQL] is owned by Viacom [INQR]",
        "subq1_no_decipher": [
            "What are the television shows",
            "whose company [ENT]"
        ],
        "subq2_no_decipher": [
            "is owned by Viacom"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "956",
        "question": "How many people used to play in the youthclub of FC Barcelona",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many people used to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "play in the youthclub of fc barcelona",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many people used to [INQL] play in the youthclub of fc barcelona [INQR]",
        "subq1": [
            "how many people used to [ENT]"
        ],
        "subq2": [
            "play in the youthclub of fc barcelona"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "used to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "play in the youthclub of FC Barcelona",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many people [DES] used to [INQL] play in the youthclub of FC Barcelona [INQR]",
        "subq1_no_decipher": [
            "How many people",
            "used to [ENT]"
        ],
        "subq2_no_decipher": [
            "play in the youthclub of FC Barcelona"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3791",
        "question": "Quebec born ice hockey players have stopped playing for which teams",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have stopped playing for which teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "quebec born ice hockey players",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] quebec born ice hockey players [INQR] have stopped playing for which teams",
        "subq1": [
            "[ENT] have stopped playing for which teams"
        ],
        "subq2": [
            "quebec born ice hockey players"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have stopped playing for which teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Quebec born ice hockey players",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "[INQL] Quebec born ice hockey players [INQR] have stopped playing for which teams",
        "subq1_no_decipher": [
            "[ENT] have stopped playing for which teams"
        ],
        "subq2_no_decipher": [
            "Quebec born ice hockey players"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3234",
        "question": "Who is the chancellor of Falmouth University",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/property/chancellor> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the chancellor of falmouth university",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the chancellor of falmouth university [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the chancellor of falmouth university"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the chancellor of Falmouth University ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the chancellor of Falmouth University [INQR]",
        "subq1_no_decipher": [
            "Who is the chancellor of Falmouth University ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2869",
        "question": "what kind of things play on WBIG FM",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "things play on wbig fm",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what kind of [INQL] things play on wbig fm [INQR]",
        "subq1": [
            "what kind of [ENT]"
        ],
        "subq2": [
            "things play on wbig fm"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "things",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "play on WBIG FM",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "what kind of [INQL] things [DES] play on WBIG FM [INQR]",
        "subq1_no_decipher": [
            "what kind of [ENT]"
        ],
        "subq2_no_decipher": [
            "things",
            "play on WBIG FM"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3777",
        "question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the are where south side elevated railroad operate",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has place of birth as arthur a. ross",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the are where south side elevated railroad operate [DES] and has place of birth as arthur a. ross",
        "subq1": [
            "name the are where south side elevated railroad operate",
            "and has place of birth as arthur a. ross"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the are",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where South side Elevated Railroad operate",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has place of birth as Arthur A. Ross",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the are [DES] where South side Elevated Railroad operate [DES] and has place of birth as Arthur A. Ross",
        "subq1_no_decipher": [
            "Name the are",
            "where South side Elevated Railroad operate",
            "and has place of birth as Arthur A. Ross"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4433",
        "question": "In which fields are the graduates of Worcester College, Oxford working",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which fields are [ENT] working",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the graduates of worcester college, oxford",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which fields are [INQL] the graduates of worcester college, oxford [INQR] working",
        "subq1": [
            "in which fields are [ENT] working"
        ],
        "subq2": [
            "the graduates of worcester college, oxford"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which fields",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are [ENT] working",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the graduates of Worcester College, Oxford",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In which fields [DES] are [INQL] the graduates of Worcester College, Oxford [INQR] working",
        "subq1_no_decipher": [
            "In which fields",
            "are [ENT] working"
        ],
        "subq2_no_decipher": [
            "the graduates of Worcester College, Oxford"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2961",
        "question": "List the places where the relatives of Mark Donaldson died",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the places where [ENT] died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of mark donaldson",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the places where [INQL] the relatives of mark donaldson [INQR] died",
        "subq1": [
            "list the places where [ENT] died"
        ],
        "subq2": [
            "the relatives of mark donaldson"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the places",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where [ENT] died",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of Mark Donaldson",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the places [DES] where [INQL] the relatives of Mark Donaldson [INQR] died",
        "subq1_no_decipher": [
            "List the places",
            "where [ENT] died"
        ],
        "subq2_no_decipher": [
            "the relatives of Mark Donaldson"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2200",
        "question": "What famous politician died in the Petersen House",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Petersen_House>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what famous politician",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "died in the petersen house",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what famous politician [DES] died in the petersen house",
        "subq1": [
            "what famous politician",
            "died in the petersen house"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What famous politician",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "died in the Petersen House",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What famous politician [DES] died in the Petersen House",
        "subq1_no_decipher": [
            "What famous politician",
            "died in the Petersen House"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "98",
        "question": "What are some artists on the show whose opening theme is Send It On",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some artists on [ENT] is send it on",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the show whose opening theme",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some artists on [INQL] the show whose opening theme [INQR] is send it on",
        "subq1": [
            "what are some artists on [ENT] is send it on"
        ],
        "subq2": [
            "the show whose opening theme"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some artists on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the show",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose opening theme is Send It On",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are some artists on [INQL] the show [DES] whose opening theme is Send It On [INQR]",
        "subq1_no_decipher": [
            "What are some artists on [ENT]"
        ],
        "subq2_no_decipher": [
            "the show",
            "whose opening theme is Send It On"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2557",
        "question": "What is the citizenship of Saima Chowdhury",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the citizenship of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "saima chowdhury",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the citizenship of [INQL] saima chowdhury [INQR]",
        "subq1": [
            "what is the citizenship of [ENT]"
        ],
        "subq2": [
            "saima chowdhury"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the citizenship of Saima Chowdhury?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the citizenship of Saima Chowdhury [INQR]",
        "subq1_no_decipher": [
            "What is the citizenship of Saima Chowdhury?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3183",
        "question": "What are the musical performances whose label is Celluloid Records",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the musical performances",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose label is celluloid records",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the musical performances [DES] whose label is celluloid records",
        "subq1": [
            "what are the musical performances",
            "whose label is celluloid records"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the musical performances",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose label is Celluloid Records",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What are the musical performances [DES] whose label is Celluloid Records",
        "subq1_no_decipher": [
            "What are the musical performances",
            "whose label is Celluloid Records"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "253",
        "question": "What is the craft of the Ralph Flanders which is also the profession of Claiborne Pell",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the craft of the ralph flanders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the profession of claiborne pell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the craft of the ralph flanders [DES] which is also the profession of claiborne pell",
        "subq1": [
            "what is the craft of the ralph flanders",
            "which is also the profession of claiborne pell"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the craft of the Ralph Flanders",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the profession of Claiborne Pell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the craft of the Ralph Flanders [DES] which is also the profession of Claiborne Pell",
        "subq1_no_decipher": [
            "What is the craft of the Ralph Flanders",
            "which is also the profession of Claiborne Pell"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3923",
        "question": "How many people have fought wars where Arthur St. Clair was a commander",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many people have fought [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "wars where arthur st. clair was a commander",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many people have fought [INQL] wars where arthur st. clair was a commander [INQR]",
        "subq1": [
            "how many people have fought [ENT]"
        ],
        "subq2": [
            "wars where arthur st. clair was a commander"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have fought [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "wars",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Arthur St. Clair was a commander",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many people [DES] have fought [INQL] wars [DES] where Arthur St. Clair was a commander [INQR]",
        "subq1_no_decipher": [
            "How many people",
            "have fought [ENT]"
        ],
        "subq2_no_decipher": [
            "wars",
            "where Arthur St. Clair was a commander"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4199",
        "question": "Does Chicago own the Monroe Station",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does chicago",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "own the monroe station",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does chicago [DES] own the monroe station",
        "subq1": [
            "does chicago",
            "own the monroe station"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Chicago own the Monroe Station?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Chicago own the Monroe Station [INQR]",
        "subq1_no_decipher": [
            "Does Chicago own the Monroe Station?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1445",
        "question": "Which team has had both Martin prochzka and garry unger as its players",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has had both martin prochzka and garry unger as its players",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which team [DES] has had both martin prochzka and garry unger as its players",
        "subq1": [
            "which team",
            "has had both martin prochzka and garry unger as its players"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has had both Martin prochzka and garry unger as its players",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which team [DES] has had both Martin prochzka and garry unger as its players",
        "subq1_no_decipher": [
            "Which team",
            "has had both Martin prochzka and garry unger as its players"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1648",
        "question": "What are the awards received by spouse of Ellen Lundstrom",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ellen_Lundstr\u00f6m> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the awards received by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "spouse of ellen lundstrom",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the awards received by [INQL] spouse of ellen lundstrom [INQR]",
        "subq1": [
            "what are the awards received by [ENT]"
        ],
        "subq2": [
            "spouse of ellen lundstrom"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "received by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "spouse of Ellen Lundstrom",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the awards [DES] received by [INQL] spouse of Ellen Lundstrom [INQR]",
        "subq1_no_decipher": [
            "What are the awards",
            "received by [ENT]"
        ],
        "subq2_no_decipher": [
            "spouse of Ellen Lundstrom"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4682",
        "question": "Who all have succeeded the kings buried in Rome",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who all have succeeded [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the kings buried in rome",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who all have succeeded [INQL] the kings buried in rome [INQR]",
        "subq1": [
            "who all have succeeded [ENT]"
        ],
        "subq2": [
            "the kings buried in rome"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who all have succeeded [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the kings",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in Rome",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who all have succeeded [INQL] the kings [DES] buried in Rome [INQR]",
        "subq1_no_decipher": [
            "Who all have succeeded [ENT]"
        ],
        "subq2_no_decipher": [
            "the kings",
            "buried in Rome"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4723",
        "question": "Through which states do the rivers flow which join in the republican river from the left",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republican_River> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "through which states do the rivers flow [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which join in the republican river from the left",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "through which states do the rivers flow [INQL] which join in the republican river from the left [INQR]",
        "subq1": [
            "through which states do the rivers flow [ENT]"
        ],
        "subq2": [
            "which join in the republican river from the left"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Through which states do the rivers flow",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which join in the republican river from the left",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Through which states do the rivers flow [DES] which join in the republican river from the left [INQR]",
        "subq1_no_decipher": [
            "Through which states do the rivers flow",
            "which join in the republican river from the left"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3991",
        "question": "Give me the home town of all musical artists who uses Guitar as instrument",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me the home town of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "all musical artists who uses guitar as instrument",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me the home town of [INQL] all musical artists who uses guitar as instrument [INQR]",
        "subq1": [
            "give me the home town of [ENT]"
        ],
        "subq2": [
            "all musical artists who uses guitar as instrument"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the home town of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "all musical artists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who uses Guitar as instrument",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me the home town of [INQL] all musical artists [DES] who uses Guitar as instrument [INQR]",
        "subq1_no_decipher": [
            "Give me the home town of [ENT]"
        ],
        "subq2_no_decipher": [
            "all musical artists",
            "who uses Guitar as instrument"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1696",
        "question": "How many religions are followed amongst the people who've worked in the Korean army",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Republic_of_Korea_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many religions are followed amongst [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people who've worked in the korean army",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many religions are followed amongst [INQL] the people who've worked in the korean army [INQR]",
        "subq1": [
            "how many religions are followed amongst [ENT]"
        ],
        "subq2": [
            "the people who've worked in the korean army"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are followed amongst [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who've worked in the Korean army",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many religions [DES] are followed amongst [INQL] the people [DES] who've worked in the Korean army [INQR]",
        "subq1_no_decipher": [
            "How many religions",
            "are followed amongst [ENT]"
        ],
        "subq2_no_decipher": [
            "the people",
            "who've worked in the Korean army"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3191",
        "question": "Was andy warhol a part of Pop Art movement",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was andy warhol",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a part of pop art movement",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was andy warhol [DES] a part of pop art movement",
        "subq1": [
            "was andy warhol",
            "a part of pop art movement"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was andy warhol a part of Pop Art movement?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was andy warhol [DES] a part of Pop Art movement",
        "subq1_no_decipher": [
            "Was andy warhol a part of Pop Art movement?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4499",
        "question": "Count the number of musical work which were sold by Sony Music",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of musical work",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which were sold by sony music",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the number of musical work [DES] which were sold by sony music",
        "subq1": [
            "count the number of musical work",
            "which were sold by sony music"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of musical work",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which were sold by Sony Music",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Count the number of musical work [DES] which were sold by Sony Music [INQR]",
        "subq1_no_decipher": [
            "Count the number of musical work",
            "which were sold by Sony Music"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1154",
        "question": "Who is the person whose home town is Fairmount, Indiana",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the person",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose home town is fairmount, indiana",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the person [DES] whose home town is fairmount, indiana",
        "subq1": [
            "who is the person",
            "whose home town is fairmount, indiana"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the person",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose home town is Fairmount, Indiana",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who is the person [DES] whose home town is Fairmount, Indiana",
        "subq1_no_decipher": [
            "Who is the person",
            "whose home town is Fairmount, Indiana"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2255",
        "question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movies directed by stanley kubrick",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and edited by anthony harvey",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movies directed by stanley kubrick [DES] and edited by anthony harvey",
        "subq1": [
            "name the movies directed by stanley kubrick",
            "and edited by anthony harvey"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "directed by Stanley Kubrick",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and edited by Anthony Harvey",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movies [DES] directed by Stanley Kubrick [DES] and edited by Anthony Harvey",
        "subq1_no_decipher": [
            "Name the movies",
            "directed by Stanley Kubrick",
            "and edited by Anthony Harvey"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1682",
        "question": "List all binomial authority of the insects whose one of the binomial authority is douard Mntries",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all binomial authority of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the insects whose one of the binomial authority is douard mntries",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all binomial authority of [INQL] the insects whose one of the binomial authority is douard mntries [INQR]",
        "subq1": [
            "list all binomial authority of [ENT]"
        ],
        "subq2": [
            "the insects whose one of the binomial authority is douard mntries"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all binomial authority of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the insects",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose one of the binomial authority is douard Mntries",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List all binomial authority of [INQL] the insects [DES] whose one of the binomial authority is douard Mntries [INQR]",
        "subq1_no_decipher": [
            "List all binomial authority of [ENT]"
        ],
        "subq2_no_decipher": [
            "the insects",
            "whose one of the binomial authority is douard Mntries"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3170",
        "question": "Who is the military general buried in St Mary's Church, Battersea",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the military general",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in st mary's church, battersea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the military general [DES] buried in st mary's church, battersea",
        "subq1": [
            "who is the military general",
            "buried in st mary's church, battersea"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the military general buried in St Mary's Church, Battersea?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the military general [INQL] buried in St Mary's Church, Battersea [INQR]",
        "subq1_no_decipher": [
            "Who is the military general buried in St Mary's Church, Battersea?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2056",
        "question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the military unit",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose command structures are united states department of the navy and united states department of defense",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the military unit [DES] whose command structures are united states department of the navy and united states department of defense",
        "subq1": [
            "what is the military unit",
            "whose command structures are united states department of the navy and united states department of defense"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the military unit",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose command structures are United States Department of the Navy and United States Department of Defense",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the military unit [DES] whose command structures are United States Department of the Navy and United States Department of Defense",
        "subq1_no_decipher": [
            "What is the military unit",
            "whose command structures are United States Department of the Navy and United States Department of Defense"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4090",
        "question": "What are some other things developed by the company who made the remote desktop protocol",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Remote_Desktop_Protocol> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are some other things developed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company who made the remote desktop protocol",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are some other things developed by [INQL] the company who made the remote desktop protocol [INQR]",
        "subq1": [
            "what are some other things developed by [ENT]"
        ],
        "subq2": [
            "the company who made the remote desktop protocol"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are some other things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "developed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the company",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who made the remote desktop protocol",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What are some other things [DES] developed by [INQL] the company [DES] who made the remote desktop protocol [INQR]",
        "subq1_no_decipher": [
            "What are some other things",
            "developed by [ENT]"
        ],
        "subq2_no_decipher": [
            "the company",
            "who made the remote desktop protocol"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3108",
        "question": "Where was Al-Muzaffar Umar buried",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Muzaffar_Umar> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] buried",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "al-muzaffar umar",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] al-muzaffar umar [INQR] buried",
        "subq1": [
            "where was [ENT] buried"
        ],
        "subq2": [
            "al-muzaffar umar"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Al-Muzaffar Umar buried ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was Al-Muzaffar Umar buried",
        "subq1_no_decipher": [
            "Where was Al-Muzaffar Umar buried ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4548",
        "question": "List the guests of On Broadway",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the guests of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "on broadway",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the guests of [INQL] on broadway [INQR]",
        "subq1": [
            "list the guests of [ENT]"
        ],
        "subq2": [
            "on broadway"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the guests of On Broadway ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the guests of On Broadway [INQR]",
        "subq1_no_decipher": [
            "List the guests of On Broadway ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3723",
        "question": "How many universities are there whose country's capital is Oslo",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many universities are there whose country's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "capital is oslo",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many universities are there whose country's [INQL] capital is oslo [INQR]",
        "subq1": [
            "how many universities are there whose country's [ENT]"
        ],
        "subq2": [
            "capital is oslo"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many universities are there",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose country's",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "capital is Oslo",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "How many universities are there [DES] whose country's [DES] capital is Oslo [INQR]",
        "subq1_no_decipher": [
            "How many universities are there",
            "whose country's",
            "capital is Oslo"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2049",
        "question": "Did Bob Dylan write the lyrics of the times they are a changin'",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> }",
        "intent": "ASK",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did bob dylan",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "write the lyrics of the times they are a changin'",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did bob dylan [DES] write the lyrics of the times they are a changin'",
        "subq1": [
            "did bob dylan",
            "write the lyrics of the times they are a changin'"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Did Bob Dylan write the lyrics of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the times",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "they are a changin'",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Did Bob Dylan write the lyrics of [INQL] the times [DES] they are a changin' [INQR]",
        "subq1_no_decipher": [
            "Did Bob Dylan write the lyrics of [ENT]"
        ],
        "subq2_no_decipher": [
            "the times",
            "they are a changin'"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3643",
        "question": "What is the religion of the ones in the Kampuchean Union of Salvation",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones in the kampuchean union of salvation",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the religion of [INQL] the ones in the kampuchean union of salvation [INQR]",
        "subq1": [
            "what is the religion of [ENT]"
        ],
        "subq2": [
            "the ones in the kampuchean union of salvation"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the religion of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ones",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the Kampuchean Union of Salvation",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the religion of [INQL] the ones [DES] in the Kampuchean Union of Salvation [INQR]",
        "subq1_no_decipher": [
            "What is the religion of [ENT]"
        ],
        "subq2_no_decipher": [
            "the ones",
            "in the Kampuchean Union of Salvation"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4927",
        "question": "Where did the members of judge advocate general corps study",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] study",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of judge advocate general corps",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the members of judge advocate general corps [INQR] study",
        "subq1": [
            "where did [ENT] study"
        ],
        "subq2": [
            "the members of judge advocate general corps"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did [ENT] study",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of judge",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "advocate general corps",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the members of judge [DES] advocate general corps [INQR] study",
        "subq1_no_decipher": [
            "Where did [ENT] study"
        ],
        "subq2_no_decipher": [
            "the members of judge",
            "advocate general corps"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "623",
        "question": "Name the airlines which have a hub in airport in SF",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/San_Francisco> . ?uri <http://dbpedia.org/property/hubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the airlines which have a hub in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "airport in sf",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the airlines which have a hub in [INQL] airport in sf [INQR]",
        "subq1": [
            "name the airlines which have a hub in [ENT]"
        ],
        "subq2": [
            "airport in sf"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the airlines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have a hub in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "airport in SF",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the airlines [DES] which have a hub in [INQL] airport in SF [INQR]",
        "subq1_no_decipher": [
            "Name the airlines",
            "which have a hub in [ENT]"
        ],
        "subq2_no_decipher": [
            "airport in SF"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "262",
        "question": "Which executive producer of the ultimate merger is also an important person at Trump Productions",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which executive producer of the ultimate merger",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also an important person at trump productions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which executive producer of the ultimate merger [DES] is also an important person at trump productions",
        "subq1": [
            "which executive producer of the ultimate merger",
            "is also an important person at trump productions"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which executive producer of the ultimate merger",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also an important person at Trump Productions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which executive producer of the ultimate merger [DES] is also an important person at Trump Productions",
        "subq1_no_decipher": [
            "Which executive producer of the ultimate merger",
            "is also an important person at Trump Productions"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3369",
        "question": "What is the official name of Colorado wine",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the official name of colorado",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wine",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the official name of colorado [DES] wine",
        "subq1": [
            "what is the official name of colorado",
            "wine"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the official name of Colorado wine ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the official name of Colorado wine [INQR]",
        "subq1_no_decipher": [
            "What is the official name of Colorado wine ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4061",
        "question": "In how many states can one find Burr Tuss kind of bridges",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in how many states can one find [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "burr tuss kind of bridges",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in how many states can one find [INQL] burr tuss kind of bridges [INQR]",
        "subq1": [
            "in how many states can one find [ENT]"
        ],
        "subq2": [
            "burr tuss kind of bridges"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In how many states can one find [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Burr Tuss kind of bridges",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "In how many states can one find [INQL] Burr Tuss kind of bridges [INQR]",
        "subq1_no_decipher": [
            "In how many states can one find [ENT]"
        ],
        "subq2_no_decipher": [
            "Burr Tuss kind of bridges"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1802",
        "question": "who developed google videos",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who developed google",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "videos",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who developed google [DES] videos",
        "subq1": [
            "who developed google",
            "videos"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who developed google videos",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "who developed google videos",
        "subq1_no_decipher": [
            "who developed google videos"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4736",
        "question": "Who is the child of John Tyler, Sr",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the child of john tyler, sr",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is [INQL] the child of john tyler, sr [INQR]",
        "subq1": [
            "who is [ENT]"
        ],
        "subq2": [
            "the child of john tyler, sr"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the child of John Tyler, Sr.?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the child of [INQL] John Tyler, Sr [INQR]",
        "subq1_no_decipher": [
            "Who is the child of John Tyler, Sr.?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4992",
        "question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is brazilian jiu-jitsu",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the trainer of nick diaz",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is brazilian jiu-jitsu [DES] the trainer of nick diaz",
        "subq1": [
            "is brazilian jiu-jitsu",
            "the trainer of nick diaz"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Brazilian jiu-jitsu [INQL] the trainer of Nick Diaz",
        "subq1_no_decipher": [
            "Is Brazilian jiu-jitsu the trainer of Nick Diaz?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2385",
        "question": "Who is the owner of Latvian Wikipedia and Wiktionary",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the owner of latvian wikipedia and",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wiktionary",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the owner of latvian wikipedia and [DES] wiktionary",
        "subq1": [
            "who is the owner of latvian wikipedia and",
            "wiktionary"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the owner of Latvian Wikipedia and Wiktionary",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the owner of Latvian Wikipedia and Wiktionary",
        "subq1_no_decipher": [
            "Who is the owner of Latvian Wikipedia and Wiktionary"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1959",
        "question": "Name all those buried in a place governed by a city council",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/City_council> . ?uri <http://dbpedia.org/property/restingPlace> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name all those buried in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place governed by a city council",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name all those buried in [INQL] a place governed by a city council [INQR]",
        "subq1": [
            "name all those buried in [ENT]"
        ],
        "subq2": [
            "a place governed by a city council"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name all those",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "governed by a city council",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Name all those [DES] buried in [INQL] a place [DES] governed by a city council [INQR]",
        "subq1_no_decipher": [
            "Name all those",
            "buried in [ENT]"
        ],
        "subq2_no_decipher": [
            "a place",
            "governed by a city council"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2976",
        "question": "What royalties' sepulcher is Mausoleum of Augustus",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what royalties' sepulcher",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is mausoleum of augustus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what royalties' sepulcher [DES] is mausoleum of augustus",
        "subq1": [
            "what royalties' sepulcher",
            "is mausoleum of augustus"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What royalties's sepulchre is Mausoleum of Augustus?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What royalties' [DES] sepulcher is Mausoleum of Augustus [INQR]",
        "subq1_no_decipher": [
            "What royalties's sepulchre is Mausoleum of Augustus?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "488",
        "question": "Name the common university of the Cardinal and Jim Wylie",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common university of the cardinal and jim",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "wylie",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common university of the cardinal and jim [DES] wylie",
        "subq1": [
            "name the common university of the cardinal and jim",
            "wylie"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common university of the Cardinal and Jim Wylie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the common university of the Cardinal and Jim Wylie",
        "subq1_no_decipher": [
            "Name the common university of the Cardinal and Jim Wylie"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1843",
        "question": "What is the automobile platform of Chiva bus",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the automobile platform of chiva bus",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the automobile platform of chiva bus [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the automobile platform of chiva bus"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the automobile platform of Chiva bus ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the automobile platform of Chiva bus [INQR]",
        "subq1_no_decipher": [
            "What is the automobile platform of Chiva bus ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1734",
        "question": "Who are the animator of The Skeleton Dance",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who are the animator of the skeleton",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "dance",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who are the animator of the skeleton [DES] dance",
        "subq1": [
            "who are the animator of the skeleton",
            "dance"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who are the animator of The Skeleton Dance?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who are the animator of The Skeleton Dance [INQR]",
        "subq1_no_decipher": [
            "Who are the animator of The Skeleton Dance?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2911",
        "question": "How many movies have a screenplay located in the States",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many movies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have a screenplay located in the states",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many movies [DES] have a screenplay located in the states",
        "subq1": [
            "how many movies",
            "have a screenplay located in the states"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have a screenplay located in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the States",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many movies [DES] have a screenplay located in [INQL] the States [INQR]",
        "subq1_no_decipher": [
            "How many movies",
            "have a screenplay located in [ENT]"
        ],
        "subq2_no_decipher": [
            "the States"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3219",
        "question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which ceremonial county of the east tilbury",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the local authority of the trinity school, brentwood",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which ceremonial county of the east tilbury [DES] is also the local authority of the trinity school, brentwood",
        "subq1": [
            "which ceremonial county of the east tilbury",
            "is also the local authority of the trinity school, brentwood"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which ceremonial County of the East Tilbury",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the local authority of the Trinity School, Brentwood",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which ceremonial County of the East Tilbury [DES] is also the local authority of the Trinity School, Brentwood",
        "subq1_no_decipher": [
            "Which ceremonial County of the East Tilbury",
            "is also the local authority of the Trinity School, Brentwood"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "146",
        "question": "What system is both a platform where Nord runs and also distributed The beauty inside",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what system",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is both a platform where nord runs and also distributed the beauty inside",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what system [DES] is both a platform where nord runs and also distributed the beauty inside",
        "subq1": [
            "what system",
            "is both a platform where nord runs and also distributed the beauty inside"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What system",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is both a platform",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Nord runs",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also distributed The beauty inside",
                    "entityID": 0,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 0,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What system [DES] is both a platform [DES] where Nord runs [DES] and also distributed The beauty inside",
        "subq1_no_decipher": [
            "What system",
            "is both a platform",
            "where Nord runs",
            "and also distributed The beauty inside"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1986",
        "question": "Name the country whose leader's deputy is Piotr Glinski",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> . ?uri <http://dbpedia.org/property/leaderName> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the country whose leader's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "deputy is piotr glinski",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the country whose leader's [INQL] deputy is piotr glinski [INQR]",
        "subq1": [
            "name the country whose leader's [ENT]"
        ],
        "subq2": [
            "deputy is piotr glinski"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose leader's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "deputy is Piotr Glinski",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Name the country [DES] whose leader's [INQL] deputy is Piotr Glinski [INQR]",
        "subq1_no_decipher": [
            "Name the country",
            "whose leader's [ENT]"
        ],
        "subq2_no_decipher": [
            "deputy is Piotr Glinski"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1369",
        "question": "Is Cologny a neighboring city of Geneva",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is cologny",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "a neighboring city of geneva",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is cologny [DES] a neighboring city of geneva",
        "subq1": [
            "is cologny",
            "a neighboring city of geneva"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Cologny a neighbouring city of Geneva?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Cologny a neighboring city of Geneva",
        "subq1_no_decipher": [
            "Is Cologny a neighbouring city of Geneva?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "2811",
        "question": "Whose creators are Jerry Seinfeld and Larry David",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has creators are jerry seinfeld and larry",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose creators are jerry seinfeld and larry david",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has creators are jerry seinfeld and larry [DES] whose creators are jerry seinfeld and larry david",
        "subq1": [
            "has creators are jerry seinfeld and larry",
            "whose creators are jerry seinfeld and larry david"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whose creators are Jerry Seinfeld and Larry David",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Whose creators are Jerry Seinfeld and Larry David",
        "subq1_no_decipher": [
            "Whose creators are Jerry Seinfeld and Larry David"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "659",
        "question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by Ron Grainer",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which tv show is related to the sarah jane adventures",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and theme music is composed by ron grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which tv show is related to the sarah jane adventures [DES] and theme music is composed by ron grainer",
        "subq1": [
            "which tv show is related to the sarah jane adventures",
            "and theme music is composed by ron grainer"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is related to The Sarah Jane Adventures",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and theme music is composed by Ron Grainer",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which TV show [DES] is related to The Sarah Jane Adventures [DES] and theme music is composed by Ron Grainer",
        "subq1_no_decipher": [
            "Which TV show",
            "is related to The Sarah Jane Adventures",
            "and theme music is composed by Ron Grainer"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1794",
        "question": "Name the parent company of Ford Air Transport Service",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the parent company of ford air transport",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "service",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the parent company of ford air transport [DES] service",
        "subq1": [
            "name the parent company of ford air transport",
            "service"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the parent company of  Ford Air Transport Service ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the parent company of Ford Air Transport Service [INQR]",
        "subq1_no_decipher": [
            "Name the parent company of  Ford Air Transport Service ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2511",
        "question": "Who has these major shrines : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Emmitsburg,_Maryland> . ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton> . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who has these major shrines : emmitsburg, maryland",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and shrine of st. elizabeth ann bayley seton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who has these major shrines : emmitsburg, maryland [DES] and shrine of st. elizabeth ann bayley seton",
        "subq1": [
            "who has these major shrines : emmitsburg, maryland",
            "and shrine of st. elizabeth ann bayley seton"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who has these major shrines : Emmitsburg, Maryland",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and Shrine of St. Elizabeth Ann Bayley Seton",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who has these major shrines : Emmitsburg, Maryland [DES] and Shrine of St. Elizabeth Ann Bayley Seton",
        "subq1_no_decipher": [
            "Who has these major shrines : Emmitsburg, Maryland",
            "and Shrine of St. Elizabeth Ann Bayley Seton"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3397",
        "question": "Which region of Bannock is the origin of Spaghetti squash",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which region of bannock",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the origin of spaghetti squash",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which region of bannock [DES] is the origin of spaghetti squash",
        "subq1": [
            "which region of bannock",
            "is the origin of spaghetti squash"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which region of Bannock",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the origin of Spaghetti squash",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which region of Bannock [DES] is the origin of Spaghetti squash",
        "subq1_no_decipher": [
            "Which region of Bannock",
            "is the origin of Spaghetti squash"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4282",
        "question": "Where in the us military did pierre r graham and edwin f hunter work",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where in the us military",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did pierre r graham and edwin f hunter work",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where in the us military [DES] did pierre r graham and edwin f hunter work",
        "subq1": [
            "where in the us military",
            "did pierre r graham and edwin f hunter work"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where in the us military",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did pierre r graham and edwin f hunter work",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Where in the us military [DES] did pierre r graham and edwin f hunter work",
        "subq1_no_decipher": [
            "Where in the us military",
            "did pierre r graham and edwin f hunter work"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1147",
        "question": "Count everyone who lives in a place where Indian English is an official language",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count everyone who lives in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place where indian english is an official language",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count everyone who lives in [INQL] a place where indian english is an official language [INQR]",
        "subq1": [
            "count everyone who lives in [ENT]"
        ],
        "subq2": [
            "a place where indian english is an official language"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count everyone",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who lives in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a place",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Indian English is an official language",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count everyone [DES] who lives in [INQL] a place [DES] where Indian English is an official language [INQR]",
        "subq1_no_decipher": [
            "Count everyone",
            "who lives in [ENT]"
        ],
        "subq2_no_decipher": [
            "a place",
            "where Indian English is an official language"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3272",
        "question": "Did Raymond Picard take birth in Paris",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did raymond picard",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "take birth in paris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did raymond picard [DES] take birth in paris",
        "subq1": [
            "did raymond picard",
            "take birth in paris"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Raymond Picard take birth in Paris?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Raymond Picard take birth in Paris",
        "subq1_no_decipher": [
            "Did Raymond Picard take birth in Paris?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "608",
        "question": "How many religions are practiced by diplomats",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many religions are practiced by",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "diplomats",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many religions are practiced by [DES] diplomats",
        "subq1": [
            "how many religions are practiced by",
            "diplomats"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are practiced by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "diplomats",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many religions [DES] are practiced by [INQL] diplomats [INQR]",
        "subq1_no_decipher": [
            "How many religions",
            "are practiced by [ENT]"
        ],
        "subq2_no_decipher": [
            "diplomats"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3582",
        "question": "Was Elton John a chairman of a Watford FC Season",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "was elton john a chairman of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a watford fc season",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "was elton john a chairman of [INQL] a watford fc season [INQR]",
        "subq1": [
            "was elton john a chairman of [ENT]"
        ],
        "subq2": [
            "a watford fc season"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Elton John a chairman of a Watford FC Season?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Elton John a chairman of [INQL] a Watford FC Season [INQR]",
        "subq1_no_decipher": [
            "Was Elton John a chairman of a Watford FC Season?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1930",
        "question": "Which publisher of Lucifer's hammer is also known for Jo Garcia",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which publisher of lucifer's hammer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also known for jo garcia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which publisher of lucifer's hammer [DES] is also known for jo garcia",
        "subq1": [
            "which publisher of lucifer's hammer",
            "is also known for jo garcia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which publisher of Lucifer's hammer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also known for Jo Garcia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which publisher of Lucifer's hammer [DES] is also known for Jo Garcia",
        "subq1_no_decipher": [
            "Which publisher of Lucifer's hammer",
            "is also known for Jo Garcia"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "197",
        "question": "To whom was Tessa Dahl born to",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tessa_Dahl> <http://dbpedia.org/ontology/parent> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to whom",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was tessa dahl born to",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to whom [DES] was tessa dahl born to",
        "subq1": [
            "to whom",
            "was tessa dahl born to"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To whom was Tessa Dahl born to?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To whom was Tessa Dahl born to [INQR]",
        "subq1_no_decipher": [
            "To whom was Tessa Dahl born to?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2931",
        "question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which sport at polytechnic university of the philippines taguig",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the field of jon speelman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which sport at polytechnic university of the philippines taguig [DES] is the field of jon speelman",
        "subq1": [
            "which sport at polytechnic university of the philippines taguig",
            "is the field of jon speelman"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which sport at Polytechnic University of the Philippines Taguig",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the field of Jon speelman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which sport at Polytechnic University of the Philippines Taguig [DES] is the field of Jon speelman",
        "subq1_no_decipher": [
            "Which sport at Polytechnic University of the Philippines Taguig",
            "is the field of Jon speelman"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2327",
        "question": "Count the number of things people who know linguistics are known for",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Linguistics> . ?x <http://dbpedia.org/ontology/knownFor> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of things [ENT] are known for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people who know linguistics",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of things [INQL] people who know linguistics [INQR] are known for",
        "subq1": [
            "count the number of things [ENT] are known for"
        ],
        "subq2": [
            "people who know linguistics"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] are known for",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who know linguistics",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count the number of things [DES] [INQL] people [DES] who know linguistics [INQR] are known for",
        "subq1_no_decipher": [
            "Count the number of things",
            "[ENT] are known for"
        ],
        "subq2_no_decipher": [
            "people",
            "who know linguistics"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4389",
        "question": "Where were sverre krogh sundbo and havard vad petersson born",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where were sverre krogh sundbo and havard vad petersson",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where were sverre krogh sundbo and havard vad petersson [DES] born",
        "subq1": [
            "where were sverre krogh sundbo and havard vad petersson",
            "born"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where were sverre krogh sundbo and havard vad petersson born",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where were sverre krogh sundbo and havard vad petersson born",
        "subq1_no_decipher": [
            "Where were sverre krogh sundbo and havard vad petersson born"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "766",
        "question": "Was Cliff Burton in Metallica",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was cliff burton in",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "metallica",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was cliff burton in [DES] metallica",
        "subq1": [
            "was cliff burton in",
            "metallica"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Cliff Burton in Metallica?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Cliff Burton in Metallica [INQR]",
        "subq1_no_decipher": [
            "Was Cliff Burton in Metallica?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4496",
        "question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many religions are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "organizations which are internationally known as the muslim brotherhood",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many religions are followed by [INQL] organizations which are internationally known as the muslim brotherhood [INQR]",
        "subq1": [
            "how many religions are followed by [ENT]"
        ],
        "subq2": [
            "organizations which are internationally known as the muslim brotherhood"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "organizations",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which are internationally known as the muslim brotherhood",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many religions [DES] are followed by [INQL] organizations [DES] which are internationally known as the muslim brotherhood [INQR]",
        "subq1_no_decipher": [
            "How many religions",
            "are followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "organizations",
            "which are internationally known as the muslim brotherhood"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4218",
        "question": "What are some people born in NY known for",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are [ENT] known for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some people born in ny",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are [INQL] some people born in ny [INQR] known for",
        "subq1": [
            "what are [ENT] known for"
        ],
        "subq2": [
            "some people born in ny"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are [ENT] known for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "born in NY",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are [INQL] some people [DES] born in NY [INQR] known for",
        "subq1_no_decipher": [
            "What are [ENT] known for"
        ],
        "subq2_no_decipher": [
            "some people",
            "born in NY"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3255",
        "question": "Who is the developer of the software which is produced by Claris",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the developer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the software which is produced by claris",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the developer of [INQL] the software which is produced by claris [INQR]",
        "subq1": [
            "who is the developer of [ENT]"
        ],
        "subq2": [
            "the software which is produced by claris"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the developer of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the software",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is produced by Claris",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who is the developer of [INQL] the software [DES] which is produced by Claris [INQR]",
        "subq1_no_decipher": [
            "Who is the developer of [ENT]"
        ],
        "subq2_no_decipher": [
            "the software",
            "which is produced by Claris"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "202",
        "question": "What is the river whose source is Cowombat Flat and has it's mouth located in Murray Mouth",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Cowombat_Flat> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the river whose source is cowombat flat",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has it's mouth located in murray mouth",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the river whose source is cowombat flat [DES] and has it's mouth located in murray mouth",
        "subq1": [
            "what is the river whose source is cowombat flat",
            "and has it's mouth located in murray mouth"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source is Cowombat Flat",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has it's mouth located in Murray Mouth",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the river [DES] whose source is Cowombat Flat [DES] and has it's mouth located in Murray Mouth",
        "subq1_no_decipher": [
            "What is the river",
            "whose source is Cowombat Flat",
            "and has it's mouth located in Murray Mouth"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3510",
        "question": "Where does the river flow into which begins in Lebrsnik",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where does the river flow into [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which begins in lebrsnik",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where does the river flow into [INQL] which begins in lebrsnik [INQR]",
        "subq1": [
            "where does the river flow into [ENT]"
        ],
        "subq2": [
            "which begins in lebrsnik"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where does the river flow into [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which begins in Lebrsnik",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where does the river flow into [INQL] which begins in Lebrsnik [INQR]",
        "subq1_no_decipher": [
            "Where does the river flow into [ENT]"
        ],
        "subq2_no_decipher": [
            "which begins in Lebrsnik"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1733",
        "question": "What is the government type of Ancient Rome",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the government type of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "ancient rome",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the government type of [INQL] ancient rome [INQR]",
        "subq1": [
            "what is the government type of [ENT]"
        ],
        "subq2": [
            "ancient rome"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the government type of Ancient Rome ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the government type of Ancient Rome [INQR]",
        "subq1_no_decipher": [
            "What is the government type of Ancient Rome ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2777",
        "question": "Which director of On deadly Ground also released Mojo Priest",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/property/director> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which director of on deadly ground",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also released mojo priest",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which director of on deadly ground [DES] also released mojo priest",
        "subq1": [
            "which director of on deadly ground",
            "also released mojo priest"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which director of On deadly Ground",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also released Mojo Priest",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which director of On deadly Ground [DES] also released Mojo Priest",
        "subq1_no_decipher": [
            "Which director of On deadly Ground",
            "also released Mojo Priest"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1707",
        "question": "What is the television show whose channel's parent organisation is Fox Sports",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports_(United_States)> . ?uri <http://dbpedia.org/ontology/channel> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the television show whose channel's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "parent organisation is fox sports",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the television show whose channel's [INQL] parent organisation is fox sports [INQR]",
        "subq1": [
            "what is the television show whose channel's [ENT]"
        ],
        "subq2": [
            "parent organisation is fox sports"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the television show",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose channel's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "parent organisation is Fox Sports",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the television show [DES] whose channel's [INQL] parent organisation is Fox Sports [INQR]",
        "subq1_no_decipher": [
            "What is the television show",
            "whose channel's [ENT]"
        ],
        "subq2_no_decipher": [
            "parent organisation is Fox Sports"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3474",
        "question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Invasion_of_Buwat> <http://dbpedia.org/property/commander> ?uri. <http://dbpedia.org/resource/Fatimah_bint_Sa'd> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who commanded the invasion of buwat",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and made fatima bint sa'd famous",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who commanded the invasion of buwat [DES] and made fatima bint sa'd famous",
        "subq1": [
            "who commanded the invasion of buwat",
            "and made fatima bint sa'd famous"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who commanded the invasion of Buwat",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and made Fatima bint Sa'd famous",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who commanded the invasion of Buwat [DES] and made Fatima bint Sa'd famous",
        "subq1_no_decipher": [
            "Who commanded the invasion of Buwat",
            "and made Fatima bint Sa'd famous"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "854",
        "question": "What is the home ground of the clubs managed by Ciao Zanardi",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the home ground of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the clubs managed by ciao zanardi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the home ground of [INQL] the clubs managed by ciao zanardi [INQR]",
        "subq1": [
            "what is the home ground of [ENT]"
        ],
        "subq2": [
            "the clubs managed by ciao zanardi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the home ground of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the clubs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "managed by Ciao Zanardi",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the home ground of [INQL] the clubs [DES] managed by Ciao Zanardi [INQR]",
        "subq1_no_decipher": [
            "What is the home ground of [ENT]"
        ],
        "subq2_no_decipher": [
            "the clubs",
            "managed by Ciao Zanardi"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4737",
        "question": "What is the country with native language as Languages of Ethiopia",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the country",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with native language as languages of ethiopia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the country [DES] with native language as languages of ethiopia",
        "subq1": [
            "what is the country",
            "with native language as languages of ethiopia"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the country with native language as Languages of Ethiopia?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the country [DES] with native language as Languages of Ethiopia [INQR]",
        "subq1_no_decipher": [
            "What is the country with native language as Languages of Ethiopia?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4097",
        "question": "What is the band with previous members Kevin Jonas and Joe Jonas",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the band",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with previous members kevin jonas and joe jonas",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the band [DES] with previous members kevin jonas and joe jonas",
        "subq1": [
            "what is the band",
            "with previous members kevin jonas and joe jonas"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the band",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with previous members Kevin Jonas and Joe Jonas",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the band [DES] with previous members Kevin Jonas and Joe Jonas",
        "subq1_no_decipher": [
            "What is the band",
            "with previous members Kevin Jonas and Joe Jonas"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2160",
        "question": "List the people with Scientology as their religious belief",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with scientology as their religious belief",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the people [DES] with scientology as their religious belief",
        "subq1": [
            "list the people",
            "with scientology as their religious belief"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with Scientology as their religious belief",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the people [DES] with Scientology as their religious belief",
        "subq1_no_decipher": [
            "List the people",
            "with Scientology as their religious belief"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "698",
        "question": "How many fictional characters were humans",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many fictional characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were humans",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many fictional characters [DES] were humans",
        "subq1": [
            "how many fictional characters",
            "were humans"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many fictional characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were humans",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many fictional characters [DES] were humans",
        "subq1_no_decipher": [
            "How many fictional characters",
            "were humans"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4947",
        "question": "Where was Girls (The Prodigy song) recorded",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/property/recorded> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was girls [ENT] recorded",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "(the prodigy song)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was girls [INQL] (the prodigy song) [INQR] recorded",
        "subq1": [
            "where was girls [ENT] recorded"
        ],
        "subq2": [
            "(the prodigy song)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where was Girls (The Prodigy song)  recorded ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where was [INQL] Girls (The Prodigy song) [INQR] recorded",
        "subq1_no_decipher": [
            "Where was Girls (The Prodigy song)  recorded ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2999",
        "question": "How many TV shows' networks are headquartered in NY",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many tv shows' networks [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are headquartered in ny",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many tv shows' networks [INQL] are headquartered in ny [INQR]",
        "subq1": [
            "how many tv shows' networks [ENT]"
        ],
        "subq2": [
            "are headquartered in ny"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many TV shows' networks",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "are headquartered in NY",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many TV shows' networks [DES] [INQL] are headquartered in NY [INQR]",
        "subq1_no_decipher": [
            "How many TV shows' networks",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "are headquartered in NY"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3696",
        "question": "Does StandBy records distribute via Sony",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does standby records",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "distribute via sony",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does standby records [DES] distribute via sony",
        "subq1": [
            "does standby records",
            "distribute via sony"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does StandBy records distribute via Sony?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does StandBy records [DES] distribute via Sony",
        "subq1_no_decipher": [
            "Does StandBy records distribute via Sony?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1636",
        "question": "Give me some shows owned by BBC one and BBC hd",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me some shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owned by bbc one and bbc hd",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me some shows [DES] owned by bbc one and bbc hd",
        "subq1": [
            "give me some shows",
            "owned by bbc one and bbc hd"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Give me some shows",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owned by BBC one and BBC hd",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Give me some shows [DES] owned by BBC one and BBC hd",
        "subq1_no_decipher": [
            "Give me some shows",
            "owned by BBC one and BBC hd"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3457",
        "question": "How many teams have rented stadiums in Canada",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many teams have rented [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "stadiums in canada",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many teams have rented [INQL] stadiums in canada [INQR]",
        "subq1": [
            "how many teams have rented [ENT]"
        ],
        "subq2": [
            "stadiums in canada"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many teams have rented [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "stadiums in Canada",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "How many teams have rented [INQL] stadiums in Canada [INQR]",
        "subq1_no_decipher": [
            "How many teams have rented [ENT]"
        ],
        "subq2_no_decipher": [
            "stadiums in Canada"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3581",
        "question": "List the awards won by the film director of Chicken Run",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the awards won by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film director of chicken run",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the awards won by [INQL] the film director of chicken run [INQR]",
        "subq1": [
            "list the awards won by [ENT]"
        ],
        "subq2": [
            "the film director of chicken run"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the film director of Chicken Run",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the awards [DES] won by [INQL] the film director of Chicken Run [INQR]",
        "subq1_no_decipher": [
            "List the awards",
            "won by [ENT]"
        ],
        "subq2_no_decipher": [
            "the film director of Chicken Run"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1291",
        "question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what territory of sino french war",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the battle of raoul magrin-vernerey fought",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what territory of sino french war [DES] was the battle of raoul magrin-vernerey fought",
        "subq1": [
            "what territory of sino french war",
            "was the battle of raoul magrin-vernerey fought"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What territory of Sino French War",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was the battle of Raoul Magrin-Vernerey fought",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What territory of Sino French War [DES] was the battle of Raoul Magrin-Vernerey fought",
        "subq1_no_decipher": [
            "What territory of Sino French War",
            "was the battle of Raoul Magrin-Vernerey fought"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4659",
        "question": "List the outflow of Lake Uniamsi",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the outflow of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "lake uniamsi",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the outflow of [INQL] lake uniamsi [INQR]",
        "subq1": [
            "list the outflow of [ENT]"
        ],
        "subq2": [
            "lake uniamsi"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the  outflow of Lake Uniamsi?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the outflow of Lake Uniamsi [INQR]",
        "subq1_no_decipher": [
            "List the  outflow of Lake Uniamsi?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1853",
        "question": "Did John Byrne create Emma Frost",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did john byrne",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "create emma frost",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did john byrne [DES] create emma frost",
        "subq1": [
            "did john byrne",
            "create emma frost"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did John Byrne create Emma Frost?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did John Byrne create Emma Frost",
        "subq1_no_decipher": [
            "Did John Byrne create Emma Frost?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3763",
        "question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "was heinrich himmler",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "ever a commanders of army group oberrhein",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "was heinrich himmler [DES] ever a commanders of army group oberrhein",
        "subq1": [
            "was heinrich himmler",
            "ever a commanders of army group oberrhein"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein",
        "subq1_no_decipher": [
            "Was Heinrich Himmler ever a commanders of Army Group Oberrhein?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3304",
        "question": "List the universities from a country where Norwegian language is officially accepted",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the universities from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a country where norwegian language is officially accepted",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the universities from [INQL] a country where norwegian language is officially accepted [INQR]",
        "subq1": [
            "list the universities from [ENT]"
        ],
        "subq2": [
            "a country where norwegian language is officially accepted"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the universities",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a country",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "where Norwegian language is officially accepted",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "List the universities [DES] from [INQL] a country [DES] where Norwegian language is officially accepted [INQR]",
        "subq1_no_decipher": [
            "List the universities",
            "from [ENT]"
        ],
        "subq2_no_decipher": [
            "a country",
            "where Norwegian language is officially accepted"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4912",
        "question": "Name the incumbent of Linda Jenness",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the incumbent of linda",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "jenness",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the incumbent of linda [DES] jenness",
        "subq1": [
            "name the incumbent of linda",
            "jenness"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the incumbent of Linda Jenness ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the incumbent of Linda Jenness [INQR]",
        "subq1_no_decipher": [
            "Name the incumbent of Linda Jenness ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3743",
        "question": "Which companies makes cars assembled in Karachi, Pakistan",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Karachi> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which companies makes [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cars assembled in karachi, pakistan",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which companies makes [INQL] cars assembled in karachi, pakistan [INQR]",
        "subq1": [
            "which companies makes [ENT]"
        ],
        "subq2": [
            "cars assembled in karachi, pakistan"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which companies makes [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "cars",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "assembled in Karachi, Pakistan",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which companies makes [INQL] cars [DES] assembled in Karachi, Pakistan [INQR]",
        "subq1_no_decipher": [
            "Which companies makes [ENT]"
        ],
        "subq2_no_decipher": [
            "cars",
            "assembled in Karachi, Pakistan"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3445",
        "question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which company founded by fusajiro yamauchi",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also provides services of nintendo eshop",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which company founded by fusajiro yamauchi [DES] also provides services of nintendo eshop",
        "subq1": [
            "which company founded by fusajiro yamauchi",
            "also provides services of nintendo eshop"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which company",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "founded by Fusajiro Yamauchi",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also provides services of Nintendo eShop",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which company [DES] founded by Fusajiro Yamauchi [DES] also provides services of Nintendo eShop",
        "subq1_no_decipher": [
            "Which company",
            "founded by Fusajiro Yamauchi",
            "also provides services of Nintendo eShop"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1998",
        "question": "In which countries does the sea lie on whose shore is the city of Cumana",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Cuman\u00e1> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which countries does the sea lie on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose shore is the city of cumana",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which countries does the sea lie on [INQL] whose shore is the city of cumana [INQR]",
        "subq1": [
            "in which countries does the sea lie on [ENT]"
        ],
        "subq2": [
            "whose shore is the city of cumana"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which countries does the sea lie on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose shore is the city of Cumana",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "In which countries does the sea lie on [INQL] whose shore is the city of Cumana [INQR]",
        "subq1_no_decipher": [
            "In which countries does the sea lie on [ENT]"
        ],
        "subq2_no_decipher": [
            "whose shore is the city of Cumana"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "663",
        "question": "Tirana is the largest city of which country",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "tirana is the largest city of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "tirana is the largest city of [DES] which country",
        "subq1": [
            "tirana is the largest city of",
            "which country"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Tirana is the largest city of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Tirana is the largest city of [DES] which country",
        "subq1_no_decipher": [
            "Tirana is the largest city of",
            "which country"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4779",
        "question": "From which countries are the people from who are an academic authority of the Western pygmy blue species",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "from which countries are the people from [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who are an academic authority of the western pygmy blue species",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "from which countries are the people from [INQL] who are an academic authority of the western pygmy blue species [INQR]",
        "subq1": [
            "from which countries are the people from [ENT]"
        ],
        "subq2": [
            "who are an academic authority of the western pygmy blue species"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "From which countries are the people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "from [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "who are an academic authority of the Western pygmy blue species",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "From which countries are the people [DES] from [INQL] who are an academic authority of the Western pygmy blue species [INQR]",
        "subq1_no_decipher": [
            "From which countries are the people",
            "from [ENT]"
        ],
        "subq2_no_decipher": [
            "who are an academic authority of the Western pygmy blue species"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3748",
        "question": "Where is the headquarters of Sigma TV",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sigma_TV> <http://dbpedia.org/property/headquarters> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the headquarters of sigma tv",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is [INQL] the headquarters of sigma tv [INQR]",
        "subq1": [
            "where is [ENT]"
        ],
        "subq2": [
            "the headquarters of sigma tv"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where is the headquarters of Sigma TV",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where is the headquarters of Sigma TV [INQR]",
        "subq1_no_decipher": [
            "Where is the headquarters of Sigma TV"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4413",
        "question": "Which scientist was advised by John Robert Woodyard",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which scientist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was advised by john robert woodyard",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which scientist [DES] was advised by john robert woodyard",
        "subq1": [
            "which scientist",
            "was advised by john robert woodyard"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which scientist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was advised by John Robert Woodyard",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which scientist [DES] was advised by John Robert Woodyard",
        "subq1_no_decipher": [
            "Which scientist",
            "was advised by John Robert Woodyard"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4744",
        "question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the launch site of the juno i",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was also the ground of 2016 fort lauderdale strikers season",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the launch site of the juno i [DES] which was also the ground of 2016 fort lauderdale strikers season",
        "subq1": [
            "what is the launch site of the juno i",
            "which was also the ground of 2016 fort lauderdale strikers season"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the launch site of the Juno I",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which was also the ground of 2016 Fort Lauderdale Strikers season",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the launch site of the Juno I [DES] which was also the ground of 2016 Fort Lauderdale Strikers season",
        "subq1_no_decipher": [
            "What is the launch site of the Juno I",
            "which was also the ground of 2016 Fort Lauderdale Strikers season"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "709",
        "question": "Who has been married to both Penny Lancaster and Alana Stewart",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who has been married to both penny lancaster and alana",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "stewart",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who has been married to both penny lancaster and alana [DES] stewart",
        "subq1": [
            "who has been married to both penny lancaster and alana",
            "stewart"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who has been married to both Penny Lancaster and Alana Stewart",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who has been married to both Penny Lancaster and Alana Stewart",
        "subq1_no_decipher": [
            "Who has been married to both Penny Lancaster and Alana Stewart"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1282",
        "question": "Count the affiliations of International Union of Anarchists",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the affiliations of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "international union of anarchists",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the affiliations of [INQL] international union of anarchists [INQR]",
        "subq1": [
            "count the affiliations of [ENT]"
        ],
        "subq2": [
            "international union of anarchists"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the affiliations of International Union of Anarchists?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Count the affiliations of International Union of Anarchists [INQR]",
        "subq1_no_decipher": [
            "Count the affiliations of International Union of Anarchists?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2675",
        "question": "What is the alma mater of the scientist whose PhD advisor is Jean-Claude Latombe",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist whose phd advisor is jean-claude latombe",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the alma mater of [INQL] the scientist whose phd advisor is jean-claude latombe [INQR]",
        "subq1": [
            "what is the alma mater of [ENT]"
        ],
        "subq2": [
            "the scientist whose phd advisor is jean-claude latombe"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the alma mater of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the scientist",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose PhD advisor is Jean-Claude Latombe",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the alma mater of [INQL] the scientist [DES] whose PhD advisor is Jean-Claude Latombe [INQR]",
        "subq1_no_decipher": [
            "What is the alma mater of [ENT]"
        ],
        "subq2_no_decipher": [
            "the scientist",
            "whose PhD advisor is Jean-Claude Latombe"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4029",
        "question": "List the people residing in Wilton, Connecticut",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "residing in wilton, connecticut",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the people [DES] residing in wilton, connecticut",
        "subq1": [
            "list the people",
            "residing in wilton, connecticut"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the people",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "residing in Wilton, Connecticut",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the people [DES] residing in Wilton, Connecticut",
        "subq1_no_decipher": [
            "List the people",
            "residing in Wilton, Connecticut"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1306",
        "question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the location of the peetz table wind energy center",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the state of ben nighthorse campbell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the location of the peetz table wind energy center [DES] which is also the state of ben nighthorse campbell",
        "subq1": [
            "what is the location of the peetz table wind energy center",
            "which is also the state of ben nighthorse campbell"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the Location of the Peetz Table Wind Energy Center",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also the state of Ben Nighthorse Campbell",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the Location of the Peetz Table Wind Energy Center [DES] which is also the state of Ben Nighthorse Campbell",
        "subq1_no_decipher": [
            "What is the Location of the Peetz Table Wind Energy Center",
            "which is also the state of Ben Nighthorse Campbell"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2237",
        "question": "Count the water bodies that flow into the North Sea",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "count the water bodies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that flow into the north sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "count the water bodies [DES] that flow into the north sea",
        "subq1": [
            "count the water bodies",
            "that flow into the north sea"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Count the water bodies",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that flow into the North Sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Count the water bodies [DES] that flow into the North Sea",
        "subq1_no_decipher": [
            "Count the water bodies",
            "that flow into the North Sea"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3302",
        "question": "Who was the First Driver of 1999 San Marino Grand Prix",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who was [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the first driver of 1999 san marino grand prix",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who was [INQL] the first driver of 1999 san marino grand prix [INQR]",
        "subq1": [
            "who was [ENT]"
        ],
        "subq2": [
            "the first driver of 1999 san marino grand prix"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the First Driver of 1999 San Marino Grand Prix ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who was the First Driver of 1999 San Marino Grand Prix",
        "subq1_no_decipher": [
            "Who was the First Driver of 1999 San Marino Grand Prix ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2038",
        "question": "Bantam Spectra is the publisher of which series",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Bantam_Spectra> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "bantam spectra is the publisher of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which series",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "bantam spectra is the publisher of [DES] which series",
        "subq1": [
            "bantam spectra is the publisher of",
            "which series"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Bantam Spectra is the publisher of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which series",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Bantam Spectra is the publisher of [DES] which series",
        "subq1_no_decipher": [
            "Bantam Spectra is the publisher of",
            "which series"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1529",
        "question": "Where is the sister station of Al Arabiya 99 located",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Arabiya_99> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sister station of al arabiya 99",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is [INQL] the sister station of al arabiya 99 [INQR] located",
        "subq1": [
            "where is [ENT] located"
        ],
        "subq2": [
            "the sister station of al arabiya 99"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where is [ENT] located",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the sister station of Al Arabiya 99",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where is [INQL] the sister station of Al Arabiya 99 [INQR] located",
        "subq1_no_decipher": [
            "Where is [ENT] located"
        ],
        "subq2_no_decipher": [
            "the sister station of Al Arabiya 99"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1663",
        "question": "Which common prime minister did Graham Richardson and Bon McMullan serve",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which common prime minister",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did graham richardson and bon mcmullan serve",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which common prime minister [DES] did graham richardson and bon mcmullan serve",
        "subq1": [
            "which common prime minister",
            "did graham richardson and bon mcmullan serve"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which common prime minister",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did Graham Richardson and Bon McMullan serve",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which common prime minister [DES] did Graham Richardson and Bon McMullan serve",
        "subq1_no_decipher": [
            "Which common prime minister",
            "did Graham Richardson and Bon McMullan serve"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4934",
        "question": "How many things are produced by companies located in Tehran",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many things are produced by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies located in tehran",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many things are produced by [INQL] companies located in tehran [INQR]",
        "subq1": [
            "how many things are produced by [ENT]"
        ],
        "subq2": [
            "companies located in tehran"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many things",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are produced by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "companies",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "located in Tehran",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "How many things [DES] are produced by [INQL] companies [DES] located in Tehran [INQR]",
        "subq1_no_decipher": [
            "How many things",
            "are produced by [ENT]"
        ],
        "subq2_no_decipher": [
            "companies",
            "located in Tehran"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4953",
        "question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charlie_Justice_(American_football_player)> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which is the common past team of the charlie justice (american football player) and bobby",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hoppe",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which is the common past team of the charlie justice (american football player) and bobby [DES] hoppe",
        "subq1": [
            "which is the common past team of the charlie justice (american football player) and bobby",
            "hoppe"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe",
        "subq1_no_decipher": [
            "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3627",
        "question": "Name the officeholder who has child named Augustus and has an associate named Marcus Bibulus",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the officeholder who has child named augustus",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has an associate named marcus bibulus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the officeholder who has child named augustus [DES] and has an associate named marcus bibulus",
        "subq1": [
            "name the officeholder who has child named augustus",
            "and has an associate named marcus bibulus"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the officeholder",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who has child named Augustus",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and has an associate named Marcus Bibulus",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the officeholder [DES] who has child named Augustus [DES] and has an associate named Marcus Bibulus",
        "subq1_no_decipher": [
            "Name the officeholder",
            "who has child named Augustus",
            "and has an associate named Marcus Bibulus"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2693",
        "question": "Which party won both the general election and the andhra pradesh election in 2004",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won both the general election and the andhra pradesh election in 2004",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which party [DES] won both the general election and the andhra pradesh election in 2004",
        "subq1": [
            "which party",
            "won both the general election and the andhra pradesh election in 2004"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which party",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "won both the general election",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and the andhra pradesh election in 2004",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which party [DES] won both the general election [DES] and the andhra pradesh election in 2004",
        "subq1_no_decipher": [
            "Which party",
            "won both the general election",
            "and the andhra pradesh election in 2004"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3060",
        "question": "Give me someone on the board of trinity house",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House>  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "give me someone",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "on the board of trinity house",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "give me someone [DES] on the board of trinity house",
        "subq1": [
            "give me someone",
            "on the board of trinity house"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me someone",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "on the board of [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "trinity house",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me someone [DES] on the board of [INQL] trinity house [INQR]",
        "subq1_no_decipher": [
            "Give me someone",
            "on the board of [ENT]"
        ],
        "subq2_no_decipher": [
            "trinity house"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1597",
        "question": "Whose leaders are Willem-Alexander and Fredis Refunjol",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has leaders are willem-alexander and fredis",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose leaders are willem-alexander and fredis refunjol",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has leaders are willem-alexander and fredis [DES] whose leaders are willem-alexander and fredis refunjol",
        "subq1": [
            "has leaders are willem-alexander and fredis",
            "whose leaders are willem-alexander and fredis refunjol"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Whose leaders are Willem-Alexander and Fredis Refunjol",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Whose leaders are Willem-Alexander and Fredis Refunjol",
        "subq1_no_decipher": [
            "Whose leaders are Willem-Alexander and Fredis Refunjol"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2729",
        "question": "Horses grandsired by Sundridge have won which awards",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Sundridge_(horse)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have won which awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "horses grandsired by sundridge",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] horses grandsired by sundridge [INQR] have won which awards",
        "subq1": [
            "[ENT] have won which awards"
        ],
        "subq2": [
            "horses grandsired by sundridge"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] have won which awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Horses",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "grandsired by Sundridge",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] Horses [DES] grandsired by Sundridge [INQR] have won which awards",
        "subq1_no_decipher": [
            "[ENT] have won which awards"
        ],
        "subq2_no_decipher": [
            "Horses",
            "grandsired by Sundridge"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2625",
        "question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the river whose source region is north-western province, zambia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and river mouth is indian ocean",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the river whose source region is north-western province, zambia [DES] and river mouth is indian ocean",
        "subq1": [
            "what is the river whose source region is north-western province, zambia",
            "and river mouth is indian ocean"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose source region is North-Western Province, Zambia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and river mouth is Indian Ocean",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the river [DES] whose source region is North-Western Province, Zambia [DES] and river mouth is Indian Ocean",
        "subq1_no_decipher": [
            "What is the river",
            "whose source region is North-Western Province, Zambia",
            "and river mouth is Indian Ocean"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3157",
        "question": "Who was on the first team in the GPs that were held at Watkins Glen, NY",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who was on the first team in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the gps that were held at watkins glen, ny",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who was on the first team in [INQL] the gps that were held at watkins glen, ny [INQR]",
        "subq1": [
            "who was on the first team in [ENT]"
        ],
        "subq2": [
            "the gps that were held at watkins glen, ny"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who was on the first team in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the GPs",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that were held at Watkins Glen, NY",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who was on the first team in [INQL] the GPs [DES] that were held at Watkins Glen, NY [INQR]",
        "subq1_no_decipher": [
            "Who was on the first team in [ENT]"
        ],
        "subq2_no_decipher": [
            "the GPs",
            "that were held at Watkins Glen, NY"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3314",
        "question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movie whose screenplay is by akiva goldsman",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and directed by joel schumacher",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movie whose screenplay is by akiva goldsman [DES] and directed by joel schumacher",
        "subq1": [
            "name the movie whose screenplay is by akiva goldsman",
            "and directed by joel schumacher"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose screenplay is by Akiva Goldsman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and directed by Joel Schumacher",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movie [DES] whose screenplay is by Akiva Goldsman [DES] and directed by Joel Schumacher",
        "subq1_no_decipher": [
            "Name the movie",
            "whose screenplay is by Akiva Goldsman",
            "and directed by Joel Schumacher"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1722",
        "question": "What ethnicity of Linda Hogan is also the state of origin of Holmes Colbert",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what ethnicity of linda hogan",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the state of origin of holmes colbert",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what ethnicity of linda hogan [DES] is also the state of origin of holmes colbert",
        "subq1": [
            "what ethnicity of linda hogan",
            "is also the state of origin of holmes colbert"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What ethnicity of Linda Hogan",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the state of origin of Holmes Colbert",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What ethnicity of Linda Hogan [DES] is also the state of origin of Holmes Colbert",
        "subq1_no_decipher": [
            "What ethnicity of Linda Hogan",
            "is also the state of origin of Holmes Colbert"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1059",
        "question": "What are the track and field events of Jamiatu Muslim Mindanao",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the track and field events of jamiatu muslim mindanao",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are [INQL] the track and field events of jamiatu muslim mindanao [INQR]",
        "subq1": [
            "what are [ENT]"
        ],
        "subq2": [
            "the track and field events of jamiatu muslim mindanao"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the track and field events of Jamiatu Muslim Mindanao",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the track and field events of Jamiatu Muslim Mindanao",
        "subq1_no_decipher": [
            "What are the track and field events of Jamiatu Muslim Mindanao"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4636",
        "question": "How many cities are close to Lake Victoria",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "how many cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are close to lake victoria",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "how many cities [DES] are close to lake victoria",
        "subq1": [
            "how many cities",
            "are close to lake victoria"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "How many cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are close to Lake Victoria",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "How many cities [DES] are close to Lake Victoria",
        "subq1_no_decipher": [
            "How many cities",
            "are close to Lake Victoria"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3242",
        "question": "Is greasy pop recording the distributor of festival records",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Greasy_Pop_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Festival_Records> }",
        "intent": "ASK",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is greasy pop recording",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the distributor of festival records",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is greasy pop recording [DES] the distributor of festival records",
        "subq1": [
            "is greasy pop recording",
            "the distributor of festival records"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Is greasy pop",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "recording [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the distributor of festival records",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Is greasy pop [DES] recording [INQL] the distributor of festival records [INQR]",
        "subq1_no_decipher": [
            "Is greasy pop",
            "recording [ENT]"
        ],
        "subq2_no_decipher": [
            "the distributor of festival records"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1678",
        "question": "What is the baseball team whose club manager's debut team is Houston Astros",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the baseball team whose club manager's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "debut team is houston astros",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the baseball team whose club manager's [INQL] debut team is houston astros [INQR]",
        "subq1": [
            "what is the baseball team whose club manager's [ENT]"
        ],
        "subq2": [
            "debut team is houston astros"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the baseball team",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose club manager's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "debut team is Houston Astros",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the baseball team [DES] whose club manager's [INQL] debut team is Houston Astros [INQR]",
        "subq1_no_decipher": [
            "What is the baseball team",
            "whose club manager's [ENT]"
        ],
        "subq2_no_decipher": [
            "debut team is Houston Astros"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1757",
        "question": "What cities are near to Nihoa which is also known as Bird Island",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are near to nihoa which is also known as bird island",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what cities [DES] are near to nihoa which is also known as bird island",
        "subq1": [
            "what cities",
            "are near to nihoa which is also known as bird island"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are near to Nihoa",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is also known as Bird Island",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What cities [DES] are near to Nihoa [DES] which is also known as Bird Island",
        "subq1_no_decipher": [
            "What cities",
            "are near to Nihoa",
            "which is also known as Bird Island"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4191",
        "question": "Is Sloth in the Chordate phylum",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sloth> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is sloth",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "in the chordate phylum",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is sloth [DES] in the chordate phylum",
        "subq1": [
            "is sloth",
            "in the chordate phylum"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Sloth in the Chordate phylum?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Sloth in the Chordate phylum simple",
        "subq1_no_decipher": [
            "Is Sloth in the Chordate phylum?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "563",
        "question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/owner> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which shareholder of naval air facility adak",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the operator of new sanno hotel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which shareholder of naval air facility adak [DES] is also the operator of new sanno hotel",
        "subq1": [
            "which shareholder of naval air facility adak",
            "is also the operator of new sanno hotel"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which shareholder of Naval Air facility Adak",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the operator of New Sanno Hotel",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which shareholder of Naval Air facility Adak [DES] is also the operator of New Sanno Hotel",
        "subq1_no_decipher": [
            "Which shareholder of Naval Air facility Adak",
            "is also the operator of New Sanno Hotel"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2790",
        "question": "What other awards have been given to Golden Globe winners",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what other awards have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "golden globe winners",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what other awards have been given to [INQL] golden globe winners [INQR]",
        "subq1": [
            "what other awards have been given to [ENT]"
        ],
        "subq2": [
            "golden globe winners"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What other awards",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been given to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "Golden Globe winners",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What other awards [DES] have been given to [INQL] Golden Globe winners [INQR]",
        "subq1_no_decipher": [
            "What other awards",
            "have been given to [ENT]"
        ],
        "subq2_no_decipher": [
            "Golden Globe winners"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "863",
        "question": "Which allegiance of the John Kotelawala is also the sovereign state of the Sanath Weerakoon",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which allegiance of the john kotelawala",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the sovereign state of the sanath weerakoon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which allegiance of the john kotelawala [DES] is also the sovereign state of the sanath weerakoon",
        "subq1": [
            "which allegiance of the john kotelawala",
            "is also the sovereign state of the sanath weerakoon"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which allegiance of the John Kotelawala",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the sovereign state of the Sanath Weerakoon",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which allegiance of the John Kotelawala [DES] is also the sovereign state of the Sanath Weerakoon",
        "subq1_no_decipher": [
            "Which allegiance of the John Kotelawala",
            "is also the sovereign state of the Sanath Weerakoon"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1484",
        "question": "List the television shows whose network's sister names is N-tv",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/N-tv> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list the television shows whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "sister names is n-tv",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list the television shows whose network's [INQL] sister names is n-tv [INQR]",
        "subq1": [
            "list the television shows whose network's [ENT]"
        ],
        "subq2": [
            "sister names is n-tv"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List the television shows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "sister names is N-tv",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List the television shows [DES] whose network's [INQL] sister names is N-tv [INQR]",
        "subq1_no_decipher": [
            "List the television shows",
            "whose network's [ENT]"
        ],
        "subq2_no_decipher": [
            "sister names is N-tv"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "206",
        "question": "God Defend New Zealand is the national anthem of which country",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "god defend new zealand is the national anthem of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which country",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "god defend new zealand is the national anthem of [DES] which country",
        "subq1": [
            "god defend new zealand is the national anthem of",
            "which country"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "God Defend New Zealand is the national anthem of which country?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "God Defend New Zealand is the national anthem of [DES] which country",
        "subq1_no_decipher": [
            "God Defend New Zealand is the national anthem of which country?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4488",
        "question": "Where do the rivers starting from Zambia end",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where do [ENT] end",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rivers starting from zambia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where do [INQL] the rivers starting from zambia [INQR] end",
        "subq1": [
            "where do [ENT] end"
        ],
        "subq2": [
            "the rivers starting from zambia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where do [ENT] end",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rivers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "starting from Zambia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where do [INQL] the rivers [DES] starting from Zambia [INQR] end",
        "subq1_no_decipher": [
            "Where do [ENT] end"
        ],
        "subq2_no_decipher": [
            "the rivers",
            "starting from Zambia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "870",
        "question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which political party of kumta",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had affiliation with indian general election, 2004 (andhra pradesh)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which political party of kumta [DES] had affiliation with indian general election, 2004 (andhra pradesh)",
        "subq1": [
            "which political party of kumta",
            "had affiliation with indian general election, 2004 (andhra pradesh)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which political party of kumta",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had affiliation with Indian general election, 2004 (Andhra Pradesh)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which political party of kumta [DES] had affiliation with Indian general election, 2004 (Andhra Pradesh)",
        "subq1_no_decipher": [
            "Which political party of kumta",
            "had affiliation with Indian general election, 2004 (Andhra Pradesh)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4493",
        "question": "Who was member of boards at Royal Society and Trinity House",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was member of boards at royal society and trinity",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "house",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was member of boards at royal society and trinity [DES] house",
        "subq1": [
            "who was member of boards at royal society and trinity",
            "house"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was member of boards at Royal Society and Trinity House",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who was member of boards at Royal Society and Trinity House",
        "subq1_no_decipher": [
            "Who was member of boards at Royal Society and Trinity House"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "502",
        "question": "Where is the king buried whose predecessor was Iyasu II",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is the king buried [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose predecessor was iyasu ii",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is the king buried [INQL] whose predecessor was iyasu ii [INQR]",
        "subq1": [
            "where is the king buried [ENT]"
        ],
        "subq2": [
            "whose predecessor was iyasu ii"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where is the king buried",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose predecessor was Iyasu II",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where is the king buried [DES] [INQL] whose predecessor was Iyasu II [INQR]",
        "subq1_no_decipher": [
            "Where is the king buried",
            "[ENT]"
        ],
        "subq2_no_decipher": [
            "whose predecessor was Iyasu II"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1028",
        "question": "In how many different places have people beatified by Pope Pius X died",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in how many different places have [ENT] died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people beatified by pope pius x",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in how many different places have [INQL] people beatified by pope pius x [INQR] died",
        "subq1": [
            "in how many different places have [ENT] died"
        ],
        "subq2": [
            "people beatified by pope pius x"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In how many different places have [ENT] died",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "people",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "beatified by Pope Pius X",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "In how many different places have [INQL] people [DES] beatified by Pope Pius X [INQR] died",
        "subq1_no_decipher": [
            "In how many different places have [ENT] died"
        ],
        "subq2_no_decipher": [
            "people",
            "beatified by Pope Pius X"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3840",
        "question": "What faiths are followed by the relatives of Meadow Soprano",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what faiths are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of meadow soprano",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what faiths are followed by [INQL] the relatives of meadow soprano [INQR]",
        "subq1": [
            "what faiths are followed by [ENT]"
        ],
        "subq2": [
            "the relatives of meadow soprano"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What faiths",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the relatives of Meadow Soprano",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What faiths [DES] are followed by [INQL] the relatives of Meadow Soprano [INQR]",
        "subq1_no_decipher": [
            "What faiths",
            "are followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "the relatives of Meadow Soprano"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2690",
        "question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is the headquarters of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the public transit system which owns target field, a metro transit station",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is the headquarters of [INQL] the public transit system which owns target field, a metro transit station [INQR]",
        "subq1": [
            "where is the headquarters of [ENT]"
        ],
        "subq2": [
            "the public transit system which owns target field, a metro transit station"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where is the headquarters of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the public transit system",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which owns Target Field, a Metro Transit Station",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where is the headquarters of [INQL] the public transit system [DES] which owns Target Field, a Metro Transit Station [INQR]",
        "subq1_no_decipher": [
            "Where is the headquarters of [ENT]"
        ],
        "subq2_no_decipher": [
            "the public transit system",
            "which owns Target Field, a Metro Transit Station"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1570",
        "question": "What is the nationality of Aishath Saffa",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the nationality of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "aishath saffa",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the nationality of [INQL] aishath saffa [INQR]",
        "subq1": [
            "what is the nationality of [ENT]"
        ],
        "subq2": [
            "aishath saffa"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the nationality of Aishath Saffa ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the nationality of [INQL] Aishath Saffa simple",
        "subq1_no_decipher": [
            "What is the nationality of Aishath Saffa ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2773",
        "question": "who was the president under whom winston bryant served as a lieutenant",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who was the president under [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whom winston bryant served as a lieutenant",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who was the president under [INQL] whom winston bryant served as a lieutenant [INQR]",
        "subq1": [
            "who was the president under [ENT]"
        ],
        "subq2": [
            "whom winston bryant served as a lieutenant"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was the president",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "under whom winston bryant served as a lieutenant",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "who was the president [DES] under whom winston bryant served as a lieutenant",
        "subq1_no_decipher": [
            "who was the president",
            "under whom winston bryant served as a lieutenant"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2731",
        "question": "What are the bands associated with the artists of My Favorite Girl",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the bands associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artists of my favorite girl",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the bands associated with [INQL] the artists of my favorite girl [INQR]",
        "subq1": [
            "what are the bands associated with [ENT]"
        ],
        "subq2": [
            "the artists of my favorite girl"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the bands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "associated with [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the artists of My Favorite Girl",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the bands [DES] associated with [INQL] the artists of My Favorite Girl [INQR]",
        "subq1_no_decipher": [
            "What are the bands",
            "associated with [ENT]"
        ],
        "subq2_no_decipher": [
            "the artists of My Favorite Girl"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "804",
        "question": "On what subjects was Broca's Brain written",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "on what subjects",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was broca's brain written",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "on what subjects [DES] was broca's brain written",
        "subq1": [
            "on what subjects",
            "was broca's brain written"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "On what subjects was Broca's Brain written?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "On what subjects [DES] was Broca's Brain written",
        "subq1_no_decipher": [
            "On what subjects was Broca's Brain written?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3645",
        "question": "Which parent organization of GetTV is also the label of next thing",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which parent organization of gettv",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the label of next thing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which parent organization of gettv [DES] is also the label of next thing",
        "subq1": [
            "which parent organization of gettv",
            "is also the label of next thing"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which parent organization of GetTV",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the label of next thing",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which parent organization of GetTV [DES] is also the label of next thing",
        "subq1_no_decipher": [
            "Which parent organization of GetTV",
            "is also the label of next thing"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2454",
        "question": "Which teams have used the stadium whose architect was Populous",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which teams have used [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium whose architect was populous",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which teams have used [INQL] the stadium whose architect was populous [INQR]",
        "subq1": [
            "which teams have used [ENT]"
        ],
        "subq2": [
            "the stadium whose architect was populous"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which teams have used [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the stadium",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose architect was Populous",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which teams have used [INQL] the stadium [DES] whose architect was Populous [INQR]",
        "subq1_no_decipher": [
            "Which teams have used [ENT]"
        ],
        "subq2_no_decipher": [
            "the stadium",
            "whose architect was Populous"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4598",
        "question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the route end of the north-south transport corridor and mumbai vadodara",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "expressway",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the route end of the north-south transport corridor and mumbai vadodara [DES] expressway",
        "subq1": [
            "name the route end of the north-south transport corridor and mumbai vadodara",
            "expressway"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway",
        "subq1_no_decipher": [
            "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3104",
        "question": "Is Albert P Clark buried in Colorado",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is albert p clark",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "buried in colorado",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is albert p clark [DES] buried in colorado",
        "subq1": [
            "is albert p clark",
            "buried in colorado"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Albert P Clark buried in Colorado?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Albert P Clark [DES] buried in Colorado simple",
        "subq1_no_decipher": [
            "Is Albert P Clark buried in Colorado?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4875",
        "question": "Which hockey team is head coached by Bill Peters",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which hockey team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is head coached by bill peters",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which hockey team [DES] is head coached by bill peters",
        "subq1": [
            "which hockey team",
            "is head coached by bill peters"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which hockey team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is head coached by Bill Peters",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which hockey team [DES] is head coached by Bill Peters",
        "subq1_no_decipher": [
            "Which hockey team",
            "is head coached by Bill Peters"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "200",
        "question": "Count the number of religions followed by the alumni of Ananda College",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Ananda_College> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number of religions followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the alumni of ananda college",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number of religions followed by [INQL] the alumni of ananda college [INQR]",
        "subq1": [
            "count the number of religions followed by [ENT]"
        ],
        "subq2": [
            "the alumni of ananda college"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number of religions",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "followed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the alumni of Ananda College",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Count the number of religions [DES] followed by [INQL] the alumni of Ananda College [INQR]",
        "subq1_no_decipher": [
            "Count the number of religions",
            "followed by [ENT]"
        ],
        "subq2_no_decipher": [
            "the alumni of Ananda College"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3099",
        "question": "Which team did Wilfred McDonalds and Cam Plante play for",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did wilfred mcdonalds and cam plante play for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which team [DES] did wilfred mcdonalds and cam plante play for",
        "subq1": [
            "which team",
            "did wilfred mcdonalds and cam plante play for"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did Wilfred McDonalds and Cam Plante play for",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which team [DES] did Wilfred McDonalds and Cam Plante play for",
        "subq1_no_decipher": [
            "Which team",
            "did Wilfred McDonalds and Cam Plante play for"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2278",
        "question": "What are the television shows whose network's stockholder is Warner Bros. Television",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what are the television shows whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "stockholder is warner bros. television",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what are the television shows whose network's [INQL] stockholder is warner bros. television [INQR]",
        "subq1": [
            "what are the television shows whose network's [ENT]"
        ],
        "subq2": [
            "stockholder is warner bros. television"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What are the television shows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose network's [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "stockholder is Warner Bros. Television",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What are the television shows [DES] whose network's [INQL] stockholder is Warner Bros. Television [INQR]",
        "subq1_no_decipher": [
            "What are the television shows",
            "whose network's [ENT]"
        ],
        "subq2_no_decipher": [
            "stockholder is Warner Bros. Television"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3561",
        "question": "Name the Fox TV show judged by Rand Jackson",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the fox tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "judged by rand jackson",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the fox tv show [DES] judged by rand jackson",
        "subq1": [
            "name the fox tv show",
            "judged by rand jackson"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the Fox TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "judged by Rand Jackson",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the Fox TV show [DES] judged by Rand Jackson",
        "subq1_no_decipher": [
            "Name the Fox TV show",
            "judged by Rand Jackson"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4474",
        "question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
        "intent": "COUNT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the total number of software whose programming language is c++",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and operating system is microsoft windows",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the total number of software whose programming language is c++ [DES] and operating system is microsoft windows",
        "subq1": [
            "what is the total number of software whose programming language is c++",
            "and operating system is microsoft windows"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the total number of software",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose programming language is C++",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and operating system is Microsoft Windows",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What is the total number of software [DES] whose programming language is C++ [DES] and operating system is Microsoft Windows",
        "subq1_no_decipher": [
            "What is the total number of software",
            "whose programming language is C++",
            "and operating system is Microsoft Windows"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4514",
        "question": "Name the city of Phil-Ellena",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Phil-Ellena> <http://dbpedia.org/ontology/city> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the city of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "phil-ellena",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the city of [DES] phil-ellena",
        "subq1": [
            "name the city of",
            "phil-ellena"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the city of Phil-Ellena ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the city of Phil-Ellena simple: Name the city of Phil-Ellena simple",
        "subq1_no_decipher": [
            "Name the city of Phil-Ellena ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "391",
        "question": "how many companies are located in a spanish speaking region",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many companies are located in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a spanish speaking region",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many companies are located in [INQL] a spanish speaking region [INQR]",
        "subq1": [
            "how many companies are located in [ENT]"
        ],
        "subq2": [
            "a spanish speaking region"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many companies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are located in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a spanish speaking region",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "how many companies [DES] are located in [INQL] a spanish speaking region [INQR]",
        "subq1_no_decipher": [
            "how many companies",
            "are located in [ENT]"
        ],
        "subq2_no_decipher": [
            "a spanish speaking region"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1495",
        "question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/property/combatant> ?uri. <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the combatant of the northwest indian war",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the ethnic group of the linda hogan",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the combatant of the northwest indian war [DES] and also the ethnic group of the linda hogan",
        "subq1": [
            "what is the combatant of the northwest indian war",
            "and also the ethnic group of the linda hogan"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the combatant of the Northwest Indian War",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also the ethnic group of the Linda Hogan",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the combatant of the Northwest Indian War [DES] and also the ethnic group of the Linda Hogan",
        "subq1_no_decipher": [
            "What is the combatant of the Northwest Indian War",
            "and also the ethnic group of the Linda Hogan"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2695",
        "question": "Which airlines fly to Gimhae International Airport",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which airlines",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fly to gimhae international airport",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which airlines [DES] fly to gimhae international airport",
        "subq1": [
            "which airlines",
            "fly to gimhae international airport"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which airlines",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "fly to Gimhae International Airport",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which airlines [DES] fly to Gimhae International Airport",
        "subq1_no_decipher": [
            "Which airlines",
            "fly to Gimhae International Airport"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2027",
        "question": "GetTV is owned by which organisation",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "gettv is owned by",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which organisation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "gettv is owned by [DES] which organisation",
        "subq1": [
            "gettv is owned by",
            "which organisation"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "GetTV is owned by which organisation?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "GetTV is owned by [DES] which organisation",
        "subq1_no_decipher": [
            "GetTV is owned by which organisation?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2568",
        "question": "Name the islands that belong to the archipelago whose largest city is Papeete",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the islands that belong to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the archipelago whose largest city is papeete",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the islands that belong to [INQL] the archipelago whose largest city is papeete [INQR]",
        "subq1": [
            "name the islands that belong to [ENT]"
        ],
        "subq2": [
            "the archipelago whose largest city is papeete"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Name the islands",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "that belong to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the archipelago",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose largest city is Papeete",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Name the islands [DES] that belong to [INQL] the archipelago [DES] whose largest city is Papeete [INQR]",
        "subq1_no_decipher": [
            "Name the islands",
            "that belong to [ENT]"
        ],
        "subq2_no_decipher": [
            "the archipelago",
            "whose largest city is Papeete"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "64",
        "question": "In which team did Dave Bing and Ron Reed started their basketball career",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "in which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did dave bing and ron reed started their basketball career",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "in which team [DES] did dave bing and ron reed started their basketball career",
        "subq1": [
            "in which team",
            "did dave bing and ron reed started their basketball career"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "In which team",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did Dave Bing and Ron Reed started their basketball career",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "In which team [DES] did Dave Bing and Ron Reed started their basketball career",
        "subq1_no_decipher": [
            "In which team",
            "did Dave Bing and Ron Reed started their basketball career"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3884",
        "question": "List the settlements area whose province is Metropolitan City of Venice",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the settlements area",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose province is metropolitan city of venice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the settlements area [DES] whose province is metropolitan city of venice",
        "subq1": [
            "list the settlements area",
            "whose province is metropolitan city of venice"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the settlements area",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose province is Metropolitan City of Venice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "List the settlements area [DES] whose province is Metropolitan City of Venice [INQR]",
        "subq1_no_decipher": [
            "List the settlements area",
            "whose province is Metropolitan City of Venice"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2062",
        "question": "What was recorded by Live in Detroit, MI and also place of birth of the Bodhin Kjolhede",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what was recorded by live in detroit, mi",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also place of birth of the bodhin kjolhede",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what was recorded by live in detroit, mi [DES] and also place of birth of the bodhin kjolhede",
        "subq1": [
            "what was recorded by live in detroit, mi",
            "and also place of birth of the bodhin kjolhede"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What was recorded by Live in Detroit, MI",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also place of birth of the Bodhin Kjolhede",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What was recorded by Live in Detroit, MI [DES] and also place of birth of the Bodhin Kjolhede",
        "subq1_no_decipher": [
            "What was recorded by Live in Detroit, MI",
            "and also place of birth of the Bodhin Kjolhede"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "492",
        "question": "From how many different institutes have the members of Judge Advocate General's Corps graduated",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "from how many different institutes have [ENT] graduated",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of judge advocate general's corps",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "from how many different institutes have [INQL] the members of judge advocate general's corps [INQR] graduated",
        "subq1": [
            "from how many different institutes have [ENT] graduated"
        ],
        "subq2": [
            "the members of judge advocate general's corps"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "From how many different institutes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT] graduated",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the members of Judge Advocate General's Corps",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "From how many different institutes [DES] have [INQL] the members of Judge Advocate General's Corps [INQR] graduated",
        "subq1_no_decipher": [
            "From how many different institutes",
            "have [ENT] graduated"
        ],
        "subq2_no_decipher": [
            "the members of Judge Advocate General's Corps"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "379",
        "question": "Whose a famous relative of anne spielberg",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Anne_Spielberg>  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "has a famous relative of anne",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose a famous relative of anne spielberg",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "has a famous relative of anne [DES] whose a famous relative of anne spielberg",
        "subq1": [
            "has a famous relative of anne",
            "whose a famous relative of anne spielberg"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Whose a famous relative of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "anne spielberg",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Whose a famous relative of [INQL] anne spielberg [INQR]",
        "subq1_no_decipher": [
            "Whose a famous relative of [ENT]"
        ],
        "subq2_no_decipher": [
            "anne spielberg"
        ],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4859",
        "question": "To which city does Northeast Library belong",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northeast_Library> <http://dbpedia.org/ontology/city> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "to which city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "does northeast library belong",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "to which city [DES] does northeast library belong",
        "subq1": [
            "to which city",
            "does northeast library belong"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "To which city does Northeast Library belong?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "To which city [DES] does Northeast Library belong [DES]",
        "subq1_no_decipher": [
            "To which city does Northeast Library belong?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3993",
        "question": "What are the airline hubs of Cascade Airways",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what are the airline hubs of cascade",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "airways",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what are the airline hubs of cascade [DES] airways",
        "subq1": [
            "what are the airline hubs of cascade",
            "airways"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What are the airline hubs of Cascade Airways?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What are the airline hubs of [INQL] Cascade Airways [INQR]",
        "subq1_no_decipher": [
            "What are the airline hubs of Cascade Airways?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4887",
        "question": "Who has manufactured vehicles designed originally by NASA",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/NASA> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who has manufactured [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "vehicles designed originally by nasa",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who has manufactured [INQL] vehicles designed originally by nasa [INQR]",
        "subq1": [
            "who has manufactured [ENT]"
        ],
        "subq2": [
            "vehicles designed originally by nasa"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who has manufactured [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "vehicles",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "designed originally by NASA",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who has manufactured [INQL] vehicles [DES] designed originally by NASA [INQR]",
        "subq1_no_decipher": [
            "Who has manufactured [ENT]"
        ],
        "subq2_no_decipher": [
            "vehicles",
            "designed originally by NASA"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1076",
        "question": "What is the order of the Henry Clay and profession of the William Luther Hill",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Clay> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the order of the henry clay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and profession of the william luther hill",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the order of the henry clay [DES] and profession of the william luther hill",
        "subq1": [
            "what is the order of the henry clay",
            "and profession of the william luther hill"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the order of the Henry Clay",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and profession of the William Luther Hill",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the order of the Henry Clay [DES] and profession of the William Luther Hill",
        "subq1_no_decipher": [
            "What is the order of the Henry Clay",
            "and profession of the William Luther Hill"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "878",
        "question": "What show has theme music composer as Ron Grainer and at the same time related to Class (2016 TV series)",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Class_(2016_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what show has theme music composer as ron grainer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and at the same time related to class (2016 tv series)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what show has theme music composer as ron grainer [DES] and at the same time related to class (2016 tv series)",
        "subq1": [
            "what show has theme music composer as ron grainer",
            "and at the same time related to class (2016 tv series)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "has theme music composer as Ron Grainer",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and at the same time related to Class (2016 TV series)",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What show [DES] has theme music composer as Ron Grainer [DES] and at the same time related to Class (2016 TV series)",
        "subq1_no_decipher": [
            "What show",
            "has theme music composer as Ron Grainer",
            "and at the same time related to Class (2016 TV series)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "337",
        "question": "What is the life stance of the ethnic groups related to Micronesia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Micronesia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the life stance of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ethnic groups related to micronesia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the life stance of [INQL] the ethnic groups related to micronesia [INQR]",
        "subq1": [
            "what is the life stance of [ENT]"
        ],
        "subq2": [
            "the ethnic groups related to micronesia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the life stance of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the ethnic groups",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "related to Micronesia",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the life stance of [INQL] the ethnic groups [DES] related to Micronesia [INQR]",
        "subq1_no_decipher": [
            "What is the life stance of [ENT]"
        ],
        "subq2_no_decipher": [
            "the ethnic groups",
            "related to Micronesia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1016",
        "question": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Southend-on-Sea> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the river whose mouth mountain is southend-on-sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth place is essex",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the river whose mouth mountain is southend-on-sea [DES] and mouth place is essex",
        "subq1": [
            "name the river whose mouth mountain is southend-on-sea",
            "and mouth place is essex"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose mouth mountain is Southend-on-Sea",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and mouth place is Essex",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the river [DES] whose mouth mountain is Southend-on-Sea [DES] and mouth place is Essex",
        "subq1_no_decipher": [
            "Name the river",
            "whose mouth mountain is Southend-on-Sea",
            "and mouth place is Essex"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1275",
        "question": "Which venue of indy PopCon is also the death place of Louis Le Cocqq",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which venue of indy popcon",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the death place of louis le cocqq",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which venue of indy popcon [DES] is also the death place of louis le cocqq",
        "subq1": [
            "which venue of indy popcon",
            "is also the death place of louis le cocqq"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which venue of indy PopCon",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the death place of Louis Le Cocqq",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which venue of indy PopCon [DES] is also the death place of Louis Le Cocqq",
        "subq1_no_decipher": [
            "Which venue of indy PopCon",
            "is also the death place of Louis Le Cocqq"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3798",
        "question": "What genre's softwares are released with a GNU GPL license",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what genre's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "softwares are released with a gnu gpl license",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what genre's [INQL] softwares are released with a gnu gpl license [INQR]",
        "subq1": [
            "what genre's [ENT]"
        ],
        "subq2": [
            "softwares are released with a gnu gpl license"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What genre's [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "softwares",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are released with a GNU GPL license",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What genre's [INQL] softwares [DES] are released with a GNU GPL license [INQR]",
        "subq1_no_decipher": [
            "What genre's [ENT]"
        ],
        "subq2_no_decipher": [
            "softwares",
            "are released with a GNU GPL license"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4551",
        "question": "Is Christchurch the largest city of South Island",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is christchurch",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the largest city of south island",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is christchurch [DES] the largest city of south island",
        "subq1": [
            "is christchurch",
            "the largest city of south island"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Christchurch the largest city of South Island?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Christchurch the largest city of South Island",
        "subq1_no_decipher": [
            "Is Christchurch the largest city of South Island?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3342",
        "question": "Who is the leader of Allgemeine SS",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the leader of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "allgemeine ss",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the leader of [INQL] allgemeine ss [INQR]",
        "subq1": [
            "who is the leader of [ENT]"
        ],
        "subq2": [
            "allgemeine ss"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the leader of Allgemeine SS ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the leader of Allgemeine SS simple",
        "subq1_no_decipher": [
            "Who is the leader of Allgemeine SS ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4911",
        "question": "Giorgos Kaminis is the mayor of what",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis> } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] is the mayor of what",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "giorgos kaminis",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] giorgos kaminis [INQR] is the mayor of what",
        "subq1": [
            "[ENT] is the mayor of what"
        ],
        "subq2": [
            "giorgos kaminis"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Giorgos Kaminis is the mayor of what?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Giorgos Kaminis is the mayor of [DES] what",
        "subq1_no_decipher": [
            "Giorgos Kaminis is the mayor of what?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "995",
        "question": "Where is the headquarters of Metro Transit (Minnesota)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the headquarters of metro transit (minnesota)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where is [INQL] the headquarters of metro transit (minnesota) [INQR]",
        "subq1": [
            "where is [ENT]"
        ],
        "subq2": [
            "the headquarters of metro transit (minnesota)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where is the headquarters of Metro Transit (Minnesota) ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where is the headquarters of [INQL] Metro Transit (Minnesota) [INQR]",
        "subq1_no_decipher": [
            "Where is the headquarters of Metro Transit (Minnesota) ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1981",
        "question": "Give me the count of all the names of characters created by Frank Miller",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "give me the count of all the names of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "characters created by frank miller",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "give me the count of all the names of [INQL] characters created by frank miller [INQR]",
        "subq1": [
            "give me the count of all the names of [ENT]"
        ],
        "subq2": [
            "characters created by frank miller"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Give me the count of all the names of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "characters",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "created by Frank Miller",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Give me the count of all the names of [INQL] characters [DES] created by Frank Miller [INQR]",
        "subq1_no_decipher": [
            "Give me the count of all the names of [ENT]"
        ],
        "subq2_no_decipher": [
            "characters",
            "created by Frank Miller"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4297",
        "question": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "portrayed in terminator 2: judgment day is painted by josh friedman",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which fictional character [DES] portrayed in terminator 2: judgment day is painted by josh friedman",
        "subq1": [
            "which fictional character",
            "portrayed in terminator 2: judgment day is painted by josh friedman"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which fictional character",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "portrayed in Terminator 2: Judgment Day",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is painted by Josh Friedman",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which fictional character [DES] portrayed in Terminator 2: Judgment Day [DES] is painted by Josh Friedman",
        "subq1_no_decipher": [
            "Which fictional character",
            "portrayed in Terminator 2: Judgment Day",
            "is painted by Josh Friedman"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "161",
        "question": "Where was the narrator of Spain on the Road Again born",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spain..._on_the_Road_Again> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where was [ENT] on the road again born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the narrator of spain",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where was [INQL] the narrator of spain [INQR] on the road again born",
        "subq1": [
            "where was [ENT] on the road again born"
        ],
        "subq2": [
            "the narrator of spain"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where was [ENT] born",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the narrator of Spain on the Road Again",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where was [INQL] the narrator of Spain on the Road Again [INQR] born",
        "subq1_no_decipher": [
            "Where was [ENT] born"
        ],
        "subq2_no_decipher": [
            "the narrator of Spain on the Road Again"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4798",
        "question": "Does AMC Gremlin have the Volkswagen engine",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/AMC_Gremlin> <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/Volkswagen> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does amc gremlin",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have the volkswagen engine",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does amc gremlin [DES] have the volkswagen engine",
        "subq1": [
            "does amc gremlin",
            "have the volkswagen engine"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does AMC Gremlin have the Volkswagen engine?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does AMC Gremlin have the Volkswagen engine",
        "subq1_no_decipher": [
            "Does AMC Gremlin have the Volkswagen engine?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "1500",
        "question": "Name the movie with narrator as Trevor Peacock and music composer as Christophe Beck",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Christophe_Beck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the movie with narrator as trevor peacock",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and music composer as christophe beck",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the movie with narrator as trevor peacock [DES] and music composer as christophe beck",
        "subq1": [
            "name the movie with narrator as trevor peacock",
            "and music composer as christophe beck"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the movie",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with narrator as Trevor Peacock",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and music composer as Christophe Beck",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the movie [DES] with narrator as Trevor Peacock [DES] and music composer as Christophe Beck",
        "subq1_no_decipher": [
            "Name the movie",
            "with narrator as Trevor Peacock",
            "and music composer as Christophe Beck"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3843",
        "question": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Leonard_Lerman> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did the scientist study [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose doctoral thesis was supervised by leonard lerman",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did the scientist study [INQL] whose doctoral thesis was supervised by leonard lerman [INQR]",
        "subq1": [
            "where did the scientist study [ENT]"
        ],
        "subq2": [
            "whose doctoral thesis was supervised by leonard lerman"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did the scientist study [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "whose doctoral thesis",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was supervised by Leonard Lerman",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did the scientist study [INQL] whose doctoral thesis [DES] was supervised by Leonard Lerman [INQR]",
        "subq1_no_decipher": [
            "Where did the scientist study [ENT]"
        ],
        "subq2_no_decipher": [
            "whose doctoral thesis",
            "was supervised by Leonard Lerman"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2613",
        "question": "Where can one find some quick bread in the world",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where can one find [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some quick bread in the world",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where can one find [INQL] some quick bread in the world [INQR]",
        "subq1": [
            "where can one find [ENT]"
        ],
        "subq2": [
            "some quick bread in the world"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where can one find [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "some quick bread in the world",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where can one find [INQL] some quick bread in the world [INQR]",
        "subq1_no_decipher": [
            "Where can one find [ENT]"
        ],
        "subq2_no_decipher": [
            "some quick bread in the world"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3461",
        "question": "What is the sea whose cities are Gdask and Oulu",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Gda\u0144sk> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what is the sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose cities are gdask and oulu",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what is the sea [DES] whose cities are gdask and oulu",
        "subq1": [
            "what is the sea",
            "whose cities are gdask and oulu"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the sea",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose cities are Gdask and Oulu",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What is the sea [DES] whose cities are Gdask and Oulu",
        "subq1_no_decipher": [
            "What is the sea",
            "whose cities are Gdask and Oulu"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1021",
        "question": "What rivers originate from Australian Alps",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Australian_Alps>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what rivers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originate from australian alps",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what rivers [DES] originate from australian alps",
        "subq1": [
            "what rivers",
            "originate from australian alps"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What rivers",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "originate from Australian Alps",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "What rivers [DES] originate from Australian Alps",
        "subq1_no_decipher": [
            "What rivers",
            "originate from Australian Alps"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3073",
        "question": "Which venues are located at places governed by John Roberts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/John_Roberts> . ?uri <http://dbpedia.org/property/address> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which venues are located at [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "places governed by john roberts",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which venues are located at [INQL] places governed by john roberts [INQR]",
        "subq1": [
            "which venues are located at [ENT]"
        ],
        "subq2": [
            "places governed by john roberts"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which venues",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are located at [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "places",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "governed by John Roberts",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which venues [DES] are located at [INQL] places [DES] governed by John Roberts [INQR]",
        "subq1_no_decipher": [
            "Which venues",
            "are located at [ENT]"
        ],
        "subq2_no_decipher": [
            "places",
            "governed by John Roberts"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3943",
        "question": "What is the venue of San Diego Comic-Con International",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Diego_Comic-Con_International> <http://dbpedia.org/property/venue> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the venue of san diego comic-con international",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is [INQL] the venue of san diego comic-con international [INQR]",
        "subq1": [
            "what is [ENT]"
        ],
        "subq2": [
            "the venue of san diego comic-con international"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What is the venue of San Diego Comic-Con International ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "What is the venue of San Diego Comic-Con International [INQR]",
        "subq1_no_decipher": [
            "What is the venue of San Diego Comic-Con International ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1585",
        "question": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which office holder owes its allegiance to [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a state whose capital town is jamestown, virginia",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which office holder owes its allegiance to [INQL] a state whose capital town is jamestown, virginia [INQR]",
        "subq1": [
            "which office holder owes its allegiance to [ENT]"
        ],
        "subq2": [
            "a state whose capital town is jamestown, virginia"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which office holder",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owes its allegiance to [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "a state",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose capital town is Jamestown, Virginia",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which office holder [DES] owes its allegiance to [INQL] a state [DES] whose capital town is Jamestown, Virginia [INQR]",
        "subq1_no_decipher": [
            "Which office holder",
            "owes its allegiance to [ENT]"
        ],
        "subq2_no_decipher": [
            "a state",
            "whose capital town is Jamestown, Virginia"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1955",
        "question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines",
        "sparql": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines> } ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which professional fighter,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is also a politician and was elected to house of representatives of the philippines",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which professional fighter, [DES] who is also a politician and was elected to house of representatives of the philippines",
        "subq1": [
            "which professional fighter,",
            "who is also a politician and was elected to house of representatives of the philippines"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which professional fighter,",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "who is also a politician",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was elected to House of Representatives of the Philippines",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which professional fighter, [DES] who is also a politician [DES] and was elected to House of Representatives of the Philippines",
        "subq1_no_decipher": [
            "Which professional fighter,",
            "who is also a politician",
            "and was elected to House of Representatives of the Philippines"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3152",
        "question": "List the comic characters created by Joe Shuster",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Joe_Shuster>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "list the comic characters",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "created by joe shuster",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "list the comic characters [DES] created by joe shuster",
        "subq1": [
            "list the comic characters",
            "created by joe shuster"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "List the comic characters created by Joe Shuster ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "List the comic characters [DES] created by Joe Shuster [INQR]",
        "subq1_no_decipher": [
            "List the comic characters created by Joe Shuster ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "34",
        "question": "Which kind of conventions are held in Rosemont, Illinois",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Rosemont,_Illinois> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Convention>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "conventions are held in rosemont, illinois",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which kind of [INQL] conventions are held in rosemont, illinois [INQR]",
        "subq1": [
            "which kind of [ENT]"
        ],
        "subq2": [
            "conventions are held in rosemont, illinois"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which kind of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "conventions",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are held in Rosemont, Illinois",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which kind of [INQL] conventions [DES] are held in Rosemont, Illinois [INQR]",
        "subq1_no_decipher": [
            "Which kind of [ENT]"
        ],
        "subq2_no_decipher": [
            "conventions",
            "are held in Rosemont, Illinois"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4014",
        "question": "What city is located on the mouth of Duwamish River",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/riverMouth> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what city is located on [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the mouth of duwamish river",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what city is located on [INQL] the mouth of duwamish river [INQR]",
        "subq1": [
            "what city is located on [ENT]"
        ],
        "subq2": [
            "the mouth of duwamish river"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What city",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is located on [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the mouth of Duwamish River",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What city [DES] is located on [INQL] the mouth of Duwamish River [INQR]",
        "subq1_no_decipher": [
            "What city",
            "is located on [ENT]"
        ],
        "subq2_no_decipher": [
            "the mouth of Duwamish River"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "775",
        "question": "Which governor of Winston Bryant is the president of Joseph Stiglitz",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which governor of winston bryant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the president of joseph stiglitz",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which governor of winston bryant [DES] is the president of joseph stiglitz",
        "subq1": [
            "which governor of winston bryant",
            "is the president of joseph stiglitz"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which governor of Winston Bryant",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is the president of Joseph Stiglitz",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which governor of Winston Bryant [DES] is the president of Joseph Stiglitz",
        "subq1_no_decipher": [
            "Which governor of Winston Bryant",
            "is the president of Joseph Stiglitz"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2556",
        "question": "How many people have led agencies in German occupied Europe",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "how many people have led [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "agencies in german occupied europe",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "how many people have led [INQL] agencies in german occupied europe [INQR]",
        "subq1": [
            "how many people have led [ENT]"
        ],
        "subq2": [
            "agencies in german occupied europe"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "How many people",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have led [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "agencies in German occupied Europe",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "How many people [DES] have led [INQL] agencies in German occupied Europe [INQR]",
        "subq1_no_decipher": [
            "How many people",
            "have led [ENT]"
        ],
        "subq2_no_decipher": [
            "agencies in German occupied Europe"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1478",
        "question": "Where did the plays written by Robert Schenkkan take place",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where did [ENT] take place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the plays written by robert schenkkan",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where did [INQL] the plays written by robert schenkkan [INQR] take place",
        "subq1": [
            "where did [ENT] take place"
        ],
        "subq2": [
            "the plays written by robert schenkkan"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where did [ENT] take place",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the plays",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "written by Robert Schenkkan",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Where did [INQL] the plays [DES] written by Robert Schenkkan [INQR] take place",
        "subq1_no_decipher": [
            "Where did [ENT] take place"
        ],
        "subq2_no_decipher": [
            "the plays",
            "written by Robert Schenkkan"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1363",
        "question": "Under which president did the predecessor of Simon Ferro work",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Simon_Ferro> . ?x <http://dbpedia.org/ontology/president> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "under which president did [ENT] work",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of simon ferro",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "under which president did [INQL] the predecessor of simon ferro [INQR] work",
        "subq1": [
            "under which president did [ENT] work"
        ],
        "subq2": [
            "the predecessor of simon ferro"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Under which president",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did [ENT] work",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the predecessor of Simon Ferro",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Under which president [DES] did [INQL] the predecessor of Simon Ferro [INQR] work",
        "subq1_no_decipher": [
            "Under which president",
            "did [ENT] work"
        ],
        "subq2_no_decipher": [
            "the predecessor of Simon Ferro"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2612",
        "question": "Name some ww1 veterans",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_I>  . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name some ww1",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "veterans",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name some ww1 [DES] veterans",
        "subq1": [
            "name some ww1",
            "veterans"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name  some ww1 veterans?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name some ww1 veterans",
        "subq1_no_decipher": [
            "Name  some ww1 veterans?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2824",
        "question": "Who appointed both John Drayton and William Clark to their respective offices",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who appointed both john drayton and william clark to their respective",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "offices",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who appointed both john drayton and william clark to their respective [DES] offices",
        "subq1": [
            "who appointed both john drayton and william clark to their respective",
            "offices"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who appointed both John Drayton and William Clark to their respective offices",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who appointed both John Drayton and William Clark to their respective offices",
        "subq1_no_decipher": [
            "Who appointed both John Drayton and William Clark to their respective offices"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2041",
        "question": "Which operator of New Sanno Hotel is also the governing body of the Oahu Railway and Land Company",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which operator of new sanno hotel",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the governing body of the oahu railway and land company",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which operator of new sanno hotel [DES] is also the governing body of the oahu railway and land company",
        "subq1": [
            "which operator of new sanno hotel",
            "is also the governing body of the oahu railway and land company"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which operator of New Sanno Hotel",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the governing body of the Oahu Railway and Land Company",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which operator of New Sanno Hotel [DES] is also the governing body of the Oahu Railway and Land Company",
        "subq1_no_decipher": [
            "Which operator of New Sanno Hotel",
            "is also the governing body of the Oahu Railway and Land Company"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "241",
        "question": "Which predecessor of Alexander Downer was deputy to Neil Brown",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which predecessor of alexander downer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was deputy to neil brown",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which predecessor of alexander downer [DES] was deputy to neil brown",
        "subq1": [
            "which predecessor of alexander downer",
            "was deputy to neil brown"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which predecessor of Alexander Downer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "was deputy to Neil Brown",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which predecessor of Alexander Downer [DES] was deputy to Neil Brown",
        "subq1_no_decipher": [
            "Which predecessor of Alexander Downer",
            "was deputy to Neil Brown"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2061",
        "question": "Which are the predecessor of Chevrolet Caprice",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Caprice> <http://dbpedia.org/ontology/predecessor> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which are the predecessor of chevrolet",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "caprice",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which are the predecessor of chevrolet [DES] caprice",
        "subq1": [
            "which are the predecessor of chevrolet",
            "caprice"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which are the predecessor of Chevrolet Caprice?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Which are the predecessor of Chevrolet Caprice simple",
        "subq1_no_decipher": [
            "Which are the predecessor of Chevrolet Caprice?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2363",
        "question": "Who wrote the album coming right before Dead Man's Chest's OST",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nextAlbum> <http://dbpedia.org/resource/Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who wrote [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the album coming right before dead man's chest's ost",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who wrote [INQL] the album coming right before dead man's chest's ost [INQR]",
        "subq1": [
            "who wrote [ENT]"
        ],
        "subq2": [
            "the album coming right before dead man's chest's ost"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who wrote [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the album",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "coming right before Dead Man's Chest's OST",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who wrote [INQL] the album [DES] coming right before Dead Man's Chest's OST [INQR]",
        "subq1_no_decipher": [
            "Who wrote [ENT]"
        ],
        "subq2_no_decipher": [
            "the album",
            "coming right before Dead Man's Chest's OST"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "600",
        "question": "What is the series of the book which is a subsequent work of Blade Runner 2: The Edge of Human",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what is the series of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the book which is a subsequent work of blade runner 2: the edge of human",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what is the series of [INQL] the book which is a subsequent work of blade runner 2: the edge of human [INQR]",
        "subq1": [
            "what is the series of [ENT]"
        ],
        "subq2": [
            "the book which is a subsequent work of blade runner 2: the edge of human"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What is the series of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the book",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which is a subsequent work of Blade Runner 2: The Edge of Human",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What is the series of [INQL] the book [DES] which is a subsequent work of Blade Runner 2: The Edge of Human [INQR]",
        "subq1_no_decipher": [
            "What is the series of [ENT]"
        ],
        "subq2_no_decipher": [
            "the book",
            "which is a subsequent work of Blade Runner 2: The Edge of Human"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2435",
        "question": "For how many cities' teams did David Bowens play",
        "sparql": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/David_Bowens> <http://dbpedia.org/ontology/formerTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "for how many cities' [ENT] play",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "teams did david bowens",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "for how many cities' [INQL] teams did david bowens [INQR] play",
        "subq1": [
            "for how many cities' [ENT] play"
        ],
        "subq2": [
            "teams did david bowens"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "For how many cities' teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "did [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "David Bowens play",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "For how many cities' teams [DES] did [INQL] David Bowens play [INQR]",
        "subq1_no_decipher": [
            "For how many cities' teams",
            "did [ENT]"
        ],
        "subq2_no_decipher": [
            "David Bowens play"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2888",
        "question": "Is Anne Hidalgo the mayor of Paris",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Anne_Hidalgo> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is anne hidalgo",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "the mayor of paris",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is anne hidalgo [DES] the mayor of paris",
        "subq1": [
            "is anne hidalgo",
            "the mayor of paris"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Anne Hidalgo the mayor of Paris?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Anne Hidalgo the mayor of Paris",
        "subq1_no_decipher": [
            "Is Anne Hidalgo the mayor of Paris?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "646",
        "question": "In which countries have models hanged themselves",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide_by_hanging> . ?x <http://dbpedia.org/property/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "in which countries have [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "models hanged themselves",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "in which countries have [INQL] models hanged themselves [INQR]",
        "subq1": [
            "in which countries have [ENT]"
        ],
        "subq2": [
            "models hanged themselves"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "In which countries",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "models",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "hanged themselves",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "In which countries [DES] have [INQL] models [DES] hanged themselves [INQR]",
        "subq1_no_decipher": [
            "In which countries",
            "have [ENT]"
        ],
        "subq2_no_decipher": [
            "models",
            "hanged themselves"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3890",
        "question": "Is the Vadodara railway junction owned by Indian Railway Ministry",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ministry_of_Railways_(India)> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "is the vadodara railway junction",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "owned by indian railway ministry",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "is the vadodara railway junction [DES] owned by indian railway ministry",
        "subq1": [
            "is the vadodara railway junction",
            "owned by indian railway ministry"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is the Vadodara railway junction onwed by Indian Railway Ministry?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is the Vadodara railway junction [DES] owned by Indian Railway Ministry",
        "subq1_no_decipher": [
            "Is the Vadodara railway junction onwed by Indian Railway Ministry?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3556",
        "question": "What city gave birth to Mishal Raheja and also houses New India Assurance",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mishal_Raheja> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/New_India_Assurance> <http://dbpedia.org/property/location> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "gave birth to mishal raheja and also houses new india assurance",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what city [DES] gave birth to mishal raheja and also houses new india assurance",
        "subq1": [
            "what city",
            "gave birth to mishal raheja and also houses new india assurance"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "What city",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "gave birth to Mishal Raheja",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and also houses New India Assurance",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "What city [DES] gave birth to Mishal Raheja [DES] and also houses New India Assurance",
        "subq1_no_decipher": [
            "What city",
            "gave birth to Mishal Raheja",
            "and also houses New India Assurance"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3202",
        "question": "Which TV show whose theme is composed by someone signed up with ATO records",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/ATO_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which tv show whose theme is composed by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone signed up with ato records",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which tv show whose theme is composed by [INQL] someone signed up with ato records [INQR]",
        "subq1": [
            "which tv show whose theme is composed by [ENT]"
        ],
        "subq2": [
            "someone signed up with ato records"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which TV show",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is composed by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "someone",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "signed up with ATO records",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Which TV show [DES] is composed by [INQL] someone [DES] signed up with ATO records [INQR]",
        "subq1_no_decipher": [
            "Which TV show",
            "is composed by [ENT]"
        ],
        "subq2_no_decipher": [
            "someone",
            "signed up with ATO records"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1528",
        "question": "Which models were featured in Playboy Playmates 1954",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/succeeded> <http://dbpedia.org/resource/List_of_Playboy_Playmates_of_1954>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PlayboyPlaymate>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which models",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were featured in playboy playmates 1954",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which models [DES] were featured in playboy playmates 1954",
        "subq1": [
            "which models",
            "were featured in playboy playmates 1954"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which models",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "were featured in Playboy Playmates 1954",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which models [DES] were featured in Playboy Playmates 1954",
        "subq1_no_decipher": [
            "Which models",
            "were featured in Playboy Playmates 1954"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1267",
        "question": "What currencies have been prevalent in the country whose national anthem is La Marseillaise",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/La_Marseillaise> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what currencies have been prevalent in [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country whose national anthem is la marseillaise",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what currencies have been prevalent in [INQL] the country whose national anthem is la marseillaise [INQR]",
        "subq1": [
            "what currencies have been prevalent in [ENT]"
        ],
        "subq2": [
            "the country whose national anthem is la marseillaise"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What currencies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been prevalent in [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the country",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose national anthem is La Marseillaise",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "What currencies [DES] have been prevalent in [INQL] the country [DES] whose national anthem is La Marseillaise [INQR]",
        "subq1_no_decipher": [
            "What currencies",
            "have been prevalent in [ENT]"
        ],
        "subq2_no_decipher": [
            "the country",
            "whose national anthem is La Marseillaise"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1899",
        "question": "Who is the relative of Jim Farley (businessman)",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Farley_(businessman)> <http://dbpedia.org/property/relatives> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who is the relative of jim farley [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "(businessman)",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who is the relative of jim farley [INQL] (businessman) [INQR]",
        "subq1": [
            "who is the relative of jim farley [ENT]"
        ],
        "subq2": [
            "(businessman)"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the relative of Jim Farley (businessman) ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the relative of Jim Farley (businessman) [INQR]",
        "subq1_no_decipher": [
            "Who is the relative of Jim Farley (businessman) ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4658",
        "question": "Is Latin the official language of Sovereign Military Order of Malta",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Sovereign_Military_Order_of_Malta> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Latin> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "is latin the official language of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "sovereign military order of malta",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "is latin the official language of [INQL] sovereign military order of malta [INQR]",
        "subq1": [
            "is latin the official language of [ENT]"
        ],
        "subq2": [
            "sovereign military order of malta"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Is Latin the official language of Sovereign Military Order of Malta?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Is Latin the official language of Sovereign Military Order of Malta [INQR]",
        "subq1_no_decipher": [
            "Is Latin the official language of Sovereign Military Order of Malta?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "3005",
        "question": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/John_Franklin_Miller_(senator)> <http://dbpedia.org/property/office> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "where do the politicians, blanche bruce and john franklin miller",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "work",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "where do the politicians, blanche bruce and john franklin miller [DES] work",
        "subq1": [
            "where do the politicians, blanche bruce and john franklin miller",
            "work"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Where do the politicians, Blanche Bruce and John Franklin Miller work",
        "subq1_no_decipher": [
            "Where do the politicians, Blanche Bruce and John Franklin Miller work"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2734",
        "question": "Name an American football player whose debuted in Chicago Bears and former team is 1998 Baltimore Ravens season",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Chicago_Bears> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/1998_Baltimore_Ravens_season>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name an american football player whose debuted in chicago bears",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and former team is 1998 baltimore ravens season",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name an american football player whose debuted in chicago bears [DES] and former team is 1998 baltimore ravens season",
        "subq1": [
            "name an american football player whose debuted in chicago bears",
            "and former team is 1998 baltimore ravens season"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name an American football player",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose debuted in Chicago Bears",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and former team is 1998 Baltimore Ravens season",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name an American football player [DES] whose debuted in Chicago Bears [DES] and former team is 1998 Baltimore Ravens season",
        "subq1_no_decipher": [
            "Name an American football player",
            "whose debuted in Chicago Bears",
            "and former team is 1998 Baltimore Ravens season"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "189",
        "question": "Name a river with source country as Zambia and source location as Ikelenge District",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name a river with source country as zambia",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and source location as ikelenge district",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name a river with source country as zambia [DES] and source location as ikelenge district",
        "subq1": [
            "name a river with source country as zambia",
            "and source location as ikelenge district"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name a river",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with source country as Zambia",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and source location as Ikelenge District",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name a river [DES] with source country as Zambia [DES] and source location as Ikelenge District",
        "subq1_no_decipher": [
            "Name a river",
            "with source country as Zambia",
            "and source location as Ikelenge District"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1806",
        "question": "Does Ford own the Ford Kansas Assembly plant",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ford_Motor_Company> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does ford",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "own the ford kansas assembly plant",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does ford [DES] own the ford kansas assembly plant",
        "subq1": [
            "does ford",
            "own the ford kansas assembly plant"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Does Ford own the Ford Kansas Assembly plant?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Does Ford own the Ford Kansas Assembly plant [INQR]",
        "subq1_no_decipher": [
            "Does Ford own the Ford Kansas Assembly plant?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "975",
        "question": "Which fields of the Paul Demiville is also the faith of Koay Teng Hai",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Koay_Teng_Hai> <http://dbpedia.org/ontology/religion> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which fields of the paul demiville",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the faith of koay teng hai",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which fields of the paul demiville [DES] is also the faith of koay teng hai",
        "subq1": [
            "which fields of the paul demiville",
            "is also the faith of koay teng hai"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which fields of the Paul Demiville",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is also the faith of Koay Teng Hai",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which fields of the Paul Demiville [DES] is also the faith of Koay Teng Hai",
        "subq1_no_decipher": [
            "Which fields of the Paul Demiville",
            "is also the faith of Koay Teng Hai"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2747",
        "question": "Name the institute of Alton Ochsner",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the institute of alton",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "ochsner",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the institute of alton [DES] ochsner",
        "subq1": [
            "name the institute of alton",
            "ochsner"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the institute of Alton Ochsner ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the institute of Alton Ochsner [INQR]",
        "subq1_no_decipher": [
            "Name the institute of Alton Ochsner ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2047",
        "question": "What movies have been written by authors of Monty Python",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "what movies have been written by [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "authors of monty python",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "what movies have been written by [INQL] authors of monty python [INQR]",
        "subq1": [
            "what movies have been written by [ENT]"
        ],
        "subq2": [
            "authors of monty python"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What movies",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have been written by [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "authors of Monty Python",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What movies [DES] have been written by [INQL] authors of Monty Python [INQR]",
        "subq1_no_decipher": [
            "What movies",
            "have been written by [ENT]"
        ],
        "subq2_no_decipher": [
            "authors of Monty Python"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2558",
        "question": "Who was the cover artist of The Adventure of Tom Sawyer also wrote mark Twain Tonight",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who was the cover artist of the adventure of tom sawyer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also wrote mark twain tonight",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who was the cover artist of the adventure of tom sawyer [DES] also wrote mark twain tonight",
        "subq1": [
            "who was the cover artist of the adventure of tom sawyer",
            "also wrote mark twain tonight"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who was the cover artist of The Adventure of Tom Sawyer",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "also wrote mark Twain Tonight",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Who was the cover artist of The Adventure of Tom Sawyer [DES] also wrote mark Twain Tonight",
        "subq1_no_decipher": [
            "Who was the cover artist of The Adventure of Tom Sawyer",
            "also wrote mark Twain Tonight"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1082",
        "question": "Name the scientist whose academic advisor is Karl Ewald Hasse and supervisor is Georg Meissner",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the scientist whose academic advisor is karl ewald hasse",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and supervisor is georg meissner",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the scientist whose academic advisor is karl ewald hasse [DES] and supervisor is georg meissner",
        "subq1": [
            "name the scientist whose academic advisor is karl ewald hasse",
            "and supervisor is georg meissner"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the scientist",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose academic advisor is Karl Ewald Hasse",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and supervisor is Georg Meissner",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name the scientist [DES] whose academic advisor is Karl Ewald Hasse [DES] and supervisor is Georg Meissner",
        "subq1_no_decipher": [
            "Name the scientist",
            "whose academic advisor is Karl Ewald Hasse",
            "and supervisor is Georg Meissner"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "474",
        "question": "Where do current famous NatGeo photographers live",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/National_Geographic_(magazine)> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Photographer>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "where do [ENT] live",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "current famous natgeo photographers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "where do [INQL] current famous natgeo photographers [INQR] live",
        "subq1": [
            "where do [ENT] live"
        ],
        "subq2": [
            "current famous natgeo photographers"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Where do [ENT] live",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "current famous NatGeo photographers",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Where do [INQL] current famous NatGeo photographers [INQR] live",
        "subq1_no_decipher": [
            "Where do [ENT] live"
        ],
        "subq2_no_decipher": [
            "current famous NatGeo photographers"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2904",
        "question": "Georg Meissner was doctoral supervisor of which scientist",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "georg meissner was doctoral supervisor of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which scientist",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "georg meissner was doctoral supervisor of [DES] which scientist",
        "subq1": [
            "georg meissner was doctoral supervisor of",
            "which scientist"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Georg Meissner was doctoral supervisor of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which scientist",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Georg Meissner was doctoral supervisor of [DES] which scientist",
        "subq1_no_decipher": [
            "Georg Meissner was doctoral supervisor of",
            "which scientist"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4843",
        "question": "Did Stanlee write the Tales of Suspense",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Stan_Lee> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "did stanlee",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "write the tales of suspense",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "did stanlee [DES] write the tales of suspense",
        "subq1": [
            "did stanlee",
            "write the tales of suspense"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Did Stanlee write the Tales of Suspense?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Did Stanlee write the Tales of Suspense [INQR]",
        "subq1_no_decipher": [
            "Did Stanlee write the Tales of Suspense?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4117",
        "question": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trishna_(yacht)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common home port of the trishna (yacht) and ins viraat",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "(r22)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common home port of the trishna (yacht) and ins viraat [DES] (r22)",
        "subq1": [
            "name the common home port of the trishna (yacht) and ins viraat",
            "(r22)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common home port of the Trishna (yacht)",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and INS Viraat (R22)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Name the common home port of the Trishna (yacht) [DES] and INS Viraat (R22)",
        "subq1_no_decipher": [
            "Name the common home port of the Trishna (yacht)",
            "and INS Viraat (R22)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3385",
        "question": "does the US navy have the structure of command of us department of defence",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> }",
        "intent": "ASK",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does the us navy",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "have the structure of command of us department of defence",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "does the us navy [DES] have the structure of command of us department of defence",
        "subq1": [
            "does the us navy",
            "have the structure of command of us department of defence"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "does the US navy have the structure of command of us department of defence?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "does the US navy have the structure of command of us department of defence",
        "subq1_no_decipher": [
            "does the US navy have the structure of command of us department of defence?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "ASK",
        "composition-type": "conjunction"
    },
    {
        "ID": "4555",
        "question": "Name books with publisher as Francisco de Robles and writer as Miguel de Cervantes",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles> . ?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name books with publisher as francisco de robles",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and writer as miguel de cervantes",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name books with publisher as francisco de robles [DES] and writer as miguel de cervantes",
        "subq1": [
            "name books with publisher as francisco de robles",
            "and writer as miguel de cervantes"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name books",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "with publisher as Francisco de Robles",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and writer as Miguel de Cervantes",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Name books [DES] with publisher as Francisco de Robles [DES] and writer as Miguel de Cervantes",
        "subq1_no_decipher": [
            "Name books",
            "with publisher as Francisco de Robles",
            "and writer as Miguel de Cervantes"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1184",
        "question": "Who owns the schools which have a penguin as its mascot",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the schools which have a penguin as its mascot",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "who owns [INQL] the schools which have a penguin as its mascot [INQR]",
        "subq1": [
            "who owns [ENT]"
        ],
        "subq2": [
            "the schools which have a penguin as its mascot"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Who owns [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the schools",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have a penguin as its mascot",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Who owns [INQL] the schools [DES] which have a penguin as its mascot [INQR]",
        "subq1_no_decipher": [
            "Who owns [ENT]"
        ],
        "subq2_no_decipher": [
            "the schools",
            "which have a penguin as its mascot"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2433",
        "question": "River which flows into the eugene mahoney state park pass through which states",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Eugene_T._Mahoney_State_Park> . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] pass through which states",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "river which flows into the eugene mahoney state park",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "[INQL] river which flows into the eugene mahoney state park [INQR] pass through which states",
        "subq1": [
            "[ENT] pass through which states"
        ],
        "subq2": [
            "river which flows into the eugene mahoney state park"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "[ENT] pass through which states",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "River",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which flows into the eugene mahoney state park",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "[INQL] River [DES] which flows into the eugene mahoney state park [INQR] pass through which states",
        "subq1_no_decipher": [
            "[ENT] pass through which states"
        ],
        "subq2_no_decipher": [
            "River",
            "which flows into the eugene mahoney state park"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2391",
        "question": "What nation is Hornito located in, where Jamie Bateman Cayn died too",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jaime_Bateman_Cay\u00f3n> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Hornito,_Chiriqu\u00ed> <http://dbpedia.org/ontology/country> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what nation",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is hornito located in, where jamie bateman cayn died too",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what nation [DES] is hornito located in, where jamie bateman cayn died too",
        "subq1": [
            "what nation",
            "is hornito located in, where jamie bateman cayn died too"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "What nation",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is Hornito located in, [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "where Jamie Bateman Cayn died too",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "What nation [DES] is Hornito located in, [INQL] where Jamie Bateman Cayn died too [INQR]",
        "subq1_no_decipher": [
            "What nation",
            "is Hornito located in, [ENT]"
        ],
        "subq2_no_decipher": [
            "where Jamie Bateman Cayn died too"
        ],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "769",
        "question": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest",
        "sparql": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.> . ?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which tv show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had a judge named harry connick, jr. and was presented by ryan seacrest",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which tv show [DES] had a judge named harry connick, jr. and was presented by ryan seacrest",
        "subq1": [
            "which tv show",
            "had a judge named harry connick, jr. and was presented by ryan seacrest"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which TV show",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "had a judge named Harry Connick, Jr.",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "and was presented by Ryan Seacrest",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                }
            ]
        },
        "pred_no_decipher": "Which TV show [DES] had a judge named Harry Connick, Jr. [DES] and was presented by Ryan Seacrest",
        "subq1_no_decipher": [
            "Which TV show",
            "had a judge named Harry Connick, Jr.",
            "and was presented by Ryan Seacrest"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "1685",
        "question": "Name the resting place of Fazlur Rahman Khan",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fazlur_Rahman_Khan> <http://dbpedia.org/ontology/restingPlace> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "name the resting place of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "fazlur rahman khan",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "name the resting place of [INQL] fazlur rahman khan [INQR]",
        "subq1": [
            "name the resting place of [ENT]"
        ],
        "subq2": [
            "fazlur rahman khan"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the resting place of Fazlur Rahman Khan ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the resting place of [INQL] Fazlur Rahman Khan [INQR]",
        "subq1_no_decipher": [
            "Name the resting place of Fazlur Rahman Khan ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "130",
        "question": "Which arena of WPC Dynamo Moscow is death location of Tigran Petrosian",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
        "intent": "SELECT",
        "compositionality_type": "conjunction",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "which arena of wpc dynamo moscow",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is death location of tigran petrosian",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "which arena of wpc dynamo moscow [DES] is death location of tigran petrosian",
        "subq1": [
            "which arena of wpc dynamo moscow",
            "is death location of tigran petrosian"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Which arena of WPC Dynamo Moscow",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "is death location of Tigran Petrosian",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred_no_decipher": "Which arena of WPC Dynamo Moscow [DES] is death location of Tigran Petrosian",
        "subq1_no_decipher": [
            "Which arena of WPC Dynamo Moscow",
            "is death location of Tigran Petrosian"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "2919",
        "question": "what cities are close by LoDaisKa",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what cities",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "are close by lodaiska",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "what cities [DES] are close by lodaiska",
        "subq1": [
            "what cities",
            "are close by lodaiska"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "what cities are close by LoDaisKa ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "what cities [DES] are close by LoDaisKa simple",
        "subq1_no_decipher": [
            "what cities are close by LoDaisKa ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3171",
        "question": "Which wars were fought when the commanders involved served under PM Choi Tu Son",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Choi_Tu-son> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "which wars were fought when the commanders involved [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "served under pm choi tu son",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "which wars were fought when the commanders involved [INQL] served under pm choi tu son [INQR]",
        "subq1": [
            "which wars were fought when the commanders involved [ENT]"
        ],
        "subq2": [
            "served under pm choi tu son"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Which wars were fought when [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the commanders",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "involved served under PM Choi Tu Son",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "Which wars were fought when [INQL] the commanders [DES] involved served under PM Choi Tu Son [INQR]",
        "subq1_no_decipher": [
            "Which wars were fought when [ENT]"
        ],
        "subq2_no_decipher": [
            "the commanders",
            "involved served under PM Choi Tu Son"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3444",
        "question": "Who is the meaning of Isa",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is the meaning of",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "isa",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is the meaning of [DES] isa",
        "subq1": [
            "who is the meaning of",
            "isa"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is the meaning of Isa  ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is the meaning of Isa simple",
        "subq1_no_decipher": [
            "Who is the meaning of Isa  ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "4426",
        "question": "Who is venerated in Judaism and Islam",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "who is venerated in judaism and",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "islam",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "who is venerated in judaism and [DES] islam",
        "subq1": [
            "who is venerated in judaism and",
            "islam"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Who is venerated in Judaism and Islam",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Who is venerated in Judaism and Islam",
        "subq1_no_decipher": [
            "Who is venerated in Judaism and Islam"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "466",
        "question": "Count the number teams which have former ice hockey players which also included American Hockey League",
        "sparql": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/American_Hockey_League> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri }",
        "intent": "COUNT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "count the number teams which have former ice hockey players [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "which also included american hockey league",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "count the number teams which have former ice hockey players [INQL] which also included american hockey league [INQR]",
        "subq1": [
            "count the number teams which have former ice hockey players [ENT]"
        ],
        "subq2": [
            "which also included american hockey league"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "Count the number teams",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which have [ENT]",
                    "entityID": 0,
                    "nodeID": 3,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "former ice hockey players",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "which also included American Hockey League",
                    "entityID": 1,
                    "nodeID": 5,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 0,
                    "to": 3
                },
                {
                    "from": 3,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 4
                },
                {
                    "from": 1,
                    "to": 5
                }
            ]
        },
        "pred_no_decipher": "Count the number teams [DES] which have [INQL] former ice hockey players [DES] which also included American Hockey League [INQR]",
        "subq1_no_decipher": [
            "Count the number teams",
            "which have [ENT]"
        ],
        "subq2_no_decipher": [
            "former ice hockey players",
            "which also included American Hockey League"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "COUNT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3092",
        "question": "Name the common editor of Easy Street (film) and Work (film)",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . }",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the common editor of easy street (film) and work",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "(film)",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the common editor of easy street (film) and work [DES] (film)",
        "subq1": [
            "name the common editor of easy street (film) and work",
            "(film)"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the common editor of Easy Street (film) and Work (film)",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the common editor of Easy Street (film) and Work (film)",
        "subq1_no_decipher": [
            "Name the common editor of Easy Street (film) and Work (film)"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "conjunction",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "3772",
        "question": "List all the schools of the rugby player whose went to school named Pietermaritzburg",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/school> <http://dbpedia.org/resource/Pietermaritzburg> . ?x <http://dbpedia.org/property/school> ?uri  . }",
        "intent": "SELECT",
        "compositionality_type": "composition",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "list all the schools of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rugby player whose went to school named pietermaritzburg",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                }
            ]
        },
        "pred": "list all the schools of [INQL] the rugby player whose went to school named pietermaritzburg [INQR]",
        "subq1": [
            "list all the schools of [ENT]"
        ],
        "subq2": [
            "the rugby player whose went to school named pietermaritzburg"
        ],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Entity",
                    "entityID": 1,
                    "nodeID": 1
                },
                {
                    "nodeType": "Description",
                    "value": "List all the schools of [ENT]",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": true
                },
                {
                    "nodeType": "Description",
                    "value": "the rugby player",
                    "entityID": 1,
                    "nodeID": 3,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "whose went to school named Pietermaritzburg",
                    "entityID": 1,
                    "nodeID": 4,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 2
                },
                {
                    "from": 2,
                    "to": 1
                },
                {
                    "from": 1,
                    "to": 3
                },
                {
                    "from": 1,
                    "to": 4
                }
            ]
        },
        "pred_no_decipher": "List all the schools of [INQL] the rugby player [DES] whose went to school named Pietermaritzburg [INQR]",
        "subq1_no_decipher": [
            "List all the schools of [ENT]"
        ],
        "subq2_no_decipher": [
            "the rugby player",
            "whose went to school named Pietermaritzburg"
        ],
        "compositionality_type_golden": "composition",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    },
    {
        "ID": "860",
        "question": "Name the office of Richard Coke",
        "sparql": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri } ",
        "intent": "SELECT",
        "compositionality_type": "simple",
        "edg": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "name the office of richard",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                },
                {
                    "nodeType": "Description",
                    "value": "coke",
                    "entityID": 0,
                    "nodeID": 2,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                },
                {
                    "from": 0,
                    "to": 2
                }
            ]
        },
        "pred": "name the office of richard [DES] coke",
        "subq1": [
            "name the office of richard",
            "coke"
        ],
        "subq2": [],
        "edg_no_decipher": {
            "nodes": [
                {
                    "nodeType": "Entity",
                    "entityID": 0,
                    "nodeID": 0
                },
                {
                    "nodeType": "Description",
                    "value": "Name the office of Richard Coke ?",
                    "entityID": 0,
                    "nodeID": 1,
                    "hasRefer": false
                }
            ],
            "edge": [
                {
                    "from": 0,
                    "to": 1
                }
            ]
        },
        "pred_no_decipher": "Name the office of Richard Coke [INQR]",
        "subq1_no_decipher": [
            "Name the office of Richard Coke ?"
        ],
        "subq2_no_decipher": [],
        "compositionality_type_golden": "simple",
        "intent_golden": "SELECT",
        "composition-type": "conjunction"
    }
]